{"version":3,"sources":["components/mylogo.png","reducer/packReducer.js","reducer/index.js","action/types.js","createStore.js","components/service/AuthService.js","components/service/AdminService.js","utils/config.js","components/LoginNavbar.js","components/login/LoginNewUI.js","utils/Notify.js","utils/ResponseHandler.js","components/login/LoginComponent.js","components/LeftMenuBar.js","utils/InvertColor.js","components/MyTrade/LineChart.js","components/MyTrade/LightChartCom.js","components/MyTrade/ChartDialog.js","components/MyTrade/FoundPatternDialog.js","utils/CommonMethods.js","components/PostLoginNavbar.js","utils/MaterialUIDateTimePicker.js","components/MyTrade/SimpleExpansionPanel.js","components/MyTrade/SimpleExpansionFastMovement.js","components/MyTrade/LiveBidsExpantion.js","components/MyTrade/WatchListTab.js","api.js","action/index.js","components/MyTrade/Chart.js","components/MyTrade/BankNiftyView.js","components/MyTrade/OptionBuyWithSPLevel.js","components/MyTrade/OrderWatchlist.js","components/MyTrade/Home.js","components/MyTrade/NiftyView.js","components/MyTrade/MyDialog.js","components/MyTrade/MySectorTop.js","components/MyTrade/CandleChart.js","components/MyTrade/Funds.js","components/MyTrade/Orderbook.js","components/MyTrade/Tradebook.js","components/MyTrade/OrderStatusLive.js","components/MyTrade/ChartMultiple.js","components/MyTrade/Position.js","components/MyTrade/PositionNew.js","components/MyTrade/worker.js","components/MyTrade/Test.js","components/MyTrade/AddToWatchlist.js","components/MyTrade/SectorHeatMap.js","components/MyTrade/LightChartDialog.js","components/MyTrade/DeliveryData.js","components/MyTrade/IndexCharts.js","components/MyTrade/OrderWatchlistDialog.js","components/MyTrade/StrongCharts.js","components/MyTrade/FullModel.js","components/MyTrade/SectorHeatMap2.js","components/MyTrade/FindFastMovement.js","components/MyTrade/FindFastMovement2.js","components/MyTrade/FindFastMovement3.js","components/MyTrade/LightChartModel.js","components/MyTrade/SlowMotion.js","components/MyTrade/MarketDepth.js","components/MyTrade/MarketDepthMobile.js","components/MyTrade/Backtest.js","components/MyTrade/ChartinkBacktest.js","components/MyTrade/CustomBacktest.js","components/MyTrade/Track145Strategy.js","components/MyTrade/BackupHistory.js","components/RouterComponent.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","INTIAL_STATE","packs","pack","updatedPack","combineReducers","state","arguments","length","undefined","action","type","Object","objectSpread","payload","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","service_AuthService","localStorage","getItem","tokens","JSON","parse","headers","Authorization","jwtToken","Content-Type","Accept","X-UserType","X-SourceID","X-ClientLocalIP","X-ClientPublicIP","X-MACAddress","X-PrivateKey","token","sessionId","service_AdminService","credentials","axios","post","AuthService","loginHeader","getHeader","formData","get","getScannerHeader","query","data","location","hostname","symbol","backDate","allSymbol","count","index","LoginNavBar","props","react_default","a","createElement","Fragment","AppBar","position","Toolbar","alt","style","width","src","MyLogo","useStyles","makeStyles","theme","@global","body","backgroundColor","palette","common","white","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","form","submit","SignIn","classes","handleOnChange","e","loginProps","onChange","Container","component","maxWidth","CssBaseline","className","Avatar","Person_default","Typography","variant","noValidate","TextField","required","fullWidth","id","label","name","autoComplete","autoFocus","value","userName","password","Button","color","onClick","login","utils_Notify","msg","toast","error","this","options","success","warn","POSITION","BOTTOM_RIGHT","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","resolveResponse","response","status","message","Notify","showSuccess","showError","replace","setItem","Promise","reject","LoginComponent","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","defineProperty","target","trim","isError","preventDefault","isDasable","loginPayload","clientcode","AdminService","then","loginRes","stringify","getUserData","profileRes","getStaticData","res","totalWatchlist","keys","staticData","watchlist","forEach","element","element2","filter","row","push","bind","assertThisInitialized","LoginNavbar","Grid","container","justify","xs","sm","InputLabel","styles","waitMessage","errorMessage","history","document","href","includes","reload","React","Component","formStyle","flexFlow","justifyContent","AdminMenuList","ListItem","button","ListItemIcon","ShowChart_default","ListItemText","primary","EmojiEmotions_default","Equalizer_default","FileCopy_default","userProfile","LogoutMenu","react_router_dom","to","textDecoration","logout","clear","cookies","cookie","split","i","eqPos","indexOf","substr","deleteAllCookies","title","PowerSettingsNew_default","root","flexGrow","menuButton","marginRight","MenuAppBar","_React$useState","useState","_React$useState2","slicedToArray","auth","setAuth","FormGroup","FormControlLabel","control","Switch","checked","event","aria-label","App","candleChartData","vwapDataChart","closeData","timeDate","Date","getHours","getMinutes","chartData","labels","datasets","fill","borderColor","percentChange","index_modern","maintainAspectRatio","legend","LightChartCom","setTimeout","chart","LightweightCharts","createChart","getElementById","height","rightPriceScale","scaleMargins","top","bottom","borderVisible","layout","textColor","grid","vertLines","horzLines","candleSeries","addCandlestickSeries","upColor","downColor","borderDownColor","borderUpColor","wickDownColor","wickUpColor","setData","addHistogramSeries","priceFormat","priceScaleId","volumeSeries","subscribeCrosshairMove","param","getit","seriesPrices","Symbol","iterator","string","change","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","elem","console","log","open","high","low","close","toFixed","err","return","time","toLocaleString","str","innerHTML","smaData","avg","sum","result","len","val","slice","calculateSMA","addLineSeries","lineWidth","direction","paddingLeft","paddingRight","item","fontSize","DialogTitle","withStyles","padding","closeButton","right","grey","children","onClose","other","objectWithoutProperties","assign","disableTypography","IconButton","Close_default","DialogContent","MuiDialogContent","DialogActions","MuiDialogActions","CustomizedDialogs","setOpen","_React$useState3","candledata","_React$useState4","handleClose","Dialog","aria-labelledby","ChartDialog_DialogTitle","foundAt","buyExitPrice","sellEntyPrice","perChange","squareOffAt","ChartDialog_DialogContent","dividers","react_apexcharts_min_default","text","align","xaxis","yaxis","tooltip","enabled","series","ChartDialog_DialogActions","CommonMethods","speckIt","SpeechSynthesisUtterance","toString","speechSynthesis","speak","getMinPriceAllowTick","minPrice","wholenumber","parseInt","decimal","parseFloat","placeSLMOrder","slmOption","triggerprice","stopLossPrice","tradingsymbol","symboltoken","quantity","transactiontype","exchange","producttype","duration","price","squareoff","stoploss","ordertype","variety","placeOrder","click","getStockTokenDetails","foundSymbol","found","NSE_OPTION_INDEX","exch_seg","toUpperCase","CashStocks","uppercaseName","updateOrderList","retrieveOrderBook","orderlist","sort","b","updatetime","getPercentageColor","percent","Math","floor","historyWiseOrderPlace","sectorItem","orderType","isAutomatic","callback","ltpdata","getLTP","ltpres","LtpData","ltp","perTradeExposureAmt","TradeConfig","totalCapital","perTradeExposurePer","qtyToTake","format1","beginningTime","moment","format","startdate","subtract","interval","fromdate","todate","getHistoryData","histdata","candleData","clossest","lowerest","highestHigh","lowestLow","highestsum","reverse","vwapdata","closeingData","highData","lowData","openData","valumeData","bbdata","inputRSI","values","period","lastRsiValue","RSI","calculate","input","stdDev","bb","BollingerBands","vwap","devideLen","bbmiddleValue","bblowerValue","bbhigerValue","stoplossPer","orderOption","buyPrice","placeOrderMethod","catch","placeOptionOrder","placeOptionSLMOrder","stopLossTriggerPrice","netqty","endMenu","appBar","transition","transitions","create","easing","sharp","leavingScreen","appBarShift","concat","marginLeft","easeOut","enteringScreen","hide","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","content","contentShift","PostLoginNavBar","buyFlag","sellFlag","searchSymbol","setValues","useTheme","callbackAfterOrderDone","order","handleClick","symbolInfo","CommonOrderMethod","clsx","edge","Menu_default","Hidden","xsDown","_objectSpread3","lotsize","FormControl","selectStyle","htmlFor","Select","MenuItem","react_spinner_material_lib_default","smDown","OpenInNew_default","Drawer","anchor","List","Menu","ChevronLeft_default","ChevronRight_default","Divider","formContainer","textStyle","imgStyle","minWidth","marginBottom","MuiTextField","overflowY","maxHeight","footerButton","left","textAlign","MaterialUIPickers","startd","setHours","setMinutes","selectedStartDate","setSelectedStartDate","endd","selectedEndDate","setSelectedEndDate","MuiPickersUtilsProvider","utils","DateFnsUtils","containers","DatePicker","date","callbackFromParent","myCallback","KeyboardButtonProps","heading","typography","pxToRem","fontWeight","fontWeightRegular","SimpleExpansionPanel","ExpansionPanel","defaultExpanded","ExpansionPanelSummary","expandIcon","ExpandMore_default","aria-controls","list","ExpansionPanelDetails","map","nc","background","highlisht","LoadSymbolDetails","TabPanel","react","role","hidden","Box","sx","Typography_Typography","a11yProps","BasicTabs","_props$data","cursor","onSelectItem","autoSearchList","symbolList","onChangeWatchlist","search","handleKeyDown","selectedWatchlist","setValue","searchedSymbolList","gainerList","looserList","borderBottom","Tabs","newValue","Tab","onKeyDown","selected","sector","performServerAction","baseURL","setPackLoaded","_ref","asyncToGenerator","regenerator_default","mark","_callee","dispatch","wrap","_context","prev","allPacks","portal","sent","stop","_x","apply","diffData","putData","callData","totPEOI","totCEOI","diff","dateTime","substring","MenuProps","PaperProps","ITEM_HEIGHT","MyView","onChangeSelectSymbol","loadPackList","filterOptionChain","actualValue","filereddata","alldata","optionChainDataBN","records","expiryDate","strikePrice","filtered","FilteredBY","handleScroll","scrollcount","onChangeCallLot","calculateCallMargin","CE","lastPrice","totalMargin","Parser","buyCallLot","lotSize","maxLoss","onChangePutLot","calculatePutMargin","PE","buyPutLot","getDataforStrike","sumOfCEoi","sumOfPEoi","openInterest","findSupportResistence","optiondata","PEoi","CEoi","PEoiChange","CEoiChange","changeinOpenInterest","myStrike","startDiff","underlyingValue","showOptionDownside","rem","round","startFrom","endDiff","showOptionUpside","rem2","endTo","totalspeoi","totalsceoi","resdata","AllspTotalOI","selectedSPpcr","allStrikediff","allStrikeChngeDiff","products","stopnview","curnewdata","timestamp","totalCOI","expiry","strike","waitForChainFlag","pcrTableBN","selectOptionStock","niftyLogSize","niftybankLogSize","_this2","SecuritiesInFO","todayTime","setInterval","updatepcr","_this3","getBNcpdata","totOI","newdata","dateFormat","totCEVol","totVol","totPEVol","totChangeINOICall","totChangeINOIPut","totChangeINOIDiff","oldproducts","lastrow","isDuplicate","totCEOIChange","totPEOIChange","totDiffChange","pcrdata","allPCR","expiryPCR","unshift","_this4","Input","key","expiryDates","labelId","max-height","strikePrices","Paper","overflow","Table","stickyHeader","size","TableHead","whiteSpace","TableRow","TableCell","TableBody","hover","Chart_App","colSpan","opdata","pChange","buyOption","borderLeft","borderRight","tableStyle","connect","OrderBook","searchSymbolPendingOrder","stockOptionSearch","searchRes","searchResdata","searchSymbolPending","searchTokenPending","updateInput","addInOrderPenidngList","buyAtPending","sellAtPending","lastTradedData","confirm","abrupt","createdAt","toLocaleTimeString","buyAt","sellAt","pattenName","pattenNamePending","priceStopLoss","priceTarget","orderPenidngOptionList","toConsumableArray","deleteInOrderPenidngList","delitem","splice","callBackUpdate","placeOptionSPLevelOver","indexData","spotPrice","today","isoWeekday","nextExp","updateLTP","_callee2","_loop","_context3","_context2","buyOptionFlag","r","delegateYield","getTradePrice","refreshCandleChartManually","_ref3","_callee3","_context4","failedCount","onChange2","isfound","ltpparam","openNewPage","backToPositionPage","autoSearchTemp","fdata","instrumenttype","tick_size","endTime","currentTime","isBetween","intervaltime","findlast5minMovementInterval","gutterBottom","hash","Autocomplete","freeSolo","disableClearable","option","renderInput","params","InputProps","Delete_default","autoCompleteSearch","CEStrikePrice","buyCallOption","buyPutOption","PEStrikePrice","orderPenidngList","buyStockOption","showStrikesLtp","onChangeOption","getChunkPrice","suggestBuyPrice","suggestSellPrice","optionType","CEoptionsLtpList","PEoptionsLtpList","selectedOptionLotsize","getStockOptions","getOptionsLtp","_ref4","_callee4","nearOptions","_loop2","_context6","_context5","optionLtp","expiryMonth","_x2","_x3","optiontype","noOfLot","priceInfo","exp","optionName","optionData","slpercentage","perStopTrigerLoss","trackSLPrice","toFixedAmount","getFunds","fundsRes","fundsResData","fundData","net","availablecash","OptionBuyWithSPLevel","BankNiftyView","Home","onInputChange","showStaticChart","checkOpenEqualToLow","_this$setState4","openEqualHighList","openEqualLowList","closeingEqualHighList","advanceShareCount","declineShareCount","UnchangeShareCount","fromDate","startDate","endDate","InstrumentLTP","InstrumentPerChange","decodeWebsocketData","array","newarray","String","fromCharCode","join","makeConnection","wsClint","firstTime_req","feedToken","send","updateSocketWatch","channel","updateSocket","task","user","acctid","updateSocketDetails","onopen","onmessage","decoded","atob","pako","inflate","liveData","symbolListArray","foundLive","tk","onerror","_req","orderid","watchList","getTimeFrameValue","timeFrame","chartStaticData","timeDuration","historyData","cdata","d","getTime","volumeSeriesData","loopindex","rsiValues","bblastValue","vwapvalue","max","smaLineSeries","InstrumentHistroy","upsideMoveCount","downMoveCount","totalSum","per","totalPerchentageChange","startingFrom","checkSlowMotionStock","stock","dataDay","resd","histdatad","candleDatad","bigCandleCount","slowMotionStockList","checkSlowMotionCheckLive","checkLiveBids","bidlivedata","biddata","totalBuyQuantity","totalSellQuantity","deliveryToTradedQuantity","liveBidsList","oneHourBullBearCheck","_loop3","_context7","lastCandle","oneHourBullBearCheckList","searchValumeBreakoutStock","_callee5","_loop4","_context9","_context8","volumeSum","findmaxVol","currentCandleVol","firstCandleCloseingPrice","priceGoingHighCount","firstCandleCloseingPriceDownSide","priceGoingLowCount","avgVol","volumeBreakoutlast5CandleList","dailyBasisInfoCheck","startDateforDaily","DSMA","closeingDatadaily","valumeSum","SMA","dailyAvgValume","DSMALastValue","DailyBulishStatus","todayCurrentVolume","volumeCrossedList","slmOrderType","onSelectItemChart","seachSumbol","deleteItemWatchlist","findIndex","getAveragePrice","orderId","oderbookData","averageprice","showCandleChart","insiderow","showCandleBothChart","candleChartDataInside","keyCode","prevState","updateCandleOnkey","selectedKeyRow","sumPercentage","ifNotBought","longExitPriceType","shortExitPriceType","stopScaningFlag","searchFailed","FoundPatternList","fastMovementList","domElement","timeVisible","secondsVisible","tostartInteral","clearInterval","_ref6","upper","middle","lower","j","OrderWatchlist","SimpleExpansionFastMovement_SimpleExpansionPanel","optionChainData","pcrTable","_React$createElement2","_React$createElement3","_React$createElement4","paddingTop","impliedVolatility","indexSymbol","MyDialog_DialogTitle","MyDialog_DialogContent","indexSymbolData","idata","MyDialog_DialogActions","getIndicesStocks","getIndiceStock","toLocaleLowerCase","indexTimeStamp","getAllIndices","softedData","calendar","MyDialog_CustomizedDialogs","last","encodeURIComponent","rel","advances","declines","unchanged","x","y","colors","upward","downward","ApexCharts","querySelector","render","availableintradaypayin","availablelimitmargin","collateral","utiliseddebits","utilisedexposure","utilisedholdingsales","utilisedoptionpremium","utilisedpayout","utilisedspan","utilisedturnover","m2munrealized","m2mrealized","getTodayOrder","trakingRecord","cancelOrderOfSame","cancelOrder","modifyOrder","trailingstoploss","onChangePriceStopLoss","onChangePriceTarget","listofzones","selectedZone","zone","selectAllzone","firstTimeFlag","float","orderstatus","onBlur","TradeBook","getTodayTrade","retrieveTradeBook","zoneChange","addProduct","editProduct","convertBool","productId","removeItem","flag","toLocaleDateString","toTimeString","fillsize","fillprice","tradevalue","filltime","w3cwebsocket","getHistory","histCandles","tvalue","cng","iv","getBankNiftyLiveLtp","readyState","multipleChartData","longs","longCandles","shorts","shortCandles","ChartMultiple_DialogTitle","ChartMultiple_DialogContent","ChartMultiple_DialogActions","_this$setState","isFound","positionList","enddate","lastdayinfo","getCandleHistoryAndStore","timediff","candleHistoryInterval","last10Candle","findTweezerTopPatternLive","findTweezerBottomPatternLive","candleHist","maxHigh","maxLow","lastTrendCandleLow","firstTrendCandleHigh","firstCandle","secondCandle","diffPer","ttophistCandle","foundData","foundPatternList","last8candleHigh","last8candleLow","tBophistCandle","findNR4PatternLive","timediffend","backTestResult","backTestFlag","rgrangeCount","last4Candle","last5Candle","rangeArr","firstElement","buyentry","sellenty","orderActivated","pnlAmount","netPnLAmount","nr4TotalPer","totelActivatedCount","BuyAt","SellAt","brokerageCharges","findNR7PatternLive","showtestdata","last7Candle","last9Candle","stockTesting","_ref5","symbolname","showMultipleCandleChart","refreshLtpOnFoundPattern","_callee6","foundPatternsFromStored","_loop5","_context11","totalBrokerChargesNR4","totalNetProfit","pnlAmountTotal","perHighLowTotal","netPnLAmountOnHighlowTotal","_context10","perChangeOnHighLow","netPnLAmountOnHighlow","todayChange","builtupCandle","symbolUpdated","OnHighLowActivated","pastPerferm","foundlist","getStoplossFromOrderbook","stopLoss","buyavgprice","maxLossAmount","sellavgprice","getStoplossForSELLFromOrderbook","getHighLowPercentage","_callee7","_loop6","_ret","_context13","showHighLowWisePer","_context12","v","t0","tagPatternWhichTaken","orderTagToPosition","pattern","calculateTradeExpence","totalbuyvalue","totalsellvalue","buyCharge","sellCharge","turnOver","totalBroker","sst","sstCharge","transCharge","stampDuty","sebiCharge","gstCharge","total","tradeExpence","expenceInfo","refreshBasedAmount","totCheckAmount","checkTotalNet","totCheckExp","perchange","checkAmountPer","percentPnL","checkAmount","checkQty","checkExpence","checkNet","checkSLOrTarget","squareOff","getPositionData","_callee8","totalMaxPnL","_context14","getPosition","todayProfitPnL","totalQtyTraded","allbuyavgprice","allsellavgprice","totalPercentage","totalExpence","tradingPositionlist","pnl","buyqty","chargeInfo","slData","stopLossAmount","totalTornOver","getNSETopStock","scaninterval","totalDayLoss","dailyLossPer","abs","scandata","_loop7","symbolName","getChartInkStock","triggered_at","results","stocks","mtime","minutes","_loop8","longBuiltUpOrder","_ref9","_callee9","_loop9","_context16","_context15","checkAndPlaceSingleOrder","orderWithFlatstoploss","ltpPrice","perTradeStopLossPer","onTrailChange","onAddSLChange","addSLInfo","deleteOptionPriceSL","deleteindex","_loop10","indexP","trackSLPriceList","getNiftyLTP","niftyLtpSec","getBankNiftyLTP","bnniftyLtpSec","getStopLossPrice","_ref10","_callee10","_context17","slPrice","_x4","LockedSymbolName","orderData","getOpenPeningOrderId","marketOrder","addSLOrderInfo","enableSLMOrderUi","placeSLMOrderManually","modifyOrderMethod","minTriggerPrice","minSLPrice","get2DecimalNumber","number","getSLAndTriggerPrice","getOptionPercentage","trailPerChange","firstTimeMoveOption","firstTimeSLMoveOption","slPriceData","lastTriggerprice","perchngfromTriggerPrice","nextTimeMoveOption","nextTimeSLMoveOption","getPercentage","firstTimeMove","firstTimeSLMove","nextTimeMove","nextTimeSLMove","positionInterval","bankNiftyInterval","squireInterval","sqrOffbeginningTime","sqrOffendTime","scanendTime","selectedStockInteval","getSelectedStockFromDb","_loop11","selectedStockwatchList","getAutoScanStock","lastSeachStock","_this5","ChartMultiple_CustomizedDialogs","Refresh_default","step","placeholder","totalbuyavgprice","totalsellavgprice","sellqty","Orderbook","totalLongPer","totalLongs","totalLongHighPer","totalShortPer","totalShort","totalShortLowPer","getOptionStockLiveLtp","activeStockOptions","elementP","optionStockStoploss","optionStockTarget","deleteActiveOptionStock","isDeleted","_ref2","optionStockName","spotDetails","optionStockLtp","optionStockChange","optionStockStoplossChange","optionStockTargetChange","deleteIndexOption","OrderStatusLive","code","chunkCandleData","stockInfo","entryPrice","priceChangeList","index2","datetime","postMessage","lastIndexOf","blob","Blob","worker_script","URL","createObjectURL","Example","myWorker","Worker","m","arr","no","readCsv","parsedList","newJsonList","addtowatchlist","SYMBOL","watchlistCount","resMessage","counter","listName","listItem","addIntoStaticData","listCount","resetCsv","multiline","rows","fullwidth","wsClintSectorUpdate","spinnerIndex","updateLTPMannually","sectorStocks","refreshSectorLtp","sectorUpdate","_index","stockUpdate","refreshFlag","sectorStockList","ltt","sectorList","stockList","isStocksLtpUpdted","checkLast5MinMovement","_index2","refreshFlagCandle","stockCandleUpdate","refreshSectorCandleManually","_index3","inputVWAP","volume","vwapValue","VWAP","refreshSectorCandle","outerEelement","stockIndex","updateWatch","topGLCount","loadIndexesList","allIndicesDirectJSON","sleep","ms","resolve","percChange","ref","middleSector","indexName","_x5","_x6","updateLtpOnInterval","autoTradeTopList","indexdata","LineChart_App","LightChartDialog_DialogTitle","LightChartData","selectedSymbol","LightChartDialog_DialogContent","LightChartDialog_DialogActions","onChangeBackDate","getByDateBidHistory","backupData","backupDeleverydata","saveDeliveryData","storeRes","updatebidHistory","storeResData","symbolHist","buyHist","sellHist","lastbuybid","lastsellbid","totalBuyBid","totalSellBid","buybidHistory","sellbidHistory","storeBidData","backupBidata","backupBiddata","dbUpdateTime","saveBidData","quantityTraded","deliveryQuantity","secDate","averagePrice","bidLivedata","priceChangePer","updatedTime","buyPrice1","buyPrice2","buyPrice3","buyPrice4","buyPrice5","buyQuantity1","buyQuantity2","buyQuantity3","buyQuantity4","buyQuantity5","sellPrice1","sellPrice2","sellPrice3","sellPrice4","sellPrice5","sellQuantity1","sellQuantity2","sellQuantity3","sellQuantity4","sellQuantity5","totalTradedVolume","totalTradedValue","buytosellTime","selltobuyTime","highlightbuy","highlightsell","lastUpdateTime","getDeliveryHistory","getDeliveryDataFromDb","delHistory","getBidDataFromDb","bidHistoty","getBackUpDate","getBackUpdateList","backupDateList","convertToFloat","isNaN","sortByColumn","sortedType","totalStockToWatch","BBBlastType","componentDidMount","find10MinBBBlast","stop10bbSearch","stopSearching","onChangeQty","getRSIBBString","BB","createMultpleChart","div","border","appendChild","legendTitle","chartSize","lightChartData","append","sortTheChart","allchart","createNewArray","childNodes","innerText","findlast5minMovement","updateToLocalStorage","updateData","findlast5minMovementUpdate","bbvlastvalue","dataltp","RSIValue","nextProps","nextState","OrderWatchlistDialog_DialogContent","OrderWatchlistDialog_DialogActions","strongChartListInterval","stopChart","findStrongCharts","candleVolBrokenCount","strongPer","strongChartList","shortByVolume","emotions","sortBy","filterByCount","getUpdateIndexData","softedIndexList","sluglist","finally","ok","filterByVolumePrice","filteredList","lastCanPrs","secondCandlePer","filterBy","strongChartListUpdate","candleDistance","lastVol","indexVol","NIFTY 50","NIFTY AUTO","NIFTY BANK","NIFTY ENERGY","NIFTY FIN SERVICE","NIFTY FMCG","NIFTY IT","NIFTY MEDIA","NIFTY METAL","NIFTY PHARMA","NIFTY PSU BANK","NIFTY REALTY","NIFTY PVT BANK","NIFTY CONSUMPTION","NIFTY CPSE","NIFTY INFRA","NIFTY MNC","NIFTY PSE","fontStyle","OrderWatchlistDialog_CustomizedDialogs","fullScreen","FullModel_DialogTitle","FullModel_DialogContent","StrongCharts","DeliveryData","FullModel_DialogActions","updateTokenSymbol","uppercaseNameEQ","uppercaseNameBE","showCandleChartPopUp","isThere","switchToListView","switchToListViewFlag","get5DaysMoveCount","getDeliveryInfo","getDeliveryData","showDeliveryData","showAllChart","timeVal","slugName","checkSectorApiOther","indexStock","stockElement","ltP","iislPercChange","glist","llist","FullModel_CustomizedDialogs","clickedIndexName","LightChartDialog_CustomizedDialogs","startSearching","lightcandleChartData","getFullYear","getMonth","getDate","sma","upsidecount","downsidecount","startingRsiupside","startingRsiDownside","volumeUpside","updateMsg","percentChangeList","changePer","macdInput","fastPeriod","slowPeriod","signalPeriod","SimpleMAOscillator","SimpleMASignal","macd","MACD","macdLastValue","signal","higher","rangehighlow","indexR","nextCandles","buffer","findRange","range","macdData","patternName","histogram","LightChartModel_DialogTitle","LightChartModel_DialogContent","LightChartModel_DialogActions","checkSlowMotion","scanUpdate","updateTimeFrameChart","lightChartinfo","stockindex","sectorName","isActivated","midBullishCount","bullishCount","activationTime","activationPrice","update","updatetopage","activationToLtpChange","AtoltpChng","showLightChart","deleteAllScan","LightChartModel_CustomizedDialogs","LiveBid","takeAction","actionList","updateTime","lastUpdateAction","tbq","tsq","ap","lowPrice","lo","highPrice","h","openPrice","op","bestbuyquantity","bq","bestbuyprice","bp","bestsellquantity","bs","bestsellprice","sp","shortBy","isSpeek","convertToDecimal","num","handleChange","lightChartSymbol","NIFTY NEXT 50","NIFTY MIDCAP 50","NIFTY HEALTHCARE","NIFTY OIL AND GAS","NIFTY 100","NIFTY CONSR DURBL","heigh","innerWidth","voldata","comparePreviousVolume","highlow","updateHighLow","highupdated","lowupdated","volBreakoutCount","brokenCount","priceVolBreakout","rsi","high20Candle","high20CandleFlag","livePrice","livePChange","calculateRSI","candles","closePrice","candle","s","cv","lastCandleChange","volumePriceBONames","dayPriceVolBreakout","OriginalHist","stockcandle","lastCandleInfo","now","intradayVol","higerhigh","lowerlow","histElement","dayhighLow","calculateCandleVolume","noSyncVol","t","ch","liveCandleHistory","storeChartData","dtime","analysis","saveCandleHistory","originalList","updatePreviousVolume","updateOriginalHist","updateDayChartHighLow","listofHighLow","deletePrevVolume","storedPrevVol","newData","candleHistoryFlag","findSymbol","copyName","navigator","clipboard","writeText","alert","HIGH BETA STOCK","nameInput","createRef","msToNextRounded5Min","nextExec","getSeconds","screen","test","userAgent","autofocus","onChangePattern","backTestResultDateRange","dateAndTypeKeys","_this$setState5","stopBacktesting","backTestAnyPattern","filename","currentMoment","endMoment","runningTest","patternType","backTestNR4","backTestNR4Trail","NR4ForNextDay","backTestNR4SameDay","backtestStrongCandle","backtestVolumePrice","backtestVolumePriceSell","isSameOrBefore","backTestNR4DatewiseRange","add","next10Candle","backtestTweezerTop","backtestTweezerBottom","next5thCandle","foundStock","nr4CheckPastPerfommance","findShortTraadeOnNextDay","histdataInside","buyentrySL","resultCandle","buyEntryFlag","longTradeFound","elementInside","buyHighest","candle5min","insideIndex","exitStatus","perChng","perChngOnHigh","highAndLow","perChngOnHighLow","findLongsTraadeOnNextDay","firstTimeTrail","trailCount","buyExitPricePer","buyExitPriceMinRange","start5thdate","set","hour","minute","end5thdate","insideCandleRes","dateWithWlType","datewisetrades","perChngOnLow","exitPrice","slPer","monthMinusOneName","startOf","monthName","entryAt","backtestCandle","currentCandle","volBreakcount","curVol","elementback","chartDate","copydata","_context18","candleElement","candleChangePer","_context20","_context19","longData","shortData","lowestOfBoth","highestOfBoth","higherStopLoss","indexTarget","lowestOf315","indexTarget2","trailingSL","indexTarget3","flatSellingPrice","flatSellingPriceAt","indexTarget4","indexTarget5","buyEntyPrice","LowerStopLoss","squiredOffAt315","squareOffAt315Time","highestOf315","exitAt","_callee11","_loop12","_context22","_context21","copyAll","_callee12","_context23","backTestResultCSV","dateParam","firstLavel","secondLavel","sumPerChange","sumPerChangeHighLow","sumPnlValue","sumPnlValueOnHighLow","totalInvestedValue","totalLongTrade","tradetotal","totalWin","totalLoss","totalMarketEnd","totalSlHit","MaterialUIDateTimePicker","dist_default","isSameDayDuplcate","csvFormatInput","startTime","getAlltokenOfList","listofstockfound","allStockWithTime","updateList","totaluniqueStocks","allQniqueStockList","filerdata","getAllListTokens","getDateFormate","givendate","sdate","convertDateFormat","dateinfo","getPerChangeOfStock","entryCandlePoint","maxDrowDown","maxProfit","index3","targetPer","crossedTargetCount","isWinOnClosing","totalWinTrade","backTestAnyPatternStockWise","overAllResult","stockWiseListOverall","pertradePandL","pertradePandLNet","totalgross","totalAvg","totTrade","totalNet","totalExp","stocktoken","sameAllStock","singleDatewiseSamestock","datelist","momentsDates","elementstock","elementsame","entryTimeAt","samestock","foundat","endtime","candleInfo","isSameOrAfter","updateStockWiseOverall","t1","overallMonthWise","nextdate","updateOverall","timelist","overallData","timeelement","sumofall","expence","netOverAll","noOfTrade","pertradePandLgross","overall","stockelement","totalSameTrade","netPnL","winCount","lossCount","updateMonthWise","month","tradeMonth","onFileChange","files","updateStockList","userAgentData","mobile","niftyLtp","lowerLevel","upperLevel","roundUpper","selectedStrike","getToketForStrike","getAll145Tokens","rowSymbolList","selectOnlyLtp150To170","updateBOPerformance","Track145","objIndex","obj","upsideLtp","updatedObj","returnPer","entry","updatedList","downsideLtp","backupHistoryStatus","downloadStatus","noOfRows","backStatus","hugeVol","requestInfo","backupHistoryData","storyHistoryData","date1","date2","nod","looptime","loopStartDate","outterIndex","loopEndDate","ceil","pop","AppRouter","react_router","path","exact","NiftyView","MySectorTop","Chart","CandleChart","Funds","Tradebook","Position","PositionNew","AddToWatchlist","SectorHeatMap","SectorHeatMap2","FindFastMovement","FindFastMovement2","FindFastMovement3","SlowMotion","IndexCharts","MarketDepth","MarketDepthMobile","Backtest","ChartinkBacktest","BackupHistory","CustomBacktest","Track145Strategy","Test","RouterComponent","react_toastify","ReactDOM","es","src_App"],"mappings":"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","file":"static/js/main.415386a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mylogo.92bbdbd4.png\";","import * as actionTypes from \"../action/types\";\r\nconst INTIAL_STATE = {\r\n    packs: [],\r\n    pack:[],\r\n    updatedPack:null\r\n  };\r\n export default (state = INTIAL_STATE,action)=>{\r\n    switch (action.type) {\r\n        case actionTypes.SET_PACK_LOADED:\r\n          return { ...state, packs:action.payload };\r\n        case actionTypes.EDIT_PACK_INFO:\r\n          return {...state,updatedPack:action.payload}\r\n          case actionTypes.GET_PACK_INFO_BY_ID:\r\n              return {...state,pack:action.payload}    \r\n     default:\r\n          return state;\r\n      }\r\n}\r\n\r\n","import { combineReducers } from 'redux';\r\n\r\nimport getPackReducer from './packReducer';\r\n\r\nexport default combineReducers({\r\n    packs: getPackReducer,\r\n});","export const SET_PACK_LOADED = 'SET PACK LOADED';\r\nexport const EDIT_PACK_INFO ='EDIT PACK INFO';\r\nexport const GET_PACK_INFO_BY_ID ='GET_PACK_INFO_BY_ID';\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport reduxThunk from \"redux-thunk\";\r\nimport reducers from \"./reducer\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  reducers,\r\n  composeEnhancers(applyMiddleware(reduxThunk))\r\n);\r\n\r\nexport default store;","class AuthService {\r\n\r\n    getLoggedInUserInfo() {\r\n        localStorage.getItem(\"UserInfo\");\r\n    }\r\n\r\n    getHeader() {\r\n\r\n\r\n        var tokens = localStorage.getItem(\"userTokens\") && JSON.parse(localStorage.getItem(\"userTokens\")); \r\n        var jwtToken =   tokens &&  tokens.jwtToken;\r\n\r\n        return { 'headers': {\r\n            'Authorization': 'Bearer ' + jwtToken,\r\n            'Content-Type':'application/json', \r\n            'Accept':'application/json', \r\n            'X-UserType':'USER',\r\n            'X-SourceID':'WEB',\r\n            'X-ClientLocalIP':'192.168.1.128',\r\n            'X-ClientPublicIP':'91.0.4472.114',\r\n            'X-MACAddress':'f0:18:98:26:c4:cc',\r\n            'X-PrivateKey':'I4O6PJAn'\r\n        } }\r\n    }\r\n\r\n    loginHeader() {\r\n        return { 'headers': {\r\n            'Content-Type':'application/json', \r\n            'Accept':'application/json', \r\n            'X-UserType':'USER',\r\n            'X-SourceID':'WEB',\r\n            'X-ClientLocalIP':'192.168.1.128',\r\n            'X-ClientPublicIP':'91.0.4472.114',\r\n            'X-MACAddress':'f0:18:98:26:c4:cc',\r\n            'X-PrivateKey':'I4O6PJAn'\r\n        } }\r\n    }\r\n    getImageHeader() {\r\n        return { 'headers': {'token': localStorage.getItem(\"token\")}}\r\n    }\r\n\r\n    getScannerHeader() {\r\n        return { 'headers': {\r\n            'Content-Type':'application/json', \r\n            'Accept':'application/json',\r\n      //      'Access-Control-Allow-Headers': \"x-csrf-token\",\r\n       //     'x-csrf-token':'dWsWEZqGaGd6RfARb33LKjPDdyuGUUrgi8Z4qvsB' \r\n            // 'sec-fetch-mode': 'cors',\r\n            // 'origin': 'localhost',\r\n\r\n            \r\n        } }\r\n    }\r\n\r\n    getNSESessionHeader(sessionId) {\r\n        return { 'headers': {\r\n            'sessionId': sessionId, \r\n            'Accept':'application/json',\r\n      //      'Access-Control-Allow-Headers': \"x-csrf-token\",\r\n       //     'x-csrf-token':'dWsWEZqGaGd6RfARb33LKjPDdyuGUUrgi8Z4qvsB' \r\n            // 'sec-fetch-mode': 'cors',\r\n            // 'origin': 'localhost',\r\n\r\n            \r\n        } }\r\n    }\r\n\r\n}\r\n\r\nexport default new AuthService();","import axios from 'axios';\r\nimport AuthService from \"./AuthService\";\r\nimport  * as apiConstant from \"../../utils/config\";\r\n\r\nclass AdminService {\r\n\r\n    login(credentials) {\r\n         return axios.post(apiConstant.LOGIN_API, credentials, AuthService.loginHeader());\r\n    } \r\n\r\n    logout(credentials) {\r\n        return axios.post(apiConstant.LOGOUT_API, credentials, AuthService.getHeader());\r\n     } \r\n\r\n    getUserData(formData){\r\n        return axios.get(apiConstant.GET_USER_PROFILE, AuthService.getHeader());\r\n    }\r\n\r\n    getFunds(formData){\r\n        return axios.get(apiConstant.GET_FUNDS, AuthService.getHeader());\r\n    }\r\n\r\n    retrieveOrderBook(formData){\r\n        return axios.get(apiConstant.GetOrderBook, AuthService.getHeader());\r\n    }\r\n    retrieveTradeBook(formData){\r\n        return axios.get(apiConstant.GetTradeBook, AuthService.getHeader());\r\n    }\r\n    \r\n    retrieveallTradableInstruments(formData){\r\n        return axios.get(apiConstant.GetAllTradableInstruments,'');\r\n    }\r\n\r\n    placeOrder(credentials) {\r\n        return axios.post(apiConstant.PlaceOrderApi, credentials, AuthService.getHeader());\r\n    } \r\n    modifyOrder(credentials) {\r\n        return axios.post(apiConstant.modifyOrderApi, credentials, AuthService.getHeader());\r\n    } \r\n    cancelOrder(credentials) {\r\n\r\n        return axios.post(apiConstant.cancelOrderApi, credentials, AuthService.getHeader());\r\n    } \r\n\r\n    getLTP(credentials) {\r\n        return axios.post(apiConstant.GetLTPAPI, credentials, AuthService.getHeader());\r\n    } \r\n\r\n    getHistoryData(credentials) {\r\n        return axios.post(apiConstant.getCandleData, credentials, AuthService.getHeader());\r\n    } \r\n\r\n    scanStocks(credentials) {\r\n        return axios.post('https://chartink.com/screener/process', credentials, AuthService.getScannerHeader());\r\n     } \r\n\r\n     autoCompleteSearch(query) {\r\n        return axios.get('http://localhost:8081/search/'+query, '');\r\n     } \r\n\r\n     stockOptionSearch(query) {\r\n      return axios.post('http://localhost:8081/stockOptionSearch/',query, '');\r\n      } \r\n\r\n      getStockOptions(data) {\r\n         return axios.post('http://localhost:8081/getStockOptions',data, '');\r\n      } \r\n\r\n   \r\n     getAllListTokens(data) {\r\n      return axios.post('http://localhost:8081/getAllListTokens', data, '');\r\n      } \r\n     saveWatchList(data) {\r\n        return axios.get('http://localhost:8081/saveWatchList/'+data, '');\r\n     } \r\n     addIntoStaticData(data) {\r\n        return axios.post('http://localhost:8081/addIntoStaticData', data, '');\r\n     }\r\n     saveWatchListJSON(data) {\r\n        return axios.post('http://localhost:8081/saveWatchListJSON', data, '');\r\n     }\r\n     getWatchListJSON() {\r\n        return axios.get('/myJsonWatchList.json', '');\r\n     } \r\n     updateStockList() {\r\n      if(window.location.hostname == \"vijaykumarsaurav.github.io\")\r\n      return axios.get('/mtrade/stockList.json', '');\r\n      else\r\n      return axios.get('/stockList.json', '');\r\n     } \r\n     getStaticData() {\r\n        if(window.location.hostname == \"vijaykumarsaurav.github.io\")\r\n        return axios.get('/mtrade/staticData.json', '');\r\n        else\r\n        return axios.get('/staticData.json', '');\r\n     } \r\n     saveCandleHistory(data) {\r\n        return axios.post('http://localhost:8081/saveCandleHistory', data,  '');\r\n     } \r\n\r\n     backupHistoryData(data) {\r\n      return axios.post('http://localhost:8081/backupHistoryData', data,  '');\r\n   } \r\n\r\n   getAll145Tokens(data) {\r\n      return axios.post('http://localhost:8081/getAll145Tokens', data,  '');\r\n   } \r\n\r\n\r\n   saveDeliveryData(data) {\r\n      return axios.post('http://localhost:8081/store_delivery_data', data,  '');\r\n   } \r\n\r\n   saveBidData(data) {\r\n      return axios.post('http://localhost:8081/store_bid_data', data,  '');\r\n   } \r\n\r\n   getDeliveryDataFromDb(symbol) {\r\n      return axios.get('http://localhost:8081/get_delivery_data?symbol='+symbol, '');\r\n   } \r\n   getBidDataFromDb(backDate,allSymbol,count) {\r\n      return axios.get('http://localhost:8081/get_bid_data?backDate='+backDate +\"&allSymbol=\"+allSymbol+\"&count=\"+count, '');\r\n   } \r\n\r\n   getBackUpdateList() {\r\n      return axios.get('http://localhost:8081/get_backup_date_list', '');\r\n   } \r\n\r\n   getPosition(data){\r\n      return axios.get(apiConstant.getPosition, AuthService.getHeader());\r\n   }\r\n\r\n   getAutoScanStock(){\r\n      return axios.get(apiConstant.getScannedStocks, '');\r\n   }\r\n\r\n   getNSETopStock(){\r\n      return axios.get(apiConstant.getNseTopStocks, '');\r\n   }\r\n   getChartInkStock(){\r\n      return axios.get(apiConstant.getIndiceStockNodeServerApi, '');\r\n   }\r\n\r\n   getSelectedStockFromDb(){\r\n      return axios.get(apiConstant.getSelectedStock, '');\r\n   }\r\n\r\n    //  getBNcpdata(){\r\n    //     return axios.get(apiConstant.'', AuthService.getHeader());\r\n    //  }\r\n\r\n    getIndiceStock(index){\r\n        return axios.get(apiConstant.getIndiceStockApi+index, '');\r\n    }\r\n\r\n    checkOtherApi(index){\r\n      //  return axios.get('http://localhost:8081/nse/get_indices', '');\r\n     //  return axios.get('http://localhost:3000/nse/get_index_stocks?symbol=bankNifty', '');\r\n        return axios.get(\"https://www1.nseindia.com/live_market/dynaContent/live_watch/stock_watch/liveIndexWatchData.json\", '');\r\n    }\r\n\r\n    checkSectorApiOther(index){\r\n        //  return axios.get('http://localhost:3000/nse/get_indices', '');\r\n         return axios.get('http://localhost:8081/nse/get_index_stocks?symbol='+index, '');\r\n       //return axios.get(\"https://www1.nseindia.com/live_market/dynaContent/live_watch/stock_watch/liveIndexWatchData.json\", '');\r\n      }\r\n\r\n    \r\n\r\n    getAllIndices(){\r\n        return axios.get(apiConstant.allIndices);\r\n    }\r\n\r\n    allIndicesDirectJSON(){\r\n        return axios.get('http://localhost:8081/nse/get_indices', '');\r\n      // return axios.get(apiConstant.allIndices2Json);\r\n     }\r\n\r\n     getBNcpdata(symbol){\r\n         if(symbol == 'NIFTY' || symbol == 'BANKNIFTY'){\r\n            return axios.get('http://localhost:8081/nse/getOptionChain?symbol='+symbol, '');\r\n         }else{\r\n            return axios.get('http://localhost:8081/nse/getOptionChainEquity?symbol='+symbol, '');\r\n         }\r\n        \r\n     }\r\n\r\n\r\n     getDeliveryData(symbol){\r\n        return axios.get('http://localhost:8081/nse/get_quote_info?companyName='+ symbol, '');\r\n     }\r\n\r\n     checkLiveBids(symbol){\r\n        return axios.get('http://localhost:8081/nse/get_quote_info?companyName='+ symbol, '');\r\n     }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default new AdminService();\r\n","//my app api\r\nexport const API_KEY  = 'I4O6PJAn'; \r\nexport const LOGIN_API =  'https://apiconnect.angelbroking.com/rest/auth/angelbroking/user/v1/loginByPassword';\r\nexport const LOGOUT_API =  'https://apiconnect.angelbroking.com/rest/secure/angelbroking/user/v1/logout';\r\nexport const GET_USER_PROFILE =  'https://apiconnect.angelbroking.com/rest/secure/angelbroking/user/v1/getProfile';\r\nexport const GET_FUNDS =  'https://apiconnect.angelbroking.com/rest/secure/angelbroking/user/v1/getRMS';\r\nexport const GetOrderBook = 'https://apiconnect.angelbroking.com/rest/secure/angelbroking/order/v1/getOrderBook'; \r\nexport const GetTradeBook = 'https://apiconnect.angelbroking.com/rest/secure/angelbroking/order/v1/getTradeBook'; \r\nexport const GetAllTradableInstruments = 'https://margincalculator.angelbroking.com/OpenAPI_File/files/OpenAPIScripMaster.json'; \r\nexport const PlaceOrderApi = 'https://apiconnect.angelbroking.com/rest/secure/angelbroking/order/v1/placeOrder'; \r\nexport const modifyOrderApi = 'https://apiconnect.angelbroking.com/rest/secure/angelbroking/order/v1/modifyOrder'; \r\nexport const cancelOrderApi = 'https://apiconnect.angelbroking.com/rest/secure/angelbroking/order/v1/cancelOrder'; \r\n\r\nexport const GetLTPAPI = 'https://apiconnect.angelbroking.com/rest/secure/angelbroking/order/v1/getLtpData'; \r\nexport const getCandleData = 'https://apiconnect.angelbroking.com/rest/secure/angelbroking/historical/v1/getCandleData'; \r\nexport const getPosition =  'https://apiconnect.angelbroking.com/rest/secure/angelbroking/order/v1/getPosition';\r\n\t\r\nexport const getScannedStocks =  'http://localhost:8081/getScannedStocks';\t\r\nexport const getNseTopStocks =  'http://localhost:8081/getNseTopStocks';\r\nexport const getSelectedStock =  'http://localhost:8081/getSelectedStock';\t\r\nexport const getChartInkURL =  'https://hookbin.com/bin/NOjrL66WJ3Fe8mNN8bo8';\r\n\r\nexport const allIndices =  'https://www.nseindia.com/api/allIndices';\t\r\nexport const allIndices2Json =  'https://www1.nseindia.com/live_market/dynaContent/live_watch/stock_watch/liveIndexWatchData.json';\r\n\r\nexport const getIndiceStockApi =  'https://www.nseindia.com/api/equity-stockIndices?index=';\t\r\nexport const getIndiceStockNodeServerApi =  'http://localhost:8081/get_chartink_stock';\t\r\n\r\n","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\nimport MyLogo from './mylogo.png';\r\n\r\nconst LoginNavBar = (props) => {\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            {/* <AppBar position=\"static\" style={{backgroundColor: '#f44336'}}/> */}\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                <img alt=\"logo\"  style={{width:\"190px\"}} src={MyLogo} />\r\n\r\n                    {/* <div style={{width:\"300px\"}}>\r\n                        <Typography variant=\"h6\" style={style}>\r\n                             &nbsp;&nbsp;  M-Trade\r\n                        </Typography>\r\n                    </div>               */}\r\n                    \r\n                </Toolbar>\r\n            </AppBar>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default LoginNavBar;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n// function Copyright() {\r\n//   return (\r\n//     <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n//       {'Copyright © '}\r\n//       <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n//         Bharti Airtel Ltd\r\n//       </Link>{' '}\r\n//       {new Date().getFullYear()}\r\n//       {'.'}\r\n//     </Typography>\r\n//   );\r\n// }\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  '@global': {\r\n    body: {\r\n      backgroundColor: theme.palette.common.white,\r\n    },\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: '#df0915',//theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\n\r\n\r\n\r\nexport default function SignIn(props) {\r\n  const classes = useStyles();\r\n\r\n  const handleOnChange = e => {\r\n    props.loginProps.onChange(e);\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n        {/* <LoginNavBar/> */}\r\n\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <PersonIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign in\r\n        </Typography>\r\n        <form className={classes.form} noValidate>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"email\"\r\n            label=\"User Id\"\r\n            name=\"userName\"\r\n            autoComplete=\"email\"\r\n            autoFocus\r\n            onChange={handleOnChange}\r\n            value={props.loginProps.userName}\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            onChange={handleOnChange}\r\n            value={props.loginProps.password}\r\n          />\r\n          {/* <FormControlLabel\r\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n            label=\"Remember me\"\r\n          /> */}\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n            onClick={props.loginProps.login}\r\n          >\r\n            Sign In\r\n          </Button>\r\n\r\n         \r\n          \r\n          {/* <Grid container>\r\n            <Grid item xs>\r\n              <Link href=\"#\" variant=\"body2\">\r\n                Forgot password?\r\n              </Link>\r\n            </Grid>\r\n            <Grid item>\r\n              <Link href=\"#\" variant=\"body2\">\r\n                {\"Don't have an account? Sign Up\"}\r\n              </Link>\r\n            </Grid>\r\n          </Grid> */}\r\n        </form>\r\n      </div>\r\n      {/* <Box mt={8}>\r\n        <Copyright />\r\n      </Box> */}\r\n    </Container>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// method calling\r\n\r\n// import React from \"react\";\r\n// import \"./styles.css\";\r\n\r\n// class Child extends React.Component {\r\n//   render() {\r\n//     return <input name=\"username\" onChange = {this.props.handler}/ >\r\n//   }\r\n// }\r\n\r\n// class Parent extends React.Component {\r\n//   constructor(props) {\r\n//     super(props)\r\n//     this.state = {\r\n//       username : \"vijay\"\r\n//     }\r\n//     this.handler = this.handler.bind(this)\r\n//   }\r\n\r\n//   handler(e) {\r\n//     console.log(e.target.name ); \r\n//     this.setState({\r\n//       [e.target.name]: e.target.value \r\n//     })\r\n//   }\r\n\r\n//   render() {\r\n//     return <>\r\n//     Hello:  {this.state.username} \r\n//      <Child handler = {this.handler} />\r\n     \r\n//      </>\r\n//   }\r\n// }\r\n\r\n// export default Parent;\r\n","import { toast } from 'react-toastify';\r\n\r\nclass Notify {\r\n\r\n    showError(msg) {\r\n        toast.error(msg, this.options());\r\n    }\r\n\r\n    showSuccess(msg) {\r\n        toast.success(msg , this.options());\r\n    }\r\n\r\n    showWarning(msg) {\r\n        toast.warn(msg , this.options());\r\n    }\r\n\r\n    options() {\r\n        return {\r\n            position: toast.POSITION.BOTTOM_RIGHT,\r\n          //  position: \"buttom-right\",\r\n            autoClose: 2000,\r\n            hideProgressBar: true,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: false\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default new Notify();","import Notify from \"./Notify\";\r\n\r\nexport function resolveResponse(response, msg) {\r\n   //console.log('response',response);\r\n    let data = {};\r\n        if (response.status === 200) {\r\n            data = response.data;\r\n            if(data.status) {\r\n                if(data.message){\r\n\r\n                    if(msg !== 'noPop')\r\n                    Notify.showSuccess(data.message);\r\n                }\r\n                return data;\r\n            }else{\r\n               \r\n                Notify.showError(data.message);\r\n                if(data.message === \"Invalid Token\"){\r\n                    window.location.replace(\"#/login\");\r\n                    localStorage.setItem('userTokens', '');\r\n                    localStorage.setItem('userProfile', '');\r\n                }\r\n                return Promise.reject(data.message);\r\n            }\r\n        }\r\n        else if(response && !response.status){\r\n            Notify.showError(data.message);\r\n        }   \r\n}","import React from 'react';\r\nimport AdminService from \"../service/AdminService\";\r\nimport LoginNavBar from \"../LoginNavbar\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport LoginNewUI from './LoginNewUI';\r\nimport {resolveResponse} from \"../../utils/ResponseHandler\";\r\n\r\nclass LoginComponent extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            userName: \"V193588\",\r\n            password: \"\", \r\n            isDasable:false,\r\n            isError:false,\r\n            \r\n        };\r\n        this.login = this.login.bind(this);\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return(\r\n            <React.Fragment>\r\n                <LoginNavBar/>\r\n                \r\n                {/* <Container maxWidth=\"sm\">\r\n                     <br/><br/><br/> \r\n                    <Typography variant=\"h4\" style={styles.label}>Login</Typography>\r\n                    <form style={styles.formStyle}>\r\n                        <TextField type=\"text\"  required={true} label=\"Olms Id\" fullWidth margin=\"normal\" name=\"userName\" value={this.state.userName}  onChange={this.onChange}/>\r\n\r\n                        <TextField type=\"password\"  required={true} label=\"Password\" fullWidth margin=\"normal\" name=\"password\" value={this.state.password} onChange={this.onChange}/>\r\n                        <Grid item  xs={12} sm={8}>\r\n                            <Button disabled={this.state.isDasable}  variant=\"contained\" color=\"primary\" onClick={this.login}>Login</Button>\r\n                        </Grid>\r\n                        <Grid item  xs={12} sm={10}>\r\n                             {this.state.isDasable ? <InputLabel variant=\"subtitle1\" style={styles.waitMessage}> Please wait...</InputLabel> :\"\"} \r\n                             {this.state.isError ? <InputLabel variant=\"subtitle1\" style={styles.errorMessage}> {this.state.isError} </InputLabel>: \"\"}  \r\n                        </Grid>\r\n                    </form>\r\n                </Container> */}\r\n\r\n                {/* New Login UI */}\r\n                <LoginNewUI loginProps={ {onChange : this.onChange, login: this.login,   userName: this.state.userName, password:  this.state.password } }/>\r\n                \r\n                <Grid container justify=\"space-around\">\r\n                    <Grid justify={\"center\"} container  xs={12} sm={10}>\r\n                            {this.state.isDasable ? <InputLabel variant=\"subtitle1\" style={styles.waitMessage}> Please wait...</InputLabel> :\"\"} \r\n                            {this.state.isError ? <InputLabel variant=\"subtitle1\" style={styles.errorMessage}> {this.state.isError} </InputLabel>: \"\"}  \r\n                    </Grid>\r\n                </Grid>\r\n            </React.Fragment>\r\n\r\n\r\n        )\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n      const userTokens =   window.localStorage.getItem(\"userTokens\"); \r\n      if(userTokens){\r\n      //  const lastUrl = localStorage.getItem(\"lastUrl\"); \r\n        this.props.history.push('home');\r\n      }\r\n\r\n      if(document.location.href.includes('logout')){\r\n        document.location.href = '#/login';\r\n        window.location.reload(true);\r\n      }else{\r\n      }\r\n\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value.trim() });\r\n    }\r\n\r\n    login = (e) => {\r\n        \r\n        this.setState({ isError: \"\" });\r\n\r\n\r\n        e.preventDefault();\r\n\r\n        if(!this.state.userName && !this.state.password){\r\n            this.setState({ isError: \"Olms Id and Password are required.\" });\r\n            return;\r\n        }\r\n\r\n        if(!this.state.userName){\r\n            this.setState({ isError: \"Olms Id is required.\" });\r\n            return;\r\n        }\r\n        if(!this.state.password){\r\n            this.setState({ isError: \"Password is required.\" });\r\n            return;\r\n        }\r\n         \r\n        this.setState({ isDasable: true });\r\n\r\n \r\n\r\n        const loginPayload = {\r\n            clientcode:  this.state.userName,\r\n            password: this.state.password \r\n\r\n        };\r\n        AdminService.login(loginPayload)\r\n            .then(loginRes => {\r\n              //  Notify.showError(\"Olms Id and password is required.\");\r\n            //  alert(JSON.stringify(res));\r\n         //   console.log(\"res\",loginRes); \r\n\r\n              var data = resolveResponse(loginRes);\r\n              loginRes  = loginRes && loginRes.data; \r\n            //  console.log(\"resdata\",loginRes); \r\n              if(loginRes.status && loginRes.message !== 'SUCCESS'){\r\n                this.setState({ isError: loginRes.message });\r\n              }\r\n              \r\n               // data = res.data; \r\n                this.setState({ isDasable: false });\r\n\r\n                if(loginRes.data){\r\n                    window.localStorage.setItem(\"userTokens\",JSON.stringify(loginRes.data));\r\n                  \r\n\r\n                    AdminService.getUserData().then(profileRes => {\r\n                       // console.log('profiledata', profileRes); \r\n                          let data = resolveResponse(profileRes);\r\n                          profileRes =  profileRes && profileRes.data; \r\n                          if(profileRes.status & profileRes.message === 'SUCCESS'){\r\n                            window.localStorage.setItem(\"userProfile\",JSON.stringify(profileRes.data));\r\n                        //    this.props.history.push('/position');\r\n\r\n                            AdminService.getStaticData().then(res => {\r\n                                var data = res.data;\r\n                                //data = JSON.parse(data);   \r\n                                localStorage.setItem('staticData', JSON.stringify(data));\r\n\r\n                                var totalWatchlist = Object.keys(data);\r\n                                this.setState({ totalWatchlist: totalWatchlist });\r\n                                localStorage.setItem('totalWatchlist', JSON.stringify(totalWatchlist));\r\n\r\n                                this.setState({ staticData: data });\r\n                    \r\n                                var watchlist = [];\r\n                                totalWatchlist.forEach(element => {\r\n                    \r\n                                    var mylist = data[element];\r\n                                    mylist.forEach(element2 => {\r\n                                        var foundInWatchlist = watchlist.filter(row => row.token === element2.token);\r\n                                        if (!foundInWatchlist.length) {\r\n                                            watchlist.push(element2);\r\n                                        }\r\n                                    });\r\n                                });\r\n                    \r\n                                localStorage.setItem('watchList', JSON.stringify(watchlist));\r\n\r\n                                window.location.replace('#/strong-charts')\r\n\r\n                            });\r\n\r\n                            \r\n                            \r\n                          }\r\n                      })\r\n\r\n                  \r\n\r\n                }\r\n            });\r\n          \r\n            // setTimeout(() => {\r\n            //     this.setState({ isError: \"\" });\r\n            // }, 3000);\r\n\r\n\r\n           \r\n    }\r\n\r\n}\r\n\r\nconst styles ={\r\n    formStyle :{\r\n        display: 'flex',\r\n        flexFlow: 'row wrap'\r\n    },\r\n    label: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    errorMessage:{\r\n        color:\"red\",\r\n        marginTop: '11px'\r\n    },\r\n    waitMessage:{\r\n        color:\"gray\",\r\n        marginTop: '11px'\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default LoginComponent;","import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport PowerSettingsNewIcon from '@material-ui/icons/PowerSettingsNew';\r\nimport { Link } from \"react-router-dom\";\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\nimport AdminService from \"./service/AdminService\";\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\n//import RouterComponent from '../RouterComponent'; \r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\n\r\nexport const AdminMenuList = (\r\n\r\n  <div>\r\n    {/* <ListSubheader inset>Upload & Create</ListSubheader> */}\r\n\r\n\r\n    <ListItem button component='a' href={\"/mtrade/#/home\"} >\r\n      <ListItemIcon>\r\n        <ShowChartIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Home\" />\r\n    </ListItem>\r\n\r\n    <ListItem button component='a' href={\"/mtrade/#/position\"} >\r\n      <ListItemIcon>\r\n        <EmojiEmotionsIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Positions\" />\r\n    </ListItem>\r\n\r\n    <ListItem button component='a' href={\"/mtrade/#/sector-heat-map2\"} >\r\n      <ListItemIcon>\r\n        <ShowChartIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Heat Map2\" />\r\n    </ListItem>\r\n\r\n    <ListItem button component='a' href={\"/mtrade/#/strong-charts\"} >\r\n      <ListItemIcon>\r\n        <ShowChartIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Strong Charts\" />\r\n    </ListItem>\r\n\r\n    <ListItem button component='a' href={\"/mtrade/#/delivery\"} >\r\n      <ListItemIcon>\r\n        <ShowChartIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Delivery\" />\r\n    </ListItem>\r\n\r\n\r\n    <ListItem button component='a' href={\"/mtrade/#/slow-motion\"} >\r\n      <ListItemIcon>\r\n        <ShowChartIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Slow Motion\" />\r\n    </ListItem>\r\n\r\n\r\n\r\n    <ListItem button component='a' target={'_blank'} href={\"/mtrade/#/find-fast-movement\"} >\r\n      <ListItemIcon>\r\n        <ShowChartIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Fast Movement\" />\r\n    </ListItem>\r\n\r\n    <ListItem button component='a' target={'_blank'} href={\"/mtrade/#/index-charts\"} >\r\n      <ListItemIcon>\r\n        <EqualizerIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Index Charts\" />\r\n    </ListItem>\r\n\r\n\r\n\r\n\r\n\r\n    <ListItem button component='a' href={\"/mtrade/#/order-watchlist\"} >\r\n      <ListItemIcon>\r\n        <EmojiEmotionsIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Order Watchlist\" />\r\n    </ListItem>\r\n\r\n    <ListItem button component='a' href={\"/mtrade/#/funds\"} >\r\n      <ListItemIcon>\r\n        <FileCopyIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Funds\" />\r\n    </ListItem>\r\n\r\n    <ListItem button component='a' href={\"/mtrade/#/order\"} >\r\n      <ListItemIcon>\r\n        <FileCopyIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Order Book\" />\r\n    </ListItem>\r\n    <ListItem button component='a' href={\"/mtrade/#/trade\"} >\r\n      <ListItemIcon>\r\n        <FileCopyIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Trade Book\" />\r\n    </ListItem>\r\n\r\n    <ListItem button component='a' href={\"/mtrade/#/sector-heat-map\"} >\r\n      <ListItemIcon>\r\n        <ShowChartIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Heat Map\" />\r\n    </ListItem>\r\n\r\n\r\n    <ListItem button component='a' href={\"/mtrade/#/market-depth\"} >\r\n      <ListItemIcon>\r\n        <ShowChartIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Depth Live\" />\r\n    </ListItem>\r\n\r\n    <ListItem button component='a' href={\"/mtrade/#/market-depth-mobile\"} >\r\n      <ListItemIcon>\r\n        <ShowChartIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Depth Live Mobile\" />\r\n    </ListItem>\r\n\r\n    {/* <ListItem button component='a' href={\"/mtrade/#/bn-view\"} >  \r\n      <ListItemIcon>\r\n        <EmojiEmotionsIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"NiftyBank View\" />\r\n    </ListItem>\r\n\r\n    <ListItem button component='a' href={\"/mtrade/#/nifty-view\"} >  \r\n      <ListItemIcon>\r\n        <FileCopyIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Nifty View\" />\r\n    </ListItem>\r\n\r\n\r\n    <ListItem button component='a' href={\"/mtrade/#/sector\"} >  \r\n      <ListItemIcon>\r\n        <FileCopyIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Sector Top\" />\r\n    </ListItem> */}\r\n\r\n    <ListItem button component='a' href={\"/mtrade/#/backtest\"} >\r\n      <ListItemIcon>\r\n        <FileCopyIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Backtest\" />\r\n    </ListItem>\r\n\r\n    <ListItem button component='a' href={\"/mtrade/#/chartink-backtest\"} >\r\n      <ListItemIcon>\r\n        <FileCopyIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Chartink Backtest\" />\r\n    </ListItem>\r\n\r\n\r\n    <ListItem button component='a' href={\"/mtrade/#/custom-backtest\"} >\r\n      <ListItemIcon>\r\n        <FileCopyIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Custom Backtest\" />\r\n    </ListItem>\r\n\r\n    <ListItem button component='a' href={\"/mtrade/#/track145\"} >\r\n      <ListItemIcon>\r\n        <FileCopyIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Track 145\" />\r\n    </ListItem>\r\n\r\n\r\n    <ListItem button component='a' href={\"/mtrade/#/backup-history\"} >\r\n      <ListItemIcon>\r\n        <FileCopyIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary=\"Backup History\" />\r\n    </ListItem>\r\n\r\n\r\n\r\n    <ListItem button component='a' href={\"/mtrade/#/addtowatchlist\"} >\r\n      <ListItemIcon>\r\n        <FileCopyIcon />\r\n      </ListItemIcon>\r\n      <ListItemText primary={\"Watchlist (\" + (localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')).length) + \")\"} />\r\n    </ListItem>\r\n\r\n\r\n\r\n  </div>\r\n);\r\n\r\nfunction deleteAllCookies() {\r\n  var cookies = document.cookie.split(\";\");\r\n  for (var i = 0; i < cookies.length; i++) {\r\n    var cookie = cookies[i];\r\n    var eqPos = cookie.indexOf(\"=\");\r\n    var name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;\r\n    document.cookie = name + \"=;expires=Thu, 01 Jan 1970 00:00:00 GMT\";\r\n  }\r\n}\r\n\r\nfunction logoutPortal() {\r\n  //console.log(\"yo_man\")\r\n\r\n  //if (window.confirm(\"Are you sure to logout?\")) {\r\n\r\n    var userProfile = localStorage.getItem(\"userProfile\")\r\n    userProfile = userProfile && JSON.parse(userProfile);\r\n\r\n    var data = {\r\n      clientcode: userProfile && userProfile.clientcode\r\n    }\r\n\r\n    AdminService.logout(data)\r\n      .then(res => {\r\n\r\n        localStorage.clear();\r\n        //localStorage.setItem('userTokens', '');\r\n        //localStorage.setItem('userProfile', '');\r\n        deleteAllCookies();\r\n\r\n       window.location.replace(\"#/login?logout=1\");\r\n      //  window.location.href = '#/login';\r\n        return;\r\n\r\n      });\r\n\r\n // }\r\n}\r\n\r\nvar userProfile = localStorage.getItem(\"userProfile\")\r\nuserProfile = userProfile && JSON.parse(userProfile);\r\n\r\nexport const LogoutMenu = (\r\n\r\n  <div>\r\n    <Link to={''} style={{ textDecoration: \"none\" }} onClick={logoutPortal}>\r\n      <ListItem button>\r\n        <ListItemIcon title=\"Logout\">\r\n          <PowerSettingsNewIcon />\r\n        </ListItemIcon><ListItemText primary={<span title={userProfile && userProfile.clientcode ? userProfile.clientcode : ''}> {userProfile && userProfile.name ? userProfile.name.split(' ')[0] : ''} </span>} />\r\n      </ListItem>\r\n    </Link>\r\n\r\n\r\n  </div>\r\n);\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function MenuAppBar() {\r\n  const classes = useStyles();\r\n  const [auth, setAuth] = React.useState(true);\r\n  //const [anchorEl, setAnchorEl] = React.useState(null);\r\n  //const open = Boolean(anchorEl);\r\n\r\n  const handleChange = (event) => {\r\n    localStorage.setItem('invertColorFlag', event.target.checked);\r\n    setAuth(event.target.checked);\r\n   \r\n  };\r\n\r\n  // const handleMenu = (event) => {\r\n\r\n  //   setAnchorEl(event.currentTarget);\r\n  // };\r\n\r\n  // const handleClose = () => {\r\n  //   setAnchorEl(null);\r\n  // };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <FormGroup>\r\n        <FormControlLabel\r\n          control={<Switch checked={auth} onChange={handleChange} aria-label=\"login switch\" />}\r\n          label={auth ? 'Black & White'  : 'Colorfull'}\r\n        />\r\n      </FormGroup>\r\n     \r\n      {/* <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Photos\r\n          </Typography>\r\n          {auth && (\r\n            <div>\r\n              <IconButton\r\n                aria-label=\"account of current user\"\r\n                aria-controls=\"menu-appbar\"\r\n                aria-haspopup=\"true\"\r\n                onClick={handleMenu}\r\n                color=\"inherit\"\r\n              >\r\n                <AccountCircle />\r\n              </IconButton>\r\n              <Menu\r\n                id=\"menu-appbar\"\r\n                anchorEl={anchorEl}\r\n                anchorOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                keepMounted\r\n                transformOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                open={open}\r\n                onClose={handleClose}\r\n              >\r\n                <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n                <MenuItem onClick={handleClose}>My account</MenuItem>\r\n              </Menu>\r\n            </div>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar> */}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n//import \"./styles.css\";\r\n\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\n\r\n\r\nexport default function App( props ) {\r\n\r\n\r\n  var candleChartData =  props.candleChartData; \r\n  var vwapDataChart =  props.vwapDataChart; \r\n\r\n  var closeData = [], timeDate = []; \r\n\r\n  if(candleChartData){\r\n    for (let index = 0; index < candleChartData.length; index++) {\r\n      if(candleChartData[index]){\r\n        closeData.push(candleChartData[index][4]); \r\n        timeDate.push(new Date(candleChartData[index][0]).getHours() + \":\" +new Date(candleChartData[index][0]).getMinutes() ); \r\n      }\r\n    \r\n    }\r\n  }\r\n\r\n\r\n  const chartData = {\r\n    \r\n    labels: timeDate,\r\n    datasets: [\r\n      {\r\n        label: \"Close\",\r\n        data: closeData,\r\n        fill: true,\r\n        borderColor:  props.percentChange > 0 ? \"green\" : \"red\",\r\n       // backgroundColor: \"rgba(75,192,192,0.2)\",\r\n        //borderColor: \"\"\r\n      },\r\n      {\r\n        label: \"Vwap\",\r\n        data: vwapDataChart,\r\n        fill: true,\r\n      //  backgroundColor:  \"blue\",\r\n        borderColor: \"blue\",\r\n      },\r\n      // {\r\n      //   label: \"Diff\",\r\n      //   data: diffData,\r\n      //   fill: true,\r\n      //   onoffline : true,\r\n      //   backgroundColor:  \"rgba(75,192,192,0.1)\",\r\n      //   borderColor: \"blue\",\r\n        \r\n      // }\r\n     \r\n    ]\r\n  };\r\n  const options = {\r\n    maintainAspectRatio: false,\r\n    legend: {\r\n      display: false\r\n    }\r\n  } \r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Line data={chartData} options={options} />\r\n      \r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n\r\nexport default function LightChartCom(props) {\r\n\tconst [open, setOpen] = React.useState(false);\r\n\t// var fileref=document.createElement('script')\r\n\t// fileref.setAttribute(\"type\",\"text/javascript\")\r\n\t// fileref.setAttribute(\"src\", 'https://unpkg.com/lightweight-charts@3.4.0/dist/lightweight-charts.standalone.production.js')\r\n\t// document.getElementsByTagName(\"head\")[0].appendChild(fileref)\r\n\r\n\tsetTimeout(() => {\r\n\r\n\t\tvar chart = window.LightweightCharts.createChart(document.getElementById('chart'), {\r\n\t\t\twidth: 600,\r\n\t\t\theight: 300,\r\n\t\t\trightPriceScale: {\r\n\t\t\t\tscaleMargins: {\r\n\t\t\t\t\ttop: 0.3,\r\n\t\t\t\t\tbottom: 0.25,\r\n\t\t\t\t},\r\n\t\t\t\tborderVisible: false,\r\n\t\t\t},\r\n\t\t\tlayout: {\r\n\t\t\t\tbackgroundColor: 'white',   // '#131722',\r\n\t\t\t\ttextColor: '#d1d4dc',\r\n\t\t\t},\r\n\t\t\tgrid: {\r\n\t\t\t\tvertLines: {\r\n\t\t\t\t\tcolor: 'rgba(42, 46, 57, 0)',\r\n\t\t\t\t},\r\n\t\t\t\thorzLines: {\r\n\t\t\t\t\tcolor: 'rgba(42, 46, 57, 0.6)',\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\t// var areaSeries = chart.addAreaSeries({\r\n\t\t// \ttopColor: 'rgba(38,198,218, 0.56)',\r\n\t\t// \tbottomColor: 'rgba(38,198,218, 0.04)',\r\n\t\t// \tlineColor: 'rgba(38,198,218, 1)',\r\n\t\t// \tlineWidth: 2,\r\n\t\t// });\r\n\t\t// areaSeries.setData(props.ChartData.areaSeries);\r\n\r\n\r\n\t\tvar candleSeries = chart.addCandlestickSeries({\r\n\t\t\tupColor: 'green',\r\n\t\t\tdownColor: 'red',\r\n\t\t\tborderDownColor: 'red',\r\n\t\t\tborderUpColor: 'green',\r\n\t\t\twickDownColor: 'red',\r\n\t\t\twickUpColor: 'green',\r\n\t\t});\r\n\r\n\t\t//candleSeries.setData(data);\r\n\t\tvar data = props.chartData && props.chartData.candleSeries;\r\n\t\tcandleSeries.setData(data);\r\n\r\n\r\n\r\n\t\tvar volumeSeries = chart.addHistogramSeries({\r\n\t\t\tcolor: '#26a69a',\r\n\t\t\tpriceFormat: {\r\n\t\t\t\ttype: 'volume',\r\n\t\t\t},\r\n\t\t\tpriceScaleId: '',\r\n\t\t\tscaleMargins: {\r\n\t\t\t\ttop: 0.8,\r\n\t\t\t\tbottom: 0,\r\n\t\t\t},\r\n\t\t});\r\n\r\n\t\t//volumeSeries.setData(props.ChartData && props.ChartData.volumeData);\r\n\t\tvolumeSeries.setData(props.chartData && props.chartData.volumeSeries);\r\n\r\n\r\n\t\tchart.subscribeCrosshairMove((param) => {\r\n\r\n\t\t\tvar getit = param.seriesPrices[Symbol.iterator]();\r\n\r\n\t\t\tvar string = \"\";\r\n\t\t\tvar change = \"\";\r\n\r\n\t\t\tfor (var elem of getit) {\r\n\r\n\t\t\t\tconsole.log(elem);\r\n\r\n\t\t\t\tif (typeof elem[1] == 'object') {\r\n\t\t\t\t\tstring += \" O: <b>\" + elem[1].open + \"</b>\";\r\n\t\t\t\t\tstring += \" H: <b>\" + elem[1].high + \"</b>\";\r\n\t\t\t\t\tstring += \" L: <b>\" + elem[1].low + \"</b>\";\r\n\t\t\t\t\tstring += \" C: <b>\" + elem[1].close + \"</b>\";\r\n\t\t\t\t\tchange = (elem[1].close - elem[1].open) * 100 / elem[1].open;\r\n\t\t\t\t\tstring += \" CH: <b>\" + change.toFixed(2) + '%</b>';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstring += \"&nbsp;\" + elem[1].toFixed(2) + \" \";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (param.time)\r\n\t\t\t\tstring += \" T: <b>\" + new Date(param.time).toLocaleString() + \"</b>\";\r\n\r\n\r\n\r\n\t\t\tconst domElement = document.getElementById('showChartTitle');\r\n\r\n\r\n\t\t\tvar str = \"<span style=color:green>\" + string + \"</span> \";\r\n\t\t\tif (change < 0)\r\n\t\t\t\tstr = \"<span style=color:red>\" + string + \"</span> \";\r\n\r\n\t\t\tdomElement.innerHTML = str;\r\n\t\t});\r\n\r\n\r\n\r\n\r\n\t\t// var datesForMarkers = [data[data.length - 19], data[data.length - 39]];\r\n\t\t// var indexOfMinPrice = 0;\r\n\t\t// for (var i = 1; i < datesForMarkers.length; i++) {\r\n\t\t// \tif (datesForMarkers[i].high < datesForMarkers[indexOfMinPrice].high) {\r\n\t\t// \t\tindexOfMinPrice = i;\r\n\t\t// \t}\r\n\t\t// }\r\n\t\t// var markers = [];\r\n\t\t// for (var i = 0; i < datesForMarkers.length; i++) {\r\n\t\t// \tif (i !== indexOfMinPrice) {\r\n\t\t// \t\tmarkers.push({ time: datesForMarkers[i].time, position: 'aboveBar', color: '#e91e63', shape: 'arrowDown', text: 'Sell @ ' + Math.floor(datesForMarkers[i].high + 2) });\r\n\t\t// \t} else {\r\n\t\t// \t\tmarkers.push({ time: datesForMarkers[i].time, position: 'belowBar', color: '#2196F3', shape: 'arrowUp', text: 'Buy @ ' + Math.floor(datesForMarkers[i].low - 2) });\r\n\t\t// \t}\r\n\t\t// }\r\n\t\t// markers.push({ time: data[data.length - 48].time, position: 'aboveBar', color: '#f68410', shape: 'circle', text: 'D' });\r\n\t\t// candleSeries.setMarkers(markers);\r\n\r\n\r\n\t\tvar smaData = calculateSMA(data, 20);\r\n\t\tvar smaLine = chart.addLineSeries({\r\n\t\t\tcolor: 'rgba(4, 111, 232, 1)',\r\n\t\t\tlineWidth: 2,\r\n\t\t});\r\n\t\tsmaLine.setData(smaData);\r\n\r\n\r\n\t\tfunction calculateSMA(data, count) {\r\n\t\t\tvar avg = function (data) {\r\n\t\t\t\tvar sum = 0;\r\n\t\t\t\tfor (var i = 0; i < data.length; i++) {\r\n\t\t\t\t\tsum += data[i].close;\r\n\t\t\t\t}\r\n\t\t\t\treturn sum / data.length;\r\n\t\t\t};\r\n\t\t\tvar result = [];\r\n\t\t\tfor (var i = count - 1, len = data.length; i < len; i++) {\r\n\t\t\t\tvar val = avg(data.slice(i - count + 1, i));\r\n\t\t\t\tresult.push({ time: data[i].time, value: val });\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\r\n\t\t// var minimumPrice = data[0].value;\r\n\t\t// var maximumPrice = minimumPrice;\r\n\t\t// for(var i = 1; i < data.length; i++) {\r\n\t\t//   var price = data[i].value;\r\n\t\t//   if (price > maximumPrice) {\r\n\t\t//     maximumPrice = price;\r\n\t\t//   }\r\n\t\t//   if (price < minimumPrice) {\r\n\t\t//     minimumPrice = price;\r\n\t\t//   }\r\n\t\t// }\r\n\t\t// var avgPrice = (maximumPrice + minimumPrice) / 2;\r\n\r\n\t\t// var lineWidth = 2;\r\n\t\t// var minPriceLine = {\r\n\t\t//   price: minimumPrice,\r\n\t\t//   color: '#be1238',\r\n\t\t//   lineWidth: lineWidth,\r\n\t\t//   lineStyle: window.LightweightCharts.LineStyle.Solid,\r\n\t\t//   axisLabelVisible: true,\r\n\t\t//   title: 'min price',\r\n\t\t// };\r\n\t\t// var avgPriceLine = {\r\n\t\t//   price: avgPrice,\r\n\t\t//   color: '#be1238',\r\n\t\t//   lineWidth: lineWidth,\r\n\t\t//   lineStyle: window.LightweightCharts.LineStyle.Solid,\r\n\t\t//   axisLabelVisible: true,\r\n\t\t//   title: 'avg price',\r\n\t\t// };\r\n\t\t// var maxPriceLine = {\r\n\t\t//   price: maximumPrice,\r\n\t\t//   color: '#be1238',\r\n\t\t//   lineWidth: lineWidth,\r\n\t\t//   lineStyle: window.LightweightCharts.LineStyle.Solid,\r\n\t\t//   axisLabelVisible: true,\r\n\t\t//   title: 'max price',\r\n\t\t// }\r\n\r\n\t\t//candleSeries.createPriceLine(minPriceLine);\r\n\t\t//candleSeries.createPriceLine(avgPriceLine);\r\n\t\t//candleSeries.createPriceLine(maxPriceLine);\r\n\t\t//chart.timeScale().fitContent();\r\n\r\n\r\n\r\n\t}, 100);\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\r\n\t\t\t<Grid direction=\"row\" container className=\"flexGrow\" spacing={1} style={{ paddingLeft: \"5px\", paddingRight: \"5px\" }}>\r\n\t\t\t\t<Grid item xs={12} sm={12} >\r\n\r\n\t\t\t\t\r\n\t\t\t\t <div id=\"showChartTitle\" style={{ fontSize: \"12px\" }}> </div>\r\n\t\t\t\t</Grid>\r\n\r\n\t\t\t\t<Grid item xs={12} sm={12} >\r\n\t\t\t\t<div id=\"chart\">\r\n\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t</Grid>\r\n\t\t\t</Grid>\r\n\t\t\t\r\n\t\t\r\n\r\n\t\t</>\r\n\r\n\t);\r\n}","import React, {useEffect} from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport { data } from 'jquery';\r\n\r\nimport LineChart from \"./LineChart\";\r\nimport LightChartCom from \"./LightChartCom\";\r\n\r\n\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nexport default function CustomizedDialogs(props) {\r\n\r\n\r\n \r\n  const [open, setOpen] = React.useState(false);\r\n \r\n  var [values, setValues] = React.useState({\r\n    data : [],\r\n    candledata: {}\r\n})\r\n\r\n\r\n \r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" id=\"showCandleChart\" color=\"primary\" style={{display:\"none\"}} onClick={handleClickOpen}>\r\n        Chart \r\n      </Button>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n        {localStorage.getItem('cadleChartSymbol')}   {localStorage.getItem('candlePriceShow')}  ({localStorage.getItem('candleChangeShow')}%)\r\n        <br />\r\n\r\n        {localStorage.getItem('chartInfoDetails') ? <span style={{fontSize:'12px'}}>  \r\n        <b>FoundAt:</b>  {localStorage.getItem('chartInfoDetails') && JSON.parse(localStorage.getItem('chartInfoDetails')).foundAt.substr(0, 16)} &nbsp;&nbsp;\r\n        <b>Buy: </b>{localStorage.getItem('chartInfoDetails') && JSON.parse(localStorage.getItem('chartInfoDetails')).buyExitPrice} &nbsp;&nbsp;\r\n        <b>Sell: </b>{localStorage.getItem('chartInfoDetails') && JSON.parse(localStorage.getItem('chartInfoDetails')).sellEntyPrice} &nbsp;&nbsp;\r\n        <b>Change %: </b>  {localStorage.getItem('chartInfoDetails') && JSON.parse(localStorage.getItem('chartInfoDetails')).perChange} &nbsp;&nbsp;    <br />\r\n        <b>Change on High/Low %: </b>{localStorage.getItem('chartInfoDetails') && JSON.parse(localStorage.getItem('chartInfoDetails')).perChange} &nbsp;&nbsp;\r\n        <b>SquareOffAt:</b>{localStorage.getItem('chartInfoDetails') && JSON.parse(localStorage.getItem('chartInfoDetails')).squareOffAt}\r\n        </span> : \"\"}\r\n        \r\n      \r\n        </DialogTitle>\r\n        <DialogContent dividers id=\"chart\">\r\n\r\n        {/* body data\r\n        <ReactApexChart\r\n              options={props.data && props.data.options}\r\n              series={props.data && props.data.series}\r\n              type=\"bar\"\r\n              width=\"500\"\r\n            /> */}\r\n\r\n          {localStorage.getItem('candleChartData') ?   <ReactApexChart \r\n            options={{\r\n                      chart: {\r\n                        type: 'candlestick',\r\n                        height: 350\r\n                      },\r\n                      title: {\r\n                          text: '',\r\n                          align: 'left'\r\n                      },\r\n                      xaxis: {\r\n                          type: 'datetime',\r\n                      },\r\n                      yaxis: {\r\n                          tooltip: {\r\n                          enabled: true\r\n                          }\r\n                      }\r\n                  }}\r\n                  series={[{\r\n                    data:  localStorage.getItem('candleChartData') && JSON.parse(localStorage.getItem('candleChartData'))\r\n                      \r\n                  }]} \r\n                  type=\"candlestick\" \r\n                  width={500}\r\n                  height={350} \r\n          /> : \"\"}\r\n\r\n\r\n            { localStorage.getItem('candleChartDataInside') ? <ReactApexChart \r\n              options={{\r\n                        chart: {\r\n                          type: 'candlestick',\r\n                          height: 350\r\n                        },\r\n                        title: {\r\n                            text: '',\r\n                            align: 'left'\r\n                        },\r\n                        xaxis: {\r\n                            type: 'datetime',\r\n                        },\r\n                        yaxis: {\r\n                            tooltip: {\r\n                            enabled: true\r\n                            }\r\n                        }\r\n                    }}\r\n                    series={[{\r\n                      data:  localStorage.getItem('candleChartDataInside') && JSON.parse(localStorage.getItem('candleChartDataInside'))\r\n                        \r\n                    }]} \r\n            type=\"candlestick\" \r\n            width={500}\r\n            height={350} \r\n          />: \"\"}\r\n          \r\n          {/* below line chart \r\n          {localStorage.getItem('candleChartData') && localStorage.getItem('vwapDataChart') ? <LineChart candleChartData={JSON.parse(localStorage.getItem('candleChartData'))} percentChange={localStorage.getItem('candleChangeShow')} vwapDataChart={JSON.parse(localStorage.getItem('vwapDataChart'))}/>: \"\"}\r\n           */}\r\n        \r\n\r\n        </DialogContent>\r\n        <DialogActions>\r\n\r\n\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport ChartDialog from './ChartDialog'; \r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\n\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nexport default function CustomizedDialogs(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n\r\n  var foundPatternList = localStorage.getItem('foundPatternList') && JSON.parse(localStorage.getItem('foundPatternList')).reverse(); \r\n  \r\n  const showCandleChart = (candleData, symbol) => {\r\n    candleData  = candleData && candleData.reverse();\r\n    localStorage.setItem('candleChartData', JSON.stringify(candleData))\r\n    localStorage.setItem('cadleChartSymbol', symbol)\r\n    document.getElementById('showCandleChart').click();\r\n  }\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        Patterns {foundPatternList && foundPatternList.length}\r\n      </Button>\r\n      <ChartDialog />\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n        Found Patterns\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n        <Table stickyHeader aria-label=\"sticky table\"  id=\"tabledata\" size=\"medium\">\r\n        <TableRow variant=\"head\" >\r\n                    \r\n                    <TableCell align=\"left\"><b>Sr.</b></TableCell> \r\n                    <TableCell align=\"left\"><b>Stock Name</b></TableCell> \r\n                    <TableCell align=\"left\"><b>Pattern Name</b></TableCell> \r\n                    <TableCell align=\"left\"><b>Time</b></TableCell> \r\n                    <TableCell align=\"left\"><b>BuyAt</b></TableCell>\r\n                    <TableCell align=\"left\"><b>SellAt</b></TableCell>\r\n\r\n                </TableRow>\r\n                <TableBody>\r\n                    \r\n                        {foundPatternList ? foundPatternList.map((idata, index) => (\r\n                            <TableRow hover key={index}>\r\n\r\n                                    <TableCell align=\"left\">{index} </TableCell>\r\n                                    <TableCell align=\"left\"> <Button  variant=\"contained\" style={{ marginLeft: '20px' }} onClick={() => showCandleChart(idata.candleChartData, idata.symbol)}>{idata.symbol} <EqualizerIcon /> </Button></TableCell>\r\n                                    <TableCell align=\"left\" >{idata.pattenName}</TableCell> \r\n                                    <TableCell align=\"left\" >{idata.time}</TableCell> \r\n                                    \r\n                                     <TableCell align=\"left\">{idata.BuyAt} </TableCell>\r\n                                     <TableCell align=\"left\">{idata.SellAt}</TableCell>\r\n                                   \r\n                            </TableRow>\r\n\r\n                        )):  \"\"  }\r\n\r\n                    </TableBody>\r\n\r\n\r\n                </Table>    \r\n\r\n\r\n\r\n         \r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","import { resolveResponse } from \"./ResponseHandler\";\r\nimport AdminService from \"../components/service/AdminService\";\r\nimport TradeConfig from '../components/MyTrade/TradeConfig';\r\nimport * as moment from 'moment';\r\nimport Notify from './Notify';\r\nimport { SMA, RSI, VWAP, BollingerBands } from 'technicalindicators';\r\nimport vwap from 'vwap';\r\nimport e from \"cors\";\r\n\r\n\r\nclass CommonOrderMethod {\r\n\r\n\r\n    speckIt = (text) => {\r\n        var msg = new SpeechSynthesisUtterance();\r\n        msg.text = text.toString();\r\n        window.speechSynthesis.speak(msg);\r\n    }\r\n\r\n    getMinPriceAllowTick = (minPrice) => {\r\n        minPrice = minPrice.toFixed(2);\r\n        // console.log(\"minPrice\",minPrice); \r\n        var wholenumber = parseInt(minPrice.split('.')[0]);\r\n        //  console.log(\"wholenumber\",wholenumber); \r\n        var decimal = parseFloat(minPrice.split('.')[1]);\r\n        // console.log(\"decimal\",decimal); \r\n        var tickedecimal = decimal - decimal % 5;\r\n        minPrice = parseFloat(wholenumber + '.' + tickedecimal);\r\n        //   console.log(\"minPricexxxx\",minPrice); \r\n        return minPrice;\r\n    }\r\n\r\n\r\n    placeSLMOrder = (slmOption) => {\r\n\r\n        var data = {\r\n            \"triggerprice\": slmOption.stopLossPrice,\r\n            \"tradingsymbol\": slmOption.tradingsymbol,\r\n            \"symboltoken\": slmOption.symboltoken,\r\n            \"quantity\": slmOption.quantity,\r\n            \"transactiontype\": slmOption.transactiontype === \"BUY\" ? \"SELL\" : \"BUY\",\r\n            \"exchange\": 'NSE',\r\n            \"producttype\": slmOption.producttype,//\"DELIVERY\" ,\"INTRADAY\" ,\r\n            \"duration\": \"DAY\",\r\n            \"price\": 0,\r\n            \"squareoff\": \"0\",\r\n            \"stoploss\": \"0\",\r\n            \"ordertype\": \"STOPLOSS_MARKET\", //STOPLOSS_MARKET STOPLOSS_LIMIT\r\n            \"variety\": \"STOPLOSS\"\r\n        }\r\n        console.log(\"SLM option data\", data);\r\n        AdminService.placeOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n            //  console.log(data);   \r\n            if (data.status && data.message === 'SUCCESS') {\r\n              //  this.setState({ orderid: data.data && data.data.orderid });\r\n                // this.updateOrderList(); \r\n                this.speckIt('hey Vijay, ' + slmOption.tradingsymbol + \" buy order placed\");\r\n              //  this.getTodayOrder();\r\n                document.getElementById('orderRefresh') && document.getElementById('orderRefresh').click();\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    getStockTokenDetails = (name) => {\r\n        let foundSymbol = ''; \r\n        if(name === \"BANKNIFTY\" || name === \"NIFTY\"){\r\n            const NSE_OPTION_INDEX = localStorage.getItem('staticData') ? JSON.parse(localStorage.getItem('staticData')).NSE_OPTION_INDEX : []; \r\n            let found = NSE_OPTION_INDEX.filter(row => row.exch_seg === \"NSE\" && row.symbol === name.toUpperCase());\r\n            if (found.length) {\r\n                foundSymbol = found[0]; \r\n            }  \r\n        }else{\r\n            const CashStocks = localStorage.getItem('staticData') ? JSON.parse(localStorage.getItem('staticData')).CashStocks : []; \r\n            var uppercaseName = name.toUpperCase() + \"-EQ\";\r\n            let found = CashStocks.filter(row => row.exch_seg === \"NSE\" && row.symbol === uppercaseName);\r\n            if (found.length) {\r\n                foundSymbol = found[0]; \r\n            }  \r\n        }\r\n        return foundSymbol;   \r\n    }\r\n\r\n    updateOrderList = () => {\r\n        AdminService.retrieveOrderBook()\r\n            .then((res) => {\r\n                let data = resolveResponse(res, \"noPop\");\r\n                if (data && data.data) {\r\n                    var orderlist = data.data;\r\n                    orderlist.sort(function (a, b) {\r\n                        return new Date(b.updatetime) - new Date(a.updatetime);\r\n                    });\r\n                    localStorage.setItem('oderbookData', JSON.stringify(orderlist));\r\n                }\r\n            });\r\n    }\r\n    \r\n    getPercentageColor = (percent) => {\r\n        percent = percent * 100;\r\n        var r = percent < 50 ? 255 : Math.floor(255 - (percent * 2 - 100) * 255 / 100);\r\n        var g = percent > 50 ? 255 : Math.floor((percent * 2) * 255 / 100);\r\n        return 'rgb(' + r + ',' + g + ',0)';\r\n    }\r\n\r\n    historyWiseOrderPlace = (sectorItem, orderType, isAutomatic, callback) => {\r\n\r\n        var token = sectorItem.token;\r\n        var symbol = sectorItem.symbol;\r\n\r\n        // if (isAutomatic != \"Automatic\") {\r\n        //     if (!window.confirm(orderType + \" \" + symbol + \" Are you sure ? \")) {\r\n        //         return;\r\n        //     }\r\n        // }\r\n\r\n        var ltpdata = { \"exchange\": \"NSE\", \"tradingsymbol\": symbol, \"symboltoken\": token, }\r\n        AdminService.getLTP(ltpdata).then(res => {\r\n            let ltpres = resolveResponse(res, 'noPop');\r\n            var LtpData = ltpres && ltpres.data;\r\n            console.log(symbol, \" ltd data \", LtpData);\r\n            let quantity = 0;\r\n            if (LtpData && LtpData.ltp) {\r\n                let perTradeExposureAmt = TradeConfig.totalCapital * TradeConfig.perTradeExposurePer / 100;\r\n                quantity = Math.floor(perTradeExposureAmt / LtpData.ltp);\r\n            }\r\n\r\n           if(quantity > 0 && sectorItem.qtyToTake ) {\r\n                quantity = sectorItem.qtyToTake;\r\n           }           \r\n           console.log(symbol, \"  quantity can be order \", sectorItem, quantity);\r\n\r\n            if (quantity) {\r\n                const format1 = \"YYYY-MM-DD HH:mm\";\r\n                var beginningTime = moment('9:15am', 'h:mma').format(format1);\r\n\r\n                console.log(\"beginningTime\", beginningTime);\r\n\r\n                var time = moment.duration(\"75:10:00\");  //21:10:00\"\r\n                var startdate = moment(new Date()).subtract(time);\r\n                var data = {\r\n                    \"exchange\": \"NSE\",\r\n                    \"symboltoken\": token,\r\n                    \"interval\": \"FIVE_MINUTE\", //ONE_DAY FIVE_MINUTE \r\n                    \"fromdate\": moment(startdate).format(format1),\r\n                    \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n                }\r\n\r\n                AdminService.getHistoryData(data).then(res => {\r\n                    let histdata = resolveResponse(res, 'noPop');\r\n                    // console.log(\"candle history\", histdata); \r\n                    if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                        var candleData = histdata.data, clossest = 0, lowerest = 0, highestHigh = 0, lowestLow = 0, highestsum = 0;\r\n                    \r\n                        candleData.reverse();\r\n                        lowestLow = candleData[0][3];\r\n                        highestHigh = candleData[0][2];\r\n                        if (candleData && candleData.length > 0) {\r\n\r\n\r\n                            for (let index = 0; index < 20; index++) {\r\n                                if (candleData[index]) {\r\n                                    clossest += candleData[index][4]; //close  \r\n                                    lowerest += candleData[index][3];  //low\r\n                                    highestsum += candleData[index][2];  //low\r\n                                    if (candleData[index][2] > highestHigh) {\r\n                                        console.log(index, highestHigh, candleData[index][2]);\r\n                                        highestHigh = candleData[index][2];\r\n                                    }\r\n                                    if (candleData[index][3] <= lowestLow) {\r\n                                        lowestLow = candleData[index][3];\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            var candleChartData = [], vwapdata = [], closeingData = [], highData = [], lowData = [], openData = [], valumeData = [], bbdata=[];\r\n                            histdata.data.forEach((element, index) => {\r\n                                candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                                vwapdata.push([element[5], (element[2] + element[3] + element[4]) / 3]);\r\n                                closeingData.push(element[4]);\r\n                                highData.push(element[2]);\r\n                                lowData.push(element[3]);\r\n                                openData.push(element[3]);\r\n                                valumeData.push(element[5]);\r\n                                bbdata.push((element[2] + element[3] + element[4]) / 3);\r\n                            });\r\n\r\n                            var inputRSI = { values: closeingData, period: 14 };\r\n                            var lastRsiValue = RSI.calculate(inputRSI)\r\n                            console.log(symbol, \"lastRsiValue\", lastRsiValue[lastRsiValue.length - 1]);\r\n        \r\n                            var inputVWAP = {\r\n                                open: openData,\r\n                                high: highData,\r\n                                low: lowData,\r\n                                close: closeingData,\r\n                                volume: valumeData\r\n                            };\r\n        \r\n                            var input = {\r\n                            period : 20, \r\n                            values : bbdata,\r\n                            stdDev : 2\r\n                            }\r\n        \r\n                            var bb = BollingerBands.calculate(input); \r\n                            console.log(symbol , \"BB\",input, bb, bb[bb.length-1]);\r\n                            console.log(symbol , \"VWAP\", vwapdata, vwap(vwapdata));\r\n\r\n                            var bbLastValue = bb[bb.length-1]; \r\n\r\n                            \r\n                            let devideLen = candleData.length > 20 ? 20 : candleData.length;\r\n                            var bbmiddleValue = clossest / devideLen;\r\n                            var bblowerValue = lowerest / devideLen;\r\n                            var bbhigerValue = highestsum / devideLen;\r\n\r\n                            var stoploss = 0, stoplossPer = 0;\r\n\r\n                            if (orderType == \"BUY\" && lastRsiValue[lastRsiValue.length - 1] > 60) {\r\n                                stoploss = bblowerValue - (highestHigh - lowestLow) * 3 / 100;\r\n                                stoploss = this.getMinPriceAllowTick(stoploss);\r\n                                stoplossPer = (LtpData.ltp - stoploss) * 100 / LtpData.ltp;\r\n                                \r\n                                console.log(symbol, \"My stoploss\", orderType, \" LTP \", LtpData.ltp);\r\n                                console.log(symbol + \"highestHigh:\", highestHigh, \"lowestLow\", lowestLow, \"stoploss after tick:\", stoploss, \"stoploss%\", stoplossPer);\r\n                                console.log(symbol + \"  close avg middle \", bbmiddleValue, \"lowerest avg\", bblowerValue, \"bbhigerValue\", bbhigerValue);\r\n                       \r\n\r\n                                // //bb stop loss\r\n                                // if(bbLastValue){\r\n                                //     stoploss = bbLastValue.lower - (bbLastValue.upper - bbLastValue.lower) * 3 / 100;\r\n                                //     stoploss = this.getMinPriceAllowTick(stoploss);\r\n                                //     stoplossPer = (LtpData.ltp - stoploss) * 100 / LtpData.ltp;\r\n                                //     console.log(symbol, orderType, \"BB stoploss value\", bbLastValue, \" LTP \", LtpData.ltp);\r\n                                //     console.log(symbol, stoploss, \"stoploss%\", stoplossPer);\r\n                                // }\r\n                               \r\n                    \r\n                            }\r\n\r\n                            if (orderType == \"SELL\"  && lastRsiValue[lastRsiValue.length - 1] < 40) {\r\n                                stoploss = bbhigerValue + (highestHigh - lowestLow) * 3 / 100;\r\n                                stoploss = this.getMinPriceAllowTick(stoploss);\r\n                                stoplossPer = (stoploss - LtpData.ltp) * 100 / LtpData.ltp;\r\n\r\n                                console.log(symbol, orderType, \" LTP \", LtpData.ltp);\r\n                                console.log(symbol + \"highestHigh:\", highestHigh, \"lowestLow\", lowestLow, \"stoploss after tick:\", stoploss, \"stoploss%\", stoplossPer);\r\n                                console.log(symbol + \"  close avg middle \", bbmiddleValue, \"lowerest avg\", bblowerValue, \"bbhigerValue\", bbhigerValue);\r\n                          \r\n                                // //bb stop loss\r\n                                // if(bbLastValue){\r\n                                //     stoploss = bbLastValue.upper + (bbLastValue.upper - bbLastValue.lower) * 3 / 100;\r\n                                //     stoploss = this.getMinPriceAllowTick(stoploss);\r\n                                //     stoplossPer = (stoploss - LtpData.ltp) * 100 / LtpData.ltp;\r\n                                //     console.log(symbol, orderType, \"BB stoploss value\", bbLastValue, \" LTP \", LtpData.ltp);\r\n                                //     console.log(symbol, stoploss, \"stoploss%\", stoplossPer);\r\n                                // }\r\n                               \r\n                            }\r\n\r\n\r\n                            var orderOption = {\r\n                                transactiontype: orderType,\r\n                                tradingsymbol: symbol,\r\n                                symboltoken: token,\r\n                                buyPrice: 0,\r\n                                quantity: quantity,\r\n                                stopLossPrice: stoploss,\r\n                                producttype: sectorItem.producttype\r\n                            }\r\n                            if (quantity) {\r\n\r\n                                this.placeOrderMethod(orderOption, callback);\r\n\r\n                            } else {\r\n                                Notify.showError(symbol + \" stoploss is > 1.5% Rejected\");\r\n                                console.log(symbol + \" its not fullfilled\");\r\n\r\n                            }\r\n                        }\r\n\r\n\r\n                    } else {\r\n                        //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                        Notify.showError(symbol + \" candle data emply\");\r\n                        console.log(symbol + \" candle data emply\");\r\n                        var callData = {\r\n                            \"transactiontype\": orderType,//BUY OR SELL\r\n                            \"tradingsymbol\": symbol,\r\n                            \"symboltoken\": token,\r\n                            \"status\": false\r\n                        }\r\n                        callback(callData);\r\n                    }\r\n                })\r\n\r\n            } else {\r\n                Notify.showError(quantity + \"  quantity |  \" + symbol + \" \" + orderType + \" Rejected\");\r\n            }\r\n        }).catch(function (error) {\r\n\r\n        })\r\n        // await new Promise(r => setTimeout(r, 2000)); \r\n    }\r\n\r\n    getMinPriceAllowTick = (minPrice) => {\r\n        minPrice = minPrice.toFixed(2);\r\n        // console.log(\"minPrice\",minPrice); \r\n        var wholenumber = parseInt(minPrice.split('.')[0]);\r\n        //  console.log(\"wholenumber\",wholenumber); \r\n        var decimal = parseFloat(minPrice.split('.')[1]);\r\n        // console.log(\"decimal\",decimal); \r\n        var tickedecimal = decimal - decimal % 5;\r\n        minPrice = parseFloat(wholenumber + '.' + tickedecimal);\r\n        //   console.log(\"minPricexxxx\",minPrice); \r\n        return minPrice;\r\n    }\r\n    \r\n\r\n    placeOptionOrder = (orderOption) => {\r\n        var data = {\r\n            \"transactiontype\": orderOption.transactiontype,//BUY OR SELL\r\n            \"tradingsymbol\": orderOption.tradingsymbol,\r\n            \"symboltoken\": orderOption.symboltoken,\r\n            \"quantity\": orderOption.quantity,\r\n            \"ordertype\": orderOption.buyPrice === 0 ? \"MARKET\" : \"LIMIT\",\r\n            \"price\": orderOption.buyPrice,\r\n            \"producttype\": orderOption.producttype ? orderOption.producttype : \"INTRADAY\",//\"DELIVERY\",\r\n            \"duration\": \"DAY\",\r\n            \"squareoff\": \"0\",\r\n            \"stoploss\": \"0\",\r\n            \"exchange\": orderOption.exchange ? orderOption.exchange : \"NSE\",\r\n            \"variety\": \"NORMAL\"\r\n        }\r\n        console.log(\"place order option\", data);\r\n\r\n        AdminService.placeOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n            //  console.log(data);   \r\n            // if (data.status && data.message === 'SUCCESS') {\r\n            //     if (orderOption.stopLossPrice) {\r\n            //         setTimeout(() => {\r\n            //             this.placeOptionSLMOrder(orderOption);\r\n            //         }, 10000);\r\n            //     }\r\n            //     this.speckIt('hey Vijay, ' + orderOption.tradingsymbol + \" \" +orderOption.transactiontype +\" order placed\");\r\n             \r\n            //     var callData = {\r\n            //         \"token\": orderOption.symboltoken,\r\n            //         \"status\": true\r\n            //     }\r\n            // }\r\n\r\n        })\r\n    }\r\n\r\n    placeOptionSLMOrder = (slmOption) => {\r\n\r\n        var data = {\r\n            \"triggerprice\": slmOption.stopLossTriggerPrice,\r\n            \"tradingsymbol\": slmOption.tradingsymbol,\r\n            \"symboltoken\": slmOption.symboltoken,\r\n            \"quantity\": slmOption.netqty,\r\n            \"transactiontype\": \"SELL\", \r\n            \"exchange\": slmOption.exchange,\r\n            \"producttype\": slmOption.producttype, \r\n            \"duration\": \"DAY\",\r\n            \"price\": slmOption.stopLossPrice,\r\n            \"squareoff\": \"0\",\r\n            \"stoploss\": \"0\",\r\n            \"ordertype\": \"STOPLOSS_MARKET\", //STOPLOSS_MARKET STOPLOSS_LIMIT\r\n            \"variety\": \"STOPLOSS\"\r\n        }\r\n        console.log(\"SLM option data\", data);\r\n        AdminService.placeOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n            //  console.log(data);   \r\n            if (data.status && data.message === 'SUCCESS') {\r\n             //   this.setState({ orderid: data.data && data.data.orderid });\r\n                // this.updateOrderList(); \r\n                this.speckIt('hey Vijay, ' + slmOption.tradingsymbol + \" stop loss order placed\");\r\n            //    this.getTodayOrder();\r\n                document.getElementById('orderRefresh') && document.getElementById('orderRefresh').click();\r\n                this.updateOrderList(); \r\n            }\r\n        })\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n    placeOrderMethod = (orderOption, callback) => {\r\n        var data = {\r\n            \"transactiontype\": orderOption.transactiontype,//BUY OR SELL\r\n            \"tradingsymbol\": orderOption.tradingsymbol,\r\n            \"symboltoken\": orderOption.symboltoken,\r\n            \"quantity\": orderOption.quantity,\r\n            \"ordertype\": orderOption.buyPrice === 0 ? \"MARKET\" : \"LIMIT\",\r\n            \"price\": orderOption.buyPrice,\r\n            \"producttype\": orderOption.producttype ,//\"DELIVERY\" \"INTRADAY\",\r\n            \"duration\": \"DAY\",\r\n            \"squareoff\": \"0\",\r\n            \"stoploss\": \"0\",\r\n            \"exchange\": \"NSE\",\r\n            \"variety\": \"NORMAL\"\r\n        }\r\n        console.log(\"place order option\", data);\r\n\r\n       \r\n\r\n        AdminService.placeOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n            //  console.log(data);   \r\n            // if (data.status && data.message === 'SUCCESS') {\r\n            //     if (orderOption.stopLossPrice) {\r\n            //         this.placeSLMOrder(orderOption);\r\n            //     }\r\n            //     this.speckIt('hey Vijay, ' + orderOption.tradingsymbol + \" \" +orderOption.transactiontype +\" order placed\");\r\n             \r\n            //     var callData = {\r\n            //         \"token\": orderOption.symboltoken,\r\n            //         \"status\": true\r\n            //     }\r\n            //     callback(callData);\r\n            //     return;  \r\n            // }\r\n\r\n        })\r\n    }\r\n\r\n    placeSLMOrder = (slmOption) => {\r\n\r\n        var data = {\r\n            \"triggerprice\": slmOption.stopLossPrice,\r\n            \"tradingsymbol\": slmOption.tradingsymbol,\r\n            \"symboltoken\": slmOption.symboltoken,\r\n            \"quantity\": slmOption.quantity,\r\n            \"transactiontype\": slmOption.transactiontype === \"BUY\" ? \"SELL\" : \"BUY\",\r\n            \"exchange\": 'NSE',\r\n            \"producttype\": slmOption.producttype,//\"DELIVERY\" \"INTRADAY\",\r\n            \"duration\": \"DAY\",\r\n            \"price\": 0,\r\n            \"squareoff\": \"0\",\r\n            \"stoploss\": \"0\",\r\n            \"ordertype\": \"STOPLOSS_MARKET\", //STOPLOSS_MARKET STOPLOSS_LIMIT\r\n            \"variety\": \"STOPLOSS\"\r\n        }\r\n        console.log(\"SLM option data\", data);\r\n        AdminService.placeOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n            //  console.log(data);   \r\n            if (data.status && data.message === 'SUCCESS') {\r\n             //   this.setState({ orderid: data.data && data.data.orderid });\r\n                // this.updateOrderList(); \r\n                this.speckIt('hey Vijay, ' + slmOption.tradingsymbol + \" stop loss order placed\");\r\n            //    this.getTodayOrder();\r\n                document.getElementById('orderRefresh') && document.getElementById('orderRefresh').click();\r\n                this.updateOrderList(); \r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport default new CommonOrderMethod();\r\n\r\n   ","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport * as Menu from './LeftMenuBar';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport MyLogo from './mylogo.png';\r\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport InvertColor from '../utils/InvertColor';\r\nimport FoundPatternDialog from '../components/MyTrade/FoundPatternDialog'\r\nimport AdminService from \"./service/AdminService\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport CommonOrderMethod from \"../utils/CommonMethods\";\r\nimport Spinner from \"react-spinner-material\";\r\nimport Notify from '../utils/Notify';\r\nimport Hidden from '@material-ui/core/Hidden';\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    endMenu: {\r\n        display: 'flex',\r\n        flexDirection: 'row reverse'\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        //backgroundColor: '#f44336'\r\n    },\r\n    appBarShift: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n}));\r\n\r\nexport default function PostLoginNavBar(props) {\r\n\r\n    const [values, setValues] = React.useState({\r\n        buyFlag: true,\r\n        sellFlag: true,\r\n        searchSymbol: \"\",\r\n        producttype: \"INTRADAY\"\r\n\r\n    });\r\n\r\n    const CashStocks = localStorage.getItem('staticData') ? JSON.parse(localStorage.getItem('staticData')).CashStocks : []; \r\n   \r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const [open, setOpen] = React.useState(false);\r\n    const autoSearchList = [];\r\n\r\n    function handleDrawerOpen() {\r\n        setOpen(true);\r\n    }\r\n\r\n    function handleDrawerClose() {\r\n        setOpen(false);\r\n    }\r\n\r\n    function handleInput(e) {\r\n        setValues({ ...values, ['searchSymbol']: e.target.value });\r\n        // AdminService.autoCompleteSearch(e.target.value).then(searchRes => {\r\n        //     let searchResdata = searchRes.data;\r\n        //     if (e.target.value) {\r\n        //         var uppercaseName = e.target.value.toUpperCase() + \"-EQ\";\r\n        //         var found = searchResdata.filter(row => row.exch_seg === \"NSE\" && row.lotsize === \"1\" && row.symbol === uppercaseName);\r\n        //         //  console.log(\"found\", found[0] && found[0].symbol); \r\n        //         if (found.length) {\r\n\r\n        //             setValues({ ...values, ['searchSymbol']: found[0].symbol, ['token']: found[0].token });\r\n        //         }\r\n        //     }\r\n        // })\r\n        var uppercaseName = e.target.value.toUpperCase() + \"-EQ\";\r\n        var found = CashStocks.filter(row => row.exch_seg === \"NSE\" && row.lotsize === \"1\" && row.symbol === uppercaseName);\r\n        if (found.length) {\r\n            setValues({ ...values, ['searchSymbol']: found[0].symbol, ['token']: found[0].token });\r\n        }        \r\n    }\r\n\r\n    function handleInputQty(e) {\r\n        setValues({ ...values, ['qtyToTake']: e.target.value });\r\n    }\r\n\r\n    \r\n    function handleProductType(e) {\r\n        setValues({ ...values, ['producttype']: e.target.value });\r\n        console.log( e.target.value); \r\n    }\r\n\r\n\r\n    function callbackAfterOrderDone(order) {\r\n        setValues({ ...values, ['buyFlag']: order.status });\r\n        setValues({ ...values, ['sellFlag']: order.status });\r\n        setValues({ ...values, ['searchSymbol']: '' });\r\n    }\r\n\r\n    function handleClick(type) {\r\n\r\n        if (values.token && values.searchSymbol) {\r\n            if (type == 'BUY') {\r\n                setValues({ ...values, ['buyFlag']: false });\r\n                var symbolInfo = {\r\n                    token: values.token,\r\n                    symbol: values.searchSymbol,\r\n                    qtyToTake: values.qtyToTake,\r\n                    producttype: values.producttype\r\n                }\r\n                CommonOrderMethod.historyWiseOrderPlace(symbolInfo, 'BUY', \"no\", callbackAfterOrderDone);\r\n            }\r\n\r\n            if (type == 'SELL') {\r\n                setValues({ ...values, ['sellFlag']: false });\r\n                var symbolInfo = {\r\n                    token: values.token,\r\n                    symbol: values.searchSymbol,\r\n                    qtyToTake: values.qtyToTake,\r\n                    producttype: values.producttype\r\n                }\r\n                CommonOrderMethod.historyWiseOrderPlace(symbolInfo, 'SELL', \"no\", callbackAfterOrderDone);\r\n            }\r\n        } else {\r\n            Notify.showError(\"Type Symbol!!!\");\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={clsx(classes.appBar, {\r\n                    [classes.appBarShift]: open,\r\n                })}\r\n\r\n            >\r\n                <Toolbar>\r\n\r\n                    <IconButton\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        edge=\"start\"\r\n                        className={clsx(classes.menuButton, open && classes.hide)}\r\n\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n\r\n                    <Grid\r\n                        justify=\"space-between\"\r\n                        container\r\n                    >\r\n                        <Grid item >\r\n                            {/* <Typography variant=\"h6\" noWrap>\r\n                          M-Trade\r\n                         </Typography> */}\r\n                            <Button href={\"/mtrade/#/home\"}>\r\n                                <img alt=\"logo\" style={{ width: \"125px\" }} src={MyLogo} />\r\n                            </Button>\r\n\r\n                        </Grid>\r\n\r\n                        <Hidden xsDown>\r\n                            <Grid item  >\r\n\r\n                                <Grid\r\n                                    justify=\"space-between\"\r\n                                    container\r\n                                    spacing={2}\r\n                                >\r\n\r\n                                    {/* <Grid item  >\r\n                                        <Typography style={{ marginTop: '20px', fontSize: \"12px\" }} variant=\"h6\" noWrap >\r\n                                            <span id=\"niftySpid\"  > </span>  &nbsp;&nbsp;  <span id=\"bankniftySpid\" onClick={() => props.LoadSymbolDetails(\"BANKNIFTY\")} > </span>\r\n                                        </Typography>\r\n                                    </Grid> */}\r\n\r\n                                    <Grid item>\r\n                                        <TextField label=\"Search Symbol\" name=\"searchSymbol\" value={values.searchSymbol} onChange={handleInput} />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <FormControl style={styles.selectStyle} style={{ marginTop: '3px' }} >\r\n                                            <InputLabel htmlFor=\"gender\">Order Type</InputLabel>\r\n                                            <Select value={values.producttype} name=\"producttype\" onChange={handleProductType}>\r\n                                                <MenuItem value={\"INTRADAY\"}>Interaday</MenuItem>\r\n                                                <MenuItem value={\"DELIVERY\"}>Delivery</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <TextField label=\"Qty\" style={{ width: \"50px\" }} type=\"number\" name=\"qtyToTake\" value={values.qtyToTake} onChange={handleInputQty} />\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        {values.buyFlag ? <Button variant=\"contained\" color=\"primary\" style={{ marginLeft: '10px', marginTop: '10px' }} onClick={() => handleClick(\"BUY\")}>Buy</Button> : <Spinner />}\r\n                                    </Grid>\r\n\r\n                                    <Grid item>\r\n                                        {values.sellFlag ? <Button variant=\"contained\" color=\"secondary\" style={{ marginLeft: '10px', marginTop: '10px' }} onClick={() => handleClick(\"SELL\")}>SELL</Button> : <Spinner />}\r\n                                    </Grid>\r\n\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n\r\n                        </Hidden>\r\n\r\n                        <Hidden xsDown smDown>\r\n\r\n\r\n\r\n                            <Grid item >\r\n\r\n                                <Grid\r\n                                    container\r\n                                    spacing={1}\r\n                                    direction=\"row\"\r\n\r\n                                >\r\n\r\n                                    <Grid item>\r\n                                        <Button variant=\"outlined\"  color=\"primary\" href={\"/mtrade/#/market-depth-mobile\"}>\r\n                                            Depth \r\n                                        </Button>\r\n                                    </Grid>\r\n\r\n                                    <Grid item>\r\n                                        <Button variant=\"outlined\"  target={'_blank'}  color=\"primary\" href={\"/mtrade/#/strong-charts\"}>\r\n                                            Charts <OpenInNewIcon />\r\n                                        </Button>\r\n                                    </Grid>\r\n\r\n\r\n                                    <Grid item>\r\n                                        <Button variant=\"outlined\" target={'_blank'} color=\"primary\" href={\"/mtrade/#/sector-heat-map2\"}>\r\n                                            Sector <OpenInNewIcon />\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Button variant=\"outlined\" color=\"primary\" target={'_blank'} href={\"/mtrade/#/find-fast-movement2\"}>\r\n                                            Pattern <OpenInNewIcon />\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Button variant=\"contained\"  autoFocus href={\"/mtrade/#/track145\"}>\r\n                                            145\r\n                                        </Button>\r\n                                    </Grid>\r\n\r\n                                    <Grid item>\r\n                                        <Button variant=\"contained\" autoFocus href={\"/mtrade/#/order-watchlist\"} color=\"primary\">\r\n                                            Order WL\r\n                                        </Button>\r\n                                    </Grid>\r\n\r\n                                    <Grid item>\r\n                                        <Button variant=\"contained\" autoFocus href={\"/mtrade/#/position-new\"} color=\"primary\">\r\n                                            Position\r\n                                        </Button>\r\n                                    </Grid>\r\n\r\n                                  \r\n\r\n\r\n\r\n\r\n                                </Grid>\r\n\r\n\r\n\r\n                            </Grid>\r\n\r\n                        </Hidden>\r\n\r\n\r\n                    </Grid>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                className={classes.drawer}\r\n                variant=\"persistent\"\r\n                anchor=\"left\"\r\n                open={open}\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <div className={classes.drawerHeader}>\r\n                    {/* <img style={{ width: \"207px\" }} src={MyLogo} /> */}\r\n\r\n                    <List>{Menu.LogoutMenu}</List>                    \r\n\r\n                    <IconButton onClick={handleDrawerClose}  >\r\n                        {theme.direction === 'ltr' ? <ChevronLeftIcon style={{ color: \"gray\" }} /> : <ChevronRightIcon style={{ color: \"gray\" }} />}\r\n                    </IconButton>\r\n                </div>\r\n\r\n\r\n\r\n                <Divider />\r\n                <List>{Menu.AdminMenuList}</List>\r\n\r\n                {/* <Divider />\r\n                <List>  <InvertColor /></List> */}\r\n{/* \r\n                <Divider />\r\n                <List>{Menu.LogoutMenu}</List> */}\r\n\r\n                        <Divider />\r\n                   <InvertColor />\r\n\r\n\r\n\r\n            </Drawer>\r\n            <main\r\n                className={clsx(classes.content, {\r\n                    [classes.contentShift]: open,\r\n                })}\r\n            >\r\n                <div className={classes.drawerHeader} />\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst styles = {\r\n    formContainer: {\r\n        display: 'flex',\r\n        flexFlow: 'row wrap'\r\n    },\r\n\r\n    textStyle: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n\r\n    },\r\n    imgStyle: {\r\n        display: 'flex'\r\n    },\r\n\r\n    selectStyle: {\r\n        minWidth: '100%',\r\n        marginBottom: '10px'\r\n    },\r\n    MuiTextField: {\r\n        overflowY: 'scroll',\r\n        fontSize: \"12px\",\r\n        maxHeight: \"50px\",\r\n\r\n    },\r\n    footerButton: {\r\n        position: 'fixed',\r\n        left: 0,\r\n        bottom: '20px',\r\n        width: '100%',\r\n        textAlign: 'right'\r\n    }\r\n\r\n};","import 'date-fns';\r\nimport React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport Notify from \"./Notify\";\r\n\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardTimePicker,\r\n  KeyboardDatePicker,\r\n  KeyboardDateTimePicker\r\n} from '@material-ui/pickers';\r\n\r\nfunction MaterialUIPickers(props) {\r\n\r\n  //var d = new Date(); \r\n  //d.setHours(0,0,0,0);\r\n\r\n  // The first commit of Material-UI\r\n  var startd = new Date(); \r\n  startd.setHours(9,0,0,0);\r\n  startd.setMinutes(15,0,0,0);\r\n\r\n  // The first commit of Material-UI\r\n  var [selectedStartDate, setSelectedStartDate] = React.useState(startd);\r\n  var endd = new Date(); \r\n  endd.setHours(15,0,0,0);\r\n  endd.setMinutes(30,0,0,0);\r\n\r\n  var [selectedEndDate, setSelectedEndDate] = React.useState(endd);\r\n\r\n  const handleStartDateChange = date => {\r\n    setSelectedStartDate(date);\r\n    props.callbackFromParent.myCallback(date,\"START_DATE\");\r\n  //  var startDateMili = new Date(date).getTime(); \r\n//    document.getElementById(\"startDateMili\").value = startDateMili; \r\n//    var endDateMili = document.getElementById(\"endDateMili\").value; \r\n    // if(startDateMili > endDateMili  ){\r\n    //   Notify.showError(\"Start date time can't be grater than end date time.\");\r\n    // }\r\n  };\r\n\r\n\r\n\r\n  const handleEndDateChange = date => {\r\n    setSelectedEndDate(date);\r\n    props.callbackFromParent.myCallback(date,\"END_DATE\");\r\n  //  var endDateMili = new Date(date).getTime(); \r\n  //  document.getElementById(\"endDateMili\").value = endDateMili; \r\n\r\n  //  var startDateMili = document.getElementById(\"startDateMili\").value; \r\n  //  if(endDateMili  < startDateMili){\r\n  //     Notify.showError(\"End Date time can't be less than start date time.\");\r\n  //   }\r\n   \r\n  };\r\n\r\n  // var selectedDate =  document.getElementById(\"startDateMili\") && document.getElementById(\"startDateMili\").value; \r\n  // if(props.callbackFromParent && props.callbackFromParent.startDate){\r\n  //   selectedStartDate = new Date(props.callbackFromParent.startDate).getTime(); \r\n  //  // document.getElementById(\"startDateMili\").value = props.callbackFromParent.startDate;\r\n  // }\r\n\r\n  // var endDateMili =  document.getElementById(\"endDateMili\") && document.getElementById(\"endDateMili\").value; \r\n  // //endDateMili ==''\r\n  // if(props.callbackFromParent && props.callbackFromParent.endDate){\r\n  //   selectedEndDate = new Date(props.callbackFromParent.endDate).getTime();  \r\n  //   //document.getElementById(\"endDateMili\").value = props.callbackFromParent.endDate;\r\n\r\n  // }\r\n\r\n return (\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <Grid containers>\r\n        {/* KeyboardDateTimePicker */}\r\n        <KeyboardDatePicker\r\n         // disableFuture=\"true\"\r\n          margin=\"normal\"\r\n          style={{width:\"140px\"}}\r\n         // required={true}\r\n          id=\"date-picker-dialog\"\r\n          label={'Start Date'}\r\n         // format='dd-MM-yyyy HH:mm:ss'\r\n         format='dd-MM-yyyy'\r\n         value={selectedStartDate}\r\n          onChange={handleStartDateChange}\r\n          KeyboardButtonProps={{\r\n            'aria-label': 'change date',\r\n          }}\r\n        />\r\n          &nbsp;&nbsp;\r\n         <KeyboardDatePicker\r\n           style={{width:\"140px\"}}\r\n        // disableFuture=\"true\"\r\n         margin=\"normal\"\r\n       //  required={true}\r\n         id=\"date-picker-dialog\"\r\n         label={'End Date'}\r\n       //  format='dd-MM-yyyy HH:mm:ss'\r\n         format='dd-MM-yyyy'\r\n         value={selectedEndDate}\r\n         onChange={handleEndDateChange}\r\n         KeyboardButtonProps={{\r\n           'aria-label': 'change date',\r\n         }}\r\n        />\r\n        \r\n       \r\n        \r\n      </Grid>\r\n    </MuiPickersUtilsProvider>\r\n  );\r\n}\r\n\r\n\r\nexport default  MaterialUIPickers; \r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n}));\r\n\r\n\r\n\r\nexport default function SimpleExpansionPanel(props) {\r\n  const classes = useStyles();\r\n\r\n  var data = props.data; \r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ExpansionPanel defaultExpanded={false} >\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography> {data.title} ({data.list.length})</Typography>\r\n\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails>\r\n        \r\n\r\n          <div style={{ overflowY: 'scroll', width:\"100%\", height: \"50vh\" }}>\r\n              {data && data.list.length ? data.list.map((row, i)  => (\r\n                  <>\r\n                      {row ? <ListItem  button style={{ fontSize: '12px', padding: '0px', paddingLeft: '5px', paddingRight: '5px' }}  >\r\n                          <ListItemText style={{ color: !row.nc || row.nc == 0 ? \"\" : row.nc > 0 ? '#20d020' : \"#e66e6e\", background:row.highlisht ? \"#375a00\": \"\"}} onClick={() => data.LoadSymbolDetails(row.symbol)} primary={row.symbol} /> {row.ltp} ({row.nc}%)\r\n                      </ListItem> : \"\"}\r\n                      \r\n                  </>\r\n              )) : ''}\r\n          </div>\r\n\r\n         \r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n     \r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n}));\r\n\r\n\r\n\r\nexport default function SimpleExpansionPanel(props) {\r\n  const classes = useStyles();\r\n\r\n  var data = props.data; \r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ExpansionPanel defaultExpanded={ false } >\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography> {data.title} ({data.list && data.list.length})</Typography>\r\n\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails>\r\n        \r\n\r\n          <div style={{ overflowY: 'scroll', width:\"100%\", height: \"50vh\" }}>\r\n              {data && data.list ? data.list.map((row, i)  => (\r\n                  <>\r\n                      {/* {row ? \r\n                      <div  button style={{ fontSize: '10px', padding: '0px', paddingLeft: '5px', paddingRight: '5px' }}  >\r\n\r\n                        <button >onClick={() => data.LoadSymbolDetails(row.symbol)}   {row.symbol} {row.orderType} At {row.foundAt} </button>\r\n\r\n                      </div> : \"\"} */}\r\n\r\n                      {row ? <ListItem  button style={{ fontSize: '10px', padding: '0px', paddingLeft: '5px', paddingRight: '5px' }}  >\r\n                          <ListItemText style={{ color: !row.nc || row.nc == 0 ? \"\" : row.nc > 0 ? '#20d020' : \"#e66e6e\", fontSize: '10px'}} onClick={() => data.LoadSymbolDetails(row.symbol)} primary={row.symbol +\" \"+row.orderType} /> <span style={{fontSize: '14px'}}>{row.ltp} ({row.nc}%)  <br /> At {row.foundAt} </span> \r\n                      </ListItem> : \"\"}\r\n                      \r\n                  </>\r\n              )) : ''}\r\n          </div>\r\n\r\n         \r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n     \r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { Button } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n}));\r\n\r\n\r\n\r\nexport default function SimpleExpansionPanel(props) {\r\n  const classes = useStyles();\r\n\r\n  var data = props.data; \r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ExpansionPanel defaultExpanded={ false } >\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography> {data.title} ({data.list && data.list.length})</Typography>\r\n\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails>\r\n        \r\n\r\n          <div style={{ overflowY: 'scroll', width:\"100%\", height: \"50vh\" }}>\r\n              {data && data.list ? data.list.map((row, i)  => (\r\n                  <>\r\n                      {/* {row ? \r\n                      <div  button style={{ fontSize: '10px', padding: '0px', paddingLeft: '5px', paddingRight: '5px' }}  >\r\n\r\n                        <button >onClick={() => data.LoadSymbolDetails(row.symbol)}   {row.symbol} {row.orderType} At {row.foundAt} </button>\r\n\r\n                      </div> : \"\"} */}\r\n\r\n                      {row ? <ListItem  onClick={() => data.LoadSymbolDetails(row.symbol)} button style={{  padding: '0px', paddingLeft: '5px', paddingRight: '5px' }}  >\r\n                          <p style={{ color: !row.nc || row.nc == 0 ? \"\" : row.nc > 0 ? '#20d020' : \"#e66e6e\", fontSize: '16px'}}  > \r\n                          \r\n                          {row.symbol} {row.ltp} ({row.nc}%)   <br /> \r\n                 \r\n                          Tot Buy Bids: {row.totalBuyQuantity}    <br />\r\n                          Tol Sell Bids: {row.totalSellQuantity}    <br />\r\n                          DeliveryToTraded {row.deliveryToTradedQuantity}% \r\n                          </p>\r\n                          \r\n                      </ListItem> : \"\"}\r\n                      \r\n                  </>\r\n              )) : ''}\r\n          </div>\r\n\r\n         \r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n     \r\n    </div>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport Typography from '@mui/material/Typography';\r\nimport Box from '@mui/material/Box';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport \"./ViewStyle.css\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.number.isRequired,\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    'aria-controls': `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nexport default function BasicTabs(props) {\r\n\r\n  const { cursor, onSelectItem, autoSearchList, LoadSymbolDetails, symbolList, onChange, onChangeWatchlist, search, handleKeyDown, selectedWatchlist, totalWatchlist } = props.data;\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  var [values, setValues] = React.useState({\r\n    searchedSymbolList: symbolList, \r\n    // gainerList : localStorage.getItem('gainerList') && JSON.parse(localStorage.getItem('gainerList')) || [],\r\n    // looserList : localStorage.getItem('looserList') && JSON.parse(localStorage.getItem('looserList')) || [],    \r\n  });\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const filterWatchlistBySearch = (e) => {\r\n\r\n    console.log(\"e.target.value\", e.target.value);\r\n    if (!e.target.value) {\r\n      setValue({ searchedSymbolList: symbolList });\r\n    } else {\r\n\r\n      // var foundLive = this.state.listofItem.filter(row => row == e.target.value );\r\n      // this.setState({ [e.target.name]: e.target.value }); \r\n      // this.setState({searchedList: foundLive})        \r\n\r\n      let matchList = [];\r\n      for (let i = 0; i < symbolList.length; i++) {\r\n        let stock = symbolList[i];\r\n        if (stock && stock.name.includes(e.target.value)) {\r\n          matchList.push(stock);\r\n        }\r\n      }\r\n      setValue({ searchedSymbolList: matchList });\r\n    }\r\n  }\r\n\r\n\r\n  var gainerList =  props.data.gainerList ? props.data.gainerList : []; \r\n  var looserList =  props.data.looserList ? props.data.looserList : []; \r\n  \r\n\r\n  \r\n  return (\r\n    <Box sx={{ width: '100%'}}>\r\n      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n        <Tabs value={value} onChange={handleChange} aria-label=\"basic tabs example\" style={{overflowY: 'scroll'}}>\r\n          <Tab label=\"My WL\" {...a11yProps(0)} />\r\n          <Tab label={gainerList && gainerList.length + \" Gainner\"} {...a11yProps(1)} />\r\n          <Tab  label={looserList && looserList.length + \" Looser\"} {...a11yProps(2)} />\r\n          <Tab label=\"Fevrate\" {...a11yProps(3)} />\r\n          \r\n        </Tabs>\r\n      </Box>\r\n      <TabPanel value={value} index={0}>\r\n\r\n\r\n        <div style={{ marginLeft: '5px' }}>\r\n          <FormControl style={{ width: \"100%\" }} >\r\n            <InputLabel htmlFor=\"gender\">Select Watchlist</InputLabel>\r\n            <Select value={selectedWatchlist} name=\"selectedWatchlist\" onChange={onChangeWatchlist}>\r\n              <MenuItem value={\"selectall\"}>{\"Select All\"}</MenuItem>\r\n\r\n              {totalWatchlist && totalWatchlist.map(element => (\r\n                <MenuItem value={element}>{element}</MenuItem>\r\n              ))\r\n              }\r\n\r\n            </Select>\r\n          </FormControl>\r\n\r\n\r\n          <TextField\r\n            style={{ width: \"100%\" }}\r\n           // onChange={filterWatchlistBySearch}\r\n            label={\"Filter Symbol\"}\r\n            margin=\"normal\"\r\n            variant=\"standard\"\r\n            name=\"search\"\r\n            onKeyDown={handleKeyDown}\r\n            value={search}\r\n          />\r\n\r\n\r\n        </div>\r\n\r\n\r\n        <div style={{ overflowY: 'scroll', height: \"75vh\" }} >\r\n\r\n          {symbolList && symbolList.length ? symbolList.map((row, i) => (\r\n            <>\r\n              <ListItem onKeyDown={handleKeyDown} button selected={cursor === i ? 'active' : null}\r\n\r\n                style={{ fontSize: '12px', padding: '0px', paddingLeft: '5px', paddingRight: '5px' }} >\r\n\r\n                {cursor === i ? localStorage.setItem(\"selectedKeyRow\", JSON.stringify(row)) : \"\"}\r\n\r\n                <Button style={{ color: !row.nc || row.nc == 0 ? \"\" : row.nc > 0 ? '#20d020' : \"#e66e6e\" }} onClick={() => LoadSymbolDetails(row.symbol, i)} >\r\n                 \r\n                  <div style={{textAlign:\"left\"}}>  {row.name} </div> \r\n                  &nbsp; &nbsp; &nbsp;\r\n                  <div style={{textAlign:\"right\"}}>  {row.ltp} ({row.nc}%)  </div>\r\n                  </Button>\r\n                 \r\n\r\n\r\n              </ListItem>\r\n\r\n            </>\r\n          )) : ''}\r\n        </div>\r\n\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n      <div style={{ overflowY: 'scroll', height: \"75vh\" }} >\r\n\r\n        {gainerList && gainerList.length ? gainerList.map((row, i) => (\r\n          <>\r\n            <ListItem onKeyDown={handleKeyDown} button selected={cursor === i ? 'active' : null}\r\n\r\n              style={{ fontSize: '12px', padding: '0px', paddingLeft: '5px', paddingRight: '5px' }} >\r\n\r\n              {cursor === i ? localStorage.setItem(\"selectedKeyRow\", JSON.stringify(row)) : \"\"}\r\n\r\n              <Button title={\"Found At: \" + row.foundAt}  style={{ color: !row.nc || row.nc == 0 ? \"\" : row.nc > 0 ? '#20d020' : \"#e66e6e\" }} onClick={() => LoadSymbolDetails(row.name, i)}> {row.name} {row.ltp} ({row.nc}%) {row.sector.split(' ')[1]} </Button>\r\n\r\n\r\n            </ListItem>\r\n\r\n          </>\r\n        )) : ''}\r\n        </div>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}> \r\n        <div style={{ overflowY: 'scroll', height: \"75vh\" }} >\r\n\r\n          {looserList && looserList.length ? looserList.map((row, i) => (\r\n            <>\r\n              <ListItem onKeyDown={handleKeyDown} button selected={cursor === i ? 'active' : null}\r\n\r\n                style={{ fontSize: '12px', padding: '0px', paddingLeft: '5px', paddingRight: '5px' }} >\r\n\r\n                {cursor === i ? localStorage.setItem(\"selectedKeyRow\", JSON.stringify(row)) : \"\"}\r\n\r\n                 <Button title={\"Found At: \" + row.foundAt} style={{ color: !row.nc || row.nc == 0 ? \"\" : row.nc > 0 ? '#20d020' : \"#e66e6e\" }} onClick={() => LoadSymbolDetails(row.name, i)}> {row.name} {row.ltp} ({row.nc}%) {row.sector.split(' ')[1]} </Button>\r\n\r\n\r\n              </ListItem>\r\n\r\n            </>\r\n          )) : ''}\r\n          </div>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={3}>\r\n        Fevrate list\r\n      </TabPanel>\r\n    </Box>\r\n  );\r\n}","import axios from \"axios\";\r\nconst performServerAction = axios.create({\r\n    baseURL: ''\r\n  });\r\nexport default performServerAction;","import * as actionTypes from \"./types\";\r\nimport performServerAction from \"../api\"\r\nimport AuthService from \"../components/service/AuthService\";\r\n\r\nexport const setPackLoaded = ()=> async dispatch=> {\r\n    var data = { allPacks:true, portal: true}; \r\n    const response = await performServerAction.post('getPrepaidPacks', data)\r\n    \r\n    dispatch( { type: actionTypes.SET_PACK_LOADED,payload:response });\r\n  };\r\n  export const getPackById = (id)=> async dispatch=> {\r\n    try{\r\n     \r\n\r\n      //add getPrepaidPacksById after / in sprint 7 and 8\r\n     // const response = await performServerAction.post('/', { productId : id}, AuthService.getHeader());\r\n    \r\n     //sprint 8 & 9\r\n      const response = await performServerAction.get('?productId='+id, AuthService.getHeader());\r\n\r\n      return  dispatch( { type: actionTypes.GET_PACK_INFO_BY_ID,payload:response });\r\n    }catch(err){\r\n      console.log(err,\"ERRRR\")\r\n    }\r\n   \r\n  };\r\n  export const editPackInfo = (updatedInfo)=> async dispatch=> {\r\n    try{\r\n      console.log(\"ERROR\",updatedInfo);\r\n      updatedInfo.activationStatus =  String( updatedInfo.activationStatus );\r\n      updatedInfo.displayOrder =  String( updatedInfo.displayOrder );\r\n      updatedInfo.productId =  String( updatedInfo.productId );\r\n      updatedInfo.validityDays =  String( updatedInfo.validityDays );\r\n      updatedInfo.active =  String( updatedInfo.active );\r\n     // updatedInfo.ftr =  String( updatedInfo.ftr );\r\n      updatedInfo.isFtr =  String( updatedInfo.ftr );\r\n\r\n      \r\n\r\n\r\n      const response = await performServerAction.post('updatePrepaidPack',updatedInfo, AuthService.getHeader());\r\n      dispatch( { type: actionTypes.EDIT_PACK_INFO,payload:response });\r\n    }\r\n    catch(err){\r\n      console.log(err)\r\n    }\r\n  };\r\n  export const AddPackInfo = (packInfo)=> async dispatch=> {\r\n    try{\r\n      console.log(\"ERROR\",packInfo)\r\n      const response = await performServerAction.post('getPrepaidPacks',{packInfo}, AuthService.getHeader());\r\n      dispatch( { type: actionTypes.EDIT_PACK_INFO,payload:response });\r\n    }\r\n    catch(err){\r\n      console.log(err)\r\n    }\r\n  };","import React from \"react\";\r\n//import \"./styles.css\";\r\n\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\n\r\n\r\nexport default function App( props ) {\r\n\r\n \r\n\r\n  // dateTime: \"23-06-2021 4:43:02 PM\"\r\n  // diff: -298523\r\n  // isDuplicate: true\r\n  // totCEOI: 902038\r\n  // totCEOIChange: \"0.000\"\r\n  // totCEVol: 15312564\r\n  // totChangeINOICall: 127897\r\n  // totChangeINOIDiff: -107353\r\n  // totChangeINOIPut: 20544\r\n  // totDiffChange: \"0.000\"\r\n  // totPEOI: 603515\r\n  // totPEOIChange: \"0.000\"\r\n  // totPEVol: 15418605\r\n  var data =  props.diffData && props.diffData.data;\r\n  var putData = [], callData = [],  timeDate = [],  diffData = []; \r\n\r\n  // var scpage =   Math.floor( props.diffData.scrollcount/10 ) ? Math.floor( props.diffData.scrollcount/10 ) : 1; \r\n\r\n  // var startpage = 0  \r\n  // if(scpage * 10 <  data.length) {\r\n  //   startpage =  scpage * 10;  \r\n  // }   \r\n  // else if (props.diffData.scrollcount > data.length){\r\n  //   startpage =  0; \r\n  // }\r\n\r\n\r\n\r\n  // console.log('scrollcount', props.diffData.scrollcount); \r\n  // console.log('startpage', startpage);\r\n\r\n  // console.log('charrt data', data);\r\n\r\n  //for (let index = startpage; index <  startpage + 10; index++) {\r\n  \r\n\r\n  data.reverse();\r\n\r\n  for (let index = data.length - 20; index <  data.length; index++) {\r\n    if(data[index]){\r\n      putData.push(data[index].totPEOI); \r\n      callData.push(data[index].totCEOI); \r\n      diffData.push(data[index].diff); \r\n      timeDate.push( data[index].dateTime.substring(19,11)); \r\n    }\r\n  \r\n  }\r\n\r\n\r\n\r\n  const chartData = {\r\n    labels: timeDate,\r\n    datasets: [\r\n      {\r\n        label: \"Put\",\r\n        data: putData,\r\n        fill: true,\r\n        backgroundColor: \"rgba(75,192,192,0.2)\",\r\n        borderColor: \"green\"\r\n      },\r\n      {\r\n        label: \"Call\",\r\n        data: callData,\r\n        fill: true,\r\n        backgroundColor:  \"rgba(75,192,192,0.1)\",\r\n        borderColor: \"red\",\r\n        \r\n      },\r\n      // {\r\n      //   label: \"Diff\",\r\n      //   data: diffData,\r\n      //   fill: true,\r\n      //   onoffline : true,\r\n      //   backgroundColor:  \"rgba(75,192,192,0.1)\",\r\n      //   borderColor: \"blue\",\r\n        \r\n      // }\r\n     \r\n    ]\r\n  };\r\n  const options = {\r\n    maintainAspectRatio: true,\t// Don't maintain w/h ratio\r\n  } \r\n\r\n  return (\r\n    <div >\r\n      <Line data={chartData} options={options} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { connect } from \"react-redux\";\r\nimport { setPackLoaded } from \"../../action\";\r\nimport Spinner from \"react-spinner-material\";\r\nimport * as moment from 'moment';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Input from \"@material-ui/core/Input\";\r\nimport \"./ViewStyle.css\";\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Parser from 'html-react-parser';\r\n\r\nimport Chart from \"./Chart\";\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n            width: 250,\r\n        },\r\n    },\r\n};\r\n\r\nclass MyView extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            products: [],\r\n            stopnview: '',\r\n            curnewdata: '',\r\n            showOptionUpside: 800,\r\n            showOptionDownside: 800,\r\n            timestamp: '',\r\n            totalCOI: 0,\r\n            expiry: '',\r\n            strike: '',\r\n            FilteredBY: '',\r\n            AllspTotalOI: [],\r\n            PEoi: 0,\r\n            CEoi: 0,\r\n            waitForChainFlag: true,\r\n            scrollcount: 0,\r\n            pcrTableBN: JSON.parse(localStorage.getItem('pcrTableBN')) && JSON.parse(localStorage.getItem('pcrTableBN')).data,\r\n            optionChainDataBN: JSON.parse(localStorage.getItem('optionChainDataBN')),\r\n            filtered: JSON.parse(localStorage.getItem('optionChainDataBN')) && JSON.parse(localStorage.getItem('optionChainDataBN')).filtered && JSON.parse(localStorage.getItem('optionChainDataBN')).filtered.data,\r\n            staticData: localStorage.getItem('staticData') && JSON.parse(localStorage.getItem('staticData')) || {},\r\n            selectedWatchlist: 'Securities in F&O',\r\n            selectOptionStock: \"BANKNIFTY\",\r\n            underlyingValue: JSON.parse(localStorage.getItem('optionChainDataBN')) && JSON.parse(localStorage.getItem('optionChainDataBN')).records && JSON.parse(localStorage.getItem('optionChainDataBN')).records.underlyingValue,\r\n\r\n            buyCallLot:1, \r\n            buyPutLot:1, \r\n            niftyLogSize : 50, \r\n            niftybankLogSize : 25, \r\n            \r\n\r\n\r\n            //JSON.parse(localStorage.getItem('optionChainDataBN')).records.data\r\n\r\n\r\n\r\n        }\r\n        this.findSupportResistence = this.findSupportResistence.bind(this);\r\n\r\n    }\r\n\r\n    onChangeSelectSymbol = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value }, function () {\r\n            this.loadPackList();\r\n        });\r\n    }\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value }, function () {\r\n            this.filterOptionChain(e.target.name, e.target.value);\r\n        });\r\n    }\r\n\r\n\r\n   \r\n\r\n    filterOptionChain = (name, actualValue) => {\r\n        //console.log('filtername', name, actualValue); \r\n        var filereddata = [];\r\n\r\n        var alldata = this.state.optionChainDataBN && this.state.optionChainDataBN.records && this.state.optionChainDataBN.records.data;\r\n\r\n        if (name === 'expiry' && actualValue === 'All') {\r\n\r\n            filereddata = alldata;\r\n        }\r\n\r\n        if (name === 'expiry') {\r\n\r\n            for (let index = 0; index < alldata.length; index++) {\r\n                const element = alldata[index];\r\n                if (element.expiryDate === actualValue) {\r\n                    filereddata.push(element);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (name === 'strike') {\r\n\r\n            for (let index = 0; index < alldata.length; index++) {\r\n                const element = alldata[index];\r\n                if (element.strikePrice === actualValue) {\r\n                    filereddata.push(element);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n\r\n        this.setState({ filtered: filereddata, FilteredBY: name + \" \" + actualValue });\r\n        //  console.log(filereddata); \r\n    }\r\n\r\n    // componentWillUnmount() {\r\n    //     var tabledata = document.getElementById('tabledata'); \r\n    //     tabledata.removeEventListener('scroll', this.handleScroll);\r\n\r\n    // }\r\n\r\n    handleScroll = (data) => {\r\n\r\n        var scrollcount = this.state.scrollcount;\r\n\r\n        this.setState({ scrollcount: scrollcount += 1 });\r\n\r\n    }\r\n\r\n    onChangeCallLot = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value }, function () {\r\n            this.calculateCallMargin(); \r\n        });\r\n    }\r\n\r\n    calculateCallMargin =(e)=> {\r\n        this.state.filtered && this.state.filtered.forEach(element => {\r\n            if(element.CE && element.CE.lastPrice)  {\r\n                element.CE.totalMargin = Parser(  (element.CE.lastPrice * this.state.buyCallLot * this.state.lotSize).toFixed(2) ); // this.state.lotSize * this.state.buyCallLot+ \" * \" + element.CE.lastPrice  + \"<br /> \r\n                element.CE.maxLoss = Parser( \" SL 10%: <br /><b style='color:red'>\" + ((element.CE.lastPrice * this.state.buyCallLot * this.state.lotSize) * 10/100).toFixed(2) +\"</b>\" );\r\n    \r\n            }\r\n         \r\n        });\r\n        this.setState({filtered: this.state.filtered}); \r\n    }\r\n\r\n    onChangePutLot = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value }, function () {\r\n            this.calculatePutMargin(); \r\n        });\r\n    }\r\n\r\n    calculatePutMargin =(e)=> {\r\n\r\n        this.state.filtered &&  this.state.filtered.forEach(element => {\r\n            if(element.PE && element.PE.lastPrice)  {\r\n                element.PE.totalMargin = Parser(  (element.PE.lastPrice * this.state.buyPutLot * this.state.lotSize).toFixed(2) ); //this.state.lotSize * this.state.buyPutLot+ \" * \" + element.PE.lastPrice  + \"<br /> <b> \"\r\n                element.PE.maxLoss = Parser( \" SL 10%: <br /><b style='color:red'>\" + ((element.PE.lastPrice * this.state.buyPutLot * this.state.lotSize) * 10/100).toFixed(2)  +'</b>' );\r\n\r\n            }\r\n        });\r\n\r\n        this.setState({filtered: this.state.filtered}); \r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n\r\n       \r\n\r\n        this.setState({ SecuritiesInFO: this.state.staticData[this.state.selectedWatchlist] }, function () {\r\n            // this.state.SecuritiesInFO && this.state.SecuritiesInFO.sort(function (a, b) {\r\n            //     if(a.name < b.name) { return -1; }\r\n            //     if(a.name > b.name) { return 1; }\r\n            //     return 0;\r\n            // });\r\n        });\r\n\r\n       \r\n\r\n\r\n        // var tabledatachart = document.getElementById('tabledatachart'); \r\n        // tabledatachart.addEventListener('scroll', this.handleScroll);\r\n\r\n        //   this.loadPackList();\r\n        //   console.log('this.state.optionChainDataBN.records.expiryDates', this.state.optionChainDataBN.records.expiryDates)\r\n\r\n\r\n        if (!JSON.parse(localStorage.getItem('optionDiffdata' + this.state.selectOptionStock)))\r\n            localStorage.setItem('optionDiffdata'+ this.state.selectOptionStock, JSON.stringify({ data: [] }))\r\n        else\r\n            this.setState({ products: JSON.parse(localStorage.getItem('optionDiffdata'+ this.state.selectOptionStock)).data })\r\n        // this.setState({ stopnview:  setInterval( this.loadPackList ,  60001 * 2)});\r\n        //  clearInterval(this.state.stopnview)\r\n\r\n        if (!JSON.parse(localStorage.getItem('pcrTableBN')))\r\n            localStorage.setItem('pcrTableBN', JSON.stringify({ data: [] }))\r\n        else\r\n            this.setState({ pcrTableBN: JSON.parse(localStorage.getItem('pcrTableBN')).data })\r\n\r\n\r\n\r\n\r\n        var todayTime = new Date();\r\n        if (todayTime.getHours() >= 9 && todayTime.getHours() < 16) {\r\n            setInterval(() => {\r\n                this.loadPackList();\r\n            }, 60000 * 6);\r\n        }\r\n        setInterval(() => {\r\n            this.updatepcr()\r\n        }, 60000 * 6);\r\n\r\n        // this.findSupportResistence(this.state.optionChainDataBN ? this.state.optionChainDataBN : \"\");\r\n\r\n\r\n        let lotSize = 25; \r\n        if(this.state.selectOptionStock == \"NIFTY\")\r\n         lotSize = 50;\r\n        if(this.state.selectOptionStock == \"BANKNIFTY\")\r\n        lotSize = 25;\r\n\r\n        this.setState({lotSize :lotSize}, function(){\r\n            this.calculateCallMargin(); \r\n            this.calculatePutMargin(); \r\n        })\r\n\r\n\r\n    }\r\n    // componentDidUpdate(){\r\n    //   //  this.updatepcr(); \r\n    //    // console.log(\"updaate called\") \r\n    // }\r\n\r\n    getDataforStrike = strikePrice => {\r\n\r\n        var alldata = JSON.parse(localStorage.getItem('optionChainDataBN')).records && JSON.parse(localStorage.getItem('optionChainDataBN')).records.data;// this.state.optionChainDataBN && this.state.optionChainDataBN.records.data; \r\n        var sumOfCEoi = 0, sumOfPEoi = 0;\r\n        for (let index = 0; index < alldata.length; index++) {\r\n            const element = alldata[index];\r\n\r\n            if (strikePrice === element.strikePrice) {\r\n\r\n                if (element.CE && element.CE.openInterest) {\r\n                    sumOfCEoi = sumOfCEoi + element.CE.openInterest;\r\n                }\r\n                if (element.PE && element.PE.openInterest) {\r\n                    sumOfPEoi = sumOfPEoi + element.PE.openInterest;\r\n                }\r\n\r\n            }\r\n        }\r\n        // fliterExData.push({strikePrice : strikePrice,  sumOfCEoi : sumOfCEoi});    \r\n        return { strikePrice: strikePrice, sumOfCEoi: sumOfCEoi, sumOfPEoi: sumOfPEoi };\r\n\r\n        //  console.log(\"alldata\", alldata);\r\n    }\r\n\r\n    findSupportResistence = (optiondata) => {\r\n        // console.log(optiondata);\r\n        var alldata = optiondata && optiondata.records && optiondata.records.data;\r\n        // var underlyingValue = optiondata.records && optiondata.records.underlyingValue; \r\n        var PEoi = 0, CEoi = 0, PEoiChange = 0, CEoiChange = 0;\r\n        if (alldata) {\r\n            for (let index = 0; index < alldata.length; index++) {\r\n                const element = alldata[index];\r\n                if (element && element.PE) {\r\n                    PEoi = PEoi + element.PE.openInterest;\r\n                    PEoiChange = PEoiChange + element.PE.changeinOpenInterest;\r\n                }\r\n                if (element && element.CE) {\r\n                    CEoi = CEoi + element.CE.openInterest;\r\n                    CEoiChange = CEoiChange + element.CE.changeinOpenInterest;\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        //   var allexpiryDates =   optiondata.records.expiryDates; \r\n        //   var strikePrices =  optiondata.records.strikePrices; \r\n        //   var fliterExData = [];  \r\n\r\n        // for (let index = 0; index < allexpiryDates.length; index++) {\r\n        //     const element = allexpiryDates[index];\r\n        //     for (let indexJ = 0; indexJ < alldata.length; indexJ++) {\r\n        //         if(alldata[indexJ].expiryDate == '22-Apr-2021'){\r\n        //             fliterExData.push(alldata[indexJ]); \r\n        //         } \r\n        //     }                  \r\n        // }   \r\n\r\n        var myStrike = [];\r\n\r\n        let startDiff = this.state.underlyingValue - this.state.showOptionDownside\r\n        let rem = Math.round(startDiff) % 100;\r\n        let startFrom = Math.round(startDiff) + 100 - rem;\r\n\r\n        let endDiff = this.state.underlyingValue + this.state.showOptionUpside;\r\n        let rem2 = Math.round(endDiff) % 100;\r\n        let endTo = Math.round(endDiff) + 100 - rem2;\r\n\r\n\r\n        console.log(this.state.underlyingValue, 'start from', startFrom, 'endto', endTo);\r\n\r\n\r\n        for (let index = startFrom; index <= endTo; index += 100) {\r\n            myStrike.push(index)\r\n        }\r\n\r\n        myStrike = myStrike.sort(function (a, b) { return b - a });\r\n\r\n\r\n\r\n        var data = [], totalspeoi = 0, totalsceoi = 0;\r\n        myStrike.forEach(element => {\r\n            var resdata = this.getDataforStrike(element);\r\n            totalspeoi = totalspeoi + resdata.sumOfPEoi;\r\n            totalsceoi = totalsceoi + resdata.sumOfCEoi;\r\n\r\n            data.push(resdata);\r\n\r\n            console.log(element, resdata);\r\n\r\n\r\n        });\r\n        this.setState({ AllspTotalOI: data, selectedSPpcr: (totalspeoi / totalsceoi).toFixed(3), totalspeoi: totalspeoi, totalsceoi: totalsceoi });\r\n\r\n        // for (let index = 0; index < alldata.length; index++) {\r\n        //     const element = alldata[index];\r\n\r\n        //     // if(alldata[index].strikePrice ==  14800){\r\n        //     //     fliterExData.push(element); \r\n        //     // } \r\n        //     for (let indexJ = 0; indexJ < strikePrices.length; indexJ++) {\r\n        //         if(  alldata[index].strikePrice == strikePrices[indexJ].strikePrice){\r\n        //             fliterExData.push(element); \r\n        //         }   \r\n        //     }\r\n\r\n        // }   \r\n\r\n        //            console.log(\"allfliterExData\",fliterExData);\r\n\r\n\r\n        this.setState({ CEoi: CEoi, PEoi: PEoi, allStrikediff: PEoi - CEoi, CEoiChange: CEoiChange, PEoiChange: PEoiChange, allStrikeChngeDiff: PEoiChange - CEoiChange });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    loadPackList() {\r\n\r\n\r\n        this.setState({ waitForChainFlag: false });\r\n\r\n        AdminService.getBNcpdata(this.state.selectOptionStock)\r\n            .then((res) => {\r\n                //     let data = resolveResponse(res);\r\n\r\n                var data = res.data && res.data;\r\n\r\n\r\n                localStorage.setItem(\"optionChainDataBN\", JSON.stringify(data));\r\n\r\n                // this.findSupportResistence(data);\r\n\r\n                // console.log(\"livedata\", data.filtered);\r\n\r\n                this.setState({ filtered: data.filtered && data.filtered.data, optionChainDataBN: data });\r\n\r\n                if (data.filtered) {\r\n\r\n                    var diff = data.filtered.PE.totOI - data.filtered.CE.totOI;\r\n\r\n                    var newdata = {\r\n                        dateTime: this.dateFormat(new Date()),\r\n                        totCEOI: data.filtered.CE.totOI,\r\n                        totCEVol: data.filtered.CE.totVol,\r\n                        totPEOI: data.filtered.PE.totOI,\r\n                        totPEVol: data.filtered.PE.totVol,\r\n                        diff: diff,\r\n                        totChangeINOICall: parseInt(localStorage.getItem('totCEOIChange')),\r\n                        totChangeINOIPut: parseInt(localStorage.getItem('totPEOIChange')),\r\n                        totChangeINOIDiff: parseInt(localStorage.getItem('totPEOIChange')) - parseInt(localStorage.getItem('totCEOIChange'))\r\n\r\n                    }\r\n                    this.setState({ curnewdata: newdata });\r\n\r\n\r\n                    document.getElementById('title').innerHTML = (diff / 100000).toFixed(2) + '|' + ((localStorage.getItem('totPEOIChange') - localStorage.getItem('totCEOIChange')) / 100000).toFixed(2) + \"L \" + this.state.selectOptionStock;\r\n                    // createData.push(newdata); \r\n                    if (JSON.parse(localStorage.getItem('optionDiffdata'+ this.state.selectOptionStock))) {\r\n                        var oldproducts = JSON.parse(localStorage.getItem('optionDiffdata'+ this.state.selectOptionStock));\r\n                        // console.log(\"oldproductsindex0\", ); \r\n                        var lastrow = oldproducts && oldproducts.data[0];\r\n\r\n\r\n                        // oldproducts.data.forEach((data) => {\r\n                        //     if(data.totCEOI == newdata.totCEOI && data.totCEVol == newdata.totCEVol && data.totPEOI == newdata.totPEOI  && data.totPEVol == newdata.totPEVol ){\r\n                        //         newdata.isDuplicate = true; \r\n                        //     }else{\r\n                        //         newdata.isDuplicate = false;\r\n                        //     }\r\n                        // });\r\n                        if (lastrow) {\r\n                            newdata.isDuplicate = newdata.diff === lastrow.diff ? true : false\r\n                            newdata.totCEOIChange = (((newdata.totCEOI - lastrow.totCEOI) * 100) / lastrow.totCEOI).toFixed(3);;\r\n                            newdata.totPEOIChange = (((newdata.totPEOI - lastrow.totPEOI) * 100) / lastrow.totPEOI).toFixed(3);;\r\n                            newdata.totDiffChange = (((newdata.diff - lastrow.diff) * 100) / lastrow.diff).toFixed(3);\r\n                        } else {\r\n                            newdata.isDuplicate = false\r\n                            newdata.totCEOIChange = 0;\r\n                            newdata.totPEOIChange = 0;\r\n                            newdata.totDiffChange = 0;\r\n                        }\r\n\r\n\r\n                    //    oldproducts.data.unshift(newdata);\r\n\r\n                        if (data.records) {\r\n                            oldproducts.timestamp = data.records.timestamp;\r\n                            oldproducts.underlyingValue = data.records.underlyingValue;\r\n                        }\r\n\r\n                    //    oldproducts.data.reverse();\r\n\r\n                        localStorage.setItem(\"optionDiffdata\" + this.state.selectOptionStock, JSON.stringify(oldproducts));\r\n\r\n\r\n\r\n                        this.setState({ products: oldproducts.data, underlyingValue: data.records.underlyingValue, timestamp: data.records.timestamp })\r\n                        this.setState({ waitForChainFlag: true });\r\n\r\n                    }\r\n\r\n                    //  console.log(\"dddd\", this.state.curnewdata); \r\n\r\n\r\n                }\r\n\r\n\r\n                this.updatepcr()\r\n                this.setState({ pcrTableBN: JSON.parse(localStorage.getItem('pcrTableBN')) && JSON.parse(localStorage.getItem('pcrTableBN')).data })\r\n\r\n            });\r\n\r\n    }\r\n\r\n\r\n    updatepcr() {\r\n\r\n\r\n        var pcrdata = {\r\n            allPCR: (this.state.PEoi / this.state.CEoi).toFixed(3),\r\n            expiryPCR: localStorage.getItem('thisWeekPCR'),\r\n            selectedSPpcr: this.state.selectedSPpcr,\r\n        }\r\n\r\n        if (JSON.parse(localStorage.getItem('pcrTableBN'))) {\r\n            var pcrTableBN = JSON.parse(localStorage.getItem('pcrTableBN'));\r\n            pcrTableBN.data.unshift(pcrdata);\r\n            localStorage.setItem(\"pcrTableBN\", JSON.stringify(pcrTableBN));\r\n        }\r\n\r\n        console.log(pcrdata);\r\n        this.setState({ pcrTableBN: pcrTableBN })\r\n    }\r\n\r\n\r\n\r\n\r\n    dateFormat(date) {\r\n\r\n        return moment(date).format('DD-MM-YYYY h:mm:ss A');\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        var totCEOI = 0, totCEVol = 0, totCEOIChange = 0, totCEBUY = 0, totCESell = 0;\r\n        var totPEOI = 0, totPEVol = 0, totPEOIChange = 0, totPEBUY = 0, totPESell = 0;\r\n\r\n        return (\r\n            <React.Fragment >\r\n\r\n                {/* <PostLoginNavBar /> */}\r\n                <Grid direction=\"row\" container className=\"flexGrow\" spacing={1} style={{ paddingLeft: \"5px\", paddingRight: \"5px\" }}>\r\n\r\n\r\n                    <Grid item xs={2} sm={2} >\r\n                        <FormControl style={styles.selectStyle}>\r\n                            <InputLabel id=\"selectOptionStock\">Select Symbol</InputLabel>\r\n                            <Select\r\n                                id=\"selectOptionStock\"\r\n                                name=\"selectOptionStock\"\r\n                                value={this.state.selectOptionStock}\r\n                                onChange={this.onChangeSelectSymbol}\r\n                                input={<Input />}\r\n                                MenuProps={MenuProps}\r\n                            >\r\n                                <MenuItem key={'NIFTY'} value={'NIFTY'} > {'NIFTY'}</MenuItem>\r\n                                <MenuItem key={'BANKNIFTY'} value={'BANKNIFTY'} > {'BANKNIFTY'}</MenuItem>\r\n\r\n                                {this.state.SecuritiesInFO && this.state.SecuritiesInFO.length ? this.state.SecuritiesInFO.map((row, index) => (\r\n                                    <MenuItem key={row.name} value={row.name} >\r\n                                        {row.name}\r\n                                    </MenuItem>\r\n                                )) : \"\"}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={2} sm={2} >\r\n                        <FormControl style={styles.selectStyle}>\r\n                            <InputLabel id=\"expiry\">Select Expiry Date</InputLabel>\r\n                            <Select\r\n                                id=\"expiry\"\r\n                                name=\"expiry\"\r\n                                value={this.state.expiry}\r\n                                onChange={this.onChange}\r\n                                input={<Input />}\r\n                                MenuProps={MenuProps}\r\n                            >\r\n                                <MenuItem key={'All'} value={'All'} >\r\n                                    {'All'}\r\n                                </MenuItem>\r\n                                {this.state.optionChainDataBN && this.state.optionChainDataBN.records && this.state.optionChainDataBN.records.expiryDates ? this.state.optionChainDataBN.records.expiryDates.map((name, index) => (\r\n                                    <MenuItem key={name + 'key' + index} value={name} >\r\n                                        {name}\r\n                                    </MenuItem>\r\n                                )) : \"\"}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={2} sm={2} >\r\n                        <FormControl style={styles.selectStyle}>\r\n                            <InputLabel id=\"strike\">Select Strick Price</InputLabel>\r\n                            <Select\r\n                                labelId=\"strike\"\r\n                                id=\"strike\"\r\n                                max-height={'100%'}\r\n                                name=\"strike\"\r\n                                value={this.state.strike}\r\n                                onChange={this.onChange}\r\n                                input={<Input />}\r\n                                MenuProps={MenuProps}\r\n                            >\r\n                                {this.state.optionChainDataBN && this.state.optionChainDataBN.records && this.state.optionChainDataBN.records.strikePrices ? this.state.optionChainDataBN.records.strikePrices.map(name => (\r\n                                    <MenuItem key={name} value={name} >\r\n                                        {name}\r\n                                    </MenuItem>\r\n                                )) : \"\"}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2}>\r\n                        {this.state.waitForChainFlag ? <Button variant=\"contained\" onClick={() => this.loadPackList()}>\r\n                            Refesh\r\n                        </Button> : <Spinner />}\r\n                    </Grid>\r\n\r\n                    <Grid item xs={6} sm={4}>\r\n\r\n                        <Typography component=\"h3\" variant=\"h6\" color=\"primary\" >\r\n                            {this.state.selectOptionStock} {this.state.underlyingValue} {this.state.timestamp} \r\n                            {/* <b> FilteredBY : {this.state.FilteredBY} </b>  */}\r\n                        </Typography>\r\n\r\n                        \r\n                    </Grid>\r\n\r\n\r\n                </Grid>\r\n\r\n\r\n                <Grid item xs={12} sm={12}>\r\n                    <Paper style={{ padding: \"10px\", overflow: \"auto\" }}>\r\n\r\n                        <Grid container spacing={3} direction=\"row\" alignItems=\"center\" container>\r\n                            <Grid item xs={3} sm={3} >\r\n                                <span> <b>Total </b></span>\r\n                                <span> PE OI: <b> {(this.state.PEoi / 100000).toFixed(3)}L</b></span>\r\n                                <span> CE OI: <b>{(this.state.CEoi / 100000).toFixed(3)}L</b></span>\r\n                                <span> PE-CE: {\r\n                                    this.state.allStrikediff > 0 ? <b style={{ color: 'green' }}>{((this.state.allStrikediff) / 100000).toFixed(3)}L</b>\r\n                                        : <b style={{ color: 'red' }}>{((this.state.allStrikediff) / 100000).toFixed(3)}L</b>}\r\n                                </span>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={3} sm={5} >\r\n                                <span> <b>Total Chng </b></span>\r\n                                <span> PE OI: <b>{(this.state.PEoiChange / 100000).toFixed(3)}L</b></span>\r\n                                <span> CE OI: <b>{(this.state.CEoiChange / 100000).toFixed(3)}L</b></span>\r\n                                <span> PE-CE: {\r\n                                    this.state.allStrikeChngeDiff > 0 ? <b style={{ color: 'green' }}>{((this.state.allStrikeChngeDiff) / 100000).toFixed(3)}L</b>\r\n                                        : <b style={{ color: 'red' }}> {((this.state.allStrikeChngeDiff) / 100000).toFixed(3)}L</b>}\r\n                                </span>\r\n\r\n\r\n                            </Grid>\r\n\r\n                            <Grid item xs={2} sm={2} >\r\n                                <span>ALL PCR: <b>{(this.state.PEoi / this.state.CEoi).toFixed(3)} </b></span>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={2} sm={2} >\r\n                                <span>Expire Week PCR: <b>{localStorage.getItem('thisWeekPCR')} </b></span>\r\n\r\n                            </Grid>\r\n\r\n\r\n\r\n                            {/* <Grid item xs={2} sm={2} >\r\n                            <Typography  component=\"h3\" variant=\"body1\" color=\"primary\" style={{justifyContent:'left'}}>\r\n                                <span>14000 to 15250 PCR: <b>{this.state.selectedSPpcr} </b></span>\r\n                            </Typography> \r\n                        </Grid> */}\r\n\r\n\r\n\r\n                        </Grid>\r\n                    </Paper>\r\n                </Grid>\r\n\r\n\r\n\r\n\r\n\r\n                <Grid direction=\"row\" container className=\"flexGrow\" spacing={0} style={{ paddingLeft: \"5px\", paddingRight: \"5px\" }}>\r\n\r\n\r\n                    <Grid id=\"tabledatachart\" item xs={6} sm={6} style={{ padding: \"2px\", overflow: \"auto\", height: \"350px\" }}>\r\n                        <Table id=\"tabledata\" stickyHeader aria-label=\"sticky table\" size=\"small\">\r\n                            <TableHead key={2222} variant=\"head\" style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n                                <TableRow variant=\"head\">\r\n                                    <TableCell align=\"center\"><b>Time</b></TableCell>\r\n                                    <TableCell align=\"center\"><b>VIEW</b></TableCell>\r\n                                    <TableCell align=\"center\"><b>Put-Call(diff)</b></TableCell>\r\n                                    <TableCell align=\"center\"><b>Chng in OI(diff)</b></TableCell>\r\n\r\n                                    <TableCell align=\"center\"><b>PUT OI</b></TableCell>\r\n                                    <TableCell align=\"center\"><b>Chng Put OI</b></TableCell>\r\n\r\n                                    <TableCell align=\"center\"><b>Call OI</b></TableCell>\r\n                                    <TableCell align=\"center\"><b>Chng Call OI</b></TableCell>\r\n\r\n                                    {/* <TableCell align=\"center\"><b>Total PUT Volume</b></TableCell>\r\n                            <TableCell align=\"center\"><b>Total Call Volume</b> </TableCell> */}\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody hover style={{ width: \"\", whiteSpace: \"nowrap\" }} >\r\n\r\n\r\n\r\n                                {this.state.products ? this.state.products.map(row => (\r\n                                    <TableRow key={row.dateTime} style={{ background: row.isDuplicate ? \"lightgray\" : \"\" }}>\r\n                                        <TableCell align=\"center\">{row.dateTime.substring(19, 11)}</TableCell>\r\n                                        <TableCell align=\"center\">{row.diff > 0 ? <Typography variant='body2' style={{ color: 'green' }} >BUY</Typography> : <Typography variant=\"body2\" style={{ color: 'red' }} >SELL</Typography>}</TableCell>\r\n                                        <TableCell align=\"center\">{row.diff} ({(row.diff / 100000).toFixed(2)}L)({row.totDiffChange > 0 ? <span style={{ color: 'green', fontWeight: 'bold' }} >{row.totDiffChange}%</span> : row.totDiffChange == '0.000' ? <span>{row.totDiffChange}%</span> : <span style={{ color: 'red', fontWeight: 'bold' }} >{row.totDiffChange}%</span>}) </TableCell>\r\n                                        <TableCell align=\"center\">{row.totChangeINOIDiff} ({(row.totChangeINOIDiff / 100000).toFixed(2)}L)</TableCell>\r\n\r\n                                        <TableCell align=\"center\">{row.totPEOI} ({row.totPEOIChange > 0 ? <span style={{ color: 'green', fontWeight: 'bold' }} >{row.totPEOIChange}%</span> : row.totPEOIChange == '0.000' ? <span>{row.totPEOIChange}%</span> : <span style={{ color: 'red', fontWeight: 'bold' }} >{row.totPEOIChange}%</span>})</TableCell>\r\n                                        <TableCell align=\"center\">{row.totChangeINOIPut} </TableCell>\r\n\r\n                                        <TableCell align=\"center\">{row.totCEOI} ({row.totCEOIChange > 0 ? <span style={{ color: 'green', fontWeight: 'bold' }} >{row.totCEOIChange}%</span> : row.totCEOIChange == '0.000' ? <span>{row.totCEOIChange}%</span> : <span style={{ color: 'red', fontWeight: 'bold' }} >{row.totCEOIChange}%</span>})</TableCell>\r\n\r\n                                        <TableCell align=\"center\">{row.totChangeINOICall}</TableCell>\r\n\r\n                                        {/* <TableCell align=\"center\">{row.totPEVol} ({(row.totPEVol/100000).toFixed(2)}L)</TableCell>\r\n                                <TableCell align=\"center\">{row.totCEVol} ({(row.totCEVol/100000).toFixed(2)}L)</TableCell>      */}\r\n\r\n                                    </TableRow>\r\n                                )) : <Spinner />}\r\n\r\n\r\n                            </TableBody>\r\n                        </Table>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={6} sm={6} style={{ padding: \"2px\", overflow: \"auto\"}}>\r\n\r\n                        <Chart diffData={{ data: this.state.products, scrollcount: this.state.scrollcount }} />\r\n                    </Grid>\r\n\r\n                    {/* <Grid item xs={3} sm={3} style={{ padding: \"2px\", overflow: \"auto\", height: \"250px\" }}>\r\n                        <Table style={{ borderLeft: 'dashed', borderRight: 'dashed', fontWeight: '500' }} id=\"tabledata\" stickyHeader aria-label=\"sticky table\" id=\"tabledata\" size=\"small\">\r\n\r\n                            <TableHead style={{}} variant=\"head\">\r\n                                <TableRow variant=\"head\">\r\n\r\n                                    <TableCell align=\"center\"><b>Total CE OI <br />{(this.state.totalsceoi / 100000).toFixed(3)}L</b></TableCell>\r\n                                    <TableCell align=\"center\"><b>Strike Price<br />{this.state.totalspeoi - this.state.totalsceoi}({((this.state.totalspeoi - this.state.totalsceoi) / 100000).toFixed(3)}L) </b> </TableCell>\r\n                                    <TableCell align=\"center\"><b>Total PE OI<br />{(this.state.totalspeoi / 100000).toFixed(3)}L</b></TableCell>\r\n\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n\r\n                                {this.state.AllspTotalOI ? this.state.AllspTotalOI.map(row => (\r\n                                    <TableRow hover key={row.dateTime} >\r\n                                        <TableCell align=\"center\" style={{ backgroundColor: row.strikePrice < this.state.underlyingValue ? '#ded6a269' : '' }}>{row.sumOfCEoi} ({(row.sumOfCEoi / 100000).toFixed(2)}L)</TableCell>\r\n                                        <TableCell align=\"center\">{row.strikePrice}</TableCell>\r\n                                        <TableCell align=\"center\" style={{ backgroundColor: row.strikePrice > this.state.underlyingValue ? '#ded6a269' : '' }}>{row.sumOfPEoi} ({(row.sumOfPEoi / 100000).toFixed(2)}L)</TableCell>\r\n\r\n                                    </TableRow>\r\n                                )) : <Spinner />}\r\n\r\n\r\n\r\n                            </TableBody>\r\n                        </Table>\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs={2} sm={2} style={{ padding: \"2px\", overflow: \"auto\", height: \"250px\" }}>\r\n                        <Table id=\"tabledata\" stickyHeader aria-label=\"sticky table\" id=\"tabledata\" size=\"small\">\r\n\r\n                            <TableHead variant=\"head\">\r\n                                <TableRow variant=\"head\">\r\n\r\n                                    <TableCell align=\"center\">ALL Pcr</TableCell>\r\n                                    <TableCell align=\"center\">Expiry Pcr </TableCell>\r\n                                    <TableCell align=\"center\">Selected Pcr</TableCell>\r\n\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody style={{ whiteSpace: \"nowrap\" }}>\r\n\r\n                                {this.state.pcrTableBN && this.state.pcrTableBN.length > 0 && this.state.pcrTableBN ? this.state.pcrTableBN.map(row => (\r\n                                    <TableRow hover key={row.expiryPCR} >\r\n                                        <TableCell align=\"center\">{row.allPCR} </TableCell>\r\n                                        <TableCell align=\"center\">{row.expiryPCR}</TableCell>\r\n                                        <TableCell align=\"center\">{row.selectedSPpcr} </TableCell>\r\n                                    </TableRow>\r\n                                )) : ''}\r\n\r\n                            </TableBody>\r\n                        </Table>\r\n\r\n                    </Grid> */}\r\n\r\n\r\n                    <Grid item xs={12} sm={12} style={{ padding: \"2px\", overflow: \"auto\", height: \"900px\" }}>\r\n\r\n                        <Table stickyHeader aria-label=\"sticky table\" id=\"tabledata\" size=\"small\">\r\n\r\n                            <TableHead variant=\"head\">\r\n\r\n                                <TableRow variant=\"head\"  >\r\n\r\n                                    <TableCell colSpan={6} align=\"center\"><b>CALL</b></TableCell>\r\n                                    <TableCell align=\"center\"><b></b></TableCell>\r\n                                    <TableCell align=\"center\"><b></b></TableCell>\r\n                                    <TableCell colSpan={6} align=\"center\"><b>PUT</b></TableCell>\r\n                                </TableRow>\r\n                                <TableRow variant=\"head\" style={{ width: \"\", whiteSpace: \"nowrap\" }} >\r\n\r\n                                    {/* <TableCell align=\"center\" ><b>Sr No.</b></TableCell>  */}\r\n\r\n\r\n                                    <TableCell align=\"center\"><b>OI Total OI <br />{localStorage.getItem('totCEOI')}({(localStorage.getItem('totCEOI') / 100000).toFixed(3)}L) </b></TableCell>\r\n                                    <TableCell align=\"center\"><b>Chng in OI <br />{localStorage.getItem('totCEOIChange')}({(localStorage.getItem('totCEOIChange') / 100000).toFixed(3)}L)</b></TableCell>\r\n                                    {/* <TableCell align=\"center\"><b>Volume <br />{localStorage.getItem('totCEVol')}({(localStorage.getItem('totCEVol')/100000).toFixed(3)}L)</b> </TableCell> */}\r\n                                    {/* <TableCell align=\"center\"><b>IV</b></TableCell> */}\r\n                                    {/* <TableCell align=\"center\"><b>Delta</b></TableCell> */}\r\n\r\n                                    <TableCell align=\"center\"><b>LTP</b></TableCell>\r\n                                    {/* <TableCell align=\"center\"><b>PChange%</b></TableCell> */}\r\n                                    <TableCell align=\"center\"><b>CHNG</b></TableCell>\r\n                                    <TableCell align=\"center\"><b>Lot</b></TableCell>\r\n                                    <TableCell align=\"center\"><b>Cost</b></TableCell>\r\n                                    <TableCell align=\"center\"><b>Max Loss</b></TableCell>\r\n\r\n                                    \r\n\r\n                                    <TableCell align=\"center\"><b>Buy</b></TableCell>\r\n\r\n                                    {/* <TableCell align=\"center\"><b>Bid qty</b></TableCell>\r\n                                    <TableCell align=\"center\"><b>Bid Price</b></TableCell>\r\n                                    <TableCell align=\"center\"><b>Ask Price</b></TableCell>\r\n                                    <TableCell align=\"center\"><b>ASK qty</b></TableCell> */}\r\n\r\n                                    {/* <TableCell align=\"center\"><b>Total Buy Qty</b></TableCell>\r\n                                    <TableCell align=\"center\"><b>Total Sell Qty</b></TableCell> */}\r\n\r\n                                    <TableCell align=\"center\"><span style={{ color: '#3e85c5', fontWeight: 'bold' }}> STRIKE PRICE</span> </TableCell>\r\n                                    <TableCell align=\"center\"><span style={{ color: '#3e85c5', fontWeight: 'bold' }}> Expiry</span> </TableCell>\r\n\r\n                                    {/* <TableCell align=\"center\"><b>Total Sell Qty</b></TableCell> \r\n                                    <TableCell align=\"center\"><b>Total Buy Qty</b></TableCell> */}\r\n\r\n\r\n                                    {/* <TableCell align=\"center\"><b>Bid Qty</b></TableCell>\r\n                                    <TableCell align=\"center\"><b>Bid Price</b></TableCell>\r\n                                    <TableCell align=\"center\"><b>Ask Price</b></TableCell>\r\n                                    <TableCell align=\"center\"><b>Ask Qty</b></TableCell>\r\n                        */}\r\n                                    <TableCell align=\"center\"><b>Buy</b></TableCell>\r\n                                    <TableCell align=\"center\"><b>Max Loss</b></TableCell>\r\n                                    <TableCell align=\"center\"><b>Cost</b></TableCell>\r\n\r\n                                    <TableCell align=\"center\"><b>Lot</b></TableCell>\r\n\r\n\r\n\r\n                                    <TableCell align=\"center\"><b>CHNG</b></TableCell>\r\n                                    {/* <TableCell align=\"center\"><b>PChange%</b></TableCell> */}\r\n                                    <TableCell align=\"center\"><b>LTP</b></TableCell>\r\n                                    {/* <TableCell align=\"center\"><b>IV</b></TableCell> */}\r\n\r\n                                    {/* <TableCell align=\"center\"><b>Delta</b></TableCell> */}\r\n\r\n\r\n                                    {/* <TableCell align=\"center\"><b>Volume <br />{localStorage.getItem('totPEVol')}({(localStorage.getItem('totPEVol')/100000).toFixed(3)}L)</b></TableCell> */}\r\n                                    <TableCell align=\"center\"><b>Chng in OI <br />{localStorage.getItem('totPEOIChange')}({(localStorage.getItem('totPEOIChange') / 100000).toFixed(3)}L)</b></TableCell>\r\n                                    <TableCell align=\"center\"><b>OI <br />{localStorage.getItem('totPEOI')}({(localStorage.getItem('totPEOI') / 100000).toFixed(3)}L)</b></TableCell>\r\n\r\n\r\n                                </TableRow>\r\n                            </TableHead>\r\n\r\n                            <TableBody>\r\n\r\n                                {this.state.filtered ? this.state.filtered.map((opdata, index) => (\r\n                                    <TableRow hover key={index} >\r\n\r\n                                        {/* <TableCell style={{whiteSpace: \"nowrap\"}} align=\"center\">{index+1} </TableCell>*/}\r\n                                        {opdata && opdata.CE && opdata.PE && (opdata.strikePrice >= opdata.CE.underlyingValue - this.state.showOptionUpside && opdata.strikePrice <= opdata.CE.underlyingValue + this.state.showOptionDownside) ? <>\r\n\r\n                                            <TableCell {...totCEOI = totCEOI + opdata.CE.openInterest} style={{ backgroundColor: opdata.strikePrice < opdata.CE.underlyingValue ? '#caca5b' : '' }} align=\"center\">{opdata.CE.openInterest}</TableCell>\r\n                                            <TableCell {...totCEOIChange = totCEOIChange + opdata.CE.changeinOpenInterest} style={{ backgroundColor: opdata.strikePrice < opdata.CE.underlyingValue ? '#caca5b' : '' }} align=\"center\">{opdata.CE.changeinOpenInterest}</TableCell>\r\n                                            {/* <TableCell {...totCEVol = totCEVol + opdata.CE.totalTradedVolume} style={{backgroundColor: opdata.strikePrice < opdata.CE.underlyingValue ? '#ded6a269' : ''}} align=\"center\">{opdata.CE.totalTradedVolume} </TableCell> */}\r\n                                            {/* <TableCell align=\"center\">{opdata.CE.impliedVolatility} </TableCell> */}\r\n                                            {/* <TableCell align=\"center\">{(opdata.CE.change / (opdata.strikePrice - opdata.CE.underlyingValue)).toFixed(2)} </TableCell> */}\r\n\r\n\r\n\r\n                                            <TableCell style={{ backgroundColor: opdata.strikePrice < opdata.CE.underlyingValue ? '#caca5b' : '' }} align=\"center\"><span style={{ color: '#3e85c5', fontWeight: 'bold' }}> {opdata.CE.lastPrice}</span>({opdata.CE.pChange > 0 ? <span style={{ color: 'green', fontWeight: 'bold' }} >{opdata.CE.pChange.toFixed(2)}%</span> : opdata.CE.pChange == 0 ? <span>{opdata.CE.pChange.toFixed(2)}%</span> : <span style={{ color: 'red', fontWeight: 'bold' }} >{opdata.CE.pChange.toFixed(2)}%</span>}) </TableCell>\r\n                                            {/* <TableCell style={{backgroundColor: opdata.strikePrice < opdata.CE.underlyingValue ? '#ded6a269' : ''}} align=\"center\">{opdata.CE.pChange > 0 ?  <span style={{ color:'green', fontWeight:'bold' }} >{opdata.CE.pChange.toFixed(2)}%</span>: opdata.CE.pChange == 0 ? <span>{opdata.CE.pChange.toFixed(2)}%</span> : <span style={{ color:'red',fontWeight:'bold'}} >{opdata.CE.pChange.toFixed(2)}%</span> } </TableCell> */}\r\n                                            <TableCell style={{ backgroundColor: opdata.strikePrice < opdata.CE.underlyingValue ? '#caca5b' : '' }} align=\"center\">{opdata.CE.change.toFixed(2)} </TableCell>\r\n                                            \r\n                                            <TableCell style={{ backgroundColor: opdata.strikePrice < opdata.CE.underlyingValue ? '#caca5b' : '' }} align=\"center\">                            \r\n                                                <TextField label={\"Lot: \" + this.state.lotSize} type={\"number\"} style={{width:\"50px\", textAlign:\"center\"}} value={this.state.buyCallLot} onChange={this.onChangeCallLot} name=\"buyCallLot\"  />\r\n                                             </TableCell>\r\n                                            <TableCell style={{ backgroundColor: opdata.strikePrice < opdata.CE.underlyingValue ? '#caca5b' : '' }} align=\"center\"> {opdata.CE.totalMargin} </TableCell>\r\n                                            <TableCell style={{ backgroundColor: opdata.strikePrice < opdata.CE.underlyingValue ? '#caca5b' : '' }} align=\"center\"> {opdata.CE.maxLoss} </TableCell>\r\n\r\n                                            \r\n\r\n                                            <TableCell style={{ backgroundColor: opdata.strikePrice < opdata.CE.underlyingValue ? '#caca5b' : '' }} align=\"center\">  <Button size={\"small\"} variant=\"contained\" onClick={() => this.props.buyOption(\"CE\", this.state.selectOptionStock, opdata.strikePrice, opdata.expiryDate, this.state.buyCallLot)}> Call Buy </Button> </TableCell>\r\n\r\n                                            {/* <TableCell align=\"center\">{opdata.CE.bidQty} </TableCell>\r\n                                            <TableCell align=\"center\">{opdata.CE.bidprice} </TableCell>\r\n                                            <TableCell align=\"center\">{opdata.CE.askPrice} </TableCell>\r\n                                            <TableCell align=\"center\">{opdata.CE.askQty} </TableCell> */}\r\n\r\n                                            {/* <TableCell {...totCEBUY = totCEBUY + opdata.CE.totalBuyQuantity}  style={{backgroundColor: opdata.strikePrice < opdata.CE.underlyingValue ? '#ded6a269' : ''}} title={'Total CALL Buy Qty'} align=\"center\">{opdata.CE.totalBuyQuantity}({(opdata.CE.totalBuyQuantity/100000).toFixed(3)}L) </TableCell>\r\n                                            <TableCell {...totCESell = totCESell + opdata.CE.totalSellQuantity} style={{backgroundColor: opdata.strikePrice < opdata.CE.underlyingValue ? '#ded6a269' : ''}} title={'Total CALL Sell Qty'} align=\"center\">{opdata.CE.totalSellQuantity}({(opdata.CE.totalSellQuantity/100000).toFixed(3)}L) </TableCell>\r\n                                         */}\r\n                                            <TableCell style={{ borderLeft: 'dashed', borderRight: 'dashed', fontWeight: '500' }} align=\"center\"><span> <a href=\"#\" style={{ textDecoration: 'none' }} onClick={() => this.filterOptionChain('strike', opdata.strikePrice)}> {opdata.strikePrice}</a> </span> </TableCell>\r\n                                            <TableCell style={{ borderRight: 'dashed', whiteSpace: \"nowrap\" }} align=\"center\" ><span style={{ paddingLeft: '5px', paddingRight: '5px' }}> <a href=\"#\" style={{ textDecoration: 'none' }} onClick={() => this.filterOptionChain('expiry', opdata.expiryDate)}> {opdata.expiryDate}</a></span> </TableCell>\r\n\r\n                                            <TableCell  style={{ backgroundColor: opdata.strikePrice > opdata.CE.underlyingValue ? '#caca5b' : '' }} align=\"center\">  <Button size={\"small\"} variant=\"contained\" onClick={() => this.props.buyOption(\"PE\", this.state.selectOptionStock, opdata.strikePrice, opdata.expiryDate, this.state.buyPutLot)}>Put Buy </Button> </TableCell>\r\n                                            <TableCell  style={{ backgroundColor: opdata.strikePrice > opdata.CE.underlyingValue ? '#caca5b' : '' }} align=\"center\"> {opdata.PE.maxLoss} </TableCell>\r\n\r\n                                            <TableCell  style={{ backgroundColor: opdata.strikePrice > opdata.CE.underlyingValue ? '#caca5b' : '' }} align=\"center\"> {opdata.PE.totalMargin} </TableCell>\r\n\r\n                                            <TableCell  style={{ backgroundColor: opdata.strikePrice > opdata.CE.underlyingValue ? '#caca5b' : '' }} align=\"center\">                            \r\n                                                <TextField label={\"Lot: \" + this.state.lotSize} type={\"number\"} style={{width:\"50px\", textAlign:\"center\"}} value={this.state.buyPutLot} onChange={this.onChangePutLot} name=\"buyPutLot\"  />\r\n                                             </TableCell>\r\n                                            {/* <TableCell {...totPESell = totPESell + opdata.PE.totalSellQuantity} style={{backgroundColor: opdata.strikePrice > opdata.CE.underlyingValue ? '#ded6a269' : ''}} title={'Total PUT Sell Qty'} align=\"center\">{opdata.PE.totalSellQuantity}({(opdata.PE.totalSellQuantity/100000).toFixed(3)}L) </TableCell>\r\n                                            <TableCell {...totPEBUY = totPEBUY + opdata.PE.totalBuyQuantity} style={{backgroundColor: opdata.strikePrice > opdata.CE.underlyingValue ? '#ded6a269' : ''}} title={'Total PUT Buy Qty'} align=\"center\">{opdata.PE.totalBuyQuantity}({(opdata.PE.totalBuyQuantity/100000).toFixed(3)}L)</TableCell>\r\n                                         */}\r\n                                            {/* <TableCell align=\"center\">{opdata.PE.bidQty} </TableCell>\r\n                                            <TableCell align=\"center\">{opdata.PE.bidprice} </TableCell>\r\n                                            <TableCell align=\"center\">{opdata.PE.askPrice} </TableCell>\r\n                                            <TableCell align=\"center\">{opdata.PE.askQty} </TableCell>\r\n                                            */}\r\n                                            <TableCell  style={{ backgroundColor: opdata.strikePrice > opdata.CE.underlyingValue ? '#caca5b' : '' }} align=\"center\">{opdata.PE.change.toFixed(2)} </TableCell>\r\n                                            {/* <TableCell style={{backgroundColor: opdata.strikePrice > opdata.CE.underlyingValue ? '#ded6a269' : ''}} align=\"center\">{opdata.PE.pChange > 0 ?  <span style={{ color:'green', fontWeight:'bold' }} >{opdata.PE.pChange.toFixed(2)}%</span>: opdata.PE.pChange == 0 ? <span>{opdata.PE.pChange.toFixed(2)}%</span> : <span style={{ color:'red',fontWeight:'bold'}} >{opdata.PE.pChange.toFixed(2)}%</span>} </TableCell> */}\r\n                                            <TableCell style={{ backgroundColor: opdata.strikePrice > opdata.CE.underlyingValue ? '#caca5b' : '' }} align=\"center\"><span style={{ color: '#3e85c5', fontWeight: 'bold' }}> {opdata.PE.lastPrice}</span>({opdata.PE.pChange > 0 ? <span style={{ color: 'green', fontWeight: 'bold' }} >{opdata.PE.pChange.toFixed(2)}%</span> : opdata.PE.pChange == 0 ? <span>{opdata.PE.pChange.toFixed(2)}%</span> : <span style={{ color: 'red', fontWeight: 'bold' }} >{opdata.PE.pChange.toFixed(2)}%</span>})</TableCell>\r\n\r\n                                            {/* <TableCell align=\"center\">{opdata.PE.impliedVolatility} </TableCell> */}\r\n                                            {/* <TableCell align=\"center\">{(opdata.PE.change / (opdata.strikePrice - opdata.PE.underlyingValue)).toFixed(2)} </TableCell> */}\r\n\r\n                                            {/* <TableCell {...totPEVol = totPEVol + opdata.PE.totalTradedVolume}  style={{backgroundColor: opdata.strikePrice > opdata.CE.underlyingValue ? '#ded6a269' : ''}} align=\"center\">{opdata.PE.totalTradedVolume} </TableCell> */}\r\n                                            <TableCell {...totPEOIChange = totPEOIChange + opdata.PE.changeinOpenInterest} style={{ backgroundColor: opdata.strikePrice > opdata.CE.underlyingValue ? '#caca5b' : '' }} align=\"center\">{opdata.PE.changeinOpenInterest}</TableCell>\r\n                                            <TableCell {...totPEOI = totPEOI + opdata.PE.openInterest} style={{ backgroundColor: opdata.strikePrice > opdata.CE.underlyingValue ? '#caca5b' : '' }} align=\"center\">{opdata.PE.openInterest} </TableCell>\r\n                                        </> : \"\"\r\n                                        }\r\n\r\n\r\n                                    </TableRow>\r\n\r\n                                )) : <Spinner />}\r\n\r\n\r\n                                <TableRow variant=\"head\">\r\n                                    <TableCell align=\"center\" {...localStorage.setItem('totCEOI', totCEOI)}><b>{totCEOI}<br />({(totCEOI / 100000).toFixed(3)}L)</b></TableCell>\r\n                                    <TableCell align=\"center\" {...localStorage.setItem('totCEOIChange', totCEOIChange)}><b>{totCEOIChange}<br />({(totCEOIChange / 100000).toFixed(3)}L)</b> </TableCell>\r\n                                    <TableCell align=\"center\" {...localStorage.setItem('totCEVol', totCEVol)}><b>{totCEVol}<br />({(totCEVol / 100000).toFixed(3)}L)</b></TableCell>\r\n                                    <TableCell colSpan={3} align=\"center\"></TableCell>\r\n                                    {/* <TableCell align=\"center\"><b>{totCEBUY}<br />({(totCEBUY/100000).toFixed(3)}L)</b></TableCell>\r\n                                <TableCell align=\"center\"><b>{totCESell}<br />({(totCESell/100000).toFixed(3)}L)</b> </TableCell> */}\r\n\r\n                                    <TableCell {...localStorage.setItem('thisWeekPCR', (totPEOI / totCEOI).toFixed(3))} align=\"center\" colSpan={2}><b> PCR : {(totPEOI / totCEOI).toFixed(3)}</b></TableCell>\r\n\r\n\r\n                                    <TableCell colSpan={5} align=\"center\"></TableCell>\r\n\r\n\r\n                                    {/* <TableCell align=\"center\"><b>{totPESell}<br />({(totPESell/100000).toFixed(3)}L)</b></TableCell>\r\n                                <TableCell align=\"center\"><b>{totPEBUY}<br />({(totPEBUY/100000).toFixed(3)}L)</b></TableCell>\r\n                                */}\r\n                                    {/* <TableCell colSpan={3} align=\"center\"></TableCell> */}\r\n                                    <TableCell align=\"center\" {...localStorage.setItem('totPEVol', totPEVol)}><b>{totPEVol}<br />({(totPEVol / 100000).toFixed(3)}L)</b></TableCell>\r\n                                    <TableCell align=\"center\" {...localStorage.setItem('totPEOIChange', totPEOIChange)}><b>{totPEOIChange}<br />({(totPEOIChange / 100000).toFixed(3)}L)</b> </TableCell>\r\n                                    <TableCell align=\"center\" {...localStorage.setItem('totPEOI', totPEOI)}><b>{totPEOI}<br />({(totPEOI / 100000).toFixed(3)}L)</b> </TableCell>\r\n\r\n                                </TableRow>\r\n\r\n\r\n                            </TableBody>\r\n\r\n\r\n                        </Table>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst styles = {\r\n    tableStyle: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    selectStyle: {\r\n        marginBottom: '0px',\r\n        minWidth: 240,\r\n        maxWidth: 240\r\n\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { packs: state.packs.packs.data };\r\n}\r\nexport default connect(mapStateToProps, { setPackLoaded })(MyView);\r\n","import React from \"react\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport {resolveResponse} from \"../../utils/ResponseHandler\";\r\nimport Spinner from \"react-spinner-material\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\r\nimport CommonOrderMethod from \"../../utils/CommonMethods\";\r\nimport * as moment from 'moment';\r\nimport Notify from \"../../utils/Notify\";\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\n\r\nimport BankNiftyView from './BankNiftyView'\r\n\r\nclass OrderBook extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            orderPenidngOptionList: localStorage.getItem('orderPenidngOptionList') && JSON.parse(localStorage.getItem('orderPenidngOptionList')) || [], \r\n            buyAtPending: \"\", \r\n            sellAtPending: \"\", \r\n            pattenNamePending: \"\",\r\n            searchSymbolPending : \"\",\r\n            autoSearchList:[{\"token\":\"26009\",\"symbol\":\"BANKNIFTY\",\"name\":\"BANKNIFTY\",\"expiry\":\"\",\"strike\":\"-1.000000\",\"lotsize\":\"-1\",\"instrumenttype\":\"\",\"exch_seg\":\"NSE\",\"tick_size\":\"-1.000000\"},{\"token\":\"26000\",\"symbol\":\"NIFTY\",\"name\":\"NIFTY\",\"expiry\":\"\",\"strike\":\"-1.000000\",\"lotsize\":\"-1\",\"instrumenttype\":\"\",\"exch_seg\":\"NSE\",\"tick_size\":\"-1.000000\"}], \r\n            lastTradedData : {},\r\n            buyOptionFlag : false ,\r\n            staticData: localStorage.getItem('staticData') && JSON.parse(localStorage.getItem('staticData')) || {},\r\n            selectedWatchlist: \"Securities in F&O\",\r\n\r\n        }\r\n    }\r\n\r\n    searchSymbolPendingOrder = (e) => {\r\n        this.setState({[e.target.name] : e.target.value})\r\n\r\n        AdminService.stockOptionSearch(e.target.value).then(searchRes => {\r\n            let searchResdata = searchRes.data;\r\n            if (e.target.value) {\r\n                var uppercaseName = e.target.value.toUpperCase() + \"-EQ\";\r\n                var found = searchResdata.filter(row => row.exch_seg === \"NSE\" && row.lotsize === \"1\" && row.symbol === uppercaseName);\r\n                //  console.log(\"found\", found[0] && found[0].symbol); \r\n                if (found.length) {\r\n                    this.setState({searchSymbolPending : found[0].symbol,searchTokenPending :found[0].token, exch_seg: found[0].exch_seg})\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    updateInput = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });      \r\n    }\r\n\r\n    addInOrderPenidngList =  async() => {\r\n\r\n        console.log(this.state.searchSymbolPending, this.state.searchTokenPending, this.state.buyAtPending, this.state.sellAtPending);\r\n      \r\n        if(parseFloat(this.state.sellAtPending ) > this.state.lastTradedData.low){\r\n            if(!window.confirm(\"Be carefull Selling at high price \"+ this.state.sellAtPending +\", today \" +this.state.searchSymbolPending+ \" low is \" +  this.state.lastTradedData.low)){\r\n                return; \r\n            }\r\n        }\r\n        if(parseFloat(this.state.buyAtPending)  < this.state.lastTradedData.high){\r\n           if(!window.confirm(\"Be carefull Buying at low price \"+ this.state.buyAtPending +\", today \" +this.state.searchSymbolPending+ \" high is \" +  this.state.lastTradedData.high)){\r\n            return; \r\n           }\r\n        }\r\n            \r\n        if(this.state.searchSymbolPending && this.state.buyAtPending || this.state.sellAtPending){\r\n        \r\n            var data = {\r\n                createdAt : new Date().toLocaleTimeString(), \r\n                token: this.state.searchTokenPending, \r\n                symbol: this.state.searchSymbolPending, \r\n                buyAt: this.state.buyAtPending,\r\n                sellAt: this.state.sellAtPending,  \r\n                pattenName: this.state.pattenNamePending,\r\n                exch_seg:  this.state.exch_seg,\r\n                priceStopLoss: this.state.priceStopLoss,\r\n                priceTarget : this.state.priceTarget\r\n            }\r\n\r\n            this.setState({orderPenidngOptionList : [...this.state.orderPenidngOptionList, data]}, function(){\r\n                this.setState({searchSymbolPending: '' ,searchTokenPending:'',buyAtPending: \"\", sellAtPending: \"\",pattenNamePending:\"\"  })\r\n                localStorage.setItem('orderPenidngOptionList', JSON.stringify(this.state.orderPenidngOptionList));\r\n                localStorage.setItem('orderTagToPosition', JSON.stringify(this.state.orderPenidngOptionList));\r\n            })\r\n            \r\n        }\r\n        \r\n\r\n    }\r\n\r\n    deleteInOrderPenidngList =(row)=> {\r\n\r\n        console.log(\"callback\", row); \r\n        var isDeleted = false, delitem =''; \r\n       var orderPenidngOptionList =  localStorage.getItem('orderPenidngOptionList') && JSON.parse( localStorage.getItem('orderPenidngOptionList')); \r\n       for (let index = 0; index < this.state.orderPenidngOptionList.length; index++) {\r\n           const element = orderPenidngOptionList[index];\r\n           if(row.symbol == element.symbol){\r\n            delitem = orderPenidngOptionList.splice(index, 1); \r\n            localStorage.setItem('orderPenidngOptionList', JSON.stringify(orderPenidngOptionList)); \r\n            this.setState({orderPenidngOptionList : orderPenidngOptionList}); \r\n            break; \r\n           }\r\n       }\r\n\r\n       console.log(\"del\", delitem)\r\n       if(delitem && delitem[0].symbol == row.symbol){\r\n        return true;\r\n       }else {\r\n        return false;\r\n       }\r\n        \r\n    }\r\n\r\n    callBackUpdate =(row) => {\r\n       console.log(\"call back called\");\r\n     // this.deleteInOrderPenidngList(row); \r\n    }\r\n\r\n    placeOptionSPLevelOver=(indexData, spotPrice)=>{\r\n\r\n        let today = moment().isoWeekday();\r\n        let strikePrice = 0; \r\n        let allList = localStorage.getItem('optionChainDataBN') && JSON.parse(localStorage.getItem('optionChainDataBN')); \r\n        let nextExp = allList[\"records\"][\"expiryDates\"][0]; \r\n\r\n        if(indexData.buyAt){\r\n            if(today == 5 || today == 1){\r\n                strikePrice = (Math.round(spotPrice) - Math.round(spotPrice) % 100)  + 400\r\n                if(indexData.symbol == 'NIFTY'){\r\n                    strikePrice = (Math.round(spotPrice) - Math.round(spotPrice) % 100)  + 200\r\n                }\r\n            }\r\n            else  if(today == 2){\r\n                strikePrice = (Math.round(spotPrice) - Math.round(spotPrice) % 100)  + 300\r\n                if(indexData.symbol == 'NIFTY'){\r\n                    strikePrice = (Math.round(spotPrice) - Math.round(spotPrice) % 100)  + 150\r\n                }\r\n            }\r\n            else  if(today == 3){\r\n                strikePrice = (Math.round(spotPrice) - Math.round(spotPrice) % 100)  + 200\r\n                if(indexData.symbol == 'NIFTY'){\r\n                    strikePrice = (Math.round(spotPrice) - Math.round(spotPrice) % 100)  + 100\r\n                }\r\n            }else {\r\n                strikePrice = (Math.round(spotPrice) - Math.round(spotPrice) % 100) \r\n            }\r\n\r\n            strikePrice = (Math.round(spotPrice) - Math.round(spotPrice) % 100) \r\n\r\n            this.props.buyOption(\"CE\", indexData.symbol, strikePrice, nextExp, 1 , indexData);  \r\n        }else if(indexData.sellAt){\r\n            if(today == 5 || today == 1){\r\n                strikePrice = (Math.round(spotPrice) - Math.round(spotPrice) % 100)  - 400\r\n                if(indexData.symbol == 'NIFTY'){\r\n                    strikePrice = (Math.round(spotPrice) - Math.round(spotPrice) % 100)  - 200\r\n                }\r\n            }\r\n            else  if(today == 2){\r\n                strikePrice = (Math.round(spotPrice) - Math.round(spotPrice) % 100)  - 300\r\n                if(indexData.symbol == 'NIFTY'){\r\n                    strikePrice = (Math.round(spotPrice) - Math.round(spotPrice) % 100)  - 150\r\n                }\r\n            }\r\n            else  if(today == 3){\r\n                strikePrice = (Math.round(spotPrice) - Math.round(spotPrice) % 100)  - 200\r\n                if(indexData.symbol == 'NIFTY'){\r\n                    strikePrice = (Math.round(spotPrice) - Math.round(spotPrice) % 100)  - 100\r\n                }\r\n            }else {\r\n                strikePrice = (Math.round(spotPrice) - Math.round(spotPrice) % 100) \r\n            }\r\n\r\n            strikePrice = (Math.round(spotPrice) - Math.round(spotPrice) % 100) \r\n\r\n            console.log(strikePrice, today);\r\n\r\n            this.props.buyOption(\"PE\", indexData.symbol, strikePrice, nextExp, 1, indexData);  \r\n        }\r\n\r\n    }\r\n\r\n    updateLTP = async()=> {\r\n\r\n        for (let index = 0; index < this.state.orderPenidngOptionList.length; index++) {\r\n            const element = this.state.orderPenidngOptionList[index];\r\n            var data = { \"exchange\":element.exch_seg, \"tradingsymbol\":element.symbol , \"symboltoken\": element.token}; \r\n            AdminService.getLTP(data).then(res => {\r\n                let data = resolveResponse(res, 'noPop');\r\n                var LtpData = data && data.data;\r\n                //console.log(LtpData);\r\n                if(LtpData && LtpData.ltp) {\r\n                    element.ltp = LtpData.ltp; \r\n                    element.perChange = ((LtpData.ltp - LtpData.close) * 100 / LtpData.close).toFixed(2); \r\n                    localStorage.setItem('orderPenidngOptionList', JSON.stringify(this.state.orderPenidngOptionList)); \r\n                    this.setState({orderPenidngOptionList : this.state.orderPenidngOptionList}); \r\n                    console.log(\"ltp update\",element.symbol,element)\r\n\r\n                    if(element.buyAt && LtpData.ltp >= parseFloat(element.buyAt)){\r\n                        var isDelete = this.deleteInOrderPenidngList(element); \r\n                        if(isDelete){ // && !this.state.buyOptionFlag\r\n                            console.log(\"buyopiton\",element.symbol,element)\r\n\r\n                            this.setState({buyOptionFlag: true}, function(){\r\n                                this.placeOptionSPLevelOver(element, LtpData.ltp); \r\n                            })\r\n                        }\r\n                    }else if(element.sellAt && LtpData.ltp <= parseFloat(element.sellAt)){\r\n                        var isDelete = this.deleteInOrderPenidngList(element); \r\n                        if(isDelete){ // && !this.state.buyOptionFlag\r\n                            this.setState({buyOptionFlag: true}, function(){\r\n                                this.placeOptionSPLevelOver(element, LtpData.ltp); \r\n                            })\r\n                        }\r\n                    }\r\n\r\n                }\r\n            })\r\n\r\n            await new Promise(r => setTimeout(r, 500)); \r\n        }\r\n    }\r\n\r\n    getTradePrice =()=> {\r\n\r\n        var data = { \"exchange\":this.state.exch_seg, \"tradingsymbol\":this.state.searchSymbolPending , \"symboltoken\": this.state.searchTokenPending}; \r\n        AdminService.getLTP(data).then(res => {\r\n            let data = resolveResponse(res, 'noPop');\r\n            var LtpData = data && data.data;\r\n            //console.log(LtpData);\r\n            if(LtpData && LtpData.ltp) {\r\n        \r\n\r\n                var lastTradedData = {\r\n                    symbol: LtpData.tradingsymbol,\r\n                    ltp : LtpData.ltp,\r\n                    perChange : ((LtpData.ltp - LtpData.close) * 100 / LtpData.close).toFixed(2), \r\n                    open : LtpData.open, \r\n                    high : LtpData.high, \r\n                    close : LtpData.close, \r\n                    low : LtpData.low, \r\n                }\r\n                this.setState({lastTradedData : lastTradedData}); \r\n            \r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        this.updateLTP(); \r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var endTime = moment('3:30pm', 'h:mma');\r\n        const friday = 5; // for friday\r\n        var currentTime = moment(new Date(), \"h:mma\");\r\n        const today = moment().isoWeekday();\r\n        //market hours\r\n        if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n            var intervaltime = 2001; \r\n            if(this.state.orderPenidngOptionList.length > 10){\r\n                intervaltime = this.state.orderPenidngOptionList.length * 110; \r\n            }\r\n            this.setState({ findlast5minMovementInterval: setInterval(() => { this.updateLTP(); }, intervaltime ) });\r\n        }\r\n\r\n        localStorage.setItem('autoSearchTemp',JSON.stringify(this.state.autoSearchList))\r\n    }\r\n\r\n  \r\n    refreshCandleChartManually = async (row) => {\r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var time = moment.duration(\"12:00:00\");\r\n        var startdate = moment(new Date()).subtract(time);\r\n\r\n        var data = {\r\n            \"exchange\": \"NSE\",\r\n            \"symboltoken\": row.token,\r\n            \"interval\": \"FIVE_MINUTE\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n            \"fromdate\": moment(beginningTime).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n            \"todate\": moment(new Date()).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n        }\r\n        AdminService.getHistoryData(data).then(res => {\r\n            let histdata = resolveResponse(res, 'noPop');\r\n            //console.log(\"candle history\", histdata); \r\n            if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                var candleChartData = [];\r\n                histdata.data.forEach(element => {\r\n                    candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                });\r\n\r\n                localStorage.setItem('candleChangeShow', row.perChange);\r\n                localStorage.setItem('candleChartData', JSON.stringify(candleChartData))\r\n                localStorage.setItem('cadleChartSymbol', row.symbol);\r\n                document.getElementById('showCandleChart').click();\r\n\r\n            } else {\r\n                //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                console.log(row.symboltoken, \"  emply candle found\");\r\n            }\r\n        }).catch(error => {\r\n            this.setState({ failedCount: this.state.failedCount + 1 });\r\n            Notify.showError(row.symboltoken + \" candle failed!\");\r\n        })\r\n\r\n    }\r\n\r\n  \r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value.trim() });\r\n    }\r\n\r\n    onChange2 = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        var data = e.target.value;\r\n\r\n        this.setState({lastTradedData : {}, buyAtPending: \"\", sellAtPending: \"\", pattenNamePending: \"\",searchSymbolPending : \"\"}); \r\n        var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n\r\n        var isfound = watchList.filter(element => (element.name == e.target.value.toUpperCase()));\r\n        console.log( \"stock\", isfound);\r\n        \r\n\r\n        if(isfound.length > 0){\r\n            var  ltpparam = { \"exchange\":isfound[0].exch_seg, \"tradingsymbol\": isfound[0].symbol , \"symboltoken\": isfound[0].token}; \r\n            AdminService.getLTP(ltpparam).then(res => {\r\n                let data = resolveResponse(res, 'noPop');\r\n                var LtpData = data && data.data;\r\n                if(LtpData && LtpData.ltp) {\r\n                    console.log( \"LtpData\",LtpData);\r\n\r\n                    AdminService.stockOptionSearch({name : isfound[0].name, ltp : LtpData.ltp}).then(res => {\r\n                        let data = res.data;\r\n                        console.log(data);\r\n                        localStorage.setItem('autoSearchTemp', JSON.stringify(data));\r\n                        this.setState({ autoSearchList: data });\r\n                    })\r\n\r\n                }\r\n            });\r\n        }       \r\n\r\n    }\r\n\r\n    openNewPage = (e) => {\r\n        window.open(\"/mtrade/#/order-watchlist\");\r\n     //   window.location.replace('/mtrade/#/order-watchlist'); \r\n        localStorage.setItem('isOpenInNewPage', 'yes');\r\n    }\r\n\r\n    backToPositionPage = (e) => {\r\n        window.location.replace('/mtrade/#/position-new'); \r\n        localStorage.setItem('isOpenInNewPage', 'no');\r\n    }\r\n    \r\n\r\n    onSelectItem = (event, values) => {\r\n        var autoSearchTemp = JSON.parse(localStorage.getItem('autoSearchTemp'));\r\n          console.log(\"values\", values); \r\n           console.log(\"autoSearchTemp\", autoSearchTemp); \r\n        if (autoSearchTemp.length > 0) {\r\n            var fdata = '';\r\n            for (let index = 0; index < autoSearchTemp.length; index++) {\r\n                if (autoSearchTemp[index].symbol === values) {\r\n                    fdata = autoSearchTemp[index];\r\n                    break;\r\n                }\r\n            }\r\n            this.setState({searchSymbolPending : fdata.symbol,searchTokenPending :fdata.token, exch_seg: fdata.exch_seg }, function(){\r\n                this.getTradePrice(); \r\n            }); \r\n\r\n        }\r\n\r\n    }\r\n\r\n    // buyOption =(optiontype ,symbol, strikePrice, expiryDate, noOfLot)=>{\r\n    //   console.log(optiontype ,symbol, strikePrice, expiryDate); \r\n    //   let exp = expiryDate.toUpperCase().split('-'); \r\n    //    exp = exp[0]+exp[1]+exp[2]%1000; \r\n\r\n    //   let optionName = symbol + exp + strikePrice + optiontype; \r\n    //   console.log(optionName); \r\n\r\n    //   AdminService.autoCompleteSearch(optionName).then(res => {\r\n    //     let data = res.data; \r\n    //     let optionData = data && data[0]; \r\n    //     console.log(\"optionData\", optionData);\r\n\r\n\r\n    //     if(optionData && optionData.symbol && optionData.symbol ==  optionName){\r\n    //         var  ltpparam = { \"exchange\":optionData.exch_seg, \"tradingsymbol\": optionData.symbol , \"symboltoken\": optionData.token}; \r\n\r\n    //         AdminService.getLTP(ltpparam).then(res => {\r\n    //             let data = resolveResponse(res, 'noPop');\r\n    //             var LtpData = data && data.data;\r\n    //             if(LtpData && LtpData.ltp) {\r\n                    \r\n    //                 console.log(\"option ltp\", LtpData);\r\n\r\n    //                let quantity = optionData.lotsize * noOfLot;   \r\n\r\n    \r\n    //                let perStopTrigerLoss = LtpData.ltp - (LtpData.ltp * 10/100); \r\n    //                perStopTrigerLoss =  CommonOrderMethod.getMinPriceAllowTick(perStopTrigerLoss); \r\n\r\n    //                let stopLossPrice = perStopTrigerLoss - (perStopTrigerLoss * 1/100); \r\n\r\n    //                stopLossPrice =  CommonOrderMethod.getMinPriceAllowTick(stopLossPrice); \r\n\r\n    \r\n    //                 let element = {\r\n    //                     tradingsymbol : optionData.symbol, \r\n    //                     symboltoken : optionData.token, \r\n    //                     transactiontype: \"BUY\", \r\n    //                     ordertype: \"LIMIT\", \r\n    //                     buyPrice : LtpData.ltp,  \r\n    //                     producttype : \"CARRYFORWARD\", \r\n    //                     exchange : optionData.exch_seg,\r\n    //                     stopLossTriggerPrice: perStopTrigerLoss,\r\n    //                     stopLossPrice: stopLossPrice,\r\n    //                     quantity : quantity\r\n    //                 }        \r\n    //                 console.log( \"option buy element\", element);\r\n    //                CommonOrderMethod.placeOptionOrder(element);\r\n    //             }\r\n    //         })\r\n    //     }else{\r\n    //         Notify.showError(optionName + \" not found\");\r\n    //     }\r\n       \r\n\r\n    //     //localStorage.setItem('autoSearchTemp', JSON.stringify(data));\r\n    // //    this.setState({ autoSearchList: data });\r\n    // })\r\n    // }\r\n\r\n\r\n    render(){\r\n        \r\n      return(\r\n        <React.Fragment>\r\n\r\n             <Paper style={{ overflow: \"auto\", padding: '5px',  background:\"#f500570a\"}} >\r\n\r\n                <Grid justify=\"space-between\"\r\n                    container>\r\n                    <Grid item> \r\n                        <Typography  color=\"primary\" gutterBottom>\r\n                        Option Buy With Level ({this.state.orderPenidngOptionList && this.state.orderPenidngOptionList.length}) \r\n                        {window.location.hash != \"#/order-watchlist\" ? <Button onClick={() => this.openNewPage()}> New Page <OpenInNewIcon/> </Button> : \"\"}\r\n                        {window.location.hash != \"#/position\" ?<Button onClick={() => this.backToPositionPage()}> Back to Position </Button> : \"\"}\r\n                        </Typography> \r\n\r\n\r\n                    </Grid>\r\n\r\n                   \r\n\r\n                    <Grid item >\r\n\r\n                        <Grid container spacing={2}>\r\n                        <Grid item >\r\n                                {/* <TextField label=\"Type full Symbol\" name=\"searchSymbolPending\" value={this.state.searchSymbolPending} onChange={this.searchSymbolPendingOrder} /> */}\r\n                                <Autocomplete\r\n                                        freeSolo\r\n                                        id=\"free-solo-2-demo\"\r\n                                        \r\n                                        disableClearable\r\n                                        onChange={this.onSelectItem}\r\n                                        value={this.state.searchSymbolPending}\r\n                                        //+ ' '+  option.exch_seg\r\n                                        options={this.state.autoSearchList.length > 0 ? this.state.autoSearchList.map((option) =>\r\n                                            option.symbol\r\n                                        ) : []}\r\n                                        renderInput={(params) => (\r\n                                            <TextField\r\n                                         \r\n                                                onChange={this.onChange2}\r\n                                                {...params}\r\n                                                label={\"Search Symbol\"}\r\n                                                margin=\"normal\"\r\n                                                style={{  width:\"200px\",marginTop: 'inherit' }}\r\n                                                name=\"searchSymbolPending\"\r\n                                                variant=\"standard\"\r\n                                                InputProps={{ ...params.InputProps, type: 'search' }}\r\n                                            /> \r\n                                        )}\r\n                                    />\r\n                              {this.state.lastTradedData.symbol}  Ltp: <b style={{ color:this.state.lastTradedData.perChange == 0 ? \"none\" : this.state.lastTradedData.perChange > 0 ? \"green\" : \"red\"}}> {this.state.lastTradedData.ltp} {this.state.lastTradedData.ltp ? \"(\"+this.state.lastTradedData.perChange+\"%)\"  : \"\"}</b> \r\n                    </Grid>\r\n\r\n                            \r\n                            <Grid item  >\r\n                                <TextField label=\"BuyAt(Above)\" type=\"number\" name=\"buyAtPending\" value={this.state.buyAtPending} onChange={this.updateInput} />\r\n                              <br /> High: {this.state.lastTradedData.high}\r\n                            </Grid>\r\n                            <Grid item  >\r\n                                <TextField label=\"SellAt(Below)\" type=\"number\" name=\"sellAtPending\" value={this.state.sellAtPending} onChange={this.updateInput} />\r\n                                <br /> Low: {this.state.lastTradedData.low}\r\n                            </Grid>\r\n                            <Grid item  >\r\n                                <TextField label=\"Which Pattern\" name=\"pattenNamePending\" value={this.state.pattenNamePending} onChange={this.updateInput} />\r\n                                <br /> Open: {this.state.lastTradedData.open}\r\n                            </Grid>\r\n                            <Grid item  >\r\n                                <TextField label=\"Price Stop Loss\" name=\"priceStopLoss\" value={this.state.priceStopLoss} onChange={this.updateInput} />\r\n                                <br /> \r\n                            </Grid>\r\n                            <Grid item  >\r\n                                <TextField label=\"Price Target\" name=\"priceTarget\" value={this.state.priceTarget} onChange={this.updateInput} />\r\n                                <br /> \r\n                            </Grid>\r\n                            <Grid item  >\r\n                                <Button variant=\"contained\" style={{ marginLeft: '20px', marginTop: '10px' }} onClick={() => this.addInOrderPenidngList()}> Add </Button>\r\n                                <br /> P.Close: {this.state.lastTradedData.close}\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n\r\n\r\n                    <Table size=\"small\" aria-label=\"sticky table\" >\r\n                        <TableHead style={{ whiteSpace: \"nowrap\", }} variant=\"head\">\r\n                            <TableRow key=\"1\" variant=\"head\" style={{ fontWeight: 'bold' }}>\r\n\r\n                                <TableCell className=\"TableHeadFormat\" align=\"left\">Symbol</TableCell>\r\n                                <TableCell className=\"TableHeadFormat\" align=\"left\">CreatetAt</TableCell>\r\n\r\n                                {/* <TableCell className=\"TableHeadFormat\" align=\"left\">Segm</TableCell> */}\r\n                                {/* <TableCell className=\"TableHeadFormat\" align=\"left\">Token</TableCell> */}\r\n                                <TableCell className=\"TableHeadFormat\" align=\"left\">Patten</TableCell>\r\n                                <TableCell className=\"TableHeadFormat\" align=\"left\">BuyAt</TableCell>\r\n                                <TableCell className=\"TableHeadFormat\" align=\"left\">SellAt</TableCell>\r\n                                <TableCell className=\"TableHeadFormat\" align=\"left\">LTP</TableCell>\r\n                                <TableCell className=\"TableHeadFormat\" align=\"left\">PriceSL</TableCell>\r\n                                <TableCell className=\"TableHeadFormat\" align=\"left\">PriceTarget</TableCell>\r\n\r\n                                \r\n                                <TableCell className=\"TableHeadFormat\" align=\"left\">Delete</TableCell>\r\n\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody id=\"tableAdd\" style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n\r\n                            {this.state.orderPenidngOptionList ? this.state.orderPenidngOptionList.map(row => (\r\n                                 <TableRow hover >\r\n\r\n                                   \r\n\r\n\r\n                                    <TableCell align=\"left\">\r\n                                        <Button style={{ color: row.perChange > 0 ? \"green\" : \"red\" }} size=\"small\" variant=\"contained\" title=\"Candle refresh\" onClick={() => this.refreshCandleChartManually(row)} >\r\n                                            {row.symbol} {row.ltp} ({row.perChange}) <ShowChartIcon />\r\n                                        </Button>\r\n                                    </TableCell>\r\n\r\n                                    <TableCell align=\"left\">{row.createdAt}</TableCell>\r\n\r\n\r\n                                    {/* <TableCell align=\"left\">{row.exch_seg}</TableCell> */}\r\n                                    {/* <TableCell align=\"left\">{row.token}</TableCell> */}\r\n\r\n                                    <TableCell align=\"left\">{row.pattenName}</TableCell>\r\n                                    <TableCell align=\"left\">{row.buyAt}</TableCell>\r\n                                    <TableCell align=\"left\">{row.sellAt}</TableCell>\r\n                                    <TableCell align=\"left\" style={{color: row.perChange == 0.00 ? \"none\" :  row.perChange > 0 ? \"green\" :\"red\"}}><b>{row.ltp} ({row.perChange}%) </b></TableCell>\r\n                                    <TableCell align=\"left\">{row.priceStopLoss}</TableCell>\r\n                                    <TableCell align=\"left\">{row.priceTarget}</TableCell>\r\n\r\n                                    <TableCell align=\"left\">\r\n                                     <DeleteIcon style={{cursor:\"pointer\"}} onClick={() => this.deleteInOrderPenidngList(row)} />\r\n                                    </TableCell>\r\n\r\n                                </TableRow>\r\n                            )) : ''}\r\n                        </TableBody>\r\n                    </Table>\r\n\r\n\r\n                </Grid>\r\n\r\n\r\n                </Paper>\r\n\r\n                <br />\r\n         \r\n\r\n            </React.Fragment> \r\n        )\r\n    }\r\n  \r\n}\r\n\r\n// const styles = {\r\n//     tableStyle : {\r\n//         display: 'flex',\r\n//         justifyContent: 'center'\r\n//     },\r\n//     selectStyle:{\r\n//         // minWidth: '100%',\r\n//          marginBottom: '0px',\r\n//           minWidth: 300,\r\n//           maxWidth: 300,\r\n//     }\r\n// }\r\n\r\n// const mapStateToProps=(state)=>{\r\n//     return {packs:state.packs.packs.data};\r\n// }\r\n\r\n//export default connect(mapStateToProps,{setPackLoaded})(OrderBook);\r\nexport default OrderBook;","import React from \"react\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport { resolveResponse } from \"../../utils/ResponseHandler\";\r\nimport Spinner from \"react-spinner-material\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\r\nimport CommonOrderMethod from \"../../utils/CommonMethods\";\r\nimport * as moment from 'moment';\r\nimport Notify from \"../../utils/Notify\";\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport BankNiftyView from './BankNiftyView'\r\nimport OptionBuyWithSPLevel from './OptionBuyWithSPLevel'\r\nimport ChartDialog from './ChartDialog'\r\n\r\n\r\nclass OrderBook extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            orderPenidngList: localStorage.getItem('orderPenidngList') && JSON.parse(localStorage.getItem('orderPenidngList')) || [],\r\n            buyAtPending: \"\",\r\n            sellAtPending: \"\",\r\n            pattenNamePending: \"\",\r\n            searchSymbolPending: \"\",\r\n            autoSearchList: [],\r\n            lastTradedData: {},\r\n            CEoptionsLtpList: [], \r\n            PEoptionsLtpList: [], \r\n            selectedOptionLotsize: '',\r\n            trackSLPrice: localStorage.getItem('trackSLPrice') && JSON.parse(localStorage.getItem('trackSLPrice')) || [],\r\n\r\n        }\r\n    }\r\n\r\n    searchSymbolPendingOrder = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value })\r\n\r\n        AdminService.autoCompleteSearch(e.target.value).then(searchRes => {\r\n            let searchResdata = searchRes.data;\r\n            if (e.target.value) {\r\n                var uppercaseName = e.target.value.toUpperCase() + \"-EQ\";\r\n                var found = searchResdata.filter(row => row.exch_seg === \"NSE\" && row.lotsize === \"1\" && row.symbol === uppercaseName);\r\n                //  console.log(\"found\", found[0] && found[0].symbol); \r\n                if (found.length) {\r\n                    this.setState({ searchSymbolPending: found[0].symbol, searchTokenPending: found[0].token, exch_seg: found[0].exch_seg })\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    updateInput = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    addInOrderPenidngList = async () => {\r\n\r\n        console.log(this.state.searchSymbolPending, this.state.searchTokenPending, this.state.buyAtPending, this.state.sellAtPending, \"CEStrikePrice\", this.state.CEStrikePrice);\r\n\r\n        if (parseFloat(this.state.sellAtPending) > this.state.lastTradedData.low) {\r\n            if (!window.confirm(\"Be carefull Selling at high price \" + this.state.sellAtPending + \", today \" + this.state.searchSymbolPending + \" low is \" + this.state.lastTradedData.low)) {\r\n                return;\r\n            }\r\n        }\r\n        if (parseFloat(this.state.buyAtPending) < this.state.lastTradedData.high) {\r\n            if (!window.confirm(\"Be carefull Buying at low price \" + this.state.buyAtPending + \", today \" + this.state.searchSymbolPending + \" high is \" + this.state.lastTradedData.high)) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (this.state.searchSymbolPending && this.state.buyAtPending || this.state.sellAtPending) {\r\n\r\n            var data = {\r\n                createdAt: new Date().toLocaleTimeString(),\r\n                token: this.state.searchTokenPending,\r\n                symbol: this.state.searchSymbolPending,\r\n                buyAt: this.state.buyAtPending,\r\n                sellAt: this.state.sellAtPending,\r\n                pattenName: this.state.pattenNamePending,\r\n                exch_seg: this.state.exch_seg,\r\n                buyCallOption: this.state.CEStrikePrice, \r\n                buyPutOption: this.state.PEStrikePrice\r\n            }\r\n\r\n            this.setState({ orderPenidngList: [...this.state.orderPenidngList, data],  CEStrikePrice : '', PEStrikePrice:'' }, function () {\r\n                this.setState({ searchSymbolPending: '', searchTokenPending: '', buyAtPending: \"\", sellAtPending: \"\", pattenNamePending: \"\" })\r\n                localStorage.setItem('orderPenidngList', JSON.stringify(this.state.orderPenidngList));\r\n                localStorage.setItem('orderTagToPosition', JSON.stringify(this.state.orderPenidngList));\r\n            })\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    deleteInOrderPenidngList = (row) => {\r\n\r\n        console.log(\"callback\", row);\r\n        var isDeleted = false, delitem = '';\r\n        var orderPenidngList = localStorage.getItem('orderPenidngList') && JSON.parse(localStorage.getItem('orderPenidngList'));\r\n        for (let index = 0; index < this.state.orderPenidngList.length; index++) {\r\n            const element = orderPenidngList[index];\r\n            if (row.token == element.token) {\r\n                var delitem = orderPenidngList.splice(index, 1);\r\n                localStorage.setItem('orderPenidngList', JSON.stringify(orderPenidngList));\r\n                this.setState({ orderPenidngList: orderPenidngList });\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (delitem[0].token == row.token) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    callBackUpdate = (row) => {\r\n        console.log(\"call back called\");\r\n        // this.deleteInOrderPenidngList(row); \r\n    }\r\n    \r\n\r\n    updateLTP = async () => {\r\n\r\n        for (let index = 0; index < this.state.orderPenidngList.length; index++) {\r\n            const element = this.state.orderPenidngList[index];\r\n            var data = { \"exchange\": element.exch_seg, \"tradingsymbol\": element.symbol, \"symboltoken\": element.token };\r\n            AdminService.getLTP(data).then(res => {\r\n                let data = resolveResponse(res, 'noPop');\r\n                var LtpData = data && data.data;\r\n                //console.log(LtpData);\r\n                if (LtpData && LtpData.ltp) {\r\n                    element.ltp = LtpData.ltp;\r\n                    element.perChange = ((LtpData.ltp - LtpData.close) * 100 / LtpData.close).toFixed(2);\r\n                    localStorage.setItem('orderPenidngList', JSON.stringify(this.state.orderPenidngList));\r\n                    this.setState({ orderPenidngList: this.state.orderPenidngList });\r\n                 //   console.log(\"ltp update\", element.symbol, element)\r\n\r\n                    if (element.buyAt && LtpData.ltp >= parseFloat(element.buyAt)) {\r\n                        var isDelete = this.deleteInOrderPenidngList(element);\r\n                        if (isDelete) { \r\n                            if(element.buyCallOption){\r\n                                //place order here\r\n                                this.buyStockOption(element.buyCallOption);  \r\n                            }else{\r\n                                CommonOrderMethod.historyWiseOrderPlace(element, 'BUY', \"isAutomatic\", this.callBackUpdate);\r\n                            }\r\n                        }\r\n                    } else if (element.sellAt && LtpData.ltp <= parseFloat(element.sellAt)) {\r\n                        var isDelete = this.deleteInOrderPenidngList(element);\r\n                        if (isDelete) {\r\n                            if(element.buyPutOption){\r\n                                //place order here\r\n                                this.buyStockOption(element.buyPutOption);  \r\n                            }else{\r\n                                CommonOrderMethod.historyWiseOrderPlace(element, 'SELL', \"isAutomatic\", this.callBackUpdate);\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                }\r\n            })\r\n\r\n            await new Promise(r => setTimeout(r, 100));\r\n        }\r\n    }\r\n\r\n    getTradePrice = () => {\r\n\r\n        var data = { \"exchange\": this.state.exch_seg, \"tradingsymbol\": this.state.searchSymbolPending, \"symboltoken\": this.state.searchTokenPending };\r\n        AdminService.getLTP(data).then(res => {\r\n            let data = resolveResponse(res, 'noPop');\r\n            var LtpData = data && data.data;\r\n            //console.log(LtpData);\r\n            if (LtpData && LtpData.ltp) {\r\n\r\n\r\n                var lastTradedData = {\r\n                    symbol: LtpData.tradingsymbol,\r\n                    ltp: LtpData.ltp,\r\n                    perChange: ((LtpData.ltp - LtpData.close) * 100 / LtpData.close).toFixed(2),\r\n                    open: LtpData.open,\r\n                    high: LtpData.high,\r\n                    close: LtpData.close,\r\n                    low: LtpData.low,\r\n                }\r\n                this.setState({ lastTradedData: lastTradedData });\r\n                this.showStrikesLtp(\"CE\");\r\n                this.showStrikesLtp(\"PE\");\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        this.updateLTP();\r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var endTime = moment('3:30pm', 'h:mma');\r\n        const friday = 5; // for friday\r\n        var currentTime = moment(new Date(), \"h:mma\");\r\n        const today = moment().isoWeekday();\r\n        //market hours\r\n        if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n            var intervaltime = 1000;\r\n            if (this.state.orderPenidngList.length > 10) {\r\n                intervaltime = this.state.orderPenidngList.length * 110;\r\n            }\r\n            this.setState({ findlast5minMovementInterval: setInterval(() => { this.updateLTP(); }, intervaltime) });\r\n        }\r\n\r\n        AdminService.getFunds().then(fundsRes => {\r\n            // console.log('profiledata', profileRes); \r\n               let fundsResData = resolveResponse(fundsRes);\r\n             //  var fundsResData =  fundsRes && fundsRes.data; \r\n               if(fundsResData.status & fundsResData.message === 'SUCCESS'){\r\n                this.setState({  fundData :fundsResData.data }); \r\n               }\r\n        })\r\n\r\n    }\r\n\r\n\r\n    refreshCandleChartManually = async (row) => {\r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var time = moment.duration(\"12:00:00\");\r\n        var startdate = moment(new Date()).subtract(time);\r\n\r\n        var data = {\r\n            \"exchange\": \"NSE\",\r\n            \"symboltoken\": row.token,\r\n            \"interval\": \"FIVE_MINUTE\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n            \"fromdate\": moment(beginningTime).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n            \"todate\": moment(new Date()).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n        }\r\n        AdminService.getHistoryData(data).then(res => {\r\n            let histdata = resolveResponse(res, 'noPop');\r\n            //console.log(\"candle history\", histdata); \r\n            if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                var candleChartData = [];\r\n                histdata.data.forEach(element => {\r\n                    candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                });\r\n\r\n                localStorage.setItem('candleChangeShow', row.perChange);\r\n                localStorage.setItem('candleChartData', JSON.stringify(candleChartData))\r\n                localStorage.setItem('cadleChartSymbol', row.symbol);\r\n                document.getElementById('showCandleChart').click();\r\n\r\n            } else {\r\n                //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                console.log(row.symboltoken, \"  emply candle found\");\r\n            }\r\n        }).catch(error => {\r\n            this.setState({ failedCount: this.state.failedCount + 1 });\r\n            Notify.showError(row.symboltoken + \" candle failed!\");\r\n        })\r\n\r\n    }\r\n\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value.trim() });\r\n    }\r\n\r\n    onChangeOption = (e) => {\r\n\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    onChange2 = (e) => {\r\n        this.setState({ lastTradedData: {}, buyAtPending: \"\", sellAtPending: \"\", pattenNamePending: \"\", searchSymbolPending: \"\",  CEStrikePrice: '', PEStrikePrice: ''});\r\n\r\n\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        var data = e.target.value;\r\n\r\n        AdminService.autoCompleteSearch(data).then(res => {\r\n            let data = res.data;\r\n            console.log(data);\r\n            localStorage.setItem('autoSearchTemp', JSON.stringify(data));\r\n            this.setState({ autoSearchList: data },() => {\r\n             \r\n            });\r\n        })\r\n\r\n    }\r\n\r\n    openNewPage = (e) => {\r\n        window.open(\"/mtrade/#/order-watchlist\");\r\n        //   window.location.replace('/mtrade/#/order-watchlist'); \r\n        localStorage.setItem('isOpenInNewPage', 'yes');\r\n    }\r\n\r\n    backToPositionPage = (e) => {\r\n        window.location.replace('/mtrade/#/position');\r\n        localStorage.setItem('isOpenInNewPage', 'no');\r\n    }\r\n\r\n\r\n    onSelectItem = (event, values) => {\r\n        var autoSearchTemp = JSON.parse(localStorage.getItem('autoSearchTemp'));\r\n        //  console.log(\"values\", values); \r\n        //   console.log(\"autoSearchTemp\", autoSearchTemp); \r\n        if (autoSearchTemp.length > 0) {\r\n            var fdata = '';\r\n            for (let index = 0; index < autoSearchTemp.length; index++) {\r\n                if (autoSearchTemp[index].symbol === values) {\r\n                    fdata = autoSearchTemp[index];\r\n                    break;\r\n                }\r\n            }\r\n            this.setState({ searchSymbolPending: fdata.symbol, searchTokenPending: fdata.token, exch_seg: fdata.exch_seg }, function () {\r\n                this.getTradePrice();\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n\r\n    getChunkPrice = (price) => {\r\n        return Math.round(price / 100) / 10;\r\n    }\r\n\r\n    suggestBuyPrice = (price) => {\r\n        if (price) {\r\n\r\n            this.setState({ buyAtPending: (price + this.getChunkPrice(price)).toFixed(2) });\r\n\r\n        }\r\n    }\r\n\r\n    suggestSellPrice = (price) => {\r\n        if (price) {\r\n            this.setState({ sellAtPending: (price - this.getChunkPrice(price)).toFixed(2) });\r\n        }\r\n    }\r\n\r\n    showStrikesLtp =(optionType)=> {\r\n       console.log(this.state.searchSymbolPending,  this.state.lastTradedData.ltp); \r\n       this.setState({CEoptionsLtpList : [], PEoptionsLtpList : [], selectedOptionLotsize : ''})\r\n\r\n           let data = {\r\n                name : this.state.searchSymbolPending, \r\n                ltp : this.state.lastTradedData.ltp, \r\n                optionType: optionType\r\n            }; \r\n       AdminService.getStockOptions(data).then(res => {\r\n            let data = res.data;\r\n          //  console.log(data);\r\n            this.getOptionsLtp(data,  optionType); \r\n            //  localStorage.setItem('autoSearchTemp', JSON.stringify(data));\r\n          //  this.setState({ autoSearchList: data });\r\n        })\r\n    }\r\n    getOptionsLtp = async(nearOptions, optionType)=> {\r\n\r\n        console.log(\"nearOptions\", nearOptions, nearOptions.length)\r\n\r\n        for (let index = 0; index < nearOptions.length; index++) {\r\n            const element = nearOptions[index];\r\n            console.log(\"element\", element )\r\n\r\n\r\n            var data = { \"exchange\": element.exch_seg, \"tradingsymbol\": element.symbol, \"symboltoken\": element.token };\r\n            AdminService.getLTP(data).then(res => {\r\n                let data = resolveResponse(res, 'noPop');\r\n                var LtpData = data && data.data;\r\n                console.log(element.symbol, LtpData, res);\r\n                if (LtpData && LtpData.ltp) {\r\n\r\n                    let optionLtp = {\r\n                        symbol: LtpData.tradingsymbol,\r\n                        ltp: LtpData.ltp,\r\n                        perChange: ((LtpData.ltp - LtpData.close) * 100 / LtpData.close).toFixed(2),\r\n                        open: LtpData.open,\r\n                        high: LtpData.high,\r\n                        close: LtpData.close,\r\n                        low: LtpData.low,\r\n                        buyPrice: (parseFloat(element.lotsize) * LtpData.ltp).toFixed(2), \r\n                        expiryMonth: element.expiryMonth,\r\n                        strikePrice : parseFloat(element.strike/100), \r\n                        optionType: element.optionType, \r\n                        token:element.token, \r\n                        exch_seg: element.exch_seg, \r\n                        lotsize: element.lotsize\r\n                    }\r\n\r\n                    if(optionType === 'CE'){\r\n                        this.setState({ CEoptionsLtpList: [...this.state.CEoptionsLtpList, optionLtp],  selectedOptionLotsize :  element.lotsize}, ()=> {\r\n                            console.log(this.state.CEoptionsLtpList)\r\n                        });\r\n                    }\r\n                    if(optionType === 'PE'){\r\n                        this.setState({ PEoptionsLtpList: [...this.state.PEoptionsLtpList, optionLtp],  selectedOptionLotsize :  element.lotsize}, ()=> {\r\n                            console.log(this.state.PEoptionsLtpList)\r\n                        });\r\n                    }\r\n                    \r\n                }\r\n            })\r\n\r\n            await new Promise(r => setTimeout(r, 250));\r\n        }\r\n\r\n\r\n    }\r\n\r\n    buyOption = (optiontype, symbol, strikePrice, expiryDate, noOfLot, priceInfo) => {\r\n        console.log(optiontype, symbol, strikePrice, expiryDate);\r\n        let exp = expiryDate.toUpperCase().split('-');\r\n        exp = exp[0] + exp[1] + exp[2] % 1000;\r\n\r\n        let optionName = symbol + exp + strikePrice + optiontype;\r\n        console.log(optionName);\r\n\r\n        AdminService.autoCompleteSearch(optionName).then(res => {\r\n            let data = res.data;\r\n            let optionData = data && data[0];\r\n            console.log(\"optionData\", optionData);\r\n\r\n\r\n            if (optionData && optionData.symbol && optionData.symbol == optionName) {\r\n                var ltpparam = { \"exchange\": optionData.exch_seg, \"tradingsymbol\": optionData.symbol, \"symboltoken\": optionData.token };\r\n\r\n                AdminService.getLTP(ltpparam).then(res => {\r\n                    let data = resolveResponse(res, 'noPop');\r\n                    var LtpData = data && data.data;\r\n                    if (LtpData && LtpData.ltp) {\r\n\r\n                        console.log(\"option ltp\", LtpData);\r\n\r\n                        let quantity = optionData.lotsize * noOfLot;\r\n\r\n                        let today = moment().isoWeekday();\r\n                        let slpercentage = 10;\r\n                        if (today == 2)\r\n                            slpercentage = 15\r\n                        else if (today == 3)\r\n                            slpercentage = 20\r\n                        else if (today == 4)\r\n                            slpercentage = 30\r\n\r\n                        let perStopTrigerLoss = LtpData.ltp - (LtpData.ltp * slpercentage / 100);\r\n                        perStopTrigerLoss = CommonOrderMethod.getMinPriceAllowTick(perStopTrigerLoss);\r\n                        let stopLossPrice = perStopTrigerLoss - (perStopTrigerLoss * 1 / 100);\r\n                        stopLossPrice = CommonOrderMethod.getMinPriceAllowTick(stopLossPrice);\r\n\r\n                        if (priceInfo && priceInfo.priceStopLoss) {\r\n\r\n                            slpercentage = 50\r\n                            perStopTrigerLoss = LtpData.ltp - (LtpData.ltp * slpercentage / 100);\r\n                            perStopTrigerLoss = CommonOrderMethod.getMinPriceAllowTick(perStopTrigerLoss);\r\n                            stopLossPrice = perStopTrigerLoss - (perStopTrigerLoss * 1 / 100);\r\n                            stopLossPrice = CommonOrderMethod.getMinPriceAllowTick(stopLossPrice);\r\n\r\n                            let trackSLPrice = {\r\n                                name: symbol,\r\n                                priceStopLoss: priceInfo.priceStopLoss,\r\n                                priceTarget: priceInfo.priceTarget,\r\n                                tradingsymbol: optionData.symbol,\r\n                                symboltoken: optionData.token,\r\n                                optiontype: optiontype\r\n                            }\r\n                            this.setState({ trackSLPrice: [...this.state.trackSLPrice, trackSLPrice] }, function () {\r\n                                localStorage.setItem('trackSLPrice', JSON.stringify(this.state.trackSLPrice));\r\n                            })\r\n                        }\r\n\r\n\r\n                        let element = {\r\n                            tradingsymbol: optionData.symbol,\r\n                            symboltoken: optionData.token,\r\n                            transactiontype: \"BUY\",\r\n                            ordertype: \"LIMIT\",\r\n                            buyPrice: LtpData.ltp,\r\n                            producttype: \"CARRYFORWARD\",\r\n                            exchange: optionData.exch_seg,\r\n                            stopLossTriggerPrice: perStopTrigerLoss,\r\n                            stopLossPrice: stopLossPrice,\r\n                            quantity: quantity\r\n                        }\r\n                        CommonOrderMethod.placeOptionOrder(element);\r\n                    }\r\n                })\r\n            } else {\r\n                Notify.showError(optionName + \" not found\");\r\n            }\r\n\r\n            //localStorage.setItem('autoSearchTemp', JSON.stringify(data));\r\n            //    this.setState({ autoSearchList: data });\r\n        })\r\n\r\n    }\r\n\r\n    buyStockOption = (optionData) => {\r\n\r\n        var ltpparam = { \"exchange\": optionData.exch_seg, \"tradingsymbol\": optionData.symbol, \"symboltoken\": optionData.token };\r\n\r\n        AdminService.getLTP(ltpparam).then(res => {\r\n            let data = resolveResponse(res, 'noPop');\r\n            var LtpData = data && data.data;\r\n            if (LtpData && LtpData.ltp) {\r\n\r\n                console.log(\"option ltp\", LtpData);\r\n\r\n                let quantity = optionData.lotsize;\r\n\r\n                // let today = moment().isoWeekday();\r\n                 let slpercentage = 10;\r\n                // if (today == 2)\r\n                //     slpercentage = 15\r\n                // else if (today == 3)\r\n                //     slpercentage = 20\r\n                // else if (today == 4)\r\n                //     slpercentage = 30\r\n\r\n                let perStopTrigerLoss = LtpData.ltp - (LtpData.ltp * slpercentage / 100);\r\n                perStopTrigerLoss = CommonOrderMethod.getMinPriceAllowTick(perStopTrigerLoss);\r\n                let stopLossPrice = perStopTrigerLoss - (perStopTrigerLoss * 1 / 100);\r\n                stopLossPrice = CommonOrderMethod.getMinPriceAllowTick(stopLossPrice);\r\n\r\n                let element = {\r\n                    tradingsymbol: optionData.symbol,\r\n                    symboltoken: optionData.token,\r\n                    transactiontype: \"BUY\",\r\n                    ordertype: \"LIMIT\",\r\n                    buyPrice: LtpData.ltp,\r\n                    producttype: \"CARRYFORWARD\",\r\n                    exchange: optionData.exch_seg,\r\n                    stopLossTriggerPrice: perStopTrigerLoss,\r\n                    stopLossPrice: stopLossPrice,\r\n                    quantity: quantity,\r\n                    netqty:quantity\r\n                }\r\n                CommonOrderMethod.placeOptionOrder(element);\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    toFixedAmount =(value) => {\r\n\r\n        if(value){\r\n          return  parseFloat(value).toFixed(2);\r\n        }\r\n       }\r\n    render() {\r\n\r\n        return (\r\n            <React.Fragment>\r\n\r\n\r\n                {window.location.hash == \"#/order-watchlist\" ? <PostLoginNavBar /> : \"\"}\r\n                <ChartDialog />\r\n\r\n                \r\n\r\n                <Grid justify=\"space-between\" container>\r\n\r\n                    <Typography style={{color:'green'}}>\r\n                    Net Balance:   {this.state.fundData &&  this.toFixedAmount(this.state.fundData.net)}\r\n                    </Typography>\r\n                    <Typography  style={{color:'green'}}>\r\n                    Available Cash :   {this.state.fundData &&  this.toFixedAmount(this.state.fundData.availablecash)}\r\n                    </Typography>\r\n                \r\n                    <Grid item xs={12} sm={12}>\r\n                        {window.location.hash == \"#/position-new\" || window.location.hash == \"#/order-watchlist\"  ? <OptionBuyWithSPLevel buyOption={this.buyOption} /> : \"\"}\r\n                    </Grid>\r\n\r\n                    {window.location.hash == \"#/order-watchlist\" ?\r\n\r\n                    <Grid item xs={12} sm={12}>\r\n                        <Paper style={{ overflow: \"auto\", padding: '5px', background: \"#d4ffe0\" }} >\r\n                            <Typography color=\"primary\" gutterBottom>\r\n                                Stock  Order Watchlist ({this.state.orderPenidngList && this.state.orderPenidngList.length})\r\n                                {window.location.hash != \"#/order-watchlist\" ? <Button onClick={() => this.openNewPage()}> New Page <OpenInNewIcon /> </Button> : \"\"}\r\n                                {window.location.hash != \"#/position-new\" ? <Button onClick={() => this.backToPositionPage()}> Back to Position </Button> : \"\"}\r\n                            </Typography>\r\n\r\n                            <Grid justify=\"space-between\"\r\n                                container>\r\n\r\n\r\n\r\n\r\n                                <Grid item  >\r\n\r\n                                    <Grid container spacing={2}>\r\n                                        <Grid item >\r\n                                            {/* <TextField label=\"Type full Symbol\" name=\"searchSymbolPending\" value={this.state.searchSymbolPending} onChange={this.searchSymbolPendingOrder} /> */}\r\n                                            <Autocomplete\r\n                                                freeSolo\r\n                                                id=\"free-solo-2-demo\"\r\n\r\n                                                disableClearable\r\n                                                onChange={this.onSelectItem}\r\n                                                value={this.state.searchSymbolPending}\r\n                                                //+ ' '+  option.exch_seg\r\n                                                options={this.state.autoSearchList.length > 0 ? this.state.autoSearchList.map((option) =>\r\n                                                    option.symbol\r\n                                                ) : []}\r\n                                                renderInput={(params) => (\r\n                                                    <TextField\r\n                                                        onChange={this.onChange2}\r\n                                                        {...params}\r\n                                                        label={\"Search Symbol\"}\r\n                                                        margin=\"normal\"\r\n                                                        style={{ width: \"200px\", marginTop: 'inherit' }}\r\n                                                        name=\"searchSymbolPending\"\r\n                                                        variant=\"standard\"\r\n                                                        InputProps={{ ...params.InputProps, type: 'search' }}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                            {this.state.lastTradedData.symbol}  Ltp: <b style={{ color: this.state.lastTradedData.perChange == 0 ? \"none\" : this.state.lastTradedData.perChange > 0 ? \"green\" : \"red\" }}> {this.state.lastTradedData.ltp} {this.state.lastTradedData.ltp ? \"(\" + this.state.lastTradedData.perChange + \"%)\" : \"\"}</b>\r\n                                        </Grid>\r\n\r\n\r\n                                        <Grid item>\r\n                                            <TextField label=\"BuyAt(Above)\" type=\"number\" name=\"buyAtPending\" value={this.state.buyAtPending} onChange={this.updateInput} />\r\n                                            <br /> High: {this.state.lastTradedData.high}\r\n                                            <Button size=\"small\" style={{ color: \"blue\" }} onClick={() => this.suggestBuyPrice(this.state.lastTradedData.high)}> Suggest Price </Button>\r\n\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <FormControl style={styles.selectStyle}>\r\n                                                <InputLabel htmlFor=\"strike\">Strike</InputLabel>\r\n                                                <Select value={this.state.CEStrikePrice} name=\"CEStrikePrice\" style={{width: \"200px\"}} onChange={this.onChangeOption}>\r\n                                                    <MenuItem value={''}>Month Strike Type Ltp Margin</MenuItem>\r\n                                                    {this.state.CEoptionsLtpList && this.state.CEoptionsLtpList.map(element => (\r\n                                                        <MenuItem style={{ fontWeight:  moment().format('MMM').toUpperCase() == element.expiryMonth ? \"bold\" : \"\" }} value={element}>{element.expiryMonth+\" \" +element.strikePrice +\" \"+ element.optionType +\" ltp: \" + element.ltp + \"/- \" + element.buyPrice}</MenuItem>\r\n                                                    ))\r\n                                                    }\r\n                                                </Select>\r\n                                                Lotsize: {this.state.selectedOptionLotsize}\r\n                                            </FormControl>\r\n                                        </Grid>\r\n\r\n                                        <Grid item>\r\n                                            <TextField label=\"SellAt(Below)\" type=\"number\" name=\"sellAtPending\" value={this.state.sellAtPending} onChange={this.updateInput} />\r\n                                            <br /> Low: {this.state.lastTradedData.low}\r\n                                            <Button size=\"small\" style={{ color: \"blue\" }} onClick={() => this.suggestSellPrice(this.state.lastTradedData.low)}> Suggest Price </Button>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <FormControl style={styles.selectStyle}>\r\n                                                <InputLabel htmlFor=\"strike\">Strike</InputLabel>\r\n                                                <Select value={this.state.PEStrikePrice} name=\"PEStrikePrice\" style={{width: \"200px\"}} onChange={this.onChangeOption}>\r\n                                                    <MenuItem value={''}>Month Strike Type Ltp Margin</MenuItem>\r\n                                                    {this.state.PEoptionsLtpList && this.state.PEoptionsLtpList.map(element => (\r\n                                                        <MenuItem style={{ fontWeight:  moment().format('MMM').toUpperCase() == element.expiryMonth ? \"bold\" : \"\" }} value={element}>{element.expiryMonth+\" \" +element.strikePrice +\" \"+ element.optionType +\" ltp: \" + element.ltp + \"/- \" + element.buyPrice}</MenuItem>\r\n                                                    ))\r\n                                                    }\r\n                                                </Select>\r\n                                                Lotsize: {this.state.selectedOptionLotsize}\r\n                                            </FormControl>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <TextField label=\"Which Pattern\" name=\"pattenNamePending\" value={this.state.pattenNamePending} onChange={this.updateInput} />\r\n                                            <br /> Open: {this.state.lastTradedData.open}\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <Button variant=\"contained\" style={{ marginLeft: '20px', marginTop: '10px' }} onClick={() => this.addInOrderPenidngList()}> Add </Button>\r\n                                            <br /> P.Close: {this.state.lastTradedData.close}\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                </Grid>\r\n\r\n\r\n                                <Table size=\"small\" aria-label=\"sticky table\" >\r\n                                    <TableHead style={{ whiteSpace: \"nowrap\", }} variant=\"head\">\r\n                                        <TableRow key=\"1\" variant=\"head\" style={{ fontWeight: 'bold' }}>\r\n\r\n                                            <TableCell className=\"TableHeadFormat\" align=\"left\">Symbol</TableCell>\r\n                                            <TableCell className=\"TableHeadFormat\" align=\"left\">Patten Name</TableCell>\r\n\r\n                                            <TableCell className=\"TableHeadFormat\" align=\"left\">CreatetAt</TableCell>\r\n\r\n                                            <TableCell className=\"TableHeadFormat\" align=\"left\">Exch_seg</TableCell>\r\n                                            <TableCell className=\"TableHeadFormat\" align=\"left\">Token</TableCell>\r\n                                            <TableCell className=\"TableHeadFormat\" align=\"left\">BuyAt</TableCell>\r\n                                            <TableCell className=\"TableHeadFormat\" align=\"left\">CE Buy</TableCell>\r\n\r\n                                            <TableCell className=\"TableHeadFormat\" align=\"left\">SellAt</TableCell>\r\n                                            <TableCell className=\"TableHeadFormat\" align=\"left\">PE Buy</TableCell>\r\n\r\n                                            <TableCell className=\"TableHeadFormat\" align=\"left\">LTP</TableCell>\r\n                                            <TableCell className=\"TableHeadFormat\" align=\"left\">Delete</TableCell>\r\n\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody id=\"tableAdd\" style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n\r\n                                        {this.state.orderPenidngList ? this.state.orderPenidngList.map(row => (\r\n                                            <TableRow hover >\r\n\r\n\r\n\r\n\r\n                                                <TableCell align=\"left\">\r\n                                                    <Button style={{ color: row.perChange > 0 ? \"green\" : \"red\" }} size=\"small\" variant=\"contained\" title=\"Candle refresh\" onClick={() => this.refreshCandleChartManually(row)} >\r\n                                                        {row.symbol} {row.ltp} ({row.perChange}) <ShowChartIcon />\r\n                                                    </Button>\r\n                                                </TableCell>\r\n                                                <TableCell align=\"left\">{row.pattenName}</TableCell>\r\n\r\n\r\n                                                <TableCell align=\"left\">{row.createdAt}</TableCell>\r\n\r\n\r\n                                                <TableCell align=\"left\">{row.exch_seg}</TableCell>\r\n                                                <TableCell align=\"left\">{row.token}</TableCell>\r\n\r\n                                                <TableCell align=\"left\">{row.buyAt}</TableCell>\r\n                                                <TableCell align=\"left\">{row.buyCallOption && row.buyCallOption.symbol}</TableCell>\r\n\r\n                                                <TableCell align=\"left\">{row.sellAt}</TableCell>\r\n                                                <TableCell align=\"left\">{row.buyPutOption && row.buyPutOption.symbol}</TableCell>\r\n\r\n                                                <TableCell align=\"left\" style={{ color: row.perChange == 0.00 ? \"none\" : row.perChange > 0 ? \"green\" : \"red\" }}><b>{row.ltp} ({row.perChange}%) </b></TableCell>\r\n\r\n                                                <TableCell align=\"left\">\r\n                                                    <DeleteIcon style={{ cursor: \"pointer\" }} onClick={() => this.deleteInOrderPenidngList(row)} />\r\n                                                </TableCell>\r\n\r\n                                            </TableRow>\r\n                                        )) : ''}\r\n                                    </TableBody>\r\n                                </Table>\r\n\r\n\r\n                            </Grid>\r\n\r\n\r\n                        </Paper>\r\n\r\n                    </Grid> : \"\"}\r\n\r\n\r\n                </Grid>\r\n\r\n\r\n\r\n\r\n                {window.location.hash == \"#/order-watchlist\" ?\r\n                    <Paper style={{ overflow: \"auto\", padding: '5px' }} >\r\n                        <Typography color=\"primary\" gutterBottom>\r\n                            Option Chain (Equity Derivatives)\r\n                        </Typography>\r\n                        <BankNiftyView buyOption={this.buyOption} />\r\n                    </Paper> : \"\"}\r\n\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n\r\nconst styles = {\r\n    tableStyle : {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    selectStyle: {\r\n        minWidth: '100%',\r\n        marginBottom: '10px'\r\n    },\r\n}\r\n\r\n// const mapStateToProps=(state)=>{\r\n//     return {packs:state.packs.packs.data};\r\n// }\r\n\r\n//export default connect(mapStateToProps,{setPackLoaded})(OrderBook);\r\nexport default OrderBook;","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport { resolveResponse } from \"../../utils/ResponseHandler\";\r\nimport MaterialUIDateTimePicker from '../../utils/MaterialUIDateTimePicker';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport * as moment from 'moment';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport Notify from \"../../utils/Notify\";\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Spinner from \"react-spinner-material\";\r\nimport { createChart } from 'lightweight-charts';\r\n\r\nimport { w3cwebsocket } from 'websocket';\r\nimport ChartDialog from './ChartDialog';\r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\nimport pako from 'pako';\r\nimport vwap from 'vwap';\r\nimport { SMA, RSI, VWAP, BollingerBands } from 'technicalindicators';\r\nimport SimpleExpansionPanel from \"./SimpleExpansionPanel\";\r\nimport SimpleExpansionFastMovement from \"./SimpleExpansionFastMovement\";\r\nimport LiveBidsExpantion from \"./LiveBidsExpantion\";\r\nimport WatchListTab from \"./WatchListTab\";\r\nimport OrderWatchlist from './OrderWatchlist';\r\n\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sumPercentage: 0,\r\n            InstrumentPerChange: \"\",\r\n            autoSearchList: [],\r\n            isDasable: false,\r\n            isError: false,\r\n            InstrumentLTP: {},\r\n            ifNotBought: true,\r\n            autoSearchTemp: [],\r\n            symboltoken: \"\",\r\n            tradingsymbol: \"\",\r\n            buyPrice: 0,\r\n            quantity: 1,\r\n            producttype: \"INTRADAY\",\r\n            symbolList: localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')) || [],\r\n            totalWatchlist: localStorage.getItem('totalWatchlist') && JSON.parse(localStorage.getItem('totalWatchlist')) || [],\r\n            staticData: localStorage.getItem('staticData') && JSON.parse(localStorage.getItem('staticData')) || {},\r\n            selectedWatchlist: 'NIFTY BANK', //'Securities in F&O',\r\n            longExitPriceType: 4,\r\n            shortExitPriceType: 4,\r\n            candleChartData: [],\r\n            stopScaningFlag: false,\r\n            searchFailed: 0,\r\n            openEqualHighList: [],\r\n            openEqualLowList: [],\r\n            closeingEqualHighList: [],\r\n            chartStaticData: [],\r\n            volumeCrossedList: [],\r\n            slowMotionStockList: [],\r\n            volumeBreakoutlast5CandleList: [],\r\n            oneHourBullBearCheckList: [],\r\n            timeFrame: \"FIFTEEN_MINUTE\",\r\n            cursor: '',\r\n            advanceShareCount: 0,\r\n            declineShareCount: 0,\r\n            UnchangeShareCount: 0,\r\n            FoundPatternList: localStorage.getItem('FoundPatternList') && JSON.parse(localStorage.getItem('FoundPatternList')) || [],\r\n            fastMovementList: localStorage.getItem('fastMovementList') && JSON.parse(localStorage.getItem('fastMovementList')) || [],\r\n            liveBidsList: [], //localStorage.getItem('liveBidsList') && JSON.parse(localStorage.getItem('liveBidsList')) || [],\r\n            gainerList: localStorage.getItem('gainerList') && JSON.parse(localStorage.getItem('gainerList')) || [],\r\n            looserList: localStorage.getItem('looserList') && JSON.parse(localStorage.getItem('looserList')) || [],\r\n        };\r\n        this.myCallback = this.myCallback.bind(this);\r\n        this.updateSocketWatch = this.updateSocketWatch.bind(this);\r\n\r\n    }\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        var data = e.target.value;\r\n        AdminService.autoCompleteSearch(data).then(res => {\r\n            let data = res.data;\r\n            //  console.log(data);\r\n            localStorage.setItem('autoSearchTemp', JSON.stringify(data));\r\n            this.setState({ autoSearchList: data });\r\n        })\r\n\r\n    }\r\n\r\n    onInputChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value }, function () {\r\n            //    console.log(\"time\", this.state.timeFrame);\r\n            if (this.state.tradingsymbol) {\r\n                this.showStaticChart(this.state.symboltoken);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    onChangeWatchlist = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        var staticData = this.state.staticData;\r\n        this.setState({ symbolList: staticData[e.target.value] }, function () {\r\n            //    this.updateSocketWatch();\r\n            this.checkOpenEqualToLow();\r\n            this.setState({ cursor: '' });\r\n        });\r\n\r\n        if (e.target.value == \"selectall\") {\r\n            this.setState({ symbolList: localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')) }, function () {\r\n                //      this.updateSocketWatch();\r\n                //  this.checkOpenEqualToLow();\r\n                this.setState({ cursor: '' });\r\n            });\r\n        }\r\n    }\r\n    checkOpenEqualToLow = async () => {\r\n\r\n        this.setState({\r\n            openEqualHighList: [], openEqualLowList: [], openEqualLowList: [], advanceShareCount: 0,\r\n            declineShareCount: 0, UnchangeShareCount: 0, volumeCrossedList: [], closeingEqualHighList: []\r\n        });\r\n\r\n\r\n        for (let index = 0; index < this.state.symbolList.length; index++) {\r\n            const element = this.state.symbolList[index];\r\n\r\n            var data = {\r\n                \"exchange\": element.exch_seg,\r\n                \"tradingsymbol\": element.symbol,\r\n                \"symboltoken\": element.token,\r\n            }\r\n            AdminService.getLTP(data).then(res => {\r\n                let data = resolveResponse(res, 'noPop');\r\n                var LtpData = data && data.data;\r\n                if (LtpData) {\r\n\r\n                    let change = ((LtpData.ltp - LtpData.close) * 100 / LtpData.close).toFixed(2);\r\n                    LtpData.nc = change;\r\n                    LtpData.symbol = element.symbol;\r\n\r\n                    this.state.symbolList[index].ltp = LtpData.ltp;\r\n                    this.state.symbolList[index].nc = change;\r\n\r\n                    if (LtpData && LtpData.open == LtpData.low) {\r\n                        console.log(\"o=l\", LtpData);\r\n                        var isfound = this.state.openEqualLowList.filter(row => row.symboltoken == element.token);\r\n                        if (!isfound.length)\r\n                            this.setState({ openEqualLowList: [...this.state.openEqualLowList, LtpData] });\r\n                    }\r\n                    console.log(element.symbol, \"ltp=newhigh\", LtpData.ltp, (LtpData.high - LtpData.high * 0.5 / 100));\r\n\r\n                    if (LtpData && LtpData.ltp >= (LtpData.high - LtpData.high * 0.5 / 100)) {\r\n                        var isfound = this.state.closeingEqualHighList.filter(row => row.symboltoken == element.token);\r\n                        if (!isfound.length)\r\n                            this.setState({ closeingEqualHighList: [...this.state.closeingEqualHighList, LtpData] });\r\n                    }\r\n\r\n                    if (LtpData && LtpData.open == LtpData.high) {\r\n                        console.log(\"o=h\", LtpData);\r\n                        var isfound = this.state.openEqualHighList.filter(row => row.symboltoken == element.token);\r\n                        if (!isfound.length)\r\n                            this.setState({ openEqualHighList: [...this.state.openEqualHighList, LtpData] });\r\n\r\n                    }\r\n\r\n                    if (LtpData.perChange > 0)\r\n                        this.setState({ advanceShareCount: this.state.advanceShareCount + 1 });\r\n                    else if (LtpData.perChange < 0)\r\n                        this.setState({ declineShareCount: this.state.declineShareCount + 1 });\r\n                    else\r\n                        this.setState({ UnchangeShareCount: this.state.UnchangeShareCount + 1 });\r\n\r\n\r\n                    this.state.symbolList && this.state.symbolList.sort(function (a, b) {\r\n                        return b.nc - a.nc;\r\n                    });\r\n                    this.setState({ symbolList: this.state.symbolList, tradingsymbol: element.symbol, symboltoken: element.token });\r\n\r\n                    //   this.dailyBasisInfoCheck(element.token, element);\r\n\r\n                    // this.checkSlowMotionStock(element.token, element);\r\n\r\n                }\r\n            })\r\n            await new Promise(r => setTimeout(r, 310));\r\n        }\r\n\r\n    }\r\n\r\n\r\n    myCallback = (date, fromDate) => {\r\n        if (fromDate === \"START_DATE\") {\r\n            this.setState({ startDate: date });\r\n        } else if (fromDate === \"END_DATE\") {\r\n            this.setState({ endDate: date });\r\n        }\r\n    };\r\n    getLTP = () => {\r\n        var data = {\r\n            \"exchange\": \"NSE\",\r\n            \"tradingsymbol\": this.state.tradingsymbol,\r\n            \"symboltoken\": this.state.symboltoken,\r\n        }\r\n        AdminService.getLTP(data).then(res => {\r\n            let data = resolveResponse(res, 'noPop');\r\n            var LtpData = data && data.data;\r\n            this.setState({ InstrumentLTP: LtpData });\r\n\r\n            if (LtpData && LtpData.ltp)\r\n                this.setState({ InstrumentPerChange: ((LtpData.ltp - LtpData.close) * 100 / LtpData.close).toFixed(2) });\r\n            //  this.dailyBasisInfoCheck(this.state.symboltoken);\r\n\r\n\r\n        })\r\n    }\r\n    decodeWebsocketData = (array) => {\r\n        var newarray = [];\r\n        try {\r\n            for (var i = 0; i < array.length; i++) {\r\n                newarray.push(String.fromCharCode(array[i]));\r\n            }\r\n        } catch (e) { }\r\n\r\n        return newarray.join('');\r\n    }\r\n\r\n\r\n\r\n    makeConnection = (wsClint) => {\r\n        var firstTime_req = '{\"task\":\"cn\",\"channel\":\"NONLM\",\"token\":\"' + this.state.feedToken + '\",\"user\": \"' + this.state.clientcode + '\",\"acctid\":\"' + this.state.clientcode + '\"}';\r\n        wsClint.send(firstTime_req);\r\n        this.updateSocketWatch(wsClint);\r\n    }\r\n\r\n    updateSocketWatch = (wsClint) => {\r\n        var channel = this.state.symbolList.map(element => {\r\n            return 'nse_cm|' + element.token;\r\n        });\r\n        channel = channel.join('&');\r\n        var updateSocket = {\r\n            \"task\": \"mw\",\r\n            \"channel\": channel,\r\n            \"token\": this.state.feedToken,\r\n            \"user\": this.state.clientcode,\r\n            \"acctid\": this.state.clientcode\r\n        }\r\n        console.log(\"updated ws watchlisht\", this.state.selectedWatchlist, updateSocket);\r\n        wsClint.send(JSON.stringify(updateSocket));\r\n    }\r\n\r\n    updateSocketDetails = (wsClint) => {\r\n        wsClint.onopen = (res) => {\r\n            this.makeConnection(wsClint);\r\n            this.updateSocketWatch(wsClint);\r\n        }\r\n\r\n        wsClint.onmessage = (message) => {\r\n            var decoded = window.atob(message.data);\r\n            var data = this.decodeWebsocketData(pako.inflate(decoded));\r\n            var liveData = JSON.parse(data);\r\n            var symbolListArray = this.state.symbolList;\r\n            this.state.symbolList && this.state.symbolList.forEach((element, index) => {\r\n                var foundLive = liveData.filter(row => row.tk == element.token);\r\n                if (foundLive.length > 0 && foundLive[0].ltp && foundLive[0].nc) {\r\n                    symbolListArray[index].ltp = foundLive[0].ltp;\r\n                    symbolListArray[index].nc = foundLive[0].nc;\r\n                    //  console.log(\"ws onmessage: \", foundLive);\r\n\r\n                }\r\n            });\r\n            symbolListArray && symbolListArray.sort(function (a, b) {\r\n                return b.nc - a.nc;\r\n            });\r\n            this.setState({ symbolList: symbolListArray });\r\n        }\r\n\r\n        wsClint.onerror = (e) => {\r\n            console.log(\"socket error\", e);\r\n        }\r\n\r\n        setInterval(() => {\r\n            //  this.makeConnection();\r\n            var _req = '{\"task\":\"hb\",\"channel\":\"\",\"token\":\"' + this.state.feedToken + '\",\"user\": \"' + this.state.clientcode + '\",\"acctid\":\"' + this.state.clientcode + '\"}';\r\n            // console.log(\"Request :- \" + _req);\r\n            wsClint.send(_req);\r\n        }, 59000);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        window.document.title = \"Home\";\r\n        this.setState({ symbolList: this.state.staticData[this.state.selectedWatchlist] });\r\n\r\n        var tokens = JSON.parse(localStorage.getItem(\"userTokens\"));\r\n        var feedToken = tokens && tokens.feedToken;\r\n        var userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\r\n        var clientcode = userProfile && userProfile.clientcode;\r\n        this.setState({ feedToken: feedToken, clientcode: clientcode });\r\n\r\n        const domElement = document.getElementById('tvchart');\r\n        document.getElementById('tvchart').innerHTML = '';\r\n        const chart = createChart(domElement, { width: 600, height: 400, timeVisible: true, secondsVisible: true, });\r\n        const candleSeries = chart.addCandlestickSeries();\r\n        var smaLineSeries = chart.addLineSeries({\r\n            color: 'rgba(4, 111, 232, 1)',\r\n            lineWidth: 2,\r\n        });\r\n        var volumeSeries = chart.addHistogramSeries({\r\n            color: '#26a69a',\r\n            priceFormat: {\r\n                type: 'volume',\r\n            },\r\n            priceScaleId: '',\r\n            scaleMargins: {\r\n                top: 0.8,\r\n                bottom: 0,\r\n            },\r\n        });\r\n\r\n        this.setState({ chart: chart, candleSeries: candleSeries, smaLineSeries: smaLineSeries, volumeSeries: volumeSeries });\r\n\r\n        // this.checkOpenEqualToLow();\r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var endTime = moment('3:30pm', 'h:mma');\r\n        const friday = 5; // for friday\r\n        var currentTime = moment(new Date(), \"h:mma\");\r\n        const today = moment().isoWeekday();\r\n        //market hours\r\n        if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n            // const wsClint = new w3cwebsocket('wss://omnefeeds.angelbroking.com/NestHtml5Mobile/socket/stream');\r\n            // this.updateSocketDetails(wsClint);\r\n            setInterval(() => {\r\n                if (this.state.tradingsymbol) {\r\n                    this.getLTP();\r\n                    //this.showStaticChart(this.state.symboltoken);\r\n                }\r\n                var fastMovementList = localStorage.getItem('fastMovementList') && JSON.parse(localStorage.getItem('fastMovementList'));\r\n                fastMovementList && fastMovementList.length && fastMovementList.reverse();\r\n                this.setState({ fastMovementList: fastMovementList })\r\n            }, 1000);\r\n\r\n            setInterval(() => {\r\n                this.checkSlowMotionCheckLive();\r\n            }, 5 * 75000);\r\n\r\n\r\n            setInterval(() => {\r\n                this.searchValumeBreakoutStock();\r\n            }, 15 * 75000);\r\n\r\n\r\n            var tostartInteral = setInterval(() => {\r\n                var time = new Date();\r\n                console.log(\"setinterval \", new Date().toLocaleString());\r\n                if (time.getMinutes() % 60 === 0) {\r\n                    setTimeout(() => {\r\n                        this.oneHourBullBearCheck();\r\n                    }, 90000);\r\n                    setInterval(() => {\r\n                        this.oneHourBullBearCheck();\r\n                    }, 60000 * 60 + 70000);\r\n                    clearInterval(tostartInteral);\r\n                }\r\n            }, 1000);\r\n\r\n        }\r\n\r\n\r\n        setInterval(() => {\r\n\r\n\r\n            this.setState({ gainerList: localStorage.getItem('gainerList') && JSON.parse(localStorage.getItem('gainerList')) })\r\n            this.setState({ looserList: localStorage.getItem('looserList') && JSON.parse(localStorage.getItem('looserList')) })\r\n\r\n\r\n        }, 1000);\r\n\r\n        //  this.oneHourBullBearCheck(); \r\n\r\n        // this.checkLiveBids();\r\n\r\n    }\r\n\r\n    // shouldComponentUpdate(nextProps, nextState){\r\n    //     return  false //!equals(nextProps, this.props); // equals() is your implementation\r\n    // }\r\n\r\n\r\n    placeOrder = (transactiontype) => {\r\n\r\n        var data = {\r\n            \"variety\": \"NORMAL\",\r\n            \"tradingsymbol\": this.state.tradingsymbol,\r\n            \"symboltoken\": this.state.symboltoken,\r\n            \"transactiontype\": transactiontype, //BUY OR SELL\r\n            \"exchange\": \"NSE\",\r\n            \"ordertype\": this.state.buyPrice === 0 ? \"MARKET\" : \"LIMIT\",\r\n            \"producttype\": this.state.producttype, //\"INTRADAY\",//\"DELIVERY\",\r\n            \"duration\": \"DAY\",\r\n            \"price\": 0,\r\n            \"squareoff\": \"0\",\r\n            \"stoploss\": \"0\",\r\n            \"quantity\": this.state.quantity,\r\n        }\r\n\r\n        AdminService.placeOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n            //   console.log(data);   \r\n            if (data.status && data.message === 'SUCCESS') {\r\n                localStorage.setItem('ifNotBought', 'false')\r\n                this.setState({ orderid: data.data && data.data.orderid });\r\n\r\n                if (this.state.stoploss) {\r\n\r\n                    if (transactiontype == \"BUY\") {\r\n                        this.placeSLMOrder(\"SELL\");\r\n                    }\r\n\r\n                    if (transactiontype == \"SELL\") {\r\n                        this.placeSLMOrder(\"BUY\");\r\n                    }\r\n\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    LoadSymbolDetails = (name, i) => {\r\n        console.log(\"name\", name);\r\n        var token = '';\r\n        var watchList = localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')) || [];\r\n        for (let index = 0; index < watchList.length; index++) {\r\n            if (watchList[index].symbol === name || watchList[index].name === name) {\r\n                token = watchList[index].token;\r\n                console.log(\"name % token\", name, token);\r\n                this.setState({ tradingsymbol: watchList[index].symbol, symboltoken: watchList[index].token }, function () {\r\n                    this.setState({ cursor: i }, function () {\r\n                        this.showStaticChart(token);\r\n                        // this.getLTP();\r\n                        // this.dailyBasisInfoCheck(this.state.symboltoken);\r\n                    });\r\n                });\r\n                break;\r\n            } else {\r\n                // Notify.showError(name + \" not found!\");\r\n                console.log(name + \" not found!\");\r\n            }\r\n        }\r\n    }\r\n    getTimeFrameValue = (timeFrame) => {\r\n        //18 HOURS FOR BACK 1 DATE BACK MARKET OFF\r\n\r\n\r\n\r\n        switch (timeFrame) {\r\n            // case 'ONE_MINUTE':\r\n            //     if (new Date().toLocaleTimeString() < \"10:05:00\")\r\n            //         return \"19:00:00\";\r\n            //     else\r\n            //         return \"01:00:00\";\r\n            //     break;\r\n            // case 'FIVE_MINUTE':\r\n            //     if (new Date().toLocaleTimeString() < \"11:00:00\")\r\n            //         return \"23:00:00\";\r\n            //     else\r\n            //         return \"03:00:00\";\r\n            //     break;\r\n            // case 'TEN_MINUTE':\r\n            //     if (new Date().toLocaleTimeString() < \"12:35:00\")\r\n            //         return \"24:21:00\";\r\n            //     else\r\n            //         return \"07:00:00\";\r\n            //     break;\r\n            // case 'FIFTEEN_MINUTE':\r\n            //     if (new Date().toLocaleTimeString() < \"14:15:00\")\r\n            //         return \"28:01:00\";\r\n            //     else\r\n            //         return \"10:01:00\";\r\n            //     break;\r\n            // case 'THIRTY_MINUTE':\r\n            //     return \"100:01:00\";\r\n            //     break;\r\n            // case 'ONE_HOUR':\r\n            //     return \"200:01:00\";\r\n            //     break;\r\n            // case 'ONE_DAY':\r\n            //     return \"1000:01:00\";\r\n            //     break;\r\n            // default:\r\n            //     break;\r\n\r\n            case 'ONE_MINUTE':\r\n                return \"720:00:00\";\r\n                break;\r\n            case 'FIVE_MINUTE':\r\n                return \"1000:00:00\";\r\n                break;\r\n            case 'TEN_MINUTE':\r\n                return \"1000:00:00\";\r\n                break;\r\n            case 'FIFTEEN_MINUTE':\r\n                return \"1000:00:00\";\r\n                break;\r\n            case 'THIRTY_MINUTE':\r\n                return \"1000:00:00\";\r\n                break;\r\n            case 'ONE_HOUR':\r\n                return \"1000:00:00\";\r\n                break;\r\n            case 'ONE_DAY':\r\n                return \"1000:00:00\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    calculateSMA = (data, count) => {\r\n\r\n        //  console.log(\"smarowdata\", data, count);\r\n\r\n        var avg = function (data) {\r\n            var sum = 0;\r\n            for (var i = 0; i < data.length; i++) {\r\n                sum += data[i].close;\r\n            }\r\n            return sum / data.length;\r\n        };\r\n        var result = [];\r\n        for (var i = count - 1, len = data.length; i < len; i++) {\r\n            var val = avg(data.slice(i - count + 1, i));\r\n            result.push({ time: data[i].time, value: val });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    //   calculateBBValue = (data, type ) => {\r\n\r\n    //     console.log(\"smarowdata\", data , count); \r\n\r\n    //     var result = [];\r\n    //     for (var i=count - 1, len=data.length; i < len; i++){\r\n    //       var val = avg(data.slice(i - count + 1, i));\r\n    //       result.push({ time: data[i].time, value: val});\r\n    //     }\r\n    //     return result;\r\n    //   }\r\n\r\n\r\n\r\n    showStaticChart = (token) => {\r\n\r\n        this.setState({ chartStaticData: '' }, function () {\r\n            console.log('reset done', token);\r\n        });\r\n\r\n\r\n\r\n\r\n        console.log(\"time in function \", this.state.timeFrame);\r\n\r\n        const format1 = \"YYYY-MM-DD HH:mm\";\r\n        // var time = moment.duration(\"10:50:00\");\r\n        // var startDate = moment(new Date()).subtract(time);\r\n        // var startdate = moment(this.state.startDate).subtract(time);\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n\r\n        let timeDuration = this.getTimeFrameValue(this.state.timeFrame);\r\n        var time = moment.duration(timeDuration);  //22:00:00\" for last day  2hours \r\n        var startDate = moment(new Date()).subtract(time);\r\n\r\n\r\n        var data = {\r\n            \"exchange\": \"NSE\",\r\n            \"symboltoken\": token,\r\n            \"interval\": this.state.timeFrame, //ONE_DAY FIVE_MINUTE \r\n            \"fromdate\": moment(startDate).format(format1),\r\n            \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n        }\r\n\r\n\r\n        AdminService.getHistoryData(data).then(res => {\r\n            let historyData = resolveResponse(res, 'noPop');\r\n            //    console.log(data); \r\n            if (historyData && historyData.data) {\r\n\r\n                var data = historyData.data;\r\n\r\n                const cdata = data.map(d => {\r\n                    return { time: new Date(d[0]).getTime(), open: parseFloat(d[1]), high: parseFloat(d[2]), low: parseFloat(d[3]), close: parseFloat(d[4]) }\r\n                });\r\n\r\n                var candleChartData = [], vwapdata = [], closeingData = [], highData = [], lowData = [], openData = [], valumeData = [], bbdata = [], volumeSeriesData = [];\r\n                data.forEach((element, loopindex) => {\r\n                    candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                    vwapdata.push([element[5], (element[2] + element[3] + element[4]) / 3]);\r\n                    closeingData.push(element[4]);\r\n                    highData.push(element[2]);\r\n                    lowData.push(element[3]);\r\n                    openData.push(element[3]);\r\n                    valumeData.push(element[5]);\r\n                    bbdata.push((element[2] + element[3] + element[4]) / 3);\r\n                    volumeSeriesData.push({ time: new Date(element[0]).getTime(), value: element[5], color: 'rgba(211, 211, 211, 1)' })\r\n\r\n                });\r\n\r\n                var input = {\r\n                    period: 20,\r\n                    values: bbdata,\r\n                    stdDev: 2\r\n                }\r\n\r\n                var bb = BollingerBands.calculate(input);\r\n                console.log(token, \"Bolinger band\", input, bb);\r\n\r\n                var bb = BollingerBands.calculate(input);\r\n                console.log(token, \"Bolinger band\", input, bb);\r\n\r\n                var inputRSI = { values: closeingData, period: 14 };\r\n                var rsiValues = RSI.calculate(inputRSI);\r\n\r\n                console.log(token, \"Rsi\", inputRSI, rsiValues);\r\n                console.log(token, \"vwap\", vwapdata, vwap(vwapdata));\r\n\r\n\r\n                this.setState({ chartStaticData: cdata, bblastValue: bb[bb.length - 1], vwapvalue: vwap(vwapdata), rsiValues: rsiValues.slice(Math.max(valumeData.length - 19, 1)), valumeData: valumeData.slice(Math.max(valumeData.length - 5, 1)) }, function () {\r\n                    // candleSeries.setData(this.state.chartStaticData); \r\n                    this.state.candleSeries.setData(this.state.chartStaticData);\r\n\r\n                    this.state.volumeSeries.setData(volumeSeriesData);\r\n\r\n                    var smaData = this.calculateSMA(this.state.chartStaticData, 20);\r\n\r\n                    this.state.smaLineSeries.setData(smaData);\r\n\r\n\r\n                    this.state.chart.subscribeCrosshairMove((param) => {\r\n\r\n                        var getit = param.seriesPrices[Symbol.iterator]();\r\n\r\n                        var string = \"\";\r\n                        var change = \"\";\r\n\r\n                        for (var elem of getit) {\r\n\r\n                            if (typeof elem[1] == 'object') {\r\n                                string += \" Open: <b>\" + elem[1].open + \"</b>\";\r\n                                string += \" High: <b>\" + elem[1].high + \"</b>\";\r\n                                string += \" Low: <b>\" + elem[1].low + \"</b>\";\r\n                                string += \" Close: <b>\" + elem[1].close + \"</b>\";\r\n                                change = (elem[1].close - elem[1].open) * 100 / elem[1].open;\r\n                                string += \" Chng: <b>\" + change.toFixed(2) + '%</b>';\r\n                            } else {\r\n                                string += \" &nbsp; \" + elem[1].toFixed(2) + \" \";\r\n                            }\r\n                        }\r\n\r\n                        if (param.time)\r\n                            string += \" Time: <b>\" + new Date(param.time).toLocaleString() + \"</b>\";\r\n                        else\r\n                            string += \" <b>Time: </b>\";\r\n\r\n\r\n                        const domElement = document.getElementById('showChartTitle');\r\n\r\n\r\n                        var str = \"<span style=color:green>\" + string + \"</span> \";\r\n                        if (change < 0)\r\n                            str = \"<span style=color:red>\" + string + \"</span> \";\r\n\r\n                        domElement.innerHTML = str;\r\n                    });\r\n\r\n\r\n                });\r\n\r\n\r\n                data && data.sort(function (a, b) {\r\n                    return new Date(b[0]) - new Date(a[0]);\r\n                });\r\n                if (data.length > 0) {\r\n                    localStorage.setItem('InstrumentHistroy', JSON.stringify(data));\r\n                    this.setState({ InstrumentHistroy: data });\r\n\r\n\r\n                    var upsideMoveCount = 0, downMoveCount = 0, totalSum = 0;\r\n                    data.forEach(element => {\r\n\r\n                        var per = (element[4] - element[1]) * 100 / element[1];\r\n                        if (per >= 0.3) {\r\n                            upsideMoveCount += 1;\r\n                        }\r\n                        if (per <= -0.3) {\r\n                            downMoveCount += 1;\r\n                        }\r\n\r\n                        totalSum += per;\r\n\r\n                    });\r\n\r\n\r\n                    this.setState({ downMoveCount: downMoveCount, upsideMoveCount: upsideMoveCount, totalPerchentageChange: totalSum, startingFrom: moment(startDate).format(format1) });\r\n\r\n\r\n                }\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    checkSlowMotionStock = (token, stock) => {\r\n\r\n        const format1 = \"YYYY-MM-DD HH:mm\";\r\n        var time = moment.duration(\"240:00:00\");  //22:00:00\" for last day  2hours \r\n        var startDate = moment(new Date()).subtract(time);\r\n        var dataDay = {\r\n            \"exchange\": 'NSE',\r\n            \"symboltoken\": token,\r\n            \"interval\": 'FIVE_MINUTE',\r\n            \"fromdate\": moment(startDate).format(format1),\r\n            \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n        }\r\n        AdminService.getHistoryData(dataDay).then(resd => {\r\n            let histdatad = resolveResponse(resd, 'noPop');\r\n            var DSMA = '';\r\n            if (histdatad && histdatad.data && histdatad.data.length) {\r\n                var candleDatad = histdatad.data;\r\n                var closeingDatadaily = [], valumeSum = 0;\r\n\r\n                var bigCandleCount = 0;\r\n\r\n                for (let index = candleDatad.length - 375; index < candleDatad.length; index++) {\r\n                    const element = candleDatad[index];\r\n\r\n                    if (element) {\r\n                        var per = (element[4] - element[1]) * 100 / element[1];\r\n\r\n                        if (per >= 0.4) {\r\n                            bigCandleCount += 1;\r\n                            console.log(stock.symbol, per, element[0]);\r\n\r\n                        }\r\n                        if (per <= -0.4) {\r\n                            bigCandleCount += 1;\r\n                            console.log(stock.symbol, per, element[0]);\r\n\r\n                        }\r\n                    }\r\n                }\r\n                console.log(\"Totalcount\", stock.symbol, bigCandleCount);\r\n                if (bigCandleCount <= 15) {\r\n\r\n                    stock.bigCandleCount = bigCandleCount;\r\n\r\n                    this.setState({ slowMotionStockList: [...this.state.slowMotionStockList, stock] }, function () {\r\n                        localStorage.setItem(\"slowMotionStockList\", JSON.stringify(this.state.slowMotionStockList));\r\n                    });\r\n                }\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    checkSlowMotionCheckLive = async () => {\r\n\r\n        for (let index = 0; index < this.state.slowMotionStockList.length; index++) {\r\n            const row = this.state.slowMotionStockList[index];\r\n            const format1 = \"YYYY-MM-DD HH:mm\";\r\n            var time = moment.duration(\"22:00:00\");  //22:00:00\" for last day  2hours \r\n            var startDate = moment(new Date()).subtract(time);\r\n            var dataDay = {\r\n                \"exchange\": 'NSE',\r\n                \"symboltoken\": row.token,\r\n                \"interval\": 'FIVE_MINUTE',\r\n                \"fromdate\": moment(startDate).format(format1),\r\n                \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n            }\r\n            AdminService.getHistoryData(dataDay).then(resd => {\r\n                let histdatad = resolveResponse(resd, 'noPop');\r\n                var DSMA = '';\r\n                if (histdatad && histdatad.data && histdatad.data.length) {\r\n                    var candleDatad = histdatad.data;\r\n                    var closeingDatadaily = [], valumeSum = 0;\r\n\r\n                    var bigCandleCount = 0, bullishCount = 0;\r\n\r\n                    for (let index = candleDatad.length - 3; index < candleDatad.length; index++) {\r\n                        const element = candleDatad[index];\r\n\r\n                        if (element) {\r\n\r\n                            var per = (element[4] - element[1]) * 100 / element[1];\r\n                            if (per >= 0.7) {\r\n                                bigCandleCount += 1;\r\n                            }\r\n                            if (per >= 0) {\r\n                                bullishCount += 1;\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                    if (bigCandleCount >= 1) {\r\n                        row.highlisht = true;\r\n                        window.document.title = \"SM: \" + row.symbol;\r\n                        console.log('hey listen, slow motion stock' + row.symbol + \" broken\");\r\n\r\n                        this.speckIt('hey listen, slow motion stock' + row.symbol + \" broken\");\r\n\r\n                        this.setState({ slowMotionStockList: this.state.slowMotionStockList })\r\n                    }\r\n                }\r\n\r\n            });\r\n            await new Promise(r => setTimeout(r, 310));\r\n        }\r\n\r\n    }\r\n\r\n    checkLiveBids = async () => {\r\n\r\n        for (let index = 0; index < this.state.symbolList.length; index++) {\r\n            const row = this.state.symbolList[index];\r\n\r\n            AdminService.checkLiveBids(row.name).then(resd => {\r\n                // let histdatad = resolveResponse(resd, 'noPop');\r\n\r\n                console.log(\"bid\", resd.data.data);\r\n\r\n                // adhocMargin: \"0.48\"\r\n                // applicableMargin: \"19.00\"\r\n                // averagePrice: \"705.27\"\r\n                // basePrice: \"717.15\"\r\n                // bcEndDate: \"-\"\r\n                // bcStartDate: \"-\"\r\n                // buyPrice1: \"710.60\"\r\n                // buyPrice2: \"710.55\"\r\n                // buyPrice3: \"710.50\"\r\n                // buyPrice4: \"710.45\"\r\n                // buyPrice5: \"710.40\"\r\n                // buyQuantity1: \"6\"\r\n                // buyQuantity2: \"50\"\r\n                // buyQuantity3: \"33\"\r\n                // buyQuantity4: \"153\"\r\n                // buyQuantity5: \"100\"\r\n                // change: \"-6.55\"\r\n                // closePrice: \"0.00\"\r\n                // cm_adj_high_dt: \"28-SEP-21\"\r\n                // cm_adj_low_dt: \"28-SEP-20\"\r\n                // cm_ffm: \"4,96,600.56\"\r\n                // companyName: \"ICICI Bank Limited\"\r\n                // css_status_desc: \"Listed\"\r\n                // dayHigh: \"710.95\"\r\n                // dayLow: \"701.30\"\r\n                // deliveryQuantity: \"55,54,344\"\r\n                // deliveryToTradedQuantity: \"63.08\"\r\n                // exDate: \"29-JUL-21\"\r\n                // extremeLossMargin: \"3.50\"\r\n                // faceValue: \"2.00\"\r\n                // high52: \"735.40\"\r\n                // indexVar: \"-\"\r\n                // isExDateFlag: false\r\n                // isinCode: \"INE090A01021\"\r\n                // lastPrice: \"710.60\"\r\n                // low52: \"349.10\"\r\n                // marketType: \"N\"\r\n                // ndEndDate: \"-\"\r\n                // ndStartDate: \"-\"\r\n                // open: \"707.35\"\r\n                // pChange: \"-0.91\"\r\n                // previousClose: \"717.15\"\r\n                // priceBand: \"No Band\"\r\n                // pricebandlower: \"645.45\"\r\n                // pricebandupper: \"788.85\"\r\n                // purpose: \"DIVIDEND - RS 2 PER SHARE\"\r\n                // quantityTraded: \"88,05,883\"\r\n                // recordDate: \"30-JUL-21\"\r\n                // secDate: \"29-Sep-2021 14:00:00\"\r\n                // securityVar: \"15.02\"\r\n                // sellPrice1: \"710.65\"\r\n                // sellPrice2: \"710.70\"\r\n                // sellPrice3: \"710.75\"\r\n                // sellPrice4: \"710.80\"\r\n                // sellPrice5: \"710.85\"\r\n                // sellQuantity1: \"1,382\"\r\n                // sellQuantity2: \"719\"\r\n                // sellQuantity3: \"1,217\"\r\n                // sellQuantity4: \"4,159\"\r\n                // sellQuantity5: \"793\"\r\n                // series: \"EQ\"\r\n                // surv_indicator: \"-\"\r\n                // symbol: \"ICICIBANK\"\r\n                // totalBuyQuantity: \"10,31,358\"\r\n                // totalSellQuantity: \"8,75,359\"\r\n                // totalTradedValue: \"66,963.99\"\r\n                // totalTradedVolume: \"94,94,802\"\r\n\r\n                if (resd.data && resd.data.data.length) {\r\n\r\n                    let bidlivedata = resd.data.data[0];\r\n                    let biddata = {\r\n                        totalBuyQuantity: bidlivedata.totalBuyQuantity,\r\n                        totalSellQuantity: bidlivedata.totalSellQuantity,\r\n                        deliveryToTradedQuantity: bidlivedata.deliveryToTradedQuantity,\r\n                        symbol: bidlivedata.symbol,\r\n                        orderType: bidlivedata.totalBuyQuantity + \"|\" + bidlivedata.totalSellQuantity,\r\n                        nc: bidlivedata.pChange,\r\n                        ltp: bidlivedata.lastPrice,\r\n                    }\r\n\r\n                    this.setState({ liveBidsList: [...this.state.liveBidsList, biddata] }, function () {\r\n\r\n                        localStorage.setItem(\"liveBidsList\", JSON.stringify(this.state.liveBidsList));\r\n                    });\r\n\r\n\r\n                }\r\n\r\n            });\r\n            await new Promise(r => setTimeout(r, 100));\r\n        }\r\n\r\n    }\r\n\r\n\r\n    oneHourBullBearCheck = async () => {\r\n\r\n        for (let index = 0; index < this.state.symbolList.length; index++) {\r\n            const row = this.state.symbolList[index];\r\n            const format1 = \"YYYY-MM-DD HH:mm\";\r\n            var time = moment.duration(\"04:00:00\");  //22:00:00\" for last day  2hours \r\n            var startDate = moment(new Date()).subtract(time);\r\n            var dataDay = {\r\n                \"exchange\": 'NSE',\r\n                \"symboltoken\": row.token,\r\n                \"interval\": 'ONE_HOUR',\r\n                \"fromdate\": moment(startDate).format(format1),\r\n                \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n            }\r\n            AdminService.getHistoryData(dataDay).then(resd => {\r\n                let histdatad = resolveResponse(resd, 'noPop');\r\n                var DSMA = '';\r\n                if (histdatad && histdatad.data && histdatad.data.length) {\r\n                    var candleDatad = histdatad.data;\r\n                    let lastCandle = '';\r\n                    if (candleDatad.length > 1) {\r\n                        lastCandle = candleDatad[candleDatad.length - 2];\r\n                    } else {\r\n                        lastCandle = candleDatad[candleDatad.length - 1];\r\n                    }\r\n\r\n\r\n\r\n                    if ((lastCandle[1] == lastCandle[3]) && (lastCandle[2] == lastCandle[4])) {\r\n                        window.document.title = \"Hourly Buy: \" + row.symbol;\r\n                        console.log(row.name, \"Hourly Buy\", candleDatad[candleDatad.length - 1]);\r\n                        row.orderType = \" Hourly Buy\";\r\n                        row.foundAt = new Date(candleDatad[candleDatad.length - 1][0]).toLocaleString()\r\n                        this.speckIt(row.name + \" Hourly Bullish \");\r\n                        this.setState({ oneHourBullBearCheckList: [...this.state.oneHourBullBearCheckList, row] });\r\n                    }\r\n                    if ((lastCandle[1] == lastCandle[2]) && (lastCandle[3] == lastCandle[4])) {\r\n                        window.document.title = \"Hourly Sell: \" + row.symbol;\r\n                        console.log(row.name, \"Hourly Sell\", candleDatad[candleDatad.length - 1]);\r\n                        row.orderType = \" Hourly Sell\";\r\n                        row.foundAt = new Date(candleDatad[candleDatad.length - 1][0]).toLocaleString()\r\n                        this.speckIt(row.name + \" Hourly Sell \");\r\n                        this.setState({ oneHourBullBearCheckList: [...this.state.oneHourBullBearCheckList, row] });\r\n                    }\r\n\r\n                }\r\n\r\n            });\r\n            await new Promise(r => setTimeout(r, 310));\r\n        }\r\n\r\n    }\r\n\r\n\r\n    searchValumeBreakoutStock = async () => {\r\n\r\n        for (let index = 0; index < this.state.symbolList.length; index++) {\r\n            const row = this.state.symbolList[index];\r\n            const format1 = \"YYYY-MM-DD HH:mm\";\r\n            var time = moment.duration(\"60:00:00\");  //22:00:00\" for last day  2hours \r\n            var startDate = moment(new Date()).subtract(time);\r\n            var dataDay = {\r\n                \"exchange\": 'NSE',\r\n                \"symboltoken\": row.token,\r\n                \"interval\": 'FIFTEEN_MINUTE',\r\n                \"fromdate\": moment(startDate).format(format1),\r\n                \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n            }\r\n            AdminService.getHistoryData(dataDay).then(resd => {\r\n                let histdatad = resolveResponse(resd, 'noPop');\r\n                var DSMA = '';\r\n                if (histdatad && histdatad.data && histdatad.data.length) {\r\n                    var candleDatad = histdatad.data;\r\n\r\n                    var volumeSum = 0, findmaxVol = candleDatad[0][5];\r\n                    let currentCandleVol = candleDatad[candleDatad.length - 1][5];\r\n                    let firstCandleCloseingPrice = candleDatad[0][4], priceGoingHighCount = 0;\r\n                    let firstCandleCloseingPriceDownSide = candleDatad[0][4], priceGoingLowCount = 0;\r\n\r\n                    for (let index = candleDatad.length - 6; index < candleDatad.length - 1; index++) {\r\n                        const element = candleDatad[index];\r\n                        if (element) {\r\n                            volumeSum += element[5];\r\n                            //  console.log(row.symbol, ' last candle index ',index,   element[0] );\r\n                            if (findmaxVol < element[5]) {\r\n                                findmaxVol = element[5];\r\n                            }\r\n\r\n                            if (firstCandleCloseingPrice < element[4]) {\r\n                                console.log(row.symbol, firstCandleCloseingPrice, 'upside last candle index ', index, element[4]);\r\n                                firstCandleCloseingPrice = element[4];\r\n                                priceGoingHighCount += 1;\r\n                            }\r\n\r\n                            if (element[4] < firstCandleCloseingPriceDownSide) {\r\n                                console.log(row.symbol, firstCandleCloseingPrice, ' downside last candle index ', index, element[4]);\r\n                                firstCandleCloseingPriceDownSide = element[4];\r\n                                priceGoingLowCount += 1;\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n                    let avgVol = volumeSum / 5;\r\n\r\n                    if (currentCandleVol / findmaxVol > 1.75 && priceGoingHighCount >= 4) {\r\n                        window.document.title = \"VB: \" + row.symbol;\r\n                        row.orderType = \" Vol \" + (currentCandleVol / findmaxVol).toFixed(2) + \" Time & price incresing\";\r\n                        row.foundAt = new Date(candleDatad[candleDatad.length - 1][0]).toLocaleString()\r\n                        console.log(row.name + \" volume crossed \" + (currentCandleVol / findmaxVol).toFixed(2) + \" time of average \", avgVol, currentCandleVol, candleDatad[candleDatad.length - 1][0], findmaxVol);\r\n                        this.speckIt(row.name + \" volume crossed \" + (currentCandleVol / findmaxVol).toFixed(2) + \" Time and price incresing\");\r\n                        this.setState({ volumeBreakoutlast5CandleList: [...this.state.volumeBreakoutlast5CandleList, row] });\r\n                    }\r\n                    if (currentCandleVol / findmaxVol > 1.75 && priceGoingLowCount >= 4) {\r\n                        window.document.title = \"VB: \" + row.symbol;\r\n                        row.orderType = \" Vol \" + (currentCandleVol / findmaxVol).toFixed(2) + \" Time & price decresing\";\r\n                        row.foundAt = new Date(candleDatad[candleDatad.length - 1][0]).toLocaleString()\r\n                        console.log(row.name + \" volume crossed \" + (currentCandleVol / findmaxVol).toFixed(2) + \" time of average \", avgVol, currentCandleVol, candleDatad[candleDatad.length - 1][0], findmaxVol);\r\n                        this.speckIt(row.name + \" volume crossed \" + (currentCandleVol / findmaxVol).toFixed(2) + \" Time and price decresing \");\r\n                        this.setState({ volumeBreakoutlast5CandleList: [...this.state.volumeBreakoutlast5CandleList, row] });\r\n                    }\r\n                    // else if(currentCandleVol > avgVol){\r\n                    //     row.highlisht =  true; \r\n                    //     window.document.title = \"VB: \" + row.symbol;\r\n                    //     console.log(row.symbol, ' avg ', avgVol, currentCandleVol,  candleDatad[candleDatad.length-1][0]);\r\n                    //     this.speckIt('Volume  in ' + row.name + \" crossed average \");\r\n                    //     this.setState({ volumeBreakoutlast5CandleList: this.state.slowMotionStockList })\r\n                    // }\r\n                }\r\n\r\n            });\r\n            await new Promise(r => setTimeout(r, 310));\r\n        }\r\n\r\n    }\r\n\r\n    speckIt = (text) => {\r\n        var msg = new SpeechSynthesisUtterance();\r\n        msg.text = text.toString();\r\n        window.speechSynthesis.speak(msg);\r\n    }\r\n\r\n\r\n\r\n\r\n    dailyBasisInfoCheck = (token, element) => {\r\n        //this.setState({DailyBulishStatus: ''}); \r\n\r\n        const format1 = \"YYYY-MM-DD HH:mm\";\r\n\r\n        let timeDuration = this.getTimeFrameValue('ONE_DAY');\r\n        var time = moment.duration(timeDuration);  //22:00:00\" for last day  2hours \r\n        var startDateforDaily = moment(new Date()).subtract(time);\r\n        var dataDay = {\r\n            \"exchange\": 'NSE',\r\n            \"symboltoken\": token,\r\n            \"interval\": 'ONE_DAY',\r\n            \"fromdate\": moment(startDateforDaily).format(format1),\r\n            \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n        }\r\n        AdminService.getHistoryData(dataDay).then(resd => {\r\n            let histdatad = resolveResponse(resd, 'noPop');\r\n            var DSMA = '';\r\n            if (histdatad && histdatad.data && histdatad.data.length) {\r\n                var candleDatad = histdatad.data;\r\n                var closeingDatadaily = [], valumeSum = 0;\r\n\r\n\r\n                for (let index = candleDatad.length - 20; index < candleDatad.length; index++) {\r\n                    const element = candleDatad[index];\r\n                    if (element) {\r\n                        closeingDatadaily.push(element[4]);\r\n                        valumeSum += element[5];\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                DSMA = SMA.calculate({ period: 20, values: closeingDatadaily });\r\n                this.setState({ dailyAvgValume: valumeSum / 20 });\r\n\r\n                var DSMALastValue = DSMA && DSMA[DSMA.length - 1];\r\n                console.log(token, \"DSMA\", DSMALastValue);\r\n\r\n                if (DSMALastValue) {\r\n                    this.setState({ DailyBulishStatus: DSMALastValue, todayCurrentVolume: candleDatad[candleDatad.length - 1][5] });\r\n                }\r\n\r\n                if (candleDatad[candleDatad.length - 1][5] > valumeSum / 20) {\r\n                    console.log(\"crosssed voliue\", element);\r\n                    this.setState({ volumeCrossedList: [...this.state.volumeCrossedList, element] })\r\n                }\r\n\r\n            }\r\n\r\n\r\n        });\r\n    }\r\n\r\n    placeSLMOrder = (slmOrderType) => {\r\n\r\n        var data = {\r\n            \"tradingsymbol\": this.state.tradingsymbol,\r\n            \"symboltoken\": this.state.symboltoken,\r\n            \"transactiontype\": slmOrderType,\r\n            \"exchange\": \"NSE\",\r\n            \"ordertype\": \"STOPLOSS_MARKET\", //STOPLOSS_MARKET STOPLOSS_LIMIT\r\n            \"producttype\": this.state.producttype, //\"INTRADAY\",//\"DELIVERY\",\r\n            \"duration\": \"DAY\",\r\n            \"price\": 0,\r\n            \"squareoff\": \"0\",\r\n            \"stoploss\": \"0\",\r\n            \"quantity\": this.state.quantity,\r\n            \"triggerprice\": this.state.stoploss,\r\n            \"variety\": \"STOPLOSS\"\r\n        }\r\n\r\n        AdminService.placeOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n            //     console.log(data);   \r\n            if (data.status && data.message === 'SUCCESS') {\r\n                localStorage.setItem('ifNotBought', 'false')\r\n                this.setState({ orderid: data.data && data.data.orderid });\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    // getHistory = (token) => {\r\n\r\n\r\n    //     this.setState({ downMoveCount: 0, upsideMoveCount: 0 });\r\n    //     this.setState({ InstrumentHistroy: [] });\r\n    //     this.getLTP();\r\n\r\n\r\n    //     const format1 = \"YYYY-MM-DD HH:mm\";\r\n\r\n    //     var time = moment.duration(\"00:50:00\");\r\n    //     var startdate = moment(new Date()).subtract(time);\r\n    //     // var startdate = moment(this.state.startDate).subtract(time);\r\n    //     var beginningTime = moment('9:15am', 'h:mma');\r\n\r\n    //     var data = {\r\n    //         \"exchange\": \"NSE\",\r\n    //         \"symboltoken\": token,\r\n    //         \"interval\": \"ONE_MINUTE\", //ONE_DAY FIVE_MINUTE \r\n    //         \"fromdate\": moment(startdate).format(format1),\r\n    //         \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n    //     }\r\n\r\n    //     AdminService.getHistoryData(data).then(res => {\r\n    //         let data = resolveResponse(res, 'noPop');\r\n    //         //    console.log(data); \r\n    //         if (data && data.data) {\r\n\r\n    //             var histCandles = data.data;\r\n    //             histCandles && histCandles.sort(function (a, b) {\r\n    //                 return new Date(b[0]) - new Date(a[0]);\r\n    //             });\r\n    //             if (histCandles.length > 0) {\r\n    //                 localStorage.setItem('InstrumentHistroy', JSON.stringify(histCandles));\r\n    //                 this.setState({ InstrumentHistroy: histCandles });\r\n\r\n    //             }\r\n\r\n    //         }\r\n    //     })\r\n    // }\r\n\r\n    onSelectItem = (event, values) => {\r\n\r\n\r\n        var autoSearchTemp = JSON.parse(localStorage.getItem('autoSearchTemp'));\r\n        //  console.log(\"values\", values); \r\n        //   console.log(\"autoSearchTemp\", autoSearchTemp); \r\n        if (autoSearchTemp.length > 0) {\r\n            var fdata = '';\r\n            for (let index = 0; index < autoSearchTemp.length; index++) {\r\n\r\n                if (autoSearchTemp[index].symbol === values) {\r\n                    fdata = autoSearchTemp[index];\r\n                    break;\r\n                }\r\n            }\r\n\r\n\r\n            var watchlist = []; //localStorage.getItem(\"watchList\") ? JSON.parse(localStorage.getItem(\"watchList\")) : []; \r\n\r\n            var foundInWatchlist = watchlist.filter(row => row.token === values);\r\n\r\n            if (!foundInWatchlist.length) {\r\n\r\n                watchlist.push(fdata);\r\n                this.setState({ tradingsymbol: fdata.symbol, symboltoken: fdata.token }, function () {\r\n                    this.LoadSymbolDetails(fdata.symbol);\r\n                });\r\n\r\n                this.setState({ symbolList: watchlist }, function () {\r\n                    //  this.updateSocketWatch();\r\n                });\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n    onSelectItemChart = (event, values) => {\r\n        var autoSearchTemp = JSON.parse(localStorage.getItem('autoSearchTemp'));\r\n        //  console.log(\"values\", values); \r\n        //   console.log(\"autoSearchTemp\", autoSearchTemp); \r\n        if (autoSearchTemp.length > 0) {\r\n            var fdata = '';\r\n            for (let index = 0; index < autoSearchTemp.length; index++) {\r\n\r\n                if (autoSearchTemp[index].symbol === values) {\r\n                    fdata = autoSearchTemp[index];\r\n                    break;\r\n                }\r\n            }\r\n            this.setState({ tradingsymbol: fdata.symbol, symboltoken: fdata.token, seachSumbol: \"\" }, function () {\r\n                this.getLTP();\r\n                this.showStaticChart(fdata.token);\r\n                this.LoadSymbolDetails(fdata.symbol);\r\n            });\r\n\r\n        }\r\n\r\n    }\r\n    getPercentageColor = (percent) => {\r\n        percent = percent * 100;\r\n        var r = percent < 50 ? 255 : Math.floor(255 - (percent * 2 - 100) * 255 / 100);\r\n        var g = percent > 50 ? 255 : Math.floor((percent * 2) * 255 / 100);\r\n        return 'rgb(' + r + ',' + g + ',0)';\r\n    }\r\n\r\n\r\n    deleteItemWatchlist = (symbol) => {\r\n        var list = this.state.symbolList; // JSON.parse( localStorage.getItem('watchList'));\r\n        var index = list.findIndex(data => data.symbol === symbol)\r\n        list.splice(index, 1);\r\n        //  localStorage.setItem('watchList',  JSON.stringify(list)); \r\n        this.setState({ symbolList: list });\r\n    }\r\n\r\n    getAveragePrice = (orderId) => {\r\n\r\n        var oderbookData = localStorage.getItem('oderbookData');\r\n        var averageprice = 0;\r\n        for (let index = 0; index < oderbookData.length; index++) {\r\n            if (oderbookData[index].orderid === 'orderId') {\r\n                averageprice = oderbookData[index].averageprice\r\n                this.setState({ averageprice: averageprice });\r\n                break;\r\n            }\r\n        }\r\n        return averageprice;\r\n    }\r\n    showCandleChart = (candleData, symbol, insiderow) => {\r\n\r\n\r\n        candleData = candleData && candleData.reverse();\r\n\r\n        localStorage.setItem('candleChartData', JSON.stringify(candleData))\r\n        localStorage.setItem('cadleChartSymbol', symbol)\r\n\r\n        if (insiderow)\r\n            localStorage.setItem('chartInfoDetails', JSON.stringify(insiderow));\r\n\r\n\r\n        document.getElementById('showCandleChart').click();\r\n    }\r\n\r\n    showCandleBothChart = (row) => {\r\n        var candleChartData = row.candleChartData && row.candleChartData.reverse();\r\n        localStorage.setItem('candleChartData', JSON.stringify(candleChartData))\r\n        localStorage.setItem('cadleChartSymbol', row.symbol)\r\n\r\n        var candleChartDataInside = row.candleChartDataInside;\r\n\r\n        if (candleChartDataInside)\r\n            localStorage.setItem('candleChartDataInside', JSON.stringify(candleChartDataInside));\r\n\r\n\r\n        document.getElementById('showCandleChart').click();\r\n    }\r\n\r\n    handleKeyDown = (e) => {\r\n\r\n        console.log(\"key\", e.keyCode);\r\n        //38 for down and 40 for up key\r\n        if (e.keyCode === 38 && this.state.cursor > 0) {\r\n            this.setState(prevState => ({ cursor: prevState.cursor - 1 }));\r\n        } else if (e.keyCode === 40 && this.state.cursor < this.state.symbolList.length - 1) {\r\n            this.setState(prevState => ({ cursor: prevState.cursor + 1 }))\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.updateCandleOnkey();\r\n        }, 100);\r\n\r\n    }\r\n\r\n\r\n    updateCandleOnkey = () => {\r\n        var selectedKeyRow = localStorage.getItem('selectedKeyRow') && JSON.parse(localStorage.getItem('selectedKeyRow'));\r\n        if (selectedKeyRow.token && selectedKeyRow.symbol) {\r\n            this.setState({ tradingsymbol: selectedKeyRow.symbol, symboltoken: selectedKeyRow.token }, function () {\r\n                this.getLTP();\r\n                this.showStaticChart(selectedKeyRow.token);\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const dateParam = {\r\n            myCallback: this.myCallback,\r\n            startDate: '',\r\n            endDate: '',\r\n            firstLavel: \"Start Date and Time\",\r\n            secondLavel: \"End Date and Time\"\r\n        }\r\n\r\n\r\n        var sumPerChange = 0, sumBrokeragePer = 0, netSumPerChange = 0, sumPerChangeHighLow = 0, sumPnlValue = 0, sumPnlValueOnHighLow = 0, totalInvestedValue = 0, totalLongTrade = 0, totalShortTrade = 0;\r\n        var tradetotal = 0, totalWin = 0, totalLoss = 0;\r\n        return (\r\n            <React.Fragment>\r\n                <PostLoginNavBar LoadSymbolDetails={this.LoadSymbolDetails} />\r\n                <ChartDialog />\r\n                <Grid direction=\"row\" container spacing={1} style={{ padding: \"5px\" }} >\r\n\r\n                    <Grid item xs={12} sm={2}>\r\n\r\n                        <WatchListTab style={{ position: 'fixed' }} data={{ gainerList: this.state.gainerList, looserList: this.state.looserList, LoadSymbolDetails: this.LoadSymbolDetails, cursor: this.state.cursor, symbolList: this.state.symbolList, totalWatchlist: this.state.totalWatchlist, onChangeWatchlist: this.onChangeWatchlist, selectedWatchlist: this.state.selectedWatchlist, search: this.state.search, handleKeyDown: this.handleKeyDown, onChange: this.onChange, autoSearchList: this.state.autoSearchList, onSelectItem: this.onSelectItem, symbolList: this.state.symbolList, LoadSymbolDetails: this.LoadSymbolDetails, deleteItemWatchlist: this.deleteItemWatchlist }} />\r\n\r\n\r\n                        {/* <Paper>\r\n                            <Autocomplete\r\n                                freeSolo\r\n                                id=\"free-solo-2-demo\"\r\n                                disableClearable\r\n                                style={{ paddingLeft: \"10px\", paddingRight: \"10px\" }}\r\n                                onChange={this.onSelectItem}\r\n                                //+ ' '+  option.exch_seg\r\n                                options={this.state.autoSearchList.length > 0 ? this.state.autoSearchList.map((option) =>\r\n                                    option.symbol\r\n                                ) : []}\r\n                                renderInput={(params) => (\r\n                                    <TextField\r\n                                        onChange={this.onChange}\r\n                                        {...params}\r\n                                        label={\"Search Symbol\"}\r\n                                        margin=\"normal\"\r\n                                        variant=\"standard\"\r\n                                        name=\"search\"\r\n                                        onKeyDown={this.handleKeyDown}\r\n                                        value={this.state.search}\r\n                                        InputProps={{ ...params.InputProps, type: 'search' }}\r\n                                    />\r\n                                )}\r\n                            />\r\n\r\n                            <div style={{ marginLeft: '10px' }}>\r\n                                <FormControl style={{ paddingLeft: '12px' }} style={styles.selectStyle} >\r\n                                    <InputLabel htmlFor=\"gender\">Select Watchlist</InputLabel>\r\n                                    <Select value={this.state.selectedWatchlist} name=\"selectedWatchlist\" onChange={this.onChangeWatchlist}>\r\n                                        <MenuItem value={\"selectall\"}>{\"Select All\"}</MenuItem>\r\n\r\n                                        {this.state.totalWatchlist && this.state.totalWatchlist.map(element => (\r\n                                            <MenuItem value={element}>{element}</MenuItem>\r\n                                        ))\r\n                                        }\r\n\r\n                                    </Select>\r\n                                </FormControl>\r\n\r\n                            </div>\r\n\r\n\r\n                            <div style={{ overflowY: 'scroll', height: \"75vh\" }} >\r\n\r\n                                {this.state.symbolList && this.state.symbolList.length ? this.state.symbolList.map((row, i) => (\r\n                                    <>\r\n                                        <ListItem onKeyDown={this.handleKeyDown} button selected={this.state.cursor === i ? 'active' : null}\r\n\r\n                                            style={{ fontSize: '12px', padding: '0px', paddingLeft: '5px', paddingRight: '5px' }} >\r\n\r\n                                            {this.state.cursor === i ? localStorage.setItem(\"selectedKeyRow\", JSON.stringify(row)) : \"\"}\r\n\r\n                                            <ListItemText style={{ color: !row.nc || row.nc == 0 ? \"\" : row.nc > 0 ? '#20d020' : \"#e66e6e\" }} onClick={() => this.LoadSymbolDetails(row.symbol, i)} primary={row.name} /> {row.ltp} ({row.nc}%)\r\n\r\n\r\n                                        </ListItem>\r\n\r\n                                    </>\r\n                                )) : ''}\r\n                            </div>\r\n\r\n                        </Paper> */}\r\n\r\n\r\n                        {/* <Typography style={{ fontWeight: 'bold' }}><span style={{ color: \"green\" }}> Advance {this.state.advanceShareCount} </span> <span style={{ color: \"red\" }}> Decline {this.state.declineShareCount} </span> <span> Unchange {this.state.UnchangeShareCount} </span> </Typography> */}\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={8}>\r\n                        <Paper style={{ padding: \"10px\" }}>\r\n\r\n\r\n                            <Typography style={{ textAlign: \"center\", background: \"lightgray\" }}>Place Order</Typography>\r\n\r\n                            <Grid style={{ display: \"visible\" }} spacing={1} direction=\"row\" alignItems=\"center\" container>\r\n\r\n                                <Grid item xs={10} sm={3}>\r\n\r\n                                    {this.state.tradingsymbol ?\r\n                                        <Typography variant=\"body1\" style={{ color: this.state.InstrumentPerChange > 0 ? \"#20d020\" : \"#e66e6e\" }} >\r\n\r\n                                            {this.state.tradingsymbol} : {this.state.InstrumentLTP ? this.state.InstrumentLTP.ltp : \"\"} ({this.state.InstrumentPerChange + \"%\"})\r\n\r\n                                        </Typography> : <Typography variant=\"h5\" >Select Symbol </Typography>}\r\n\r\n                                    O: {this.state.InstrumentLTP ? this.state.InstrumentLTP.open : \"\"} &nbsp;\r\n                                    H: {this.state.InstrumentLTP ? this.state.InstrumentLTP.high : \"\"} &nbsp;\r\n                                    L: {this.state.InstrumentLTP ? this.state.InstrumentLTP.low : \"\"}&nbsp;\r\n                                    C: {this.state.InstrumentLTP ? this.state.InstrumentLTP.close : \"\"} &nbsp;\r\n\r\n                                </Grid>\r\n\r\n                                <Grid item xs={10} sm={2}>\r\n\r\n                                    <Autocomplete\r\n                                        freeSolo\r\n                                        id=\"free-solo-2-demo\"\r\n                                        disableClearable\r\n                                        style={{ paddingLeft: \"10px\", paddingRight: \"10px\" }}\r\n                                        onChange={this.onSelectItemChart}\r\n                                        value={this.state.seachSumbol}\r\n                                        //+ ' '+  option.exch_seg\r\n                                        options={this.state.autoSearchList.length > 0 ? this.state.autoSearchList.map((option) =>\r\n                                            option.symbol\r\n                                        ) : []}\r\n                                        renderInput={(params) => (\r\n                                            <TextField\r\n                                                onChange={this.onChange}\r\n                                                {...params}\r\n                                                label={\"Search\"}\r\n                                                margin=\"normal\"\r\n                                                variant=\"standard\"\r\n                                                name=\"seachSumbol\"\r\n                                                InputProps={{ ...params.InputProps, type: 'search' }}\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </Grid>\r\n\r\n\r\n                                <Grid item xs={10} sm={1}>\r\n                                    <FormControl style={styles.selectStyle} style={{ marginTop: '10px' }} >\r\n                                        <InputLabel htmlFor=\"gender\">Time</InputLabel>\r\n                                        <Select value={this.state.timeFrame} name=\"timeFrame\" onChange={this.onInputChange}>\r\n                                            <MenuItem value={'ONE_MINUTE'}>{'1M'}</MenuItem>\r\n                                            <MenuItem value={'FIVE_MINUTE'}>{'5M'}</MenuItem>\r\n                                            <MenuItem value={'TEN_MINUTE'}>{'10M'}</MenuItem>\r\n                                            <MenuItem value={'FIFTEEN_MINUTE'}>{'15M'}</MenuItem>\r\n                                            <MenuItem value={'THIRTY_MINUTE'}>{'30M'}</MenuItem>\r\n                                            <MenuItem value={'ONE_HOUR'}>{'1H'}</MenuItem>\r\n                                            <MenuItem value={'ONE_DAY'}>{'1D'}</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n\r\n\r\n                                </Grid>\r\n\r\n\r\n\r\n                                <Grid item xs={12} sm={1}>\r\n                                    <FormControl style={styles.selectStyle} style={{ marginTop: '3px' }} >\r\n                                        <InputLabel htmlFor=\"gender\">Order Type</InputLabel>\r\n                                        <Select value={this.state.producttype} name=\"producttype\" onChange={this.onChange}>\r\n                                            <MenuItem value={\"INTRADAY\"}>Interaday</MenuItem>\r\n                                            <MenuItem value={\"DELIVERY\"}>Del</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                                <Grid item xs={10} sm={1}>\r\n                                    <TextField id=\"buyPrice\" label=\"Buy Price\" value={this.state.buyPrice} name=\"buyPrice\" onChange={this.onChange} />\r\n                                </Grid>\r\n                                <Grid item xs={10} sm={1}>\r\n                                    <TextField id=\"quantity\" label=\"Qty\" value={this.state.quantity} name=\"quantity\" onChange={this.onChange} />\r\n                                </Grid>\r\n                                <Grid item xs={10} sm={1}>\r\n                                    <TextField id=\"stoploss\" label=\"SL\" value={this.state.stoploss} name=\"stoploss\" onChange={this.onChange} />\r\n                                </Grid>\r\n\r\n\r\n                                <Grid item xs={1} sm={2}  >\r\n                                    <Button variant=\"contained\" color=\"\" style={{ marginLeft: '20px' }} onClick={() => this.placeOrder('BUY')}>Buy</Button>\r\n                                    <Button variant=\"contained\" color=\"\" style={{ marginLeft: '20px' }} onClick={() => this.placeOrder('SELL')}>Sell</Button>\r\n                                </Grid>\r\n\r\n\r\n\r\n                                <Grid style={{ display: \"visible\" }} spacing={1} direction=\"row\" alignItems=\"center\" container>\r\n\r\n                                    <br />\r\n\r\n                                    {this.state.InstrumentLTP ?\r\n                                        <Grid item xs={12} sm={3} style={{ background: \"#00000014\" }} >\r\n\r\n                                            <div style={{ background: '#bdbdbd' }}>\r\n                                                <b>  Daily: {this.state.tradingsymbol}</b> <br />\r\n\r\n                                                <span title=\"20SMA\" item xs={12} sm={12} style={{ color: this.state.InstrumentLTP.ltp > this.state.DailyBulishStatus ? \"green\" : \"red\", fontWeight: \"bold\" }}>\r\n                                                    Daily Avg Price: {this.state.DailyBulishStatus && this.state.DailyBulishStatus.toFixed(0)} {this.state.DailyBulishStatus ? this.state.InstrumentLTP.ltp > this.state.DailyBulishStatus ? \"BUY\" : \"SELL\" : \"\"}\r\n                                                </span><br />\r\n\r\n\r\n                                                <span title=\"averge of showed candle volume\" item xs={12} sm={12}>\r\n                                                    <b>Daily Avg Volume:</b>  {(this.state.dailyAvgValume / 100000).toFixed(2)}L\r\n                                                </span><br />\r\n                                                <span title=\"averge of showed candle volume\" item xs={12} sm={12}>\r\n                                                    {this.state.todayCurrentVolume > this.state.dailyAvgValume ? <b title=\"if cossed avg volume then its green\" style={{ color: \"green\" }}>Today Volume: {(this.state.todayCurrentVolume / 100000).toFixed(2)}L </b> : \"Today Volume:\" + (this.state.todayCurrentVolume / 100000).toFixed(2) + \"L\"}\r\n                                                </span>\r\n                                            </div>\r\n                                            <br />\r\n\r\n\r\n\r\n                                            <b>  Intraday: {this.state.timeFrame} : {this.state.tradingsymbol}</b> <br />\r\n                                            {this.state.bblastValue ? <span item xs={12} sm={12} >\r\n\r\n                                                <span title=\"Green color mean price running above upper bb band\" style={{ color: this.state.InstrumentLTP.ltp >= this.state.bblastValue.upper ? \"green\" : \"\", fontWeight: \"bold\" }}>BB Upper: {this.state.bblastValue.upper.toFixed(2)}</span><br />\r\n                                                BB Middle(20 SMA): {this.state.bblastValue.middle.toFixed(2)}<br />\r\n                                                <span title=\"Green red mean price running below lower bb band\" style={{ color: this.state.InstrumentLTP.ltp <= this.state.bblastValue.lower ? \"red\" : \"\", fontWeight: \"bold\" }}>BB Lower: {this.state.bblastValue.lower.toFixed(2)}</span><br />\r\n                                            </span> : \"\"}\r\n\r\n                                            <span item xs={12} sm={12} style={{ color: this.state.InstrumentLTP.ltp > this.state.vwapvalue ? \"green\" : \"red\", fontWeight: \"bold\" }}>\r\n                                                VWAP:  {this.state.vwapvalue && this.state.vwapvalue.toFixed(2)}\r\n                                            </span>\r\n                                            <br />\r\n                                            <b> RSI: </b>{this.state.rsiValues && this.state.rsiValues.map((item, j) => (\r\n                                                item >= 60 ? <span style={{ color: 'green', fontWeight: \"bold\" }}> {item} &nbsp;</span> : <span style={{ color: item <= 40 ? 'red' : \"\", fontWeight: \"bold\" }}> {item} &nbsp;</span>\r\n                                            ))}\r\n\r\n\r\n                                            <br />\r\n                                            <b>Vol:</b> {this.state.valumeData && this.state.valumeData.map((item, j) => (\r\n                                                <span style={{ color: item > this.state.dailyAvgValume ? \"green\" : \"\", fontWeight: item > this.state.dailyAvgValume ? \"bold\" : \"\" }}> {(item / 100000).toFixed(2)}L &nbsp;</span>\r\n                                            ))}\r\n\r\n                                            <br />  <br />\r\n\r\n                                        </Grid>\r\n                                        : \"\"}\r\n                                        <Grid item xs={12} sm={!this.state.InstrumentLTP ? 12 : 9}  >\r\n                                            <div id=\"showChartTitle\">\r\n\r\n\r\n\r\n                                            </div>\r\n                                            <div id=\"tvchart\"></div>\r\n\r\n                                        </Grid>\r\n\r\n\r\n                                    <Grid item xs={12} sm={12} style={{ overflowY: 'scroll', maxHeight: \"50vh\" }} >\r\n\r\n\r\n                                        <Table size=\"small\" aria-label=\"sticky table\" >\r\n                                            <TableHead style={{ width: \"\", whiteSpace: \"nowrap\" }} variant=\"head\">\r\n                                                <TableRow variant=\"head\" style={{ fontWeight: 'bold' }} >\r\n\r\n                                                    <TableCell className=\"TableHeadFormat\" align=\"center\">Symbol</TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" align=\"center\">Timestamp</TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" align=\"center\">Chng% <b style={{ color: '#20d020' }}> UP({this.state.upsideMoveCount})</b> | <b style={{ color: 'red' }}> Down({this.state.downMoveCount})</b> | Total:  <b style={{ color: this.state.totalPerchentageChange > 0 ? \"green\" : 'red' }}>  {this.state.totalPerchentageChange && this.state.totalPerchentageChange.toFixed(2)}% </b> from {this.state.startingFrom} </TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" align=\"center\">Open</TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" align=\"center\">High</TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" align=\"center\">Low</TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" align=\"center\">Close </TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" align=\"center\">Volume</TableCell>\r\n\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n                                                {/* this.getPercentageColor((row[4] - row[1])*100/row[1] >= 0.3)  */}\r\n                                                {this.state.InstrumentHistroy && this.state.InstrumentHistroy ? this.state.InstrumentHistroy.map((row, i) => (\r\n                                                    <TableRow key={i} style={{ background: (row[4] - row[1]) * 100 / row[1] >= 0.3 ? \"#20d020\" : (row[4] - row[1]) * 100 / row[1] <= -0.3 ? \"#e66e6e\" : \"none\" }} >\r\n\r\n                                                        <TableCell align=\"center\">{this.state.tradingsymbol}</TableCell>\r\n                                                        <TableCell align=\"center\">{new Date(row[0]).toLocaleString()}</TableCell>\r\n                                                        <TableCell align=\"center\"> <b>{(row[4] - row[1]) * 100 / row[1] && ((row[4] - row[1]) * 100 / row[1]).toFixed(2)}%</b></TableCell>\r\n                                                        <TableCell align=\"center\">{row[1]}</TableCell>\r\n                                                        <TableCell align=\"center\">{row[2]}</TableCell>\r\n                                                        <TableCell align=\"center\">{row[3]}</TableCell>\r\n                                                        <TableCell align=\"center\">{row[4]}</TableCell>\r\n                                                        <TableCell align=\"center\">{row[5]}</TableCell>\r\n\r\n                                                    </TableRow>\r\n                                                )) : ''}\r\n\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                    </Grid>\r\n\r\n\r\n\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} sm={12} style={{ height: '100%', overflow: \"auto\" }}>\r\n                                    <OrderWatchlist />\r\n                                </Grid>\r\n\r\n\r\n\r\n\r\n                            </Grid>\r\n                        </Paper>\r\n                        <br />\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={2}>\r\n\r\n\r\n                        <Grid style={{ display: \"visible\" }} spacing={1} direction=\"row\" alignItems=\"center\" container>\r\n\r\n                            <Grid item xs={12} sm={12}>\r\n                                <SimpleExpansionPanel data={{ list: this.state.closeingEqualHighList, title: \"Strong Closing\", LoadSymbolDetails: this.LoadSymbolDetails }} />\r\n                            </Grid>\r\n\r\n                            {/* <Grid item xs={12} sm={12}>\r\n                                <LiveBidsExpantion data={{ list: this.state.liveBidsList, title: \"Live Bids\", LoadSymbolDetails: this.LoadSymbolDetails }} />\r\n                            </Grid>  */}\r\n\r\n                            <Grid item xs={12} sm={12}>\r\n                                <SimpleExpansionFastMovement data={{ list: this.state.oneHourBullBearCheckList, title: \"Hourly Bullish/Bearish\", LoadSymbolDetails: this.LoadSymbolDetails }} />\r\n                            </Grid>\r\n\r\n\r\n\r\n                            <Grid item xs={12} sm={12}>\r\n                                <SimpleExpansionFastMovement data={{ list: this.state.volumeBreakoutlast5CandleList, title: \"Last 5 bar Volume breakout\", LoadSymbolDetails: this.LoadSymbolDetails }} />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={12}>\r\n                                <SimpleExpansionFastMovement data={{ list: this.state.fastMovementList, title: \"Fast Movement\", LoadSymbolDetails: this.LoadSymbolDetails }} />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12}>\r\n                                <SimpleExpansionPanel data={{ list: this.state.volumeCrossedList, title: \"Average Volume Crossed\", LoadSymbolDetails: this.LoadSymbolDetails }} />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={12}>\r\n                                <SimpleExpansionPanel data={{ list: this.state.openEqualLowList, title: \"Open = Low : Buy\", LoadSymbolDetails: this.LoadSymbolDetails }} />\r\n                            </Grid>\r\n\r\n\r\n                            <Grid item xs={12} sm={12}>\r\n                                <SimpleExpansionPanel data={{ list: this.state.openEqualHighList, title: \"Open = High : Sell\", LoadSymbolDetails: this.LoadSymbolDetails }} />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={12}>\r\n                                <SimpleExpansionPanel data={{ list: this.state.slowMotionStockList, title: \"Last 5 days no Movement\", LoadSymbolDetails: this.LoadSymbolDetails }} />\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    </Grid>\r\n\r\n\r\n\r\n\r\n                </Grid>\r\n\r\n            </React.Fragment>\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst styles = {\r\n    formContainer: {\r\n        display: 'flex',\r\n        flexFlow: 'row wrap'\r\n    },\r\n\r\n    textStyle: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n\r\n    },\r\n    imgStyle: {\r\n        display: 'flex'\r\n    },\r\n\r\n    selectStyle: {\r\n        minWidth: '100%',\r\n        marginBottom: '10px'\r\n    },\r\n    MuiTextField: {\r\n        overflowY: 'scroll',\r\n        fontSize: \"12px\",\r\n        maxHeight: \"50px\",\r\n\r\n    },\r\n    footerButton: {\r\n        position: 'fixed',\r\n        left: 0,\r\n        bottom: '20px',\r\n        width: '100%',\r\n        textAlign: 'right'\r\n    }\r\n\r\n};\r\n\r\nexport default Home;\r\n\r\n","import React from \"react\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {connect} from \"react-redux\";\r\nimport {setPackLoaded} from \"../../action\";\r\nimport Spinner from \"react-spinner-material\";\r\nimport * as moment from 'moment';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Input from \"@material-ui/core/Input\";\r\nimport \"./ViewStyle.css\";\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\n\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nclass MyView extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            products: [],\r\n            stopnview:'', \r\n            curnewdata:'', \r\n            underlyingValue : '', \r\n            timestamp:'',\r\n            totalCOI : 0,\r\n            expiry: '', \r\n            strike:'',\r\n            FilteredBY: '',\r\n            AllspTotalOI:[],\r\n            PEoi:0,\r\n            CEoi:0,\r\n            pcrTable : JSON.parse(localStorage.getItem('pcrTable')) && JSON.parse(localStorage.getItem('pcrTable')).data,\r\n            optionChainData: JSON.parse( localStorage.getItem('optionChainData')),\r\n            filtered: JSON.parse(localStorage.getItem('optionChainData'))  && JSON.parse(localStorage.getItem('optionChainData')).filtered && JSON.parse(localStorage.getItem('optionChainData')).filtered.data  \r\n            \r\n            //JSON.parse(localStorage.getItem('optionChainData')).records.data\r\n\r\n\r\n\r\n        }\r\n        this.findSupportResistence = this.findSupportResistence.bind(this);\r\n            \r\n    }\r\n\r\n    onChange = (e) =>{\r\n      this.setState({[e.target.name]: e.target.value}); \r\n      this.filterOptionChain(e.target.name,  e.target.value); \r\n\r\n    }\r\n    filterOptionChain = (name, actualValue) =>{\r\n        //console.log('filtername', name, actualValue); \r\n        var filereddata = []; \r\n    \r\n       var alldata =  this.state.optionChainData && this.state.optionChainData.records &&  this.state.optionChainData.records.data; \r\n\r\n       if(name === 'expiry' && actualValue === 'All' ) {\r\n            \r\n        filereddata =  alldata; \r\n       }\r\n     \r\n        if(name === 'expiry') {\r\n            \r\n            for (let index = 0; index < alldata.length; index++) {\r\n                const element = alldata[index];\r\n                if(element.expiryDate === actualValue){\r\n                    filereddata.push(element); \r\n                } \r\n            }   \r\n        }\r\n\r\n        if(name === 'strike') {\r\n            \r\n            for (let index = 0; index < alldata.length; index++) {\r\n                const element = alldata[index];\r\n                if(element.strikePrice === actualValue){\r\n                    filereddata.push(element); \r\n                } \r\n            } \r\n        }\r\n\r\n        \r\n\r\n        this.setState({filtered : filereddata, FilteredBY: name +\" \"+ actualValue});\r\n       //  console.log(filereddata); \r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n\r\n\r\n       this.loadPackList();\r\n   //   console.log('this.state.optionChainData.records.expiryDates', this.state.optionChainData.records.expiryDates)\r\n\r\n\r\n        if(!JSON.parse(localStorage.getItem('cpdata')))\r\n        localStorage.setItem('cpdata', JSON.stringify( {data : []}) )\r\n        else\r\n        this.setState({products:  JSON.parse(localStorage.getItem('cpdata')).data})\r\n       // this.setState({ stopnview:  setInterval( this.loadPackList ,  60001 * 2)});\r\n       //  clearInterval(this.state.stopnview)\r\n\r\n       if(!JSON.parse(localStorage.getItem('pcrTable')))\r\n       localStorage.setItem('pcrTable', JSON.stringify( {data : []}) )\r\n       else\r\n       this.setState({pcrTable:  JSON.parse(localStorage.getItem('pcrTable')).data})\r\n     \r\n\r\n\r\n       var todayTime =  new Date(); \r\n       if(todayTime.getHours()>=9 && todayTime.getHours()< 16 ){\r\n            setInterval(() => {\r\n                this.loadPackList();\r\n            }, 60001 * 2);\r\n        }\r\n        setInterval(() => {\r\n            this.updatepcr()\r\n        }, 60010 * 2);\r\n\r\n   //     this.findSupportResistence(this.state.optionChainData); \r\n\r\n\r\n    }\r\n    // componentDidUpdate(){\r\n    //   //  this.updatepcr(); \r\n    //    // console.log(\"updaate called\") \r\n    // }\r\n\r\n    getDataforStrike = strikePrice => {\r\n\r\n        var alldata = JSON.parse( localStorage.getItem('optionChainData')).records.data;// this.state.optionChainData && this.state.optionChainData.records.data; \r\n        var     sumOfCEoi = 0,sumOfPEoi = 0; \r\n        for (let index = 0; index < alldata.length; index++) {\r\n            const element = alldata[index];\r\n            \r\n            if(strikePrice === element.strikePrice){\r\n\r\n                if(element.CE && element.CE.openInterest){\r\n                    sumOfCEoi = sumOfCEoi + element.CE.openInterest; \r\n                }\r\n                if(element.PE && element.PE.openInterest){\r\n                    sumOfPEoi = sumOfPEoi + element.PE.openInterest; \r\n                }\r\n               \r\n            }                    \r\n        }\r\n       // fliterExData.push({strikePrice : strikePrice,  sumOfCEoi : sumOfCEoi});    \r\n        return {strikePrice : strikePrice,  sumOfCEoi : sumOfCEoi , sumOfPEoi : sumOfPEoi}; \r\n\r\n      //  console.log(\"alldata\", alldata);\r\n    }\r\n\r\n    findSupportResistence = (optiondata) => {\r\n           // console.log(optiondata);\r\n            var alldata =  optiondata && optiondata.records && optiondata.records.data; \r\n            //var underlyingValue = optiondata && optiondata.records.underlyingValue; \r\n            var PEoi = 0,CEoi = 0, PEoiChange=0,CEoiChange=0, peStrikePriceByDate=[]  ;\r\n            for (let index = 0; index < alldata.length; index++) {\r\n                const element = alldata[index];\r\n                if(element &&  element.PE){\r\n                    PEoi = PEoi + element.PE.openInterest; \r\n                    PEoiChange = PEoiChange + element.PE.changeinOpenInterest; \r\n                }\r\n                if(element &&  element.CE){\r\n                    CEoi = CEoi + element.CE.openInterest; \r\n                    CEoiChange = CEoiChange + element.CE.changeinOpenInterest; \r\n\r\n                } \r\n            }\r\n\r\n          var allexpiryDates =   optiondata.records.expiryDates; \r\n          var strikePrices =  optiondata.records.strikePrices; \r\n        //  var fliterExData = [];  \r\n           \r\n            // for (let index = 0; index < allexpiryDates.length; index++) {\r\n            //     const element = allexpiryDates[index];\r\n            //     for (let indexJ = 0; indexJ < alldata.length; indexJ++) {\r\n            //         if(alldata[indexJ].expiryDate == '22-Apr-2021'){\r\n            //             fliterExData.push(alldata[indexJ]); \r\n            //         } \r\n            //     }                  \r\n            // }   \r\n\r\n            var myStrike = [14000, 14050, 14100, 14150, 14200, 14050, 14300, 14350, 14400,14450,14500,14550,14600,14650,14700,14750,14800,14850,14900,14950,15000,15050,15100,15150,15200,15250]; \r\n\r\n           // myStrike =   myStrike.sort(function(a, b){return b - a});\r\n       \r\n          //   var myStrike = [14400,14450,14500,14550,14600,14650,14700,14750,14800,14850,14900,14950,15000,15050,15100,15150,15200,15250]; \r\n       \r\n\r\n\r\n           // var myStrike = [15200,15250]; \r\n\r\n\r\n            var data  = [], totalspeoi= 0, totalsceoi= 0;\r\n             myStrike.forEach(element => {\r\n                var resdata =  this.getDataforStrike(element); \r\n                totalspeoi = totalspeoi+resdata.sumOfPEoi; \r\n                totalsceoi = totalsceoi+resdata.sumOfCEoi; \r\n\r\n                data.push(resdata); \r\n             \r\n               // console.log(element, resdata);\r\n                \r\n                 \r\n             });\r\n             this.setState({AllspTotalOI : data, selectedSPpcr : (totalspeoi / totalsceoi).toFixed(3), totalspeoi : totalspeoi,  totalsceoi : totalsceoi }); \r\n\r\n            // for (let index = 0; index < alldata.length; index++) {\r\n            //     const element = alldata[index];\r\n              \r\n            //     // if(alldata[index].strikePrice ==  14800){\r\n            //     //     fliterExData.push(element); \r\n            //     // } \r\n            //     for (let indexJ = 0; indexJ < strikePrices.length; indexJ++) {\r\n            //         if(  alldata[index].strikePrice == strikePrices[indexJ].strikePrice){\r\n            //             fliterExData.push(element); \r\n            //         }   \r\n            //     }\r\n               \r\n            // }   \r\n\r\n//            console.log(\"allfliterExData\",fliterExData);\r\n\r\n\r\n        this.setState({CEoi: CEoi, PEoi : PEoi, allStrikediff:  PEoi - CEoi, CEoiChange: CEoiChange,PEoiChange: PEoiChange,allStrikeChngeDiff:  PEoiChange - CEoiChange });\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n    loadPackList() {\r\n\r\n\r\n        var data = { allPacks:true, portal: true};\r\n        AdminService.getBNcpdata(\"NIFTY\")\r\n            .then((res) => {\r\n        //     let data = resolveResponse(res);\r\n\r\n             var data =  res.data && res.data;\r\n\r\n             \r\n           localStorage.setItem(\"optionChainData\",  JSON.stringify( data) );\r\n\r\n          // this.findSupportResistence(data); \r\n\r\n           // console.log(\"livedata\", data.filtered);\r\n\r\n           this.setState({filtered : data.filtered && data.filtered.data , optionChainData: data});\r\n\r\n            if(data.filtered){\r\n\r\n                var diff =  data.filtered.PE.totOI - data.filtered.CE.totOI; \r\n\r\n                var newdata = {\r\n                    dateTime : this.dateFormat(new Date()), \r\n                    totCEOI : data.filtered.CE.totOI ,\r\n                    totCEVol: data.filtered.CE.totVol, \r\n                    totPEOI: data.filtered.PE.totOI , \r\n                    totPEVol: data.filtered.PE.totVol, \r\n                    diff: diff, \r\n                    totChangeINOICall: parseInt(localStorage.getItem('totCEOIChange')), \r\n                    totChangeINOIPut: parseInt(localStorage.getItem('totPEOIChange')), \r\n                    totChangeINOIDiff: parseInt(localStorage.getItem('totPEOIChange')) - parseInt(localStorage.getItem('totCEOIChange')) \r\n\r\n                } \r\n                this.setState({curnewdata : newdata });\r\n\r\n                var resname = ''; \r\n                if(diff > 0 )\r\n                 resname = \"BUY\";\r\n                 else\r\n                resname = \"SELL\"\r\n                \r\n\r\n                document.getElementById('title').innerHTML=  (diff/100000).toFixed(2) + '|' + ((localStorage.getItem('totPEOIChange') - localStorage.getItem('totCEOIChange'))/100000).toFixed(2) + \"L\" +  \" NIFTY \"; \r\n               // createData.push(newdata); \r\n               if(JSON.parse(localStorage.getItem('cpdata'))){\r\n                var oldproducts = JSON.parse(localStorage.getItem('cpdata')); \r\n               // console.log(\"oldproductsindex0\", ); \r\n                var lastrow = oldproducts && oldproducts.data[0]; \r\n                \r\n\r\n                // oldproducts.data.forEach((data) => {\r\n                //     if(data.totCEOI == newdata.totCEOI && data.totCEVol == newdata.totCEVol && data.totPEOI == newdata.totPEOI  && data.totPEVol == newdata.totPEVol ){\r\n                //         newdata.isDuplicate = true; \r\n                //     }else{\r\n                //         newdata.isDuplicate = false;\r\n                //     }\r\n                // });\r\n                if(lastrow){\r\n                    newdata.isDuplicate = newdata.diff == lastrow.diff ? true : false\r\n                    newdata.totCEOIChange = (((newdata.totCEOI-lastrow.totCEOI) * 100)/lastrow.totCEOI).toFixed(3);;\r\n                    newdata.totPEOIChange =   (((newdata.totPEOI-lastrow.totPEOI) * 100)/lastrow.totPEOI).toFixed(3);;\r\n                    newdata.totDiffChange =  (((newdata.diff-lastrow.diff) * 100)/lastrow.diff).toFixed(3); \r\n                }else{\r\n                    newdata.isDuplicate = false\r\n                    newdata.totCEOIChange = 0;\r\n                    newdata.totPEOIChange =  0;\r\n                    newdata.totDiffChange =  0; \r\n                }\r\n                \r\n\r\n                oldproducts.data.unshift(newdata);\r\n\r\n                if(data.records){\r\n                    oldproducts.timestamp = data.records.timestamp; \r\n                    oldproducts.underlyingValue = data.records.underlyingValue; \r\n                }\r\n              \r\n\r\n                localStorage.setItem(\"cpdata\",  JSON.stringify( oldproducts) );\r\n\r\n                this.setState({products: oldproducts.data, underlyingValue : data.records.underlyingValue,timestamp: data.records.timestamp  })\r\n               }\r\n               \r\n             //  console.log(\"dddd\", this.state.curnewdata); \r\n   \r\n                 \r\n            }\r\n\r\n\r\n            this.updatepcr()\r\n            this.setState({pcrTable:  JSON.parse(localStorage.getItem('pcrTable')) && JSON.parse(localStorage.getItem('pcrTable')).data})\r\n\r\n            });\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    updatepcr(){\r\n\r\n\r\n        var pcrdata =  {\r\n            allPCR : (this.state.PEoi /this.state.CEoi).toFixed(3), \r\n            expiryPCR: localStorage.getItem('thisWeekPCR'), \r\n            selectedSPpcr: this.state.selectedSPpcr, \r\n         }\r\n\r\n         if(JSON.parse(localStorage.getItem('pcrTable'))){\r\n             var pcrTable = JSON.parse(localStorage.getItem('pcrTable')); \r\n             pcrTable.data.unshift(pcrdata);\r\n             localStorage.setItem(\"pcrTable\",  JSON.stringify( pcrTable) );\r\n         }\r\n         \r\n         console.log(pcrdata); \r\n         this.setState({pcrTable: pcrTable })\r\n    }\r\n \r\n\r\n    \r\n\r\n    dateFormat(date){ \r\n\r\n        return moment(date).format('DD-MM-YYYY h:mm:ss A');\r\n    }\r\n  \r\n\r\n\r\n    render(){\r\n     \r\n        var totCEOI = 0, totCEVol = 0,totCEOIChange=0, totCEBUY=0, totCESell=0; \r\n        var totPEOI = 0, totPEVol = 0,totPEOIChange=0, totPEBUY=0, totPESell=0; \r\n\r\n      return(\r\n        <React.Fragment>\r\n                <PostLoginNavBar />\r\n            <Grid  direction=\"row\" container className=\"flexGrow\" spacing={1}  style={{paddingLeft:\"5px\",paddingRight:\"5px\"}}>\r\n\r\n                 <Grid item xs={7} sm={7}>\r\n                    <Typography  component=\"h3\" variant=\"h6\" color=\"primary\" >\r\n                        My View({this.state.products && this.state.products.length}) <b> Nifty: {this.state.underlyingValue}</b> at Time: {this.state.timestamp} \r\n                        {/* <b> FilteredBY : {this.state.FilteredBY} </b>  */}\r\n                    </Typography> \r\n                </Grid>\r\n\r\n                <Grid item xs={2} sm={2} > \r\n                    <FormControl style={styles.selectStyle}>\r\n                            <InputLabel id=\"expiry\">Select Expiry Date</InputLabel>\r\n                            <Select\r\n                            id=\"expiry\"\r\n                            name=\"expiry\"\r\n                            value={this.state.expiry}\r\n                            onChange={this.onChange}\r\n                            input={<Input />}\r\n                            MenuProps={MenuProps}\r\n                            >\r\n                                <MenuItem key={'All'} value={'All'} >\r\n                                    {'All'}\r\n                                </MenuItem>\r\n                            {this.state.optionChainData && this.state.optionChainData.records && this.state.optionChainData.records.expiryDates ? this.state.optionChainData.records.expiryDates.map((name, index) => (\r\n                                <MenuItem key={name+'key'+index} value={name} >\r\n                                    {name}\r\n                                </MenuItem>\r\n                            )): \"\"}\r\n                            </Select>\r\n                        </FormControl>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={2} sm={2} > \r\n                            <FormControl style={styles.selectStyle}>\r\n                                    <InputLabel id=\"strike\">Select Strick Price</InputLabel>\r\n                                    <Select\r\n                                    labelId=\"strike\"\r\n                                    id=\"strike\"\r\n                                    max-height={'100%'}\r\n                                    name=\"strike\"\r\n                                    value={this.state.strike}\r\n                                    onChange={this.onChange}\r\n                                    input={<Input />}\r\n                                    MenuProps={MenuProps}\r\n                                    >\r\n                                    {this.state.optionChainData && this.state.optionChainData.records && this.state.optionChainData.records.strikePrices ? this.state.optionChainData.records.strikePrices.map(name => (\r\n                                        <MenuItem key={name} value={name} >\r\n                                            {name}\r\n                                        </MenuItem>\r\n                                    )): \"\"}\r\n                                    </Select>\r\n                                </FormControl>\r\n                        </Grid>\r\n                        <Grid item xs={1} sm={1} style={{paddingTop:'20px',paddingLeft:'20px'}}>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={() => this.loadPackList()}>\r\n                            Refesh\r\n                        </Button>      \r\n                        </Grid>\r\n\r\n                </Grid>\r\n              \r\n            \r\n                <Grid item xs={12} sm={12}>\r\n                <Paper style={{padding:\"10px\", overflow:\"auto\"}}>\r\n                   \r\n                    <Grid container spacing={3}  direction=\"row\" alignItems=\"center\" container>\r\n                        <Grid item xs={3} sm={3} >\r\n                         \r\n                         <span>All PUT OI: <b>{this.state.PEoi} ({(this.state.PEoi/100000).toFixed(3)}L)</b></span><br />\r\n                         <span>All CALL OI: <b>{this.state.CEoi} ({(this.state.CEoi/100000).toFixed(3)}L)</b></span><br />\r\n                         <span>All Put-Call Diff: {\r\n                             this.state.allStrikediff > 0 ? <b style={{color:'green'}}>{this.state.allStrikediff} ({((this.state.allStrikediff)/100000).toFixed(3)}L)</b>\r\n                            :  <b style={{color:'red'}}>{this.state.allStrikediff} ({((this.state.allStrikediff)/100000).toFixed(3)}L)</b> } \r\n                        </span>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={3} sm={3} >\r\n                \r\n                        <span>All PUT Chng in OI: <b>{this.state.PEoiChange} ({(this.state.PEoiChange/100000).toFixed(3)}L)</b></span><br />\r\n                         <span>All CALL Chng in  OI: <b>{this.state.CEoiChange} ({(this.state.CEoiChange/100000).toFixed(3)}L)</b></span><br />\r\n                         <span>All Put-Call Chng in Diff: {\r\n                             this.state.allStrikeChngeDiff > 0 ? <b style={{color:'green'}}>{this.state.allStrikeChngeDiff} ({((this.state.allStrikeChngeDiff)/100000).toFixed(3)}L)</b>\r\n                            :  <b style={{color:'red'}}>{this.state.allStrikeChngeDiff} ({((this.state.allStrikeChngeDiff)/100000).toFixed(3)}L)</b> } \r\n                        </span>\r\n\r\n\r\n                        </Grid>\r\n\r\n                        <Grid item xs={2} sm={2} >\r\n\r\n                        <Typography  component=\"h3\" variant=\"body1\" color=\"primary\" >\r\n                            <span>ALL PCR: <b>{(this.state.PEoi /this.state.CEoi).toFixed(3) } </b></span>\r\n                         </Typography> \r\n                         </Grid>\r\n\r\n                         <Grid item xs={2} sm={2} >\r\n                        <Typography  component=\"h3\" variant=\"body1\" color=\"primary\" >\r\n                            <span>Expire Week PCR: <b>{ localStorage.getItem('thisWeekPCR') } </b></span>\r\n                        </Typography> \r\n                        </Grid>\r\n                         \r\n\r\n\r\n                         <Grid item xs={2} sm={2} >\r\n                         <Typography  component=\"h3\" variant=\"body1\" color=\"primary\" style={{justifyContent:'left'}}>\r\n                            <span>14000 to 15250 PCR: <b>{this.state.selectedSPpcr} </b></span>\r\n\r\n                         </Typography> \r\n                \r\n              \r\n\r\n                        </Grid>\r\n\r\n\r\n                        \r\n            </Grid>\r\n            </Paper>\r\n            </Grid>\r\n\r\n           \r\n\r\n\r\n            \r\n            <Grid  direction=\"row\" container className=\"flexGrow\" spacing={0}  style={{paddingLeft:\"5px\",paddingRight:\"5px\"}}>\r\n              \r\n              \r\n                <Grid item xs={7} sm={7} style={{padding:\"2px\", overflow:\"auto\", height:\"250px\"}}>\r\n                <Table  id=\"tabledata\" stickyHeader aria-label=\"sticky table\"  id=\"tabledata\" size=\"small\">\r\n                    <TableHead style={{}} variant=\"head\">\r\n                        <TableRow variant=\"head\">\r\n                            <TableCell align=\"center\"><b>Time</b></TableCell>\r\n                            <TableCell align=\"center\"><b>VIEW</b></TableCell>\r\n                            <TableCell align=\"center\"><b>Put-Call(diff)</b></TableCell>\r\n                            <TableCell align=\"center\"><b>Chng in OI(diff)</b></TableCell>\r\n\r\n                            <TableCell align=\"center\"><b>PUT OI</b></TableCell>\r\n                            <TableCell align=\"center\"><b>Chng Put OI</b></TableCell>                            \r\n\r\n                            <TableCell align=\"center\"><b>Call OI</b></TableCell>\r\n\r\n                         \r\n                            <TableCell align=\"center\"><b>Chng Call OI</b></TableCell>                            \r\n                            \r\n                            {/* <TableCell align=\"center\"><b>Total PUT Volume</b></TableCell>\r\n                            <TableCell align=\"center\"><b>Total Call Volume</b> </TableCell> */}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody hover style={{width:\"\",whiteSpace: \"nowrap\"}}>\r\n                    \r\n                        { this.state.products ? this.state.products.map(row => (\r\n                            <TableRow key={row.dateTime} style={{background: row.isDuplicate ? \"lightgray\":\"\"}}>\r\n                                <TableCell align=\"center\">{row.dateTime.substring(19,11)}</TableCell>\r\n                                <TableCell align=\"center\">{row.diff > 0 ? <Typography variant='body2' style={{ color:'green' }} >BUY</Typography>  : <Typography variant=\"body2\" style={{ color:'red' }} >SELL</Typography> }</TableCell>\r\n                                <TableCell align=\"center\">{row.diff} ({(row.diff/100000).toFixed(2)}L)({row.totDiffChange > 0 ?  <span style={{ color:'green', fontWeight:'bold' }} >{row.totDiffChange}%</span>: row.totDiffChange == '0.000' ? <span>{row.totDiffChange}%</span> : <span style={{ color:'red',fontWeight:'bold'}} >{row.totDiffChange}%</span> }) </TableCell>\r\n                                <TableCell align=\"center\">{row.totChangeINOIDiff} ({(row.totChangeINOIDiff/100000).toFixed(2)}L)</TableCell>\r\n\r\n                                <TableCell align=\"center\">{row.totPEOI} ({row.totPEOIChange > 0 ?  <span style={{ color:'green', fontWeight:'bold' }} >{row.totPEOIChange}%</span>: row.totPEOIChange == '0.000' ? <span>{row.totPEOIChange}%</span> : <span style={{ color:'red',fontWeight:'bold'}} >{row.totPEOIChange}%</span> })</TableCell>\r\n                                <TableCell align=\"center\">{row.totChangeINOIPut} </TableCell>\r\n\r\n                                <TableCell align=\"center\">{row.totCEOI} ({row.totCEOIChange > 0 ?  <span style={{ color:'green', fontWeight:'bold' }} >{row.totCEOIChange}%</span>: row.totCEOIChange == '0.000' ? <span>{row.totCEOIChange}%</span> : <span style={{ color:'red',fontWeight:'bold' }} >{row.totCEOIChange}%</span> })</TableCell>\r\n                              \r\n                                <TableCell align=\"center\">{row.totChangeINOICall}</TableCell>\r\n\r\n                                {/* <TableCell align=\"center\">{row.totPEVol} ({(row.totPEVol/100000).toFixed(2)}L)</TableCell>\r\n                                <TableCell align=\"center\">{row.totCEVol} ({(row.totCEVol/100000).toFixed(2)}L)</TableCell>      */}\r\n                \r\n                            </TableRow>\r\n                        )):<Spinner/>}\r\n                    </TableBody>\r\n                </Table>\r\n                \r\n                </Grid>\r\n\r\n                <Grid item xs={3} sm={3} style={{padding:\"2px\", overflow:\"auto\", height:\"250px\"}}>\r\n                <Table style={{borderLeft: 'dashed',borderRight: 'dashed', fontWeight:'500' }}  id=\"tabledata\" stickyHeader aria-label=\"sticky table\"  id=\"tabledata\" size=\"small\">\r\n                    \r\n                    <TableHead style={{}} variant=\"head\">\r\n                        <TableRow variant=\"head\">\r\n                          \r\n                            <TableCell align=\"center\"><b>Total CE OI <br />{(this.state.totalsceoi/100000).toFixed(3)}L</b></TableCell>\r\n                            <TableCell align=\"center\"><b>Strike Price</b> </TableCell>\r\n                            <TableCell align=\"center\"><b>Total PE OI<br />{(this.state.totalspeoi/100000).toFixed(3)}L</b></TableCell>\r\n                           \r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody style={{width:\"\",whiteSpace: \"nowrap\"}}>\r\n                    \r\n                        { this.state.AllspTotalOI ? this.state.AllspTotalOI.map(row => (\r\n                             <TableRow  hover key={row.dateTime} >\r\n                             <TableCell align=\"center\" style={{backgroundColor: row.strikePrice < this.state.underlyingValue ? '#ded6a269' : ''}}>{row.sumOfCEoi} ({(row.sumOfCEoi/100000).toFixed(2)}L)</TableCell>\r\n                             <TableCell  align=\"center\">{row.strikePrice}</TableCell>\r\n                             <TableCell align=\"center\" style={{backgroundColor: row.strikePrice > this.state.underlyingValue ? '#ded6a269' : ''}}>{row.sumOfPEoi} ({(row.sumOfPEoi/100000).toFixed(2)}L)</TableCell>\r\n                     \r\n                         </TableRow>\r\n                        )):<Spinner/>}\r\n\r\n\r\n                        \r\n                    </TableBody>\r\n                </Table>\r\n                \r\n                </Grid>\r\n\r\n                <Grid item xs={2} sm={2} style={{padding:\"2px\", overflow:\"auto\", height:\"250px\"}}>\r\n                <Table   id=\"tabledata\" stickyHeader aria-label=\"sticky table\"  id=\"tabledata\" size=\"small\">\r\n                    \r\n                    <TableHead variant=\"head\">\r\n                        <TableRow variant=\"head\">\r\n                          \r\n                            <TableCell align=\"center\">ALL Pcr</TableCell>\r\n                            <TableCell align=\"center\">Expiry Pcr </TableCell>\r\n                            <TableCell align=\"center\">Selected Pcr</TableCell>\r\n                         \r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody style={{whiteSpace: \"nowrap\"}}>\r\n\r\n                        {this.state.pcrTable && this.state.pcrTable.length>0 && this.state.pcrTable ? this.state.pcrTable.map(row => (\r\n                            <TableRow  hover key={row.expiryPCR} >\r\n                                <TableCell align=\"center\">{row.allPCR} </TableCell>\r\n                                <TableCell  align=\"center\">{row.expiryPCR}</TableCell>\r\n                                <TableCell align=\"center\">{row.selectedSPpcr} </TableCell>\r\n                            </TableRow>\r\n                        )):<Spinner/>}\r\n\r\n                        \r\n                    </TableBody>\r\n                </Table>\r\n                \r\n                </Grid>\r\n\r\n        \r\n                <Grid item xs={12} sm={12} style={{padding:\"2px\", overflow:\"auto\", height:\"900px\"}}>\r\n\r\n                <Table stickyHeader aria-label=\"sticky table\"  id=\"tabledata\" size=\"small\">\r\n\r\n                <TableHead variant=\"head\">\r\n\r\n                    <TableRow variant=\"head\"  >\r\n                        \r\n                        <TableCell colSpan={6} align=\"center\"><b>CALL</b></TableCell>\r\n                        <TableCell align=\"center\"><b></b></TableCell>\r\n                        <TableCell align=\"center\"><b></b></TableCell>\r\n                        <TableCell colSpan={6} align=\"center\"><b>PUT</b></TableCell>\r\n                    </TableRow>\r\n                    <TableRow variant=\"head\" >\r\n                    \r\n                        {/* <TableCell align=\"center\" ><b>Sr No.</b></TableCell>  */}\r\n                     \r\n\r\n                        <TableCell align=\"center\"><b>OI Total OI <br />{localStorage.getItem('totCEOI')}({(localStorage.getItem('totCEOI')/100000).toFixed(3)}L) </b></TableCell>\r\n                        <TableCell align=\"center\"><b>Chng in OI <br />{localStorage.getItem('totCEOIChange')}({(localStorage.getItem('totCEOIChange')/100000).toFixed(3)}L)</b></TableCell>\r\n                        {/* <TableCell align=\"center\"><b>Volume <br />{localStorage.getItem('totCEVol')}({(localStorage.getItem('totCEVol')/100000).toFixed(3)}L)</b> </TableCell> */}\r\n                        <TableCell align=\"center\"><b>IV</b></TableCell>\r\n                        <TableCell align=\"center\"><b>Delta</b></TableCell>\r\n\r\n                        <TableCell align=\"center\"><b>LTP</b></TableCell>\r\n                        {/* <TableCell align=\"center\"><b>PChange%</b></TableCell> */}\r\n                        <TableCell align=\"center\"><b>CHNG</b></TableCell>\r\n                        {/* <TableCell align=\"center\"><b>Bid qty</b></TableCell>\r\n                        <TableCell align=\"center\"><b>Bid Price</b></TableCell>\r\n                        <TableCell align=\"center\"><b>Ask Price</b></TableCell>\r\n                        <TableCell align=\"center\"><b>ASK qty</b></TableCell> */}\r\n\r\n                        {/* <TableCell align=\"center\"><b>Total Buy Qty</b></TableCell>\r\n                        <TableCell align=\"center\"><b>Total Sell Qty</b></TableCell> */}\r\n\r\n                        <TableCell align=\"center\"><span style={{color:'#3e85c5', fontWeight:'bold'}}> STRIKE PRICE</span> </TableCell>\r\n                        <TableCell align=\"center\"><span style={{color:'#3e85c5', fontWeight:'bold'}}> Expiry</span> </TableCell>\r\n\r\n                        {/* <TableCell align=\"center\"><b>Total Sell Qty</b></TableCell> \r\n                        <TableCell align=\"center\"><b>Total Buy Qty</b></TableCell> */}\r\n\r\n\r\n                        {/* <TableCell align=\"center\"><b>Bid Qty</b></TableCell>\r\n                        <TableCell align=\"center\"><b>Bid Price</b></TableCell>\r\n                        <TableCell align=\"center\"><b>Ask Price</b></TableCell>\r\n                        <TableCell align=\"center\"><b>Ask Qty</b></TableCell>\r\n                        */}\r\n                        <TableCell align=\"center\"><b>CHNG</b></TableCell>\r\n                        {/* <TableCell align=\"center\"><b>PChange%</b></TableCell> */}\r\n                        <TableCell align=\"center\"><b>LTP</b></TableCell>\r\n                        <TableCell align=\"center\"><b>IV</b></TableCell>\r\n                        <TableCell align=\"center\"><b>Delta</b></TableCell>\r\n\r\n\r\n                        {/* <TableCell align=\"center\"><b>Volume <br />{localStorage.getItem('totPEVol')}({(localStorage.getItem('totPEVol')/100000).toFixed(3)}L)</b></TableCell> */}\r\n                        <TableCell align=\"center\"><b>Chng in OI <br />{localStorage.getItem('totPEOIChange')}({(localStorage.getItem('totPEOIChange')/100000).toFixed(3)}L)</b></TableCell>\r\n                        <TableCell align=\"center\"><b>OI <br />{localStorage.getItem('totPEOI')}({(localStorage.getItem('totPEOI')/100000).toFixed(3)}L)</b></TableCell>\r\n\r\n\r\n                    </TableRow>\r\n                </TableHead>                   \r\n                    \r\n                    <TableBody>\r\n                    \r\n                        { this.state.filtered ? this.state.filtered.map((opdata, index) => (\r\n                            <TableRow hover key={index} style={{background: opdata.isDuplicate ? \"lightgray\":\"\"}}>\r\n                              \r\n                                {/* <TableCell style={{whiteSpace: \"nowrap\"}} align=\"center\">{index+1} </TableCell>*/}\r\n                                { opdata && opdata.CE && opdata.PE ? <>\r\n                                            <TableCell {...totCEOI = totCEOI +  opdata.CE.openInterest}  style={{backgroundColor: opdata.strikePrice < opdata.CE.underlyingValue ? '#ded6a269' : ''}} align=\"center\">{opdata.CE.openInterest}</TableCell>\r\n                                            <TableCell {...totCEOIChange = totCEOIChange + opdata.CE.changeinOpenInterest}  style={{backgroundColor: opdata.strikePrice < opdata.CE.underlyingValue ? '#ded6a269' : ''}} align=\"center\">{opdata.CE.changeinOpenInterest}</TableCell>\r\n                                            {/* <TableCell {...totCEVol = totCEVol + opdata.CE.totalTradedVolume} style={{backgroundColor: opdata.strikePrice < opdata.CE.underlyingValue ? '#ded6a269' : ''}} align=\"center\">{opdata.CE.totalTradedVolume} </TableCell> */}\r\n                                            <TableCell align=\"center\">{opdata.CE.impliedVolatility} </TableCell>\r\n                                            <TableCell align=\"center\">{((opdata.CE.change/opdata.strikePrice-opdata.CE.underlyingValue) * 10).toFixed(2)} </TableCell>\r\n\r\n                                            <TableCell style={{backgroundColor: opdata.strikePrice < opdata.CE.underlyingValue ? '#ded6a269' : ''}} align=\"center\"><span style={{color:'#3e85c5', fontWeight:'bold'}}> {opdata.CE.lastPrice}</span>({opdata.CE.pChange > 0 ?  <span style={{ color:'green', fontWeight:'bold' }} >{opdata.CE.pChange.toFixed(2)}%</span>: opdata.CE.pChange == 0 ? <span>{opdata.CE.pChange.toFixed(2)}%</span> : <span style={{ color:'red',fontWeight:'bold'}} >{opdata.CE.pChange.toFixed(2)}%</span> }) </TableCell>\r\n                                            {/* <TableCell style={{backgroundColor: opdata.strikePrice < opdata.CE.underlyingValue ? '#ded6a269' : ''}} align=\"center\">{opdata.CE.pChange > 0 ?  <span style={{ color:'green', fontWeight:'bold' }} >{opdata.CE.pChange.toFixed(2)}%</span>: opdata.CE.pChange == 0 ? <span>{opdata.CE.pChange.toFixed(2)}%</span> : <span style={{ color:'red',fontWeight:'bold'}} >{opdata.CE.pChange.toFixed(2)}%</span> } </TableCell> */}\r\n                                            <TableCell style={{backgroundColor: opdata.strikePrice < opdata.CE.underlyingValue ? '#ded6a269' : ''}} align=\"center\">{opdata.CE.change.toFixed(2)} </TableCell>\r\n                                        \r\n                                            {/* <TableCell align=\"center\">{opdata.CE.bidQty} </TableCell>\r\n                                            <TableCell align=\"center\">{opdata.CE.bidprice} </TableCell>\r\n                                            <TableCell align=\"center\">{opdata.CE.askPrice} </TableCell>\r\n                                            <TableCell align=\"center\">{opdata.CE.askQty} </TableCell> */}\r\n\r\n                                            {/* <TableCell {...totCEBUY = totCEBUY + opdata.CE.totalBuyQuantity}  style={{backgroundColor: opdata.strikePrice < opdata.CE.underlyingValue ? '#ded6a269' : ''}} title={'Total CALL Buy Qty'} align=\"center\">{opdata.CE.totalBuyQuantity}({(opdata.CE.totalBuyQuantity/100000).toFixed(3)}L) </TableCell>\r\n                                            <TableCell {...totCESell = totCESell + opdata.CE.totalSellQuantity} style={{backgroundColor: opdata.strikePrice < opdata.CE.underlyingValue ? '#ded6a269' : ''}} title={'Total CALL Sell Qty'} align=\"center\">{opdata.CE.totalSellQuantity}({(opdata.CE.totalSellQuantity/100000).toFixed(3)}L) </TableCell>\r\n                                         */}\r\n                                            <TableCell style={{borderLeft: 'dashed',borderRight: 'dashed', fontWeight:'500' }} align=\"center\"><span> <a href=\"#\" style={{textDecoration: 'none'}} onClick={() => this.filterOptionChain('strike', opdata.strikePrice)}> {opdata.strikePrice}</a> </span> </TableCell>\r\n                                            <TableCell style={{borderRight: 'dashed', whiteSpace: \"nowrap\"}} align=\"center\" ><span style={{paddingLeft:'5px',paddingRight:'5px'  }}> <a href=\"#\" style={{textDecoration: 'none'}} onClick={() => this.filterOptionChain('expiry', opdata.expiryDate)}> {opdata.expiryDate}</a></span> </TableCell>\r\n\r\n                                            {/* <TableCell {...totPESell = totPESell + opdata.PE.totalSellQuantity} style={{backgroundColor: opdata.strikePrice > opdata.CE.underlyingValue ? '#ded6a269' : ''}} title={'Total PUT Sell Qty'} align=\"center\">{opdata.PE.totalSellQuantity}({(opdata.PE.totalSellQuantity/100000).toFixed(3)}L) </TableCell>\r\n                                            <TableCell {...totPEBUY = totPEBUY + opdata.PE.totalBuyQuantity} style={{backgroundColor: opdata.strikePrice > opdata.CE.underlyingValue ? '#ded6a269' : ''}} title={'Total PUT Buy Qty'} align=\"center\">{opdata.PE.totalBuyQuantity}({(opdata.PE.totalBuyQuantity/100000).toFixed(3)}L)</TableCell>\r\n                                         */}\r\n                                            {/* <TableCell align=\"center\">{opdata.PE.bidQty} </TableCell>\r\n                                            <TableCell align=\"center\">{opdata.PE.bidprice} </TableCell>\r\n                                            <TableCell align=\"center\">{opdata.PE.askPrice} </TableCell>\r\n                                            <TableCell align=\"center\">{opdata.PE.askQty} </TableCell>\r\n                                            */}\r\n                                            <TableCell style={{backgroundColor: opdata.strikePrice > opdata.CE.underlyingValue ? '#ded6a269' : ''}} align=\"center\">{opdata.PE.change.toFixed(2)} </TableCell>\r\n                                            {/* <TableCell style={{backgroundColor: opdata.strikePrice > opdata.CE.underlyingValue ? '#ded6a269' : ''}} align=\"center\">{opdata.PE.pChange > 0 ?  <span style={{ color:'green', fontWeight:'bold' }} >{opdata.PE.pChange.toFixed(2)}%</span>: opdata.PE.pChange == 0 ? <span>{opdata.PE.pChange.toFixed(2)}%</span> : <span style={{ color:'red',fontWeight:'bold'}} >{opdata.PE.pChange.toFixed(2)}%</span>} </TableCell> */}\r\n                                            <TableCell style={{backgroundColor: opdata.strikePrice > opdata.CE.underlyingValue ? '#ded6a269' : ''}} align=\"center\"><span style={{color:'#3e85c5', fontWeight:'bold'}}> {opdata.PE.lastPrice}</span>({opdata.PE.pChange > 0 ?  <span style={{ color:'green', fontWeight:'bold' }} >{opdata.PE.pChange.toFixed(2)}%</span>: opdata.PE.pChange == 0 ? <span>{opdata.PE.pChange.toFixed(2)}%</span> : <span style={{ color:'red',fontWeight:'bold'}} >{opdata.PE.pChange.toFixed(2)}%</span>})</TableCell>\r\n\r\n                                            <TableCell align=\"center\">{opdata.PE.impliedVolatility} </TableCell>\r\n                                            <TableCell align=\"center\">{((opdata.PE.change/opdata.strikePrice-opdata.PE.underlyingValue) * 10).toFixed(2)} </TableCell>\r\n\r\n                                            {/* <TableCell {...totPEVol = totPEVol + opdata.PE.totalTradedVolume}  style={{backgroundColor: opdata.strikePrice > opdata.CE.underlyingValue ? '#ded6a269' : ''}} align=\"center\">{opdata.PE.totalTradedVolume} </TableCell> */}\r\n                                            <TableCell {...totPEOIChange = totPEOIChange + opdata.PE.changeinOpenInterest}  style={{backgroundColor: opdata.strikePrice > opdata.CE.underlyingValue ? '#ded6a269' : ''}} align=\"center\">{opdata.PE.changeinOpenInterest}</TableCell>\r\n                                            <TableCell {...totPEOI = totPEOI + opdata.PE.openInterest} style={{backgroundColor: opdata.strikePrice > opdata.CE.underlyingValue ? '#ded6a269' : ''}}align=\"center\">{opdata.PE.openInterest} </TableCell>\r\n                                     </> : \"\"\r\n                                }\r\n                               \r\n\r\n                            </TableRow>\r\n\r\n                        )):<Spinner/>}\r\n\r\n\r\n                            <TableRow  variant=\"head\"> \r\n                                <TableCell align=\"center\" {...localStorage.setItem('totCEOI',totCEOI)}><b>{totCEOI}<br />({(totCEOI/100000).toFixed(3)}L)</b></TableCell>\r\n                                <TableCell align=\"center\" {...localStorage.setItem('totCEOIChange',totCEOIChange)}><b>{totCEOIChange}<br />({(totCEOIChange/100000).toFixed(3)}L)</b> </TableCell>\r\n                                <TableCell align=\"center\" {...localStorage.setItem('totCEVol',totCEVol)}><b>{totCEVol}<br />({(totCEVol/100000).toFixed(3)}L)</b></TableCell>\r\n                                <TableCell colSpan={3} align=\"center\"></TableCell>\r\n                                {/* <TableCell align=\"center\"><b>{totCEBUY}<br />({(totCEBUY/100000).toFixed(3)}L)</b></TableCell>\r\n                                <TableCell align=\"center\"><b>{totCESell}<br />({(totCESell/100000).toFixed(3)}L)</b> </TableCell> */}\r\n\r\n                                <TableCell {...localStorage.setItem('thisWeekPCR',(totPEOI / totCEOI).toFixed(3))} align=\"center\" colSpan={2}><b> PCR : {(totPEOI / totCEOI).toFixed(3)}</b></TableCell>\r\n\r\n\r\n                                <TableCell colSpan={3} align=\"center\"></TableCell>\r\n\r\n\r\n                                {/* <TableCell align=\"center\"><b>{totPESell}<br />({(totPESell/100000).toFixed(3)}L)</b></TableCell>\r\n                                <TableCell align=\"center\"><b>{totPEBUY}<br />({(totPEBUY/100000).toFixed(3)}L)</b></TableCell>\r\n                                */}\r\n                                {/* <TableCell colSpan={3} align=\"center\"></TableCell> */} \r\n                                <TableCell align=\"center\" {...localStorage.setItem('totPEVol',totPEVol)}><b>{totPEVol}<br />({(totPEVol/100000).toFixed(3)}L)</b></TableCell>\r\n                                <TableCell align=\"center\" {...localStorage.setItem('totPEOIChange',totPEOIChange)}><b>{totPEOIChange}<br />({(totPEOIChange/100000).toFixed(3)}L)</b> </TableCell>\r\n                                <TableCell align=\"center\" {...localStorage.setItem('totPEOI',totPEOI)}><b>{totPEOI}<br />({(totPEOI/100000).toFixed(3)}L)</b> </TableCell>\r\n\r\n                            </TableRow>\r\n\r\n\r\n                    </TableBody>\r\n\r\n\r\n                </Table>\r\n                </Grid>\r\n\r\n                </Grid>\r\n                   \r\n\r\n                \r\n          \r\n          \r\n\r\n            </React.Fragment> \r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst styles = {\r\n    tableStyle : {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    }, \r\n    selectStyle:{\r\n        marginBottom: '0px',\r\n        minWidth: 240,\r\n        maxWidth: 240\r\n\r\n    }\r\n  \r\n}\r\n\r\nconst mapStateToProps=(state)=>{\r\n    return {packs:state.packs.packs.data};\r\n}\r\nexport default connect(mapStateToProps,{setPackLoaded})(MyView);\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nexport default function CustomizedDialogs(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n\r\n  //var indexSymbolData = JSON.parse(localStorage.getItem(props.data.indexSymbol)).data ; \r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        {props.data.indexSymbol}\r\n      </Button>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n        {props.data.indexSymbol}  At {props.data.timestamp}\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n        <Table stickyHeader aria-label=\"sticky table\"  id=\"tabledata\" size=\"medium\">\r\n        <TableRow variant=\"head\" >\r\n                    \r\n                    <TableCell align=\"left\"><b>Sr.</b></TableCell> \r\n                    <TableCell align=\"left\"><b>Stock Name</b></TableCell> \r\n                    <TableCell align=\"left\"><b>Last Price</b></TableCell> \r\n                    <TableCell align=\"left\"><b>CHNG%</b></TableCell> \r\n                    <TableCell align=\"left\"><b>Change Points</b></TableCell>\r\n\r\n                </TableRow>\r\n                <TableBody>\r\n                    \r\n                        {props.data.indexSymbolData ? props.data.indexSymbolData.map((idata, index) => (\r\n                            <TableRow hover key={index}>\r\n\r\n                            {index !== 0 ? <>\r\n                                   <TableCell align=\"left\">{index} </TableCell>\r\n                                    <TableCell align=\"left\">{idata.symbol}</TableCell>\r\n                                    <TableCell align=\"left\" >{idata.lastPrice}</TableCell> \r\n                                     <TableCell align=\"left\">{idata.pChange > 0 ?  <span style={{ color:'green', fontWeight:'bold' }} >{idata.pChange}%</span>: idata.pChange === 0 ? <span>{idata.pChange}%</span> : <span style={{ color:'red',fontWeight:'bold'}} >{idata.pChange}%</span>} </TableCell>\r\n                                     <TableCell align=\"left\">{idata.change}</TableCell>\r\n                                 \r\n                                </>\r\n                           : \"\" } \r\n                                   \r\n                            </TableRow>\r\n\r\n                        )):      \r\n                         <> <br/> <Button  variant=\"outlined\" size={'large'}   color=\"primary\">\r\n                            Refresh\r\n                        </Button> </>}\r\n\r\n                    </TableBody>\r\n\r\n\r\n                </Table>    \r\n\r\n\r\n\r\n         \r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {connect} from \"react-redux\";\r\nimport {setPackLoaded} from \"../../action\";\r\nimport Spinner from \"react-spinner-material\";\r\nimport * as moment from 'moment';\r\n\r\nimport \"./ViewStyle.css\";\r\nimport MyDialog from './MyDialog'\r\nimport Notify from \"../../utils/Notify\";\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\n\r\nclass MyView extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n           // products: [],\r\n            stopnview:'', \r\n            indexTimeStamp:'', \r\n            products : JSON.parse(localStorage.getItem('sorteIndexList')),\r\n        }\r\n            \r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n         this.loadPackList();\r\n  \r\n         var todayTime =  new Date(); \r\n         if(todayTime.getHours()>=9 && todayTime.getHours() < 16 ){\r\n              setInterval(() => {\r\n                  this.loadPackList();\r\n              }, 60001 * 2);\r\n          }\r\n      }\r\n\r\n\r\n      loadPackList() {\r\n        \r\n    \r\n        AdminService.getAllIndices()\r\n            .then((res) => {\r\n                if(res.data){\r\n\r\n\r\n                    this.setState({indexTimeStamp : res.data.timestamp})\r\n                    var softedData = res.data.data.sort(function(a, b){return b.percentChange - a.percentChange}); \r\n                    localStorage.setItem('sorteIndexList',  JSON.stringify(softedData));\r\n                    this.setState({products :   softedData});\r\n                    this.speckIt(\"1st sector is \" + softedData[0].indexSymbol +' '+ softedData[0].percentChange +'%' ); \r\n                    this.speckIt(\"2nd sector is \" +softedData[1].indexSymbol +' '+  softedData[1].percentChange +'%'); \r\n                    this.speckIt(\"3rd sector is \" +softedData[2].indexSymbol +' '+  softedData[2].percentChange +'%'); \r\n\r\n\r\n                    // for (let i = 0; i < softedData.length; i++) {\r\n                    //     // var cancel = setInterval(() => {\r\n                    //     //     this.getIndicesStocks(softedData[i].indexSymbol,i);\r\n                    //     // }, 1000);\r\n                    //     // if(i == softedData.length-1 ){\r\n                    //     //     clearInterval(cancel)\r\n                    //     // }\r\n                    //     this.getIndicesStocks(softedData[i].indexSymbol,i);\r\n\r\n                    // }\r\n                    this.getIndicesStocks(softedData[0].indexSymbol,0);\r\n                    this.getIndicesStocks(softedData[1].indexSymbol,1);\r\n                    this.getIndicesStocks(softedData[2].indexSymbol,2);\r\n                  \r\n                   \r\n                }\r\n\r\n            })\r\n            .catch((reject) => {\r\n\r\n                Notify.showError(\"All Indices API Failed\"+ <br/> + reject);  \r\n                this.speckIt(\"All Indices API Failed\");     \r\n               \r\n\r\n            })\r\n    }\r\n\r\n\r\n    getIndicesStocks = (indexSymbol, index) =>{\r\n\r\n\r\n\r\n        AdminService.getIndiceStock(indexSymbol)\r\n        .then((res) => {\r\n            console.log(res.data)\r\n\r\n            var resdata = res.data; \r\n            Notify.showSuccess(\"Success, Top is\" + resdata.data[1].symbol );  \r\n            this.speckIt(\"1st top \"+indexSymbol+\" stock is \" + resdata.data[1].symbol.toLocaleLowerCase() + ' high of '+ resdata.data[1].pChange + \"%\"); \r\n            this.speckIt(\"2nd top \"+indexSymbol+\" stock is \" + resdata.data[2].symbol.toLocaleLowerCase()+ ' high of '+ resdata.data[2].pChange + \"%\"); \r\n            this.speckIt(\"3rd top \"+indexSymbol+\" stock is \" + resdata.data[3].symbol.toLocaleLowerCase()+ ' high of '+ resdata.data[3].pChange + \"%\"); \r\n\r\n\r\n            if(resdata){\r\n                localStorage.setItem(indexSymbol, JSON.stringify(resdata)); \r\n                \r\n                \r\n\r\n                if(document.getElementById('topDate_'+index)){\r\n                    document.getElementById('topDate_'+index).innerHTML=resdata.timestamp.substring(12, 23);  \r\n                }\r\n                var percent = 0;\r\n\r\n                if(document.getElementById('top1_'+index)){\r\n                     percent = resdata.data[1].pChange > 0 ? '<span style=\"color:green\">'+ resdata.data[1].pChange + '</span>' : '<span style=\"color:red\">'+ resdata.data[1].pChange + '</span>';\r\n                    document.getElementById('top1_'+index).innerHTML=resdata.data[1].symbol + ' '+resdata.data[1].lastPrice + '(' + percent + ')';  \r\n                }\r\n                if(document.getElementById('top2_'+index)){\r\n                     percent = resdata.data[2].pChange > 0 ? '<span style=\"color:green\">'+ resdata.data[2].pChange + '</span>' : '<span style=\"color:red\">'+ resdata.data[2].pChange + '</span>';\r\n                    document.getElementById('top2_'+index).innerHTML=resdata.data[2].symbol+ ' '+resdata.data[2].lastPrice  +'(' + percent + ')'; \r\n                }\r\n                if(document.getElementById('top3_'+index)){\r\n                     percent = resdata.data[3].pChange > 0 ? '<span style=\"color:green\">'+ resdata.data[3].pChange + '</span>' : '<span style=\"color:red\">'+ resdata.data[3].pChange + '</span>';\r\n                    document.getElementById('top3_'+index).innerHTML=resdata.data[3].symbol+ ' '+resdata.data[3].lastPrice  + '(' + percent + ')'; \r\n                }\r\n                if(document.getElementById('top4_'+index)){\r\n                     percent = resdata.data[4].pChange > 0 ? '<span style=\"color:green\">'+ resdata.data[4].pChange + '</span>' : '<span style=\"color:red\">'+ resdata.data[4].pChange + '</span>';\r\n                    document.getElementById('top4_'+index).innerHTML=resdata.data[4].symbol+ ' '+resdata.data[4].lastPrice  +'(' + percent + ')'; \r\n                }\r\n                if(document.getElementById('top5_'+index)){\r\n                     percent = resdata.data[5].pChange > 0 ? '<span style=\"color:green\">'+ resdata.data[5].pChange + '</span>' : '<span style=\"color:red\">'+ resdata.data[5].pChange + '</span>';\r\n                    document.getElementById('top5_'+index).innerHTML=resdata.data[5].symbol + ' '+resdata.data[5].lastPrice + '(' + percent + ')'; \r\n                }   \r\n            }\r\n\r\n        })\r\n        .catch((reject) => {\r\n            Notify.showError(indexSymbol + \" Failed\"+ <br/> + reject);  \r\n            this.speckIt(indexSymbol + \" API Failed \"  ); \r\n        })\r\n\r\n    }\r\n\r\n    onChange = (e) =>{\r\n      this.setState({[e.target.name]: e.target.value}); \r\n    }\r\n   \r\n    speckIt = (text) => {\r\n        var msg = new SpeechSynthesisUtterance();\r\n        msg.text = text.toString(); \r\n      //  window.speechSynthesis.speak(msg);\r\n    }\r\n\r\n    dateFormat(date){ \r\n        return moment(date).format('DD-MM-YYYY h:mm:ss A');\r\n    }\r\n    timeFormat(date){ \r\n        return moment().calendar();   \r\n        //return moment(date).format('hh:mm:ss');\r\n\r\n        \r\n    }\r\n  \r\n    render(){\r\n     \r\n\r\n      return(\r\n        <React.Fragment>\r\n                <PostLoginNavBar />\r\n            \r\n            <Grid  direction=\"row\" container className=\"flexGrow\" spacing={1}  style={{paddingLeft:\"5px\",paddingRight:\"5px\"}}>\r\n\r\n                 <Grid item xs={7} sm={7}>\r\n                   \r\n                </Grid>\r\n\r\n        \r\n                <Grid item xs={12} sm={12} style={{padding:\"20px\", overflow:\"auto\", height:\"900px\"}}>\r\n\r\n                <Typography  component=\"h3\" variant=\"h6\" color=\"primary\" >\r\n                        Market - Indices at { this.state.indexTimeStamp }\r\n                    </Typography> \r\n                <Table stickyHeader aria-label=\"sticky table\"  id=\"tabledata\" size=\"small\">\r\n\r\n                <TableRow variant=\"head\" >\r\n                    \r\n                    <TableCell align=\"left\" ><b>Sr.</b></TableCell> \r\n                    <TableCell align=\"left\" ><b>Index Name</b></TableCell> \r\n                    <TableCell align=\"left\" ><b>CHNG%</b></TableCell> \r\n                    <TableCell align=\"left\" title=\"Advances/Declines/Unchanged\"><b>A/D/Un</b></TableCell> \r\n                    <TableCell align=\"left\" ><b>Refresh</b></TableCell> \r\n                    <TableCell align=\"left\"><b>TIME</b></TableCell> \r\n                    <TableCell align=\"left\"><b>Top1</b></TableCell> \r\n                    <TableCell align=\"left\"><b>Top2</b></TableCell> \r\n                    <TableCell align=\"left\"><b>Top3</b></TableCell> \r\n                    <TableCell align=\"left\"><b>Top4</b></TableCell> \r\n                    <TableCell align=\"left\"><b>Top5</b></TableCell> \r\n                    \r\n\r\n\r\n                </TableRow>\r\n                    \r\n                    <TableBody>\r\n                    \r\n                        { this.state.products ? this.state.products.map((idata, index) => (\r\n                            <TableRow hover key={index}>\r\n                              \r\n                              {/* 'SECTORAL INDICES' */}\r\n                                { idata.key !== 'vijay' ? <>\r\n\r\n                                   <TableCell align=\"left\">{index+1} </TableCell>\r\n\r\n                                     <TableCell align=\"left\">   \r\n                                        <MyDialog data={{indexSymbol: idata.indexSymbol + ' @ '+idata.last, indexSymbolData : JSON.parse(localStorage.getItem(idata.indexSymbol)) && JSON.parse(localStorage.getItem(idata.indexSymbol)).data, timestamp : JSON.parse(localStorage.getItem(idata.indexSymbol)) && JSON.parse(localStorage.getItem(idata.indexSymbol)).timestamp}}/>\r\n                                    </TableCell>\r\n\r\n                                   \r\n                                    <TableCell align=\"left\"><a href={'https://www.nseindia.com/api/equity-stockIndices?index='+encodeURIComponent(idata.indexSymbol)} target=\"_blank\"  rel=\"noopener noreferrer\">  {idata.percentChange > 0 ?  <span style={{ color:'green', fontWeight:'bold' }} >{idata.percentChange}%</span>: idata.percentChange === 0 ? <span>{idata.percentChange}%</span> : <span style={{ color:'red',fontWeight:'bold'}} >{idata.percentChange}%</span>} </a></TableCell>\r\n                                    \r\n                                    <TableCell align=\"left\">  <span style={{ color:'green' }} >{idata.advances}</span> / <span style={{ color:'red' }} >{idata.declines}</span> / {idata.unchanged}</TableCell>\r\n                                \r\n                                    <TableCell align=\"left\"  >\r\n                                        <Button variant=\"outlined\" color=\"primary\" onClick={() => this.getIndicesStocks(idata.indexSymbol, index)}>\r\n                                            Refresh\r\n                                        </Button>\r\n\r\n                                    </TableCell> \r\n\r\n\r\n                                    \r\n\r\n                                     \r\n                                     \r\n                                     <TableCell align=\"left\" id={'topDate_'+index}></TableCell> \r\n                                    <TableCell align=\"left\" id={'top1_'+index}></TableCell> \r\n                                    <TableCell align=\"left\" id={'top2_'+index}></TableCell> \r\n                                    <TableCell align=\"left\" id={'top3_'+index}></TableCell> \r\n                                    <TableCell align=\"left\" id={'top4_'+index}></TableCell> \r\n                                    <TableCell align=\"left\" id={'top5_'+index}></TableCell> \r\n                                    \r\n                                     </> : \"\"\r\n                                }\r\n                               \r\n\r\n                            </TableRow>\r\n\r\n                        )):<Spinner/>}\r\n\r\n\r\n\r\n\r\n\r\n                    </TableBody>\r\n\r\n\r\n                </Table>\r\n                </Grid>\r\n\r\n                </Grid>\r\n                   \r\n            </React.Fragment> \r\n        )\r\n    }\r\n\r\n}\r\n\r\n// const styles = {\r\n//     tableStyle : {\r\n//         display: 'flex',\r\n//         justifyContent: 'center'\r\n//     }, \r\n//     selectStyle:{\r\n//         marginBottom: '0px',\r\n//         minWidth: 240,\r\n//         maxWidth: 240\r\n\r\n//     }\r\n  \r\n// }\r\n\r\nconst mapStateToProps=(state)=>{\r\n    return {packs:state.packs.packs.data};\r\n}\r\nexport default connect(mapStateToProps,{setPackLoaded})(MyView);\r\n","import React from \"react\";\r\nimport ApexCharts from 'apexcharts'\r\n\r\n\r\nexport default function App( props ) {\r\n\r\n  var options = {\r\n    series: [{\r\n    data: [{\r\n        x: new Date(1538778600000),\r\n        y: [6629.81, 6650.5, 6623.04, 6633.33]\r\n      },\r\n      {\r\n        x: new Date(1538780400000),\r\n        y: [6632.01, 6643.59, 6620, 6630.11]\r\n      },\r\n      {\r\n        x: new Date(1538782200000),\r\n        y: [6630.71, 6648.95, 6623.34, 6635.65]\r\n      },\r\n      {\r\n        x: new Date(1538784000000),\r\n        y: [6635.65, 6651, 6629.67, 6638.24]\r\n      },\r\n      {\r\n        x: new Date(1538785800000),\r\n        y: [6638.24, 6640, 6620, 6624.47]\r\n      },\r\n      {\r\n        x: new Date(1538787600000),\r\n        y: [6624.53, 6636.03, 6621.68, 6624.31]\r\n      },\r\n      {\r\n        x: new Date(1538789400000),\r\n        y: [6624.61, 6632.2, 6617, 6626.02]\r\n      },\r\n      {\r\n        x: new Date(1538791200000),\r\n        y: [6627, 6627.62, 6584.22, 6603.02]\r\n      },\r\n      {\r\n        x: new Date(1538793000000),\r\n        y: [6605, 6608.03, 6598.95, 6604.01]\r\n      },\r\n      {\r\n        x: new Date(1538794800000),\r\n        y: [6604.5, 6614.4, 6602.26, 6608.02]\r\n      },\r\n      {\r\n        x: new Date(1538796600000),\r\n        y: [6608.02, 6610.68, 6601.99, 6608.91]\r\n      },\r\n      {\r\n        x: new Date(1538798400000),\r\n        y: [6608.91, 6618.99, 6608.01, 6612]\r\n      },\r\n      {\r\n        x: new Date(1538800200000),\r\n        y: [6612, 6615.13, 6605.09, 6612]\r\n      },\r\n      {\r\n        x: new Date(1538802000000),\r\n        y: [6612, 6624.12, 6608.43, 6622.95]\r\n      },\r\n      {\r\n        x: new Date(1538803800000),\r\n        y: [6623.91, 6623.91, 6615, 6615.67]\r\n      },\r\n      {\r\n        x: new Date(1538805600000),\r\n        y: [6618.69, 6618.74, 6610, 6610.4]\r\n      },\r\n      {\r\n        x: new Date(1538807400000),\r\n        y: [6611, 6622.78, 6610.4, 6614.9]\r\n      },\r\n      {\r\n        x: new Date(1538809200000),\r\n        y: [6614.9, 6626.2, 6613.33, 6623.45]\r\n      },\r\n      {\r\n        x: new Date(1538811000000),\r\n        y: [6623.48, 6627, 6618.38, 6620.35]\r\n      },\r\n      {\r\n        x: new Date(1538812800000),\r\n        y: [6619.43, 6620.35, 6610.05, 6615.53]\r\n      },\r\n      {\r\n        x: new Date(1538814600000),\r\n        y: [6615.53, 6617.93, 6610, 6615.19]\r\n      },\r\n      {\r\n        x: new Date(1538816400000),\r\n        y: [6615.19, 6621.6, 6608.2, 6620]\r\n      },\r\n      {\r\n        x: new Date(1538818200000),\r\n        y: [6619.54, 6625.17, 6614.15, 6620]\r\n      },\r\n      {\r\n        x: new Date(1538820000000),\r\n        y: [6620.33, 6634.15, 6617.24, 6624.61]\r\n      },\r\n      {\r\n        x: new Date(1538821800000),\r\n        y: [6625.95, 6626, 6611.66, 6617.58]\r\n      },\r\n      {\r\n        x: new Date(1538823600000),\r\n        y: [6619, 6625.97, 6595.27, 6598.86]\r\n      },\r\n      {\r\n        x: new Date(1538825400000),\r\n        y: [6598.86, 6598.88, 6570, 6587.16]\r\n      },\r\n      {\r\n        x: new Date(1538827200000),\r\n        y: [6588.86, 6600, 6580, 6593.4]\r\n      },\r\n      {\r\n        x: new Date(1538829000000),\r\n        y: [6593.99, 6598.89, 6585, 6587.81]\r\n      },\r\n      {\r\n        x: new Date(1538830800000),\r\n        y: [6587.81, 6592.73, 6567.14, 6578]\r\n      },\r\n      {\r\n        x: new Date(1538832600000),\r\n        y: [6578.35, 6581.72, 6567.39, 6579]\r\n      },\r\n      {\r\n        x: new Date(1538834400000),\r\n        y: [6579.38, 6580.92, 6566.77, 6575.96]\r\n      },\r\n      {\r\n        x: new Date(1538836200000),\r\n        y: [6575.96, 6589, 6571.77, 6588.92]\r\n      },\r\n      {\r\n        x: new Date(1538838000000),\r\n        y: [6588.92, 6594, 6577.55, 6589.22]\r\n      },\r\n      {\r\n        x: new Date(1538839800000),\r\n        y: [6589.3, 6598.89, 6589.1, 6596.08]\r\n      },\r\n      {\r\n        x: new Date(1538841600000),\r\n        y: [6597.5, 6600, 6588.39, 6596.25]\r\n      },\r\n      {\r\n        x: new Date(1538843400000),\r\n        y: [6598.03, 6600, 6588.73, 6595.97]\r\n      },\r\n      {\r\n        x: new Date(1538845200000),\r\n        y: [6595.97, 6602.01, 6588.17, 6602]\r\n      },\r\n      {\r\n        x: new Date(1538847000000),\r\n        y: [6602, 6607, 6596.51, 6599.95]\r\n      },\r\n      {\r\n        x: new Date(1538848800000),\r\n        y: [6600.63, 6601.21, 6590.39, 6591.02]\r\n      },\r\n      {\r\n        x: new Date(1538850600000),\r\n        y: [6591.02, 6603.08, 6591, 6591]\r\n      },\r\n      {\r\n        x: new Date(1538852400000),\r\n        y: [6591, 6601.32, 6585, 6592]\r\n      },\r\n      {\r\n        x: new Date(1538854200000),\r\n        y: [6593.13, 6596.01, 6590, 6593.34]\r\n      },\r\n      {\r\n        x: new Date(1538856000000),\r\n        y: [6593.34, 6604.76, 6582.63, 6593.86]\r\n      },\r\n      {\r\n        x: new Date(1538857800000),\r\n        y: [6593.86, 6604.28, 6586.57, 6600.01]\r\n      },\r\n      {\r\n        x: new Date(1538859600000),\r\n        y: [6601.81, 6603.21, 6592.78, 6596.25]\r\n      },\r\n      {\r\n        x: new Date(1538861400000),\r\n        y: [6596.25, 6604.2, 6590, 6602.99]\r\n      },\r\n      {\r\n        x: new Date(1538863200000),\r\n        y: [6602.99, 6606, 6584.99, 6587.81]\r\n      },\r\n      {\r\n        x: new Date(1538865000000),\r\n        y: [6587.81, 6595, 6583.27, 6591.96]\r\n      },\r\n      {\r\n        x: new Date(1538866800000),\r\n        y: [6591.97, 6596.07, 6585, 6588.39]\r\n      },\r\n      {\r\n        x: new Date(1538868600000),\r\n        y: [6587.6, 6598.21, 6587.6, 6594.27]\r\n      },\r\n      {\r\n        x: new Date(1538870400000),\r\n        y: [6596.44, 6601, 6590, 6596.55]\r\n      },\r\n      {\r\n        x: new Date(1538872200000),\r\n        y: [6598.91, 6605, 6596.61, 6600.02]\r\n      },\r\n      {\r\n        x: new Date(1538874000000),\r\n        y: [6600.55, 6605, 6589.14, 6593.01]\r\n      },\r\n      {\r\n        x: new Date(1538875800000),\r\n        y: [6593.15, 6605, 6592, 6603.06]\r\n      },\r\n      {\r\n        x: new Date(1538877600000),\r\n        y: [6603.07, 6604.5, 6599.09, 6603.89]\r\n      },\r\n      {\r\n        x: new Date(1538879400000),\r\n        y: [6604.44, 6604.44, 6600, 6603.5]\r\n      },\r\n      {\r\n        x: new Date(1538881200000),\r\n        y: [6603.5, 6603.99, 6597.5, 6603.86]\r\n      },\r\n      {\r\n        x: new Date(1538883000000),\r\n        y: [6603.85, 6605, 6600, 6604.07]\r\n      },\r\n      {\r\n        x: new Date(1538884800000),\r\n        y: [6604.98, 6606, 6604.07, 6606]\r\n      },\r\n    ]\r\n  }],\r\n    chart: {\r\n    type: 'candlestick',\r\n    height: 350\r\n  },\r\n  title: {\r\n    text: 'CandleStick Chart',\r\n    align: 'left'\r\n  },\r\n  colors: {\r\n    upward: 'darkmagenta',\r\n    downward: '#00cbcb'\r\n  },\r\n  xaxis: {\r\n    type: 'datetime'\r\n  },\r\n  yaxis: {\r\n    tooltip: {\r\n      enabled: true\r\n    }\r\n  }\r\n  };\r\n\r\n  var chart = new ApexCharts(document.querySelector(\"#chart\"), options);\r\n  chart.render();\r\n\r\n\r\n\r\n  return \"\"; \r\n}\r\n","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {connect} from \"react-redux\";\r\nimport {setPackLoaded} from \"../../action\";\r\nimport \"./ViewStyle.css\";\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport {resolveResponse} from \"../../utils/ResponseHandler\";\r\nimport TradeConfig from './TradeConfig.json';\r\n\r\nclass MyView extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            products: [],\r\n            stopnview:'', \r\n            curnewdata:'', \r\n            underlyingValue : '', \r\n            timestamp:'',\r\n            totalCOI : 0,\r\n            expiry: '', \r\n            strike:'',\r\n            FilteredBY: '',\r\n            AllspTotalOI:[],\r\n            PEoi:0,\r\n            CEoi:0,\r\n            scrollcount : 0,\r\n            \r\n            //JSON.parse(localStorage.getItem('optionChainDataBN')).records.data\r\n\r\n\r\n\r\n        }\r\n//          this.findSupportResistence = this.findSupportResistence.bind(this);\r\n            \r\n    }\r\n\r\n    onChange = (e) =>{\r\n      this.setState({[e.target.name]: e.target.value}); \r\n      this.filterOptionChain(e.target.name,  e.target.value); \r\n\r\n    }\r\n   \r\n  \r\n  \r\n    componentDidMount() {\r\n\r\n        AdminService.getFunds().then(fundsRes => {\r\n            // console.log('profiledata', profileRes); \r\n               let fundsResData = resolveResponse(fundsRes);\r\n             //  var fundsResData =  fundsRes && fundsRes.data; \r\n               if(fundsResData.status & fundsResData.message === 'SUCCESS'){\r\n                this.setState({  fundData :fundsResData.data }); \r\n                localStorage.setItem(\"netCapital\", fundsResData.data && fundsResData.data.net); \r\n\r\n               }\r\n        })\r\n\r\n    }\r\n   \r\n  \r\n   toFixedAmount =(value) => {\r\n\r\n    if(value){\r\n      return  parseFloat(value).toFixed(2);\r\n    }\r\n   }\r\n\r\n    render(){\r\n\r\n      return(\r\n        <React.Fragment>\r\n            \r\n            <PostLoginNavBar />\r\n       \r\n            <br/><br/><br/>\r\n            \r\n            <Grid   direction=\"row\" container className=\"flexGrow\" spacing={2}  style={{paddingLeft:\"5px\",paddingRight:\"5px\", justifyContent:'center'}}>\r\n              \r\n            \r\n                <Grid id=\"tabledatachart\"  item xs={8} sm={4}>\r\n                <Paper style={{padding:\"25px\" }}>   \r\n\r\n                <Typography variant=\"h6\">\r\n                 Net:   {this.state.fundData &&  this.toFixedAmount(this.state.fundData.net)}\r\n                </Typography>\r\n                <Typography variant=\"h6\">\r\n                   Available Cash :   {this.state.fundData &&  this.toFixedAmount(this.state.fundData.availablecash)}\r\n                </Typography>\r\n                <Typography variant=\"h6\">\r\n                Aailable Intraday payin :   {this.state.fundData && this.toFixedAmount(this.state.fundData.availableintradaypayin)}\r\n                </Typography>\r\n                <Typography variant=\"h6\">\r\n                Available limit margin :   {this.state.fundData &&  this.toFixedAmount(this.state.fundData.availablelimitmargin)}\r\n                </Typography>\r\n                <Typography variant=\"h6\">\r\n                Collateral :   {this.state.fundData && this.toFixedAmount(this.state.fundData.collateral)}\r\n                </Typography>\r\n              \r\n\r\n                <Typography variant=\"h6\">\r\n                Utilised debits :   {this.state.fundData && this.toFixedAmount(this.state.fundData.utiliseddebits) }\r\n                </Typography>\r\n                <Typography variant=\"h6\">\r\n                Utilised exposure :   {this.state.fundData && this.toFixedAmount(this.state.fundData.utilisedexposure) }\r\n                </Typography>\r\n                <Typography variant=\"h6\">\r\n                Utilised holding sales :   {this.state.fundData && this.toFixedAmount(this.state.fundData.utilisedholdingsales)}\r\n                </Typography>\r\n             \r\n                <Typography variant=\"h6\">\r\n                Utilised option premium :   {this.state.fundData && this.toFixedAmount(this.state.fundData.utilisedoptionpremium) }\r\n                </Typography>\r\n                <Typography variant=\"h6\">\r\n                Utilised payout :   {this.state.fundData && this.toFixedAmount(this.state.fundData.utilisedpayout) }\r\n                </Typography>\r\n                <Typography variant=\"h6\">\r\n                Utilised span :   {this.state.fundData && this.toFixedAmount(this.state.fundData.utilisedspan) }\r\n                </Typography>\r\n\r\n\r\n                <Typography variant=\"h6\">\r\n                Utilised turnover :   {this.state.fundData && this.toFixedAmount(this.state.fundData.utilisedturnover) }\r\n                </Typography>\r\n                </Paper>\r\n                </Grid>\r\n               \r\n\r\n\r\n                <Grid id=\"tabledatachart\"  item xs={4} sm={4}>\r\n                <Paper style={{padding:\"25px\" }}>   \r\n               \r\n                <Typography variant=\"h6\">\r\n                    M2M Unrealized  :   {this.state.fundData && this.toFixedAmount(this.state.fundData.m2munrealized) }\r\n                    </Typography>\r\n                    \r\n                    \r\n                    <Typography variant=\"h6\">\r\n                    M2M Realized  :   {this.state.fundData && this.toFixedAmount(this.state.fundData.m2mrealized) }\r\n                    </Typography>\r\n\r\n                  \r\n                    </Paper>\r\n\r\n                </Grid>\r\n\r\n\r\n                <Grid id=\"tabledatachart\"  item xs={4} sm={4}>\r\n                <Paper style={{padding:\"25px\" }}>   \r\n               \r\n                <Typography variant=\"h6\">\r\n                    Total Capital  :   {TradeConfig.totalCapital }\r\n                    </Typography>\r\n                    \r\n                    \r\n                    <Typography variant=\"h6\">\r\n                    Per Trade Exposure  :   {TradeConfig.perTradeExposurePer}% \r\n                    </Typography>\r\n\r\n                    <Typography variant=\"h6\">\r\n                    Per Trade Exposure  :   {(TradeConfig.totalCapital * TradeConfig.perTradeExposurePer/100).toFixed(2)}\r\n                    </Typography>\r\n\r\n                    </Paper>\r\n\r\n                </Grid>\r\n               \r\n              \r\n                </Grid>\r\n                   \r\n\r\n                \r\n           \r\n          \r\n\r\n            </React.Fragment> \r\n        )\r\n    }\r\n\r\n}\r\n\r\n// const styles = {\r\n//     tableStyle : {\r\n//         display: 'flex',\r\n//         justifyContent: 'center'\r\n//     }, \r\n//     selectStyle:{\r\n//         marginBottom: '0px',\r\n//         minWidth: 240,\r\n//         maxWidth: 240\r\n\r\n//     }\r\n  \r\n// }\r\n\r\nconst mapStateToProps=(state)=>{\r\n    return {packs:state.packs.packs.data};\r\n}\r\nexport default connect(mapStateToProps,{setPackLoaded})(MyView);\r\n","import React from \"react\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport {resolveResponse} from \"../../utils/ResponseHandler\";\r\nimport Spinner from \"react-spinner-material\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nclass OrderBook extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            oderbookData:[],\r\n            listofzones:[],\r\n            selectedZone:[],\r\n            zone:'',\r\n            selectAllzone:'Select All',\r\n            triggerprice :0,\r\n            price:0,\r\n            lotsize:0,\r\n            firstTimeFlag: true,\r\n            trackSLPrice: localStorage.getItem('trackSLPrice') && JSON.parse(localStorage.getItem('trackSLPrice')) || [], \r\n        }\r\n    }\r\n\r\n    getTodayOrder = () => {\r\n\r\n      //  console.log('this.state.trackSLPrice', this.state.trackSLPrice);\r\n\r\n        let trackSLPrice = localStorage.getItem('trackSLPrice') && JSON.parse(localStorage.getItem('trackSLPrice')) || []; \r\n\r\n\r\n        AdminService.retrieveOrderBook()\r\n        .then((res) => {\r\n            let data = resolveResponse(res, \"noPop\");\r\n            if(data && data.data){\r\n                var orderlist = data.data; \r\n                  orderlist.sort(function(a,b){\r\n                    return new Date(b.updatetime) - new Date(a.updatetime);\r\n                  });\r\n\r\n                  \r\n                  orderlist.forEach(element => {\r\n                        let trakingRecord = trackSLPrice.filter((item)=> item.tradingsymbol == element.tradingsymbol); \r\n                        \r\n                        if(trakingRecord.length > 0 && element.tradingsymbol == trakingRecord[0].tradingsymbol){\r\n                           this.setState({ ['priceTarget_' + element.tradingsymbol] :  trakingRecord[0].priceTarget })  \r\n                           this.setState({ ['priceStopLoss_' + element.tradingsymbol] :  trakingRecord[0].priceStopLoss })  \r\n                        }\r\n                  });\r\n                  \r\n\r\n           //     orderlist.sort((a, b) => a.status - b.status); \r\n                this.setState({oderbookData: orderlist});\r\n                localStorage.setItem('oderbookData', JSON.stringify( orderlist ));\r\n\r\n          \r\n            }\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        // setInterval(() => {\r\n        //     this.getTodayOrder();\r\n        // }, 10000);\r\n       \r\n        this.getTodayOrder();\r\n    }\r\n\r\n   \r\n    cancelOrderOfSame = (orderId,variety) =>  {\r\n       \r\n        var data = {\r\n            \"variety\":variety,\r\n            \"orderid\":orderId,\r\n        }\r\n        AdminService.cancelOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n            if(data.status  && data.message === 'SUCCESS'){\r\n              //  console.log(\"cancel order\", data);   \r\n                this.getTodayOrder();\r\n               // this.setState({ orderid : data.data && data.data.orderid });\r\n            }\r\n        })\r\n       \r\n    }\r\n\r\n\r\n\r\n\r\n    modifyOrder = (row, trailingstoploss) => {\r\n\r\n\r\n        var data = {\r\n            \"variety\" :row.variety,  // \"STOPLOSS\",\r\n            \"orderid\": row.orderid,\r\n            \"ordertype\": this.state.price !== 0 ? \"STOPLOSS_LIMIT\" : \"STOPLOSS_MARKET\",\r\n            \"producttype\":  row.producttype, //\"DELIVERY\",\r\n            \"duration\": row.duration,\r\n            \"price\":  this.state.price,\r\n            \"triggerprice\": trailingstoploss || this.state.triggerprice,\r\n            \"quantity\":row.quantity,\r\n            \"tradingsymbol\": row.tradingsymbol,\r\n            \"symboltoken\": row.symboltoken,\r\n            \"exchange\": row.exchange\r\n            }\r\n        AdminService.modifyOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n           // console.log(data);   \r\n            if(data.status  && data.message === 'SUCCESS'){\r\n               // localStorage.setItem('ifNotBought' ,  'false')\r\n               this.setState({triggerprice : 0}); \r\n               this.getTodayOrder();\r\n            }\r\n        })\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value.trim() });\r\n    }\r\n\r\n    onChangePriceStopLoss = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value.trim() });\r\n        let tradingsymbol = e.target.name.split('_')[1]; \r\n        let trackSLPrice = localStorage.getItem('trackSLPrice') && JSON.parse(localStorage.getItem('trackSLPrice')) || []; \r\n        let isfound = false; \r\n        for (let index = 0; index < trackSLPrice.length; index++) {\r\n            const element = trackSLPrice[index];\r\n            if(element.tradingsymbol === tradingsymbol){\r\n                element.priceStopLoss = e.target.value.trim(); \r\n                isfound = true; \r\n                break;\r\n            }\r\n        }\r\n        if(!isfound){\r\n              trackSLPrice.push({\r\n                priceStopLoss :  e.target.value.trim(), \r\n                tradingsymbol : tradingsymbol, \r\n                optiontype : tradingsymbol.substr(tradingsymbol.length-2,tradingsymbol.length-1),\r\n                name : tradingsymbol.includes('BANKNIFTY') ? 'BANKNIFTY' : \"NIFTY\"\r\n              }); \r\n        }\r\n        \r\n    //    console.log(\"slprice tradingsymbol\", trackSLPrice , tradingsymbol, isfound)\r\n        localStorage.setItem('trackSLPrice', JSON.stringify(trackSLPrice));\r\n    }\r\n\r\n    onChangePriceTarget = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value.trim() });\r\n        let tradingsymbol = e.target.name.split('_')[1]; \r\n        let trackSLPrice = localStorage.getItem('trackSLPrice') && JSON.parse(localStorage.getItem('trackSLPrice')) || []; \r\n        let isfound = false; \r\n        for (let index = 0; index < trackSLPrice.length; index++) {\r\n            const element = trackSLPrice[index];\r\n            if(element.tradingsymbol === tradingsymbol){\r\n                element.priceTarget = e.target.value.trim(); \r\n                isfound = true; \r\n                break;\r\n            }\r\n        }\r\n        if(!isfound){\r\n            trackSLPrice.push({\r\n              priceStopLoss :  e.target.value.trim(), \r\n              tradingsymbol : tradingsymbol, \r\n              optiontype : tradingsymbol.substr(tradingsymbol.length-2,tradingsymbol.length-1),\r\n              name : tradingsymbol.includes('BANKNIFTY') ? 'BANKNIFTY' : \"NIFTY\"\r\n \r\n            }); \r\n      }\r\n     //   console.log(\"trarget price update\", trackSLPrice)\r\n        localStorage.setItem('trackSLPrice', JSON.stringify(trackSLPrice));\r\n    }\r\n\r\n\r\n    render(){\r\n     //   console.log(this.state.oderbookData);\r\n\r\n      return(\r\n        <React.Fragment>\r\n\r\n\r\n            {window.location.hash !== \"#/position-new\" ?    <PostLoginNavBar/> : \"\"}\r\n            \r\n         \r\n\r\n\r\n                <Grid spacing={1}  direction=\"row\" alignItems=\"center\" container>\r\n                                <Grid item xs={12} sm={6} >\r\n                                    <Typography color=\"primary\" gutterBottom>\r\n                                         Oders Placed ({this.state.oderbookData.length}) \r\n                                    </Typography> \r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6} >\r\n                                    <Button id=\"orderRefresh\"  type=\"number\" variant=\"contained\"  style={{float:\"right\"}} onClick={() => this.getTodayOrder()}>Refresh</Button>    \r\n                                </Grid>\r\n                                \r\n                </Grid>\r\n                \r\n            <Grid direction=\"row\" alignItems=\"center\" container>\r\n            <Grid item xs={12} sm={12} >\r\n\r\n                     <Paper style={{padding:\"10px\"}} >\r\n\r\n                     <Table  size=\"small\"  style={{width:\"100%\"}}  aria-label=\"sticky table\" >\r\n               \r\n                        <TableHead style={{whiteSpace: \"nowrap\"}} variant=\"head\">\r\n                            <TableRow variant=\"head\" >\r\n                                <TableCell align=\"center\"><b>Update time</b></TableCell>\r\n\r\n                                {/* <TableCell align=\"center\"><b>OrderId</b></TableCell> */}\r\n\r\n                                <TableCell align=\"center\"><b>Instrument</b></TableCell>\r\n                                {/* <TableCell align=\"center\"><b>Token</b></TableCell> */}\r\n\r\n                                <TableCell align=\"center\"><b>Order Type</b></TableCell>\r\n                                <TableCell align=\"center\"><b>Variety</b></TableCell>\r\n\r\n                                \r\n\r\n                                <TableCell align=\"center\"><b>Ordertype</b>&nbsp;</TableCell>\r\n                                <TableCell align=\"center\"><b>Qty </b>&nbsp;</TableCell>\r\n                        \r\n                                <TableCell align=\"center\"><b>AvgPrice</b>&nbsp;</TableCell>\r\n                                \r\n                                <TableCell align=\"center\"><b>Price</b>&nbsp;</TableCell>\r\n                                <TableCell align=\"center\"><b>TriggerPrice</b>&nbsp;</TableCell>\r\n\r\n                                <TableCell align=\"center\">Action&nbsp;</TableCell>\r\n                                <TableCell align=\"center\"><b>Status</b>&nbsp;</TableCell>\r\n                                <TableCell align=\"center\"><b>SLPrice</b>&nbsp;</TableCell>\r\n                                <TableCell align=\"center\"><b>TargetPrice</b></TableCell>\r\n\r\n                                <TableCell align=\"center\"><b>Details </b></TableCell>\r\n                \r\n\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                        \r\n                            {this.state.oderbookData && this.state.oderbookData ? this.state.oderbookData.map((row, i)  => (\r\n                                <TableRow hover key={i} >\r\n\r\n                                    <TableCell align=\"center\">{row.updatetime ? new Date(row.updatetime).toString().substring(15, 25) : \"\"}</TableCell>\r\n\r\n                                    {/* <TableCell align=\"center\">{row.orderid  }</TableCell> */}\r\n                                    <TableCell style={{ width: '10%'}}  align=\"center\">{row.tradingsymbol}</TableCell>\r\n                                    {/* <TableCell align=\"center\">{row.symboltoken  }</TableCell> */}\r\n\r\n                                    <TableCell align=\"center\">{row.transactiontype}</TableCell>\r\n                                    <TableCell align=\"center\">{row.variety}</TableCell>\r\n\r\n                                    <TableCell align=\"center\">{row.producttype}</TableCell>\r\n\r\n                                    \r\n\r\n                                    <TableCell align=\"center\">\r\n                                        {/* {row.orderstatus === 'trigger pending' ? \r\n                                        <TextField type=\"number\" style={{textAlign:'center', width:'50px'}} id=\"lotsize\"  value={row.quantity}  name=\"lotsize\" onChange={this.onChange}/>\r\n                                        : row.quantity} */}\r\n                                    {row.quantity}\r\n\r\n                                    </TableCell>\r\n\r\n                                \r\n                                    <TableCell align=\"center\">{row.averageprice}</TableCell>\r\n\r\n                                    <TableCell align=\"center\">\r\n                                        {row.orderstatus === 'trigger pending' ? \r\n                                        <TextField style={{textAlign:'center', width:'50px'}} id=\"price\"  value={this.state.price === 0 ? row.price : this.state.price}  name=\"price\" onChange={this.onChange}/>\r\n                                        : row.price}\r\n                                    </TableCell>\r\n\r\n                                    <TableCell align=\"center\">\r\n                                        {row.orderstatus === 'trigger pending' || row.orderstatus ==='open' ? \r\n                                        <TextField  type=\"number\" style={{textAlign:'center', width:'50px'}} id=\"triggerprice\"  value={this.state.triggerprice === 0 ? row.triggerprice : this.state.triggerprice}  name=\"triggerprice\" onChange={this.onChange}/>\r\n                                        : row.triggerprice}\r\n                                    </TableCell>\r\n\r\n\r\n                                    <TableCell align=\"left\">\r\n                                        {row.orderstatus === 'trigger pending' || row.orderstatus ==='open' ? <>\r\n                                        <Button  size={'small'} type=\"number\" variant=\"contained\" color=\"primary\" style={{marginLeft: '20px'}} onClick={() => this.modifyOrder(row)}>Update</Button>    \r\n                                       </>\r\n                                     : ''}\r\n                                    </TableCell>\r\n                                    \r\n                                    <TableCell style={{fontSize: \"11px\", width: '10%'}} align=\"center\">\r\n                                        {row.orderstatus}\r\n                                        <br />\r\n\r\n                                    {row.orderstatus === 'trigger pending' || row.orderstatus ==='open' ? <>\r\n                                    <Button  size={'small'} type=\"number\" variant=\"contained\" color=\"\" style={{marginLeft: '20px'}} onClick={() => this.cancelOrderOfSame(row.orderid, row.variety)}>Cancel</Button>    \r\n                                       </>\r\n                                     : ''}\r\n                                    </TableCell>\r\n\r\n\r\n                                    <TableCell align=\"center\">\r\n                                        {row.orderstatus === 'trigger pending' || row.orderstatus ==='open' || row.orderstatus ==='complete' ? \r\n                                         <TextField  type=\"number\" style={{textAlign:'center', width:'50px'}}  value={this.state['priceStopLoss_'+row.tradingsymbol]}  name={'priceStopLoss_'+row.tradingsymbol} onBlur={this.onChangePriceStopLoss}/>\r\n                                                : ''}\r\n                                    </TableCell>\r\n\r\n                                    <TableCell align=\"center\">\r\n                                        {row.orderstatus === 'trigger pending' || row.orderstatus ==='open' || row.orderstatus ==='complete'? \r\n                                        <TextField  type=\"number\" style={{textAlign:'center', width:'50px'}} value={this.state['priceTarget_'+row.tradingsymbol]}  name={'priceTarget_'+row.tradingsymbol}  onBlur={this.onChangePriceTarget}/>\r\n                                        : ''}\r\n                                    </TableCell>\r\n\r\n                                    <TableCell style={{fontSize: \"11px\", width:\"15%\"}} align=\"center\">{row.text}</TableCell>\r\n                                    \r\n                                </TableRow>\r\n                            )):<Spinner/>}\r\n                        </TableBody>\r\n                    </Table>\r\n                    </Paper>    \r\n                </Grid>\r\n                 \r\n               </Grid>    \r\n           \r\n            </React.Fragment> \r\n        )\r\n    }\r\n  \r\n}\r\n\r\n// const styles = {\r\n//     tableStyle : {\r\n//         display: 'flex',\r\n//         justifyContent: 'center'\r\n//     },\r\n//     selectStyle:{\r\n//         // minWidth: '100%',\r\n//          marginBottom: '0px',\r\n//           minWidth: 300,\r\n//           maxWidth: 300,\r\n//     }\r\n// }\r\n\r\n// const mapStateToProps=(state)=>{\r\n//     return {packs:state.packs.packs.data};\r\n// }\r\n\r\n//export default connect(mapStateToProps,{setPackLoaded})(OrderBook);\r\nexport default OrderBook;","import React from \"react\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport {resolveResponse} from \"../../utils/ResponseHandler\";\r\nimport Spinner from \"react-spinner-material\";\r\nimport \"./ViewStyle.css\";\r\n\r\n\r\nclass TradeBook extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.addProduct = this.addProduct.bind(this);\r\n        this.editProduct = this.editProduct.bind(this);\r\n        this.convertBool = this.convertBool.bind(this);\r\n        \r\n\r\n        this.state = {\r\n            oderbookData:[],\r\n            listofzones:[],\r\n            selectedZone:[],\r\n            zone:'',\r\n            selectAllzone:'Select All'\r\n\r\n        }\r\n    }\r\n    getTodayTrade = () => {\r\n        AdminService.retrieveTradeBook()\r\n            .then((res) => {\r\n                let data = resolveResponse(res);\r\n                console.log('datamy', data);\r\n\r\n                if(data && data.data){\r\n                    this.setState({oderbookData: data.data});\r\n                }\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n   \r\n   \r\n        this.getTodayTrade(); \r\n        \r\n       \r\n    }\r\n\r\n    zoneChange = (e) =>{\r\n        this.setState({[e.target.name]: e.target.value});\r\n\r\n        if(e.target.value.includes(\"Select All\")){\r\n            this.setState({selectedZone: this.state.listofzones})\r\n            this.setState({selectAllzone: \"Remove All\"})\r\n        }\r\n    \r\n        if(e.target.value.includes(\"Remove All\")){\r\n            this.setState({selectedZone: []})\r\n            this.setState({selectAllzone: \"Select All\"})\r\n        }\r\n\r\n    }\r\n\r\n   \r\n\r\n   \r\n    addProduct=(e)=> {\r\n        console.log(this.props)\r\n        this.props.history.push('/banner-add');\r\n    }\r\n\r\n    editProduct(productId) {\r\n        window.localStorage.removeItem(\"selectedBannerId\");\r\n        window.localStorage.setItem(\"selectedBannerId\", productId);\r\n        this.props.history.push('/banner-edit');\r\n    }\r\n\r\n    convertBool(flag) {\r\n        return flag ? 'Yes' : 'No';\r\n    }\r\n\r\n    dateFormat(date){\r\n        var d = new Date(date);\r\n        var fd = d.toLocaleDateString() + ' ' + d.toTimeString().substring(0, d.toTimeString().indexOf(\"GMT\"));\r\n        return fd;\r\n    }\r\n   \r\n    \r\n\r\n    render(){\r\n    \r\n      return(\r\n        <React.Fragment>\r\n            <PostLoginNavBar/>\r\n\r\n\r\n\r\n            <Paper style={{padding:\"10px\", overflow:\"auto\"}} >\r\n\r\n\r\n            <Grid spacing={1}  direction=\"row\" alignItems=\"center\" container>\r\n                            <Grid item xs={12} sm={6} >\r\n                                <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n                                  Today Trades ({this.state.oderbookData.length})\r\n                                </Typography> \r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6} >\r\n                                <Button  type=\"number\" variant=\"contained\" style={{float:\"right\"}} onClick={() => this.getTodayTrade()}>Refresh</Button>    \r\n                            </Grid>\r\n\r\n                            \r\n                </Grid>\r\n            \r\n\r\n            <Table  size=\"small\"   aria-label=\"sticky table\" >\r\n                <TableHead  style={{width:\"\",whiteSpace: \"nowrap\"}} variant=\"head\">\r\n                    <TableRow   variant=\"head\" style={{fontWeight: 'bold'}}>\r\n\r\n\r\n                        {/* <TableCell align=\"center\">checkbox</TableCell> */}\r\n                        <TableCell className=\"TableHeadFormat\" align=\"center\">Orderid</TableCell>\r\n                        <TableCell className=\"TableHeadFormat\" align=\"center\">Product Type</TableCell>\r\n                        <TableCell  className=\"TableHeadFormat\" align=\"center\">Type</TableCell>\r\n                        <TableCell  className=\"TableHeadFormat\" align=\"center\">Instrument</TableCell>\r\n\r\n                        <TableCell className=\"TableHeadFormat\" align=\"center\">Qty </TableCell>\r\n                        \r\n\r\n                        {/* <TableCell align=\"center\">Lob</TableCell> */}\r\n                        {/* <TableCell align=\"center\">Section</TableCell> */}\r\n                        <TableCell  className=\"TableHeadFormat\" align=\"center\">Price</TableCell>\r\n                        {/* <TableCell align=\"center\">Category</TableCell> */}\r\n                        <TableCell  className=\"TableHeadFormat\"   align=\"center\">Trade value</TableCell>\r\n\r\n                        <TableCell className=\"TableHeadFormat\" align=\"center\">Update time</TableCell>\r\n\r\n                      \r\n\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody style={{width:\"\",whiteSpace: \"nowrap\"}}>\r\n            \r\n\r\n                    {this.state.oderbookData && this.state.oderbookData ? this.state.oderbookData.map(row => (\r\n                        <TableRow key={row.productId} >\r\n\r\n                            {/* <TableCell align=\"center\"> <img style={{width:\"100px\", height:\"50px\"}} src={row.imageURL} /> </TableCell> */}\r\n                            <TableCell align=\"center\">{row.orderid}</TableCell>\r\n                            <TableCell align=\"center\">{row.tradingsymbol}</TableCell>\r\n                            <TableCell align=\"center\">{row.transactiontype}</TableCell>\r\n                            \r\n                            <TableCell align=\"center\">{row.producttype}</TableCell>\r\n                            <TableCell align=\"center\">{row.fillsize}</TableCell>\r\n                            {/* <TableCell align=\"center\">{row.lob}</TableCell> */}\r\n                            {/* <TableCell align=\"center\">{row.section}</TableCell> */}\r\n                            <TableCell align=\"center\">{row.fillprice}</TableCell>\r\n                            <TableCell align=\"center\">{row.tradevalue}</TableCell>\r\n                            {/* <TableCell align=\"center\">{row.category}</TableCell> */}\r\n                             <TableCell align=\"center\">{row.filltime}</TableCell>\r\n\r\n                            \r\n                        </TableRow>\r\n                    )):<Spinner/>}\r\n                </TableBody>\r\n            </Table>\r\n\r\n            </Paper>\r\n            </React.Fragment> \r\n        )\r\n    }\r\n  \r\n}\r\n\r\n// const styles = {\r\n//     tableStyle : {\r\n//         display: 'flex',\r\n//         justifyContent: 'center'\r\n//     },\r\n//     selectStyle:{\r\n//         // minWidth: '100%',\r\n//          marginBottom: '0px',\r\n//           minWidth: 300,\r\n//           maxWidth: 300,\r\n//     }\r\n// }\r\n\r\n// const mapStateToProps=(state)=>{\r\n//     return {packs:state.packs.packs.data};\r\n// }\r\n\r\n//export default connect(mapStateToProps,{setPackLoaded})(BaneerList);\r\nexport default TradeBook;","import React from 'react';\r\nimport AdminService from \"../service/AdminService\";\r\nimport Grid from '@material-ui/core/Grid';\r\n//import AdminWelcome from '../adminwelcome.png';\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport {resolveResponse} from \"../../utils/ResponseHandler\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport  {API_KEY} from \"../../utils/config\";\r\nimport * as moment from 'moment';\r\nimport { w3cwebsocket } from 'websocket'; \r\nimport pako from 'pako';\r\nconst wsClint =  new w3cwebsocket('wss://smartapisocket.angelbroking.com/websocket'); \r\n\r\nclass Home extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            symbolList :  [\r\n                {\r\n                    token: \"26009\",\r\n                    symbol: \"Nifty 50\",\r\n                    name: \"Nifty 50\",\r\n                },\r\n                {\r\n                    token: \"26000\",\r\n                    symbol: \"Nifty Bank\",\r\n                    name: \"Nifty Bank\",\r\n                }\r\n            ], \r\n            \r\n        \r\n        };\r\n        this.myCallback = this.myCallback.bind(this);\r\n    }\r\n\r\n    makeConnection = (wsClint) => {\r\n        var firstTime_req = '{\"task\":\"cn\",\"channel\":\"NONLM\",\"token\":\"' + this.state.feedToken + '\",\"user\": \"' + this.state.clientcode + '\",\"acctid\":\"' + this.state.clientcode + '\"}';\r\n        wsClint.send(firstTime_req);\r\n        this.updateSocketWatch(wsClint);\r\n    }\r\n    decodeWebsocketData = (array) => {\r\n        var newarray = [];\r\n        try {\r\n            for (var i = 0; i < array.length; i++) {\r\n                newarray.push(String.fromCharCode(array[i]));\r\n            }\r\n        } catch (e) { }\r\n        //  console.log(newarray.join(''))\r\n        return newarray.join('');\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value});\r\n        var data  = e.target.value; \r\n        AdminService.autoCompleteSearch(data).then(res => {\r\n            let data =  res.data; \r\n            console.log(data);       \r\n            localStorage.setItem('autoSearchTemp',JSON.stringify(data)); \r\n            this.setState({ autoSearchList : data });\r\n       })\r\n\r\n    }\r\n\r\n    myCallback = (date, fromDate) => {\r\n        if (fromDate === \"START_DATE\") {\r\n          this.setState({ startDate: date  });\r\n        } else if (fromDate === \"END_DATE\") {\r\n          this.setState({ endDate: date  });\r\n        }\r\n      };\r\n    getLTP =() => {\r\n        var data  = {\r\n            \"exchange\":\"NSE\",\r\n            \"tradingsymbol\":  this.state.tradingsymbol,\r\n            \"symboltoken\":this.state.symboltoken,\r\n        }\r\n        AdminService.getLTP(data).then(res => {\r\n            let data = resolveResponse(res, 'noPop');\r\n             var LtpData = data && data.data; \r\n             this.setState({ InstrumentLTP : LtpData});\r\n\r\n            //  if(!localStorage.getItem('ifNotBought') && LtpData &&  LtpData.ltp > this.state.buyPrice){\r\n            //    this.placeOrder(this.state.buyPrice); \r\n            //  }\r\n\r\n            //  if(LtpData.ltp > this.getAveragePrice(this.state.orderid)){\r\n            //    this.placeSLMOrder(LtpData.ltp); \r\n            //  }\r\n       })\r\n    }\r\n     \r\n    componentDidMount() {\r\n\r\n        var tokens = JSON.parse(localStorage.getItem(\"userTokens\"));\r\n        var feedToken = tokens && tokens.feedToken;\r\n        var userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\r\n        var clientcode = userProfile && userProfile.clientcode;\r\n        this.setState({ feedToken: feedToken, clientcode: clientcode }, function () {\r\n            this.wsClint = new w3cwebsocket('wss://omnefeeds.angelbroking.com/NestHtml5Mobile/socket/stream');\r\n            this.updateSocketDetails(this.wsClint);\r\n        });\r\n\r\n        var list = localStorage.getItem('watchList');\r\n        if(!list){\r\n            localStorage.setItem('watchList', []);\r\n        }\r\n      \r\n    }\r\n\r\n    getHistory = (token) => {\r\n\r\n        const format1 = \"YYYY-MM-DD HH:mm\";\r\n\r\n        var time = moment.duration(\"00:50:00\");\r\n        var startdate = moment(new Date()).subtract(time);\r\n     // var startdate = moment(this.state.startDate).subtract(time);\r\n\r\n        var data  = {\r\n            \"exchange\": \"NSE\",\r\n            \"symboltoken\": token ,\r\n            \"interval\": \"FIFTEEN_MINUTE\", //ONE_DAY FIVE_MINUTE \r\n            \"fromdate\": moment(startdate).format(format1) , \r\n            \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n       }\r\n       \r\n        AdminService.getHistoryData(data).then(res => {\r\n             let data = resolveResponse(res,'noPop' );\r\n              console.log(data); \r\n              if(data && data.data){\r\n                 \r\n                var histCandles = data.data; \r\n                histCandles &&  histCandles.sort(function(a,b){\r\n                  return new Date(b[0]) - new Date(a[0]);\r\n                });\r\n                if(histCandles.length > 0){\r\n                    localStorage.setItem('InstrumentHistroy', JSON.stringify(histCandles));\r\n                    this.setState({ InstrumentHistroy :histCandles , buyPrice : histCandles[0][2]});\r\n                }\r\n                this.getLTP();\r\n              }\r\n        })\r\n    }\r\n\r\n    updateSocketWatch = (wsClint) => {\r\n\r\n\r\n        // var channel = this.state.symbolList.map(element => {\r\n        //     return 'nse_cm|' + element.token;\r\n        // });\r\n\r\n        let channel = []; \r\n       this.state.symbolList.forEach((element, index) => {\r\n            channel.push('nse_cm|' + element.token);\r\n        });\r\n\r\n        channel = channel.join('&');\r\n      //  \"channel\": \"nse_cm|Nifty 50&nse_cm|Nifty Bank&nse_cm|Nifty Auto&nse_cm|Nifty FMCG&nse_cm|Nifty IT&nse_cm|Nifty Media&nse_cm|Nifty Metal&nse_cm|Nifty Pharma&nse_cm|Nifty PSU Bank&nse_cm|Nifty Reality&nse_cm&nse_cm|Nifty Private Bank\",\r\n\r\n        var updateSocket = {\r\n            \"task\": \"sfi\",\r\n            \"channel\":   \"nse_cm|Nifty 50&nse_cm|Nifty Bank\",\r\n            \"token\": this.state.feedToken,\r\n            \"user\": this.state.clientcode,\r\n            \"acctid\": this.state.clientcode\r\n        }\r\n      //  console.log(\"wsClint\", wsClint)\r\n\r\n        wsClint.send(JSON.stringify(updateSocket));\r\n    }\r\n\r\n    updateSocketDetails = (wsClint) => {\r\n        wsClint.onopen = (res) => {\r\n            this.makeConnection(wsClint);\r\n            this.updateSocketWatch(wsClint);\r\n        }\r\n        wsClint.onmessage = (message) => {\r\n            var decoded = window.atob(message.data);\r\n            var data = this.decodeWebsocketData(pako.inflate(decoded));\r\n            var liveData = JSON.parse(data);\r\n\r\n            var symbolListArray = this.state.symbolList;\r\n            this.state.symbolList && this.state.symbolList.forEach((element, index) => {\r\n                var foundLive = liveData.filter(row => row.tk == element.name);\r\n             //   console.log(\"live\", JSON.stringify(foundLive))\r\n\r\n                if (foundLive.length > 0 && foundLive[0].tvalue) {\r\n                    symbolListArray[index].tvalue = foundLive[0].tvalue;\r\n                    symbolListArray[index].cng = foundLive[0].cng;\r\n                    symbolListArray[index].iv = foundLive[0].iv;\r\n                    symbolListArray[index].tk = foundLive[0].tk;\r\n                    symbolListArray[index].nc = foundLive[0].nc;   \r\n                    if(foundLive[0].tk == 'Nifty Bank'){\r\n                        this.props.getBankNiftyLiveLtp(foundLive[0])\r\n                    }\r\n                }\r\n\r\n                \r\n            });\r\n          \r\n            this.setState({ symbolList: symbolListArray }, ()=> {\r\n              //  console.log('updated',  this.state.symbolList )\r\n            });\r\n        }\r\n\r\n        wsClint.onerror = (e) => {\r\n            console.log(\"socket error\", e);\r\n            this.makeConnection(this.wsClint);\r\n        }\r\n\r\n        setInterval(() => {\r\n            console.log(\"this.wsClint\", this.wsClint)\r\n\r\n            if(this.wsClint.readyState != 1){\r\n                this.makeConnection(this.wsClint);\r\n            }\r\n\r\n            var _req = '{\"task\":\"hb\",\"channel\":\"\",\"token\":\"' + this.state.feedToken + '\",\"user\": \"' + this.state.clientcode + '\",\"acctid\":\"' + this.state.clientcode + '\"}';\r\n            console.log(\"Request :- \" + _req);\r\n            wsClint.send(_req);\r\n        }, 59000);\r\n    }\r\n\r\n\r\n    render() {\r\n      \r\n        return(\r\n            <React.Fragment>                \r\n               \r\n                 <Grid spacing={1}   alignItems=\"center\" container>\r\n\r\n                    <Grid item xs={10} sm={12}> \r\n                    <Paper style={{ overflow:\"auto\"}} >\r\n\r\n\r\n                    <Table  size=\"small\"   aria-label=\"sticky table\" >\r\n                        <TableHead  style={{width:\"\",whiteSpace: \"nowrap\"}} variant=\"head\">\r\n                            <TableRow   variant=\"head\" style={{fontWeight: 'bold'}}>                                \r\n                           \r\n                                <TableCell className=\"TableHeadFormat\" align=\"center\">Index </TableCell>\r\n                                <TableCell  className=\"TableHeadFormat\"   align=\"center\">Val</TableCell>\r\n                                <TableCell  className=\"TableHeadFormat\"   align=\"center\">Change</TableCell>\r\n                                <TableCell  className=\"TableHeadFormat\"   align=\"center\">Time</TableCell>\r\n\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody style={{width:\"\",whiteSpace: \"nowrap\"}}>\r\n                            {this.state.symbolList ? this.state.symbolList.map((row, i) => (\r\n                                <TableRow style={{background : row.nc > 0 ? \"chartreuse\" : \"cora\"}} key={i} >\r\n\r\n                                    <TableCell align=\"center\">{row.name}</TableCell>\r\n                                    <TableCell align=\"center\">{row.iv}({row.nc}%)</TableCell>\r\n                                    <TableCell align=\"center\">{row.cng}</TableCell>\r\n                                    <TableCell align=\"center\">{row.tvalue}</TableCell>\r\n                                \r\n                                </TableRow>\r\n                            )):''}\r\n                        </TableBody>\r\n                    </Table>\r\n\r\n                    </Paper>\r\n                    </Grid>\r\n\r\n                    </Grid>\r\n            \r\n               \r\n            </React.Fragment>\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n// const styles ={\r\n//     formContainer : {\r\n//         display: 'flex',\r\n//         flexFlow: 'row wrap'\r\n//     },\r\n\r\n    \r\n\r\n// };\r\n\r\nexport default Home;","import React, {useEffect} from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport { data } from 'jquery';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nexport default function CustomizedDialogs(props) {\r\n\r\n\r\n \r\n  const [open, setOpen] = React.useState(false);\r\n \r\n  var [values, setValues] = React.useState({\r\n    data : [],\r\n    candledata: {}\r\n})\r\n\r\n\r\n \r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n  \r\n  var multipleChartData = localStorage.getItem(\"multipleChartData\") && JSON.parse(localStorage.getItem(\"multipleChartData\")); \r\n  \r\n  var longs = multipleChartData && multipleChartData.longCandles; \r\n  var shorts = multipleChartData && multipleChartData.shortCandles; \r\n\r\n   \r\n  \r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" id=\"showMultipleChart\" color=\"primary\" style={{display:\"none\"}} onClick={handleClickOpen}>\r\n        Chart \r\n      </Button>\r\n      <Dialog maxWidth=\"lg\" onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open} >\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n        {multipleChartData && multipleChartData.symbol} \r\n      {/*   <br />\r\n\r\n        <span style={{fontSize:'12px'}}>  \r\n        <b>FoundAt:</b>  {localStorage.getItem('chartInfoDetails') && JSON.parse(localStorage.getItem('chartInfoDetails')).foundAt.substr(0, 16)} &nbsp;&nbsp;\r\n        <b>Buy: </b>{localStorage.getItem('chartInfoDetails') && JSON.parse(localStorage.getItem('chartInfoDetails')).buyExitPrice} &nbsp;&nbsp;\r\n        <b>Sell: </b>{localStorage.getItem('chartInfoDetails') && JSON.parse(localStorage.getItem('chartInfoDetails')).sellEntyPrice} &nbsp;&nbsp;\r\n        <b>Change %: </b>  {localStorage.getItem('chartInfoDetails') && JSON.parse(localStorage.getItem('chartInfoDetails')).perChange} &nbsp;&nbsp;    <br />\r\n        <b>Change on High/Low %: </b>{localStorage.getItem('chartInfoDetails') && JSON.parse(localStorage.getItem('chartInfoDetails')).perChange} &nbsp;&nbsp;\r\n        <b>SquareOffAt:</b>{localStorage.getItem('chartInfoDetails') && JSON.parse(localStorage.getItem('chartInfoDetails')).squareOffAt}\r\n        </span> */}\r\n      \r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n\r\n        {/* body data\r\n        <ReactApexChart\r\n              options={props.data && props.data.options}\r\n              series={props.data && props.data.series}\r\n              type=\"bar\"\r\n              width=\"500\"\r\n            /> */}\r\n\r\n              <Typography component=\"h3\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n                      Longs ({longs && longs.length}) \r\n              </Typography> \r\n\r\n              <Grid justify=\"space-between\" container direction=\"row\">\r\n\r\n                {longs ? longs.map((row, i) => (\r\n                        <Grid item  >\r\n                        <ReactApexChart \r\n                              options={{\r\n                                        chart: {\r\n                                          type: 'candlestick',\r\n                                          height: 250\r\n                                        },\r\n                                        title: {\r\n                                            text: row.foundAt.substr(6, 10),\r\n                                            align: 'left'\r\n                                        },\r\n                                        xaxis: {\r\n                                            type: 'datetime',\r\n                                        },\r\n                                        yaxis: {\r\n                                            tooltip: {\r\n                                            enabled: true\r\n                                            }\r\n                                        }\r\n                                    }}\r\n                                    series={[{\r\n                                      data:  row.candleChartData.reverse()\r\n                                        \r\n                                    }]} \r\n                                    type=\"candlestick\" \r\n                                    width={250}\r\n                                    height={250} \r\n                            />\r\n\r\n                        </Grid>\r\n\r\n                )) : \"\"}\r\n                             \r\n                              \r\n                              \r\n                </Grid>\r\n\r\n\r\n                <Typography component=\"h3\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n                      Shorts ({shorts && shorts.length}) \r\n              </Typography> \r\n\r\n              <Grid justify=\"space-between\" container direction=\"row\">\r\n\r\n                {shorts ? shorts.map((row, i) => (\r\n                        <Grid item  >\r\n                        <ReactApexChart \r\n                              options={{\r\n                                        chart: {\r\n                                          type: 'candlestick',\r\n                                          height: 250\r\n                                        },\r\n                                        title: {\r\n                                            text: row.foundAt.substr(6, 10),\r\n                                            align: 'left'\r\n                                        },\r\n                                        xaxis: {\r\n                                            type: 'datetime',\r\n                                        },\r\n                                        yaxis: {\r\n                                            tooltip: {\r\n                                            enabled: true\r\n                                            }\r\n                                        }\r\n                                    }}\r\n                                    series={[{\r\n                                      data:  row.candleChartData.reverse()\r\n                                        \r\n                                    }]} \r\n                                    type=\"candlestick\" \r\n                                    width={250}\r\n                                    height={250} \r\n                            />\r\n\r\n                        </Grid>\r\n\r\n                )) : \"\"}\r\n                             \r\n                              \r\n                              \r\n                </Grid>\r\n\r\n       \r\n          \r\n\r\n    \r\n         \r\n         \r\n        </DialogContent>\r\n        <DialogActions>\r\n\r\n\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport { resolveResponse } from \"../../utils/ResponseHandler\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport * as moment from 'moment';\r\nimport OrderBook from './Orderbook';\r\nimport OrderWatchlist from './OrderWatchlist';\r\nimport TradeConfig from './TradeConfig.json';\r\nimport ChartDialog from './ChartDialog';\r\nimport ChartMultiple from './ChartMultiple';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\nimport Notify from \"../../utils/Notify\";\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport CommonOrderMethod from \"../../utils/CommonMethods\";\r\nimport CommonMethods from '../../utils/CommonMethods';\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            positionList: [],\r\n            autoSearchList: [],\r\n            InstrumentLTP: {},\r\n            autoSearchTemp: [],\r\n            foundPatternList: [], //localStorage.getItem('foundPatternList') && JSON.parse(localStorage.getItem('foundPatternList')) || [], \r\n            symboltoken: \"\",\r\n            tradingsymbol: \"\",\r\n            buyPrice: 0,\r\n            quantity: 1,\r\n            producttype: \"DELIVERY\",\r\n            nr4TotalPer: 0,\r\n            pnlAmountTotal: 0,\r\n            totalNetProfit: 0,\r\n            totelActivatedCount: 0,\r\n            totalBrokerChargesNR4: 0,\r\n            stockTesting: \"\",\r\n            perHighLowTotal: 0,\r\n            netPnLAmountOnHighlowTotal: 0,\r\n            firstTimeMove : 0.6, \r\n            firstTimeSLMove: 0.5, \r\n            nextTimeMove : 0.6, \r\n            nextTimeSLMove: 0.3,\r\n            firstTimeMoveOption : 6, \r\n            firstTimeSLMoveOption: 3, \r\n            nextTimeMoveOption : 6, \r\n            nextTimeSLMoveOption: 3,\r\n            staticData: localStorage.getItem('staticData') && JSON.parse(localStorage.getItem('staticData')) || {},\r\n            trackSLPrice: localStorage.getItem('trackSLPrice') && JSON.parse(localStorage.getItem('trackSLPrice')) || [], \r\n            enableSLMOrderUi:false,\r\n            addSLInfo : {}, \r\n            niftyLtpSec: [],\r\n            bnniftyLtpSec:[]\r\n        };\r\n    }\r\n    componentDidMount() {\r\n\r\n        this.updateOrderList(); \r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var endTime = moment('3:30pm', 'h:mma');\r\n        const friday = 5; // for friday\r\n        var currentTime = moment(new Date(), \"h:mma\");\r\n        const today = moment().isoWeekday();\r\n        //market hours\r\n        if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n            this.setState({ positionInterval: setInterval(() => { this.getPositionData(); }, 1000) })\r\n              this.setState({bankNiftyInterval :  setInterval(() => {this.getNiftyLTP(); this.getBankNiftyLTP(); }, 1000)}) \r\n\r\n            var squireInterval = setInterval(() => {\r\n                let sqrOffbeginningTime = moment('3:14pm', 'h:mma');\r\n                let sqrOffendTime = moment('3:15pm', 'h:mma');\r\n                let sqrOffcurrentTime = moment(new Date(), \"h:mma\");\r\n            \r\n                if (sqrOffcurrentTime.isBetween(sqrOffbeginningTime, sqrOffendTime)) {\r\n                    this.state.positionList.forEach((element, i)=> {\r\n                        if(element.netqty > 0 || element.netqty < 0){\r\n                            this.squareOff(element);\r\n                        }\r\n                        if(this.state.positionList.length == i+1){\r\n                            clearInterval(squireInterval);\r\n                            console.log(\"squireInterval ended\"); \r\n                        }\r\n                    });\r\n                } \r\n            }, 5000);\r\n\r\n        } else {\r\n            clearInterval(this.state.positionInterval);\r\n           // clearInterval(this.state.bankNiftyInterval);\r\n        }\r\n\r\n        var scanendTime = moment('3:30pm', 'h:mma');\r\n        if (today <= friday && currentTime.isBetween(beginningTime, scanendTime)) {\r\n            // setInterval(() => {\r\n            //     this.getNSETopStock(); \r\n            //   //  console.log('chartink scan call 2 sec:', new Date()) \r\n            // }, 2000)\r\n\r\n            //this.setState({selectedStockInteval :  setInterval(() => {this.getMySelectedStock(); }, 5000)}) \r\n\r\n            // var tostartInteral =   setInterval(() => {\r\n            //     var time = new Date(); \r\n            //     if(time.getMinutes() % 15 === 0){\r\n            //         setTimeout(() => {\r\n            //             this.getCandleHistoryAndStore(); \r\n            //         }, 70000);\r\n            //         setInterval(() => {\r\n            //                 if(today <= friday && currentTime.isBetween(beginningTime, scanendTime)){\r\n            //                 this.getCandleHistoryAndStore(); \r\n            //             }\r\n            //          }, 60000 * 15 + 70000 );  \r\n            //          clearInterval(tostartInteral); \r\n            //     } \r\n            // }, 1000);\r\n\r\n\r\n            // var foundPatternsFromStored = localStorage.getItem(\"FoundPatternList\") ? JSON.parse(localStorage.getItem(\"FoundPatternList\")) : [];\r\n            // setInterval(() => {\r\n            //     this.refreshLtpOnFoundPattern();\r\n            // }, foundPatternsFromStored.length * 100 + 300000);\r\n\r\n           \r\n           \r\n        }     \r\n        \r\n        // var oequaltolowOrder = setInterval(() => {\r\n        //     var time = new Date(); \r\n        //     console.log(\"Open = low/high sanning & orderplace in at 9:20\", time.toLocaleTimeString())\r\n        //     if(time.getHours() === 9 && time.getMinutes()  >= 15 &&  time.getMinutes()  <= 30){\r\n        //         this.checkOpenEqualToLow(); \r\n        //       //  clearInterval(oequaltolowOrder); \r\n        //     }\r\n        //     if(time.getMinutes() > 30){\r\n        //         clearInterval(oequaltolowOrder); \r\n        //     } \r\n        // }, 30000);\r\n      \r\n \r\n\r\n        // var tostartInteral = setInterval(() => {\r\n        //     var time = new Date(); \r\n        //     console.log(\"chartink scanning in\", time.toLocaleTimeString())\r\n        //     if(time.getMinutes() % 5 === 0 && time.getSeconds() === 5){\r\n        //         this.getChartInkStock(); \r\n        //     } \r\n        // }, 1000);\r\n        \r\n        // this.getChartInkStock(); \r\n        // this.getCandleHistoryAndStore(); \r\n        // this.findNR4PatternLive();\r\n        // this.findNR7PatternLive();\r\n        // this.getPositionData();\r\n        // this.getNSETopStock();\r\n        // this.getMySelectedStock();\r\n\r\n        var backTestResult = localStorage.getItem(\"FoundPatternList\") ? JSON.parse(localStorage.getItem(\"FoundPatternList\")) : [];\r\n\r\n        this.setState({ foundPatternList: backTestResult }); \r\n    }\r\n\r\n    checkOpenEqualToLow = async () => {\r\n\r\n        // if(window.confirm(\"Are you sure? searching and ordering in NIFTY 100\")){\r\n       \r\n        // }\r\n\r\n        var watchList = this.state.staticData['NIFTY 100']; //NIFTY 100 Securities in F&O\r\n\r\n        this.setState({\r\n            openEqualHighList: [], openEqualLowList: [], openEqualLowList: [], advanceShareCount: 0,\r\n            declineShareCount: 0, UnchangeShareCount: 0, volumeCrossedList: [], closeingEqualHighList: []\r\n        });\r\n\r\n        for (let index = 0; index < watchList.length; index++) { //watchList.length\r\n            const element = watchList[index];\r\n\r\n\r\n            var isFound = false;\r\n            for (let j = 0; j < this.state.positionList.length; j++) {\r\n                if (this.state.positionList[j].tradingsymbol === element.symbol) {\r\n                    isFound = true;\r\n                }\r\n            }\r\n            if (!isFound) {\r\n                var data = {\r\n                    \"exchange\": element.exch_seg,\r\n                    \"tradingsymbol\": element.symbol,\r\n                    \"symboltoken\": element.token,\r\n                }\r\n                AdminService.getLTP(data).then(res => {\r\n                    let resdata = resolveResponse(res, 'noPop');\r\n                    var LtpData = resdata && resdata.data;\r\n                    if (LtpData) {\r\n\r\n                        let change = ((LtpData.ltp - LtpData.close) * 100 / LtpData.close).toFixed(2);\r\n                        LtpData.nc = change;\r\n                        LtpData.symbol = element.symbol;\r\n\r\n                        if (LtpData && LtpData.open === LtpData.low) { //buy\r\n                            //console.log(\"Open=Low\", element.symbol, LtpData);\r\n                            //var stopLossPrice = LtpData.low - (LtpData.low * TradeConfig.perTradeStopLossPer / 100);\r\n\r\n                            const format1 = \"YYYY-MM-DD HH:mm\";\r\n                            let enddate = moment(new Date());\r\n                            let startDate = moment(enddate, \"DD-MM-YYYY\").subtract(7, 'days');\r\n\r\n                            var data = {\r\n                                \"exchange\": \"NSE\",\r\n                                \"symboltoken\": element.token,\r\n                                \"interval\": \"ONE_DAY\", //ONE_DAY FIVE_MINUTE    FIFTEEN_MINUTE\r\n                                \"fromdate\": moment(startDate).format(format1),\r\n                                \"todate\": moment(enddate).format(format1) //moment(this.state.endDate).format(format1) /\r\n                            }\r\n\r\n                            AdminService.getHistoryData(data).then(res => {\r\n                                let histdata = resolveResponse(res, 'noPop');\r\n                                //console.log(\"candle history\", histdata); \r\n                                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                                    var candleData = histdata.data;\r\n                                    candleData.reverse();\r\n                                    //    console.log(\"candleData\",element, candleData);\r\n                                    console.log(\"lastday\", element, candleData[1]);\r\n                                    let lastdayinfo = candleData[1];\r\n\r\n                                    // console.log(\"Open=High\", element.symbol, LtpData);                     \r\n                                    //var stopLossPrice = LtpData.low - (LtpData.low * TradeConfig.perTradeStopLossPer / 100);\r\n\r\n                                    if (LtpData.ltp > lastdayinfo[2]) {\r\n                                       // let stopLossPrice = LtpData.low - (LtpData.low / 10) / 100;\r\n\r\n                                        let stopLossPrice = lastdayinfo[3] - (lastdayinfo[3] / 10) / 100;\r\n                                        stopLossPrice = this.getMinPriceAllowTick(stopLossPrice); //stopLossPrice\r\n                                        let perTradeExposureAmt = TradeConfig.totalCapital * TradeConfig.perTradeExposurePer / 100;\r\n                                        let quantity = 1// Math.floor(perTradeExposureAmt / LtpData.ltp);\r\n                                        console.log(element.symbol + 'ltp ' + LtpData.ltp, \"quantity\", quantity, \"stopLossPrice\", stopLossPrice, \"perTradeExposureAmt\", perTradeExposureAmt);\r\n                                        var orderOption = {\r\n                                            transactiontype: 'BUY',\r\n                                            tradingsymbol: element.symbol,\r\n                                            symboltoken: element.token,\r\n                                            buyPrice: 0,\r\n                                            quantity: quantity,\r\n                                            stopLossPrice: stopLossPrice\r\n                                        }\r\n                                        let mySL = 3.5;\r\n                                        if (LtpData.ltp >= 200 && LtpData.ltp <= 10000 && stopLossPrice && quantity) {\r\n                                            this.placeOrderMethod(orderOption);\r\n                                        }\r\n                                    }\r\n\r\n                                } else {\r\n                                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                                    console.log(\" candle data emply\");\r\n                                }\r\n                            })\r\n                        }\r\n\r\n\r\n                        if (LtpData && LtpData.open === LtpData.high) { //sell\r\n\r\n                            const format1 = \"YYYY-MM-DD HH:mm\";\r\n                            let enddate = moment(new Date());\r\n                            let startDate = moment(enddate, \"DD-MM-YYYY\").subtract(7, 'days');\r\n\r\n                            var data = {\r\n                                \"exchange\": \"NSE\",\r\n                                \"symboltoken\": element.token,\r\n                                \"interval\": \"ONE_DAY\", //ONE_DAY FIVE_MINUTE    FIFTEEN_MINUTE\r\n                                \"fromdate\": moment(startDate).format(format1),\r\n                                \"todate\": moment(enddate).format(format1) //moment(this.state.endDate).format(format1) /\r\n                            }\r\n\r\n                            AdminService.getHistoryData(data).then(res => {\r\n                                let histdata = resolveResponse(res, 'noPop');\r\n                                //console.log(\"candle history\", histdata); \r\n                                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                                    var candleData = histdata.data;\r\n                                    candleData.reverse();\r\n                                    //    console.log(\"candleData\",element, candleData);\r\n                                    console.log(\"lastday\", element, candleData[1]);\r\n                                    let lastdayinfo = candleData[1];\r\n\r\n                                    // console.log(\"Open=High\", element.symbol, LtpData);                     \r\n                                    //var stopLossPrice = LtpData.low - (LtpData.low * TradeConfig.perTradeStopLossPer / 100);\r\n\r\n                                    if (LtpData.ltp < lastdayinfo[3]) {\r\n                                      //  let stopLossPrice = LtpData.high + (LtpData.high / 10) / 100; //same day high sl \r\n                                        let stopLossPrice = lastdayinfo[2] + (lastdayinfo[2] / 10) / 100; //pre day high\r\n\r\n                                        stopLossPrice = this.getMinPriceAllowTick(stopLossPrice);\r\n                                        let perTradeExposureAmt = TradeConfig.totalCapital * TradeConfig.perTradeExposurePer / 100;\r\n                                        let quantity = 1// Math.floor(perTradeExposureAmt / LtpData.ltp);\r\n                                        console.log(element.symbol + 'ltp ' + LtpData.ltp, \"quantity\", quantity, \"stopLossPrice\", stopLossPrice, \"perTradeExposureAmt\", perTradeExposureAmt);\r\n                                        var orderOption = {\r\n                                            transactiontype: 'SELL',\r\n                                            tradingsymbol: element.symbol,\r\n                                            symboltoken: element.token,\r\n                                            buyPrice: 0,\r\n                                            quantity: quantity,\r\n                                            stopLossPrice: stopLossPrice\r\n                                        }\r\n                                        let mySL = 3.5;\r\n                                        if (LtpData.ltp >= 200 && LtpData.ltp <= 10000 && stopLossPrice && quantity) {\r\n                                             this.placeOrderMethod(orderOption);\r\n                                        }\r\n                                    }\r\n\r\n                                } else {\r\n                                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                                    console.log(\" candle data emply\");\r\n                                }\r\n                            })\r\n\r\n\r\n                        }\r\n\r\n                    }\r\n                })\r\n            }\r\n\r\n            \r\n            await new Promise(r => setTimeout(r, 210));\r\n        }\r\n      \r\n\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        //clearInterval(this.state.positionInterval);\r\n        // clearInterval(this.state.scaninterval);\r\n        //  clearInterval(this.state.bankNiftyInterval); \r\n    }\r\n\r\n\r\n    getCandleHistoryAndStore = async () => {\r\n\r\n        console.log(\"getCandleHistoryAndStore called\", new Date().toLocaleTimeString());\r\n        var stop = new Date().toLocaleTimeString() > \"15:00:00\" ? clearInterval(this.state.candleHistoryInterval) : \"\";\r\n        var watchList = localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList'))\r\n        const today = moment().isoWeekday();\r\n        var timediff = '';\r\n\r\n\r\n\r\n        if (new Date().toLocaleTimeString() > \"10:05:00\") {\r\n            timediff = moment.duration(\"00:50:00\");\r\n        } else if (today === 1 && new Date().toLocaleTimeString() < \"10:05:00\") {\r\n            timediff = moment.duration(\"66:00:00\");\r\n        } else {\r\n            timediff = moment.duration(\"19:00:00\");\r\n        }\r\n        timediff = moment.duration(\"21:00:00\");\r\n\r\n        const format1 = \"YYYY-MM-DD HH:mm\";\r\n        var startdate = moment(new Date()).subtract(timediff);\r\n\r\n        for (let index = 0; index < watchList.length; index++) {\r\n            const element = watchList[index];\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"symboltoken\": element.token,\r\n                \"interval\": \"FIFTEEN_MINUTE\", //ONE_DAY FIVE_MINUTE    FIFTEEN_MINUTE\r\n                \"fromdate\": moment(startdate).format(format1),\r\n                \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n            }\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n                //console.log(\"candle history\", histdata); \r\n                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                    var candleData = histdata.data;\r\n                    candleData.reverse();\r\n\r\n                    if (candleData && candleData.length >= 10) {\r\n                        var last10Candle = candleData.slice(0, 10);\r\n                        console.log('', index + 1, element.symbol, 'Time', new Date().toLocaleTimeString());\r\n                        this.findTweezerTopPatternLive(last10Candle, element.symbol);\r\n                        this.findTweezerBottomPatternLive(last10Candle, element.symbol);\r\n\r\n                        //console.log(index+1, element.symbol, 'verifying TT pattern'); \r\n                    }\r\n\r\n                    // var data = {\r\n                    //     data : candleData, \r\n                    //     token: element.token,\r\n                    //     symbol: element.symbol\r\n                    // }\r\n                    // AdminService.saveCandleHistory(data).then(storeRes=>{\r\n                    //     console.log(\"storeRes\", new Date().toLocaleTimeString(),storeRes); \r\n                    // }); \r\n\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(\" candle data emply\");\r\n                }\r\n            })\r\n            await new Promise(r => setTimeout(r, 350));\r\n        }\r\n\r\n\r\n    }\r\n\r\n    findTweezerTopPatternLive = (candleHist, symbol) => {\r\n\r\n        //   console.log(\"TweezerTop finding\", symbol); \r\n        if (candleHist && candleHist.length > 0) {\r\n            //candleHist = candleHist.reverse(); \r\n            // console.log(symbol, \" TweezerTop candleHist\",candleHist, new Date().toString()); \r\n\r\n\r\n            var maxHigh = candleHist[2] && candleHist[2][2], maxLow = candleHist[2] && candleHist[2][3];\r\n            for (let index = 3; index < candleHist.length; index++) {\r\n                if (maxHigh < candleHist[index][2])\r\n                    maxHigh = candleHist[index][2];\r\n                if (candleHist[index][3] < maxLow)\r\n                    maxLow = candleHist[index][3];\r\n            }\r\n\r\n            var lastTrendCandleLow = candleHist[9][3];\r\n            var firstTrendCandleHigh = candleHist[2][2];\r\n\r\n            var firstCandle = {\r\n                time: candleHist[0] && candleHist[0][0],\r\n                open: candleHist[0] && candleHist[0][1],\r\n                high: candleHist[0] && candleHist[0][2],\r\n                low: candleHist[0] && candleHist[0][3],\r\n                close: candleHist[0] && candleHist[0][4]\r\n            }\r\n            var secondCandle = {\r\n                time: candleHist[1] && candleHist[1][0],\r\n                open: candleHist[1] && candleHist[1][1],\r\n                high: candleHist[1] && candleHist[1][2],\r\n                low: candleHist[1] && candleHist[1][3],\r\n                close: candleHist[1] && candleHist[1][4]\r\n            }\r\n\r\n            var diffPer = (firstTrendCandleHigh - lastTrendCandleLow) * 100 / lastTrendCandleLow;\r\n            var lowestOfBoth = secondCandle.low < firstCandle.low ? secondCandle.low : firstCandle.low;\r\n            var highestOfBoth = secondCandle.high < firstCandle.high ? secondCandle.high : firstCandle.high;\r\n            //uptrend movement 1.5% \r\n            //        console.log(symbol, \"last 8 candle diff% \",  diffPer, \"10th Low\", lastTrendCandleLow,\"3rd high\", firstTrendCandleHigh, candleHist);\r\n\r\n            //\r\n            if (diffPer >= 1.5 && maxHigh < highestOfBoth && maxLow < lowestOfBoth) {\r\n                //1st candle green & 2nd candle is red check\r\n                if (secondCandle.open < secondCandle.close && firstCandle.open > firstCandle.close) {\r\n                    // console.log(symbol, \"candleHist\",candleHist); \r\n                    //  console.log(symbol, \"last 8th candle diff% \",  diffPer, \"10th Low\", lastTrendCandleLow,\"3rd high\", firstTrendCandleHigh);\r\n                    //  console.log(symbol, 'making twisser 1st green & 2nd red' , firstCandle, secondCandle );\r\n\r\n                    if (Math.round(secondCandle.close) == Math.round(firstCandle.open) || Math.round(secondCandle.open) == Math.round(firstCandle.close)) {\r\n\r\n                        // console.log(symbol, \"last 8th candle diff% \",  diffPer, \"10th Low\", lastTrendCandleLow,\"3rd high\", firstTrendCandleHigh);\r\n\r\n                        console.log('%c' + symbol + ' perfect twisser top  upside movement' + diffPer + new Date(candleHist[0][0]).toLocaleTimeString(), 'background: red; color: #bada55');\r\n\r\n                        var ttophistCandle = [];\r\n                        candleHist.forEach(element => {\r\n                            ttophistCandle.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                        });\r\n                        var foundData = {\r\n                            symbol: symbol,\r\n                            pattenName: 'Twisser Top',\r\n                            time: new Date(candleHist[0][0]).toLocaleString(),\r\n                            candleChartData: ttophistCandle\r\n                        }\r\n                        var foundPatternList = localStorage.getItem(\"foundPatternList\") ? JSON.parse(localStorage.getItem(\"foundPatternList\")) : [];\r\n                        foundPatternList.push(foundData);\r\n                        localStorage.setItem('foundPatternList', JSON.stringify(foundPatternList));\r\n\r\n                        this.setState({ foundPatternList: [...this.state.foundPatternList, foundData] })\r\n                        //    console.log('%c' + new Date( candleHist[0][0]).toString(), 'color: green'); \r\n                        //    console.log(symbol, \"maxHigh\", maxHigh, \"maxLow\", maxLow);                 \r\n                        console.log(symbol, \"last10Candle\", candleHist);\r\n                        //      console.log(symbol, 'perfect twisser top done close=open || open=close', );\r\n\r\n                        // var msg = new SpeechSynthesisUtterance();\r\n                        // msg.text = 'twisser top in ' + symbol.toLowerCase();\r\n                        // window.speechSynthesis.speak(msg);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    findTweezerBottomPatternLive = (candleHist, symbol) => {\r\n        // console.log(\"TweezerBottom finding\", symbol); \r\n        if (candleHist && candleHist.length > 0) {\r\n            //candleHist = candleHist.reverse(); \r\n            // console.log(symbol, \"candleHist\",candleHist, new Date().toString()); \r\n\r\n\r\n            var maxHigh = candleHist[2] && candleHist[2][2], maxLow = candleHist[2] && candleHist[2][3];\r\n            for (let index = 3; index < candleHist.length; index++) {\r\n                if (maxHigh < candleHist[index][2])\r\n                    maxHigh = candleHist[index][2];\r\n                if (candleHist[index][3] < maxLow)\r\n                    maxLow = candleHist[index][3];\r\n            }\r\n\r\n            var last8candleHigh = candleHist[9][2];\r\n            var last8candleLow = candleHist[2][3];\r\n\r\n            var firstCandle = {\r\n                time: candleHist[0] && candleHist[0][0],\r\n                open: candleHist[0] && candleHist[0][1],\r\n                high: candleHist[0] && candleHist[0][2],\r\n                low: candleHist[0] && candleHist[0][3],\r\n                close: candleHist[0] && candleHist[0][4]\r\n            }\r\n            var secondCandle = {\r\n                time: candleHist[1] && candleHist[1][0],\r\n                open: candleHist[1] && candleHist[1][1],\r\n                high: candleHist[1] && candleHist[1][2],\r\n                low: candleHist[1] && candleHist[1][3],\r\n                close: candleHist[1] && candleHist[1][4]\r\n            }\r\n\r\n            var diffPer = ((last8candleLow - last8candleHigh) * 100 / last8candleHigh).toFixed(2);\r\n            var lowestOfBoth = secondCandle.low < firstCandle.low ? secondCandle.low : firstCandle.low;\r\n            var highestOfBoth = secondCandle.high < firstCandle.high ? secondCandle.high : firstCandle.high;\r\n            //uptrend movement 1.5%  \r\n\r\n            //  \r\n            if (diffPer <= -1.5 && highestOfBoth < maxHigh && lowestOfBoth < maxLow) {\r\n\r\n\r\n                //1st candle green & 2nd candle is red check\r\n                if (secondCandle.open > secondCandle.close && firstCandle.close > firstCandle.open) {\r\n                    // console.log(symbol, \"candleHist\",candleHist); \r\n                    //  console.log(symbol, \"last 8th candle diff% \",  diffPer, \"10th Low\", lastTrendCandleLow,\"3rd high\", last8candleLow);\r\n                    //  console.log(symbol, 'making twisser 1st green & 2nd red' , firstCandle, secondCandle );\r\n\r\n                    if (Math.round(secondCandle.close) == Math.round(firstCandle.open) || Math.round(secondCandle.open) == Math.round(firstCandle.close)) {\r\n\r\n\r\n                        //console.log(symbol, \"last 8 candle diff \",  diffPer+\"% \", \"10th high\", last8candleHigh,\"3rd low\", last8candleLow, candleHist);\r\n\r\n                        var tBophistCandle = [];\r\n                        candleHist.forEach(element => {\r\n                            tBophistCandle.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                        });\r\n\r\n                        console.log('%c' + symbol + ' perfect twisser bottom downside movement diff ' + diffPer + \"% \" + new Date(candleHist[0][0]).toLocaleTimeString(), 'background: #222; color: #bada55');\r\n                        var foundData = {\r\n                            symbol: symbol,\r\n                            pattenName: 'Twisser bottom',\r\n                            time: new Date(candleHist[0][0]).toLocaleString(),\r\n                            candleChartData: tBophistCandle\r\n                        }\r\n\r\n                        this.setState({ foundPatternList: [...this.state.foundPatternList, foundData] })\r\n\r\n                        var foundPatternList = localStorage.getItem(\"foundPatternList\") ? JSON.parse(localStorage.getItem(\"foundPatternList\")) : [];\r\n                        foundPatternList.push(foundData);\r\n                        localStorage.setItem('foundPatternList', JSON.stringify(foundPatternList));\r\n\r\n                        //   console.log(symbol, \"maxHigh\", maxHigh, \"maxLow\", maxLow);                 \r\n                        console.log(symbol, \"last10Candle\", candleHist);\r\n                        //   console.log(symbol, 'perfect twisser bottom done close=open || open=close', new Date( candleHist[0][0]).toString());\r\n\r\n                        // var msg = new SpeechSynthesisUtterance();\r\n                        // msg.text = 'twisser bottom in ' + symbol.toLowerCase();\r\n                        // window.speechSynthesis.speak(msg);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    findNR4PatternLive = async () => {\r\n\r\n        console.log('nr4 scaning starting');\r\n\r\n        this.setState({ backTestResult: [], backTestFlag: false });\r\n\r\n        var watchList = localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')) || [];\r\n        var runningTest = 1, sumPercentage = 0;\r\n        for (let index = 0; index < watchList.length; index++) {\r\n            const element = watchList[index];\r\n\r\n            var startdate = '';\r\n\r\n            var timediff = moment.duration(\"240:00:00\");\r\n            startdate = moment(new Date()).subtract(timediff);\r\n\r\n            var timediffend = moment.duration(\"24:00:00\");\r\n            var enddateLastday = moment(new Date()).subtract(timediffend);\r\n\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"symboltoken\": element.token,\r\n                \"interval\": \"ONE_DAY\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                \"fromdate\": moment(startdate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                \"todate\": moment(new Date()).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n            }\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n\r\n                //console.log(\"candle history\", histdata); \r\n                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                    var candleData = histdata.data; var rgrangeCount = 0;\r\n                    candleData.reverse();\r\n\r\n                    // var startindex = index2 * 10; \r\n                    var last4Candle = candleData.slice(1, 5);\r\n                    var last5Candle = candleData.slice(0, 5);\r\n                    // var next10Candle = candleData.slice(index2+5 , index2+35 );    \r\n\r\n                    // console.log(element.symbol, 'backside',  last10Candle, '\\n forntside',  next10Candle);\r\n\r\n                    if (last4Candle.length >= 4) {\r\n\r\n                        // last4Candle.reverse();\r\n\r\n                        var rangeArr = [], candleChartData = [];\r\n                        last4Candle.forEach(element => {\r\n                            rangeArr.push(element[2] - element[3]);\r\n                        });\r\n\r\n                        last5Candle.forEach(element => {\r\n                            candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                        });\r\n                        var firstElement = rangeArr[0];\r\n                        rangeArr.forEach(element => {\r\n                            if (firstElement <= element) {\r\n                                firstElement = element;\r\n                                rgrangeCount += 1;\r\n                            }\r\n                        });\r\n\r\n                        console.log(index + 1, element.symbol, rgrangeCount);\r\n                        //  this.setState({stockTesting :index +\" \"+ element.symbol })\r\n\r\n\r\n\r\n                        if (rgrangeCount == 4) {\r\n                            console.log(index + 1, element.symbol, last4Candle, rangeArr, rgrangeCount);\r\n\r\n\r\n                            var firstCandle = last4Candle[0];\r\n\r\n                            //var buyentry = (firstCandle[2] + (firstCandle[2] - firstCandle[3])/4).toFixed(2);\r\n                            var buyentry = (firstCandle[2] + (firstCandle[2] / 100 / 10)).toFixed(2);\r\n\r\n                            //var sellenty = (firstCandle[3] - (firstCandle[2] - firstCandle[3])/4).toFixed(2); \r\n                            var sellenty = (firstCandle[3] - (firstCandle[3] / 100 / 10)).toFixed(2);\r\n\r\n\r\n                            var data = {\r\n                                \"exchange\": \"NSE\",\r\n                                \"tradingsymbol\": element.symbol,\r\n                                \"symboltoken\": element.token,\r\n                            }\r\n\r\n                            console.log('nr4 ltp', data);\r\n\r\n                            AdminService.getLTP(data).then(res => {\r\n                                let data = resolveResponse(res, 'noPop');\r\n                                var LtpData = data && data.data;\r\n                                console.log(LtpData, data);\r\n                                if (LtpData && LtpData.ltp) {\r\n\r\n\r\n                                    var orderActivated = <span> {LtpData.ltp} </span>;\r\n                                    var quantity = 0, pnlAmount = 0, netPnLAmount = 0, perChange, brokerageCharges = 0.06;\r\n                                    if (LtpData.ltp > buyentry) {\r\n                                        orderActivated = <span style={{ color: 'green' }}> Long: {LtpData.ltp} ({((LtpData.ltp - buyentry) * 100 / buyentry).toFixed(2)}%) </span>;\r\n                                        this.setState({ nr4TotalPer: this.state.nr4TotalPer + ((LtpData.ltp - buyentry) * 100 / buyentry) })\r\n                                        this.setState({ totelActivatedCount: this.state.totelActivatedCount + 1 });\r\n\r\n                                        let perTradeExposureAmt = TradeConfig.totalCapital * TradeConfig.perTradeExposurePer / 100;\r\n                                        quantity = Math.floor(perTradeExposureAmt / buyentry);\r\n                                        perChange = (LtpData.ltp - buyentry) * 100 / buyentry;\r\n                                        pnlAmount = ((LtpData.ltp - buyentry) * quantity).toFixed(2);\r\n                                        netPnLAmount = ((buyentry * (perChange - brokerageCharges) / 100) * quantity).toFixed(2);\r\n\r\n\r\n                                    }\r\n                                    if (LtpData.ltp < sellenty) {\r\n                                        orderActivated = <span style={{ color: 'red' }}> Short: {LtpData.ltp} ({((LtpData.ltp - sellenty) * 100 / sellenty).toFixed(2)}%)</span>;\r\n                                        this.setState({ nr4TotalPer: this.state.nr4TotalPer + ((sellenty - LtpData.ltp) * 100 / sellenty) })\r\n                                        this.setState({ totelActivatedCount: this.state.totelActivatedCount + 1 });\r\n                                        let perTradeExposureAmt = TradeConfig.totalCapital * TradeConfig.perTradeExposurePer / 100;\r\n                                        quantity = Math.floor(perTradeExposureAmt / sellenty);\r\n                                        pnlAmount = ((sellenty - LtpData.ltp) * quantity).toFixed(2);\r\n                                        perChange = (sellenty - LtpData.ltp) * 100 / sellenty;\r\n                                        netPnLAmount = ((sellenty * (perChange - brokerageCharges) / 100) * quantity).toFixed(2);\r\n\r\n                                    }\r\n\r\n                                    var foundData = {\r\n                                        symbol: element.symbol,\r\n                                        token: element.token,\r\n                                        pattenName: 'NR4',\r\n                                        time: new Date(firstCandle[0]).toLocaleString(),\r\n                                        BuyAt: buyentry,\r\n                                        SellAt: sellenty,\r\n                                        orderActivated: orderActivated,\r\n                                        candleChartData: candleChartData,\r\n                                        quantity: quantity,\r\n                                        brokerageCharges: brokerageCharges,\r\n                                        pnlAmount: pnlAmount,\r\n                                        netPnLAmount: netPnLAmount,\r\n                                        perChange: perChange\r\n                                    }\r\n\r\n                                    console.log('nr4 scaned', foundData);\r\n                                    this.setState({ foundPatternList: [...this.state.foundPatternList, foundData] })\r\n\r\n\r\n                                    var foundPatternList = localStorage.getItem(\"foundPatternList\") ? JSON.parse(localStorage.getItem(\"foundPatternList\")) : [];\r\n                                    foundPatternList.push(foundData);\r\n                                    localStorage.setItem('foundPatternList', JSON.stringify(foundPatternList));\r\n\r\n                                }\r\n\r\n                            })\r\n\r\n\r\n\r\n\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(element.symbol, \" candle data emply\");\r\n                }\r\n            })\r\n\r\n\r\n\r\n            await new Promise(r => setTimeout(r, 300));\r\n\r\n            // var showtestdata = (index + 1);\r\n\r\n            //   console.log(\"beforawait\", showtestdata, element.symbol);\r\n\r\n            //     this.setState({ stockTesting: showtestdata});\r\n        }\r\n        this.setState({ backTestFlag: true });\r\n        console.log(\"sumPercentage\", sumPercentage)\r\n    }\r\n\r\n    findNR7PatternLive = async () => {\r\n\r\n        console.log('nr7 scaning starting');\r\n\r\n        this.setState({ backTestResult: [], backTestFlag: false });\r\n\r\n        var watchList = localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')) || [];\r\n        var runningTest = 1, sumPercentage = 0;\r\n        for (let index = 0; index < watchList.length; index++) {\r\n            const element = watchList[index];\r\n\r\n            var startdate = '';\r\n\r\n            var timediff = moment.duration(\"288:00:00\");\r\n            startdate = moment(new Date()).subtract(timediff);\r\n\r\n            var timediffend = moment.duration(\"24:00:00\");\r\n            var enddateLastday = moment(new Date()).subtract(timediffend);\r\n\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"symboltoken\": element.token,\r\n                \"interval\": \"ONE_DAY\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                \"fromdate\": moment(startdate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                \"todate\": moment(new Date()).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n            }\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n\r\n                //console.log(\"candle history\", histdata); \r\n                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                    var candleData = histdata.data;\r\n                    candleData.reverse();\r\n\r\n                    // var startindex = index2 * 10; \r\n                    var last7Candle = candleData.slice(1, 8);\r\n                    var last9Candle = candleData.slice(0, 9);\r\n                    // var next10Candle = candleData.slice(index2+5 , index2+35 );    \r\n\r\n                    // console.log(element.symbol, 'backside',  last10Candle, '\\n forntside',  next10Candle);\r\n\r\n                    if (last7Candle.length >= 7) {\r\n\r\n                        // last7Candle.reverse();\r\n\r\n                        var rangeArr = [], candleChartData = [];\r\n                        last7Candle.forEach(element => {\r\n                            rangeArr.push(element[2] - element[3]);\r\n                        });\r\n\r\n                        last9Candle.forEach(element => {\r\n                            candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                        });\r\n                        var firstElement = rangeArr[0], rgrangeCount = 0;\r\n                        rangeArr.forEach(element => {\r\n                            if (firstElement <= element) {\r\n                                firstElement = element;\r\n                                rgrangeCount += 1;\r\n                            }\r\n                        });\r\n\r\n\r\n                        console.log(element.symbol, last7Candle, rangeArr, rgrangeCount);\r\n\r\n\r\n                        if (rgrangeCount == 7) {\r\n\r\n\r\n                            var firstCandle = last7Candle[0];\r\n\r\n                            //var buyentry = (firstCandle[2] + (firstCandle[2] - firstCandle[3])/4).toFixed(2);\r\n                            var buyentry = (firstCandle[2] + (firstCandle[2] / 100 / 10)).toFixed(2);\r\n\r\n                            //var sellenty = (firstCandle[3] - (firstCandle[2] - firstCandle[3])/4).toFixed(2); \r\n                            var sellenty = (firstCandle[3] - (firstCandle[3] / 100 / 10)).toFixed(2);\r\n\r\n\r\n                            var data = {\r\n                                \"exchange\": \"NSE\",\r\n                                \"tradingsymbol\": element.symbol,\r\n                                \"symboltoken\": element.token,\r\n                            }\r\n\r\n                            console.log('nr4 ltp', data);\r\n\r\n                            AdminService.getLTP(data).then(res => {\r\n                                let data = resolveResponse(res, 'noPop');\r\n                                var LtpData = data && data.data;\r\n                                console.log(LtpData, data);\r\n                                if (LtpData && LtpData.ltp) {\r\n\r\n\r\n                                    var orderActivated = <span> {LtpData.ltp} </span>;\r\n                                    var quantity = 0, pnlAmount = 0, netPnLAmount = 0, perChange, brokerageCharges = 0.06;\r\n                                    if (LtpData.ltp > buyentry) {\r\n                                        orderActivated = <span style={{ color: 'green' }}> Long: {LtpData.ltp} ({((LtpData.ltp - buyentry) * 100 / buyentry).toFixed(2)}%) </span>;\r\n                                        this.setState({ nr4TotalPer: this.state.nr4TotalPer + ((LtpData.ltp - buyentry) * 100 / buyentry) })\r\n                                        this.setState({ totelActivatedCount: this.state.totelActivatedCount + 1 });\r\n\r\n                                        let perTradeExposureAmt = TradeConfig.totalCapital * TradeConfig.perTradeExposurePer / 100;\r\n                                        quantity = Math.floor(perTradeExposureAmt / buyentry);\r\n                                        perChange = (LtpData.ltp - buyentry) * 100 / buyentry;\r\n                                        pnlAmount = ((LtpData.ltp - buyentry) * quantity).toFixed(2);\r\n                                        netPnLAmount = ((buyentry * (perChange - brokerageCharges) / 100) * quantity).toFixed(2);\r\n\r\n\r\n                                    }\r\n                                    if (LtpData.ltp < sellenty) {\r\n                                        orderActivated = <span style={{ color: 'red' }}> Short: {LtpData.ltp} ({((LtpData.ltp - sellenty) * 100 / sellenty).toFixed(2)}%)</span>;\r\n                                        this.setState({ nr4TotalPer: this.state.nr4TotalPer + ((sellenty - LtpData.ltp) * 100 / sellenty) })\r\n                                        this.setState({ totelActivatedCount: this.state.totelActivatedCount + 1 });\r\n                                        let perTradeExposureAmt = TradeConfig.totalCapital * TradeConfig.perTradeExposurePer / 100;\r\n                                        quantity = Math.floor(perTradeExposureAmt / sellenty);\r\n                                        pnlAmount = ((sellenty - LtpData.ltp) * quantity).toFixed(2);\r\n                                        perChange = (sellenty - LtpData.ltp) * 100 / sellenty;\r\n                                        netPnLAmount = ((sellenty * (perChange - brokerageCharges) / 100) * quantity).toFixed(2);\r\n\r\n                                    }\r\n\r\n                                    var foundData = {\r\n                                        symbol: element.symbol,\r\n                                        token: element.token,\r\n                                        pattenName: 'NR7',\r\n                                        time: new Date(firstCandle[0]).toLocaleString(),\r\n                                        BuyAt: buyentry,\r\n                                        SellAt: sellenty,\r\n                                        orderActivated: orderActivated,\r\n                                        candleChartData: candleChartData,\r\n                                        quantity: quantity,\r\n                                        brokerageCharges: brokerageCharges,\r\n                                        pnlAmount: pnlAmount,\r\n                                        netPnLAmount: netPnLAmount,\r\n                                        perChange: perChange\r\n                                    }\r\n\r\n                                    console.log('nr7 scaned', foundData);\r\n                                    this.setState({ foundPatternList: [...this.state.foundPatternList, foundData] })\r\n\r\n\r\n                                    var foundPatternList = localStorage.getItem(\"foundPatternList\") ? JSON.parse(localStorage.getItem(\"foundPatternList\")) : [];\r\n                                    foundPatternList.push(foundData);\r\n                                    localStorage.setItem('foundPatternList', JSON.stringify(foundPatternList));\r\n\r\n                                }\r\n\r\n                            })\r\n\r\n\r\n\r\n\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(element.symbol, \" candle data emply\");\r\n                }\r\n            })\r\n            var showtestdata = (index + 1) + \". \" + element.symbol;\r\n            this.setState({ stockTesting: showtestdata });\r\n            await new Promise(r => setTimeout(r, 300));\r\n        }\r\n        this.setState({ backTestFlag: true });\r\n        console.log(\"sumPercentage\", sumPercentage)\r\n    }\r\n\r\n    refreshCandleChartManually = async (row) => {\r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var time = moment.duration(\"12:00:00\");\r\n        var startdate = moment(new Date()).subtract(time);\r\n\r\n        var data = {\r\n            \"exchange\": \"NSE\",\r\n            \"symboltoken\": row.symboltoken,\r\n            \"interval\": \"FIVE_MINUTE\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n            \"fromdate\": moment(beginningTime).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n            \"todate\": moment(new Date()).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n        }\r\n        AdminService.getHistoryData(data).then(res => {\r\n            let histdata = resolveResponse(res, 'noPop');\r\n            //console.log(\"candle history\", histdata); \r\n            if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                var candleChartData = [];\r\n                histdata.data.forEach(element => {\r\n                    candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                });\r\n\r\n\r\n                localStorage.setItem('candleChangeShow', ((row.ltp - row.close) * 100 / row.close).toFixed(2));\r\n\r\n\r\n                localStorage.setItem('candleChartData', JSON.stringify(candleChartData))\r\n                localStorage.setItem('cadleChartSymbol', row.symbolname);\r\n                document.getElementById('showCandleChart').click();\r\n\r\n            } else {\r\n                //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                console.log(row.symboltoken, \"  emply candle found\");\r\n            }\r\n        }).catch(error => {\r\n            this.setState({ failedCount: this.state.failedCount + 1 });\r\n            Notify.showError(row.symboltoken + \" candle failed!\");\r\n        })\r\n\r\n    }\r\n\r\n    showCandleChart = (candleData, symbol) => {\r\n\r\n        candleData = candleData && candleData.reverse();\r\n        localStorage.setItem('candleChartData', JSON.stringify(candleData))\r\n        localStorage.setItem('cadleChartSymbol', symbol)\r\n        document.getElementById('showCandleChart').click();\r\n    }\r\n\r\n    showMultipleCandleChart = (row) => {\r\n        localStorage.setItem('multipleChartData', JSON.stringify(row))\r\n        document.getElementById('showMultipleChart').click();\r\n    }\r\n\r\n    refreshLtpOnFoundPattern = async () => {\r\n\r\n        this.setState({ nr4TotalPer: 0, totalBrokerChargesNR4: 0, totalNetProfit: 0, totelActivatedCount: 0, pnlAmountTotal: 0, perHighLowTotal: 0, netPnLAmountOnHighlowTotal: 0 });\r\n\r\n\r\n        var foundPatternList = this.state.foundPatternList;\r\n\r\n        this.setState({ foundPatternList: [] });\r\n\r\n        var foundPatternsFromStored = localStorage.getItem(\"FoundPatternList\") ? JSON.parse(localStorage.getItem(\"FoundPatternList\")) : [];\r\n\r\n\r\n        //       foundPatternList.forEach(element => {\r\n        for (let index = 0; index < foundPatternsFromStored.length; index++) {\r\n            const element = foundPatternList[index];\r\n\r\n            if (element && element.pattenName == 'NR4') {\r\n\r\n                var data = {\r\n                    \"exchange\": \"NSE\",\r\n                    \"tradingsymbol\": element.symbol,\r\n                    \"symboltoken\": element.token,\r\n                }\r\n\r\n                AdminService.getLTP(data).then(res => {\r\n                    let data = resolveResponse(res, 'noPop');\r\n                    var LtpData = data && data.data;\r\n                    //console.log(LtpData);\r\n                    var quantity = 0, pnlAmount = 0, netPnLAmount = 0, brokerageCharges = 0.06, perChange = 0, perChangeOnHighLow = 0, netPnLAmountOnHighlow = 0;\r\n                    if (LtpData && LtpData.ltp) {\r\n\r\n                        var orderActivated = <span> {LtpData.ltp} </span>;\r\n\r\n                        if (LtpData.ltp > element.BuyAt) {\r\n                            perChange = ((LtpData.ltp - element.BuyAt) * 100 / element.BuyAt);\r\n                            orderActivated = <span style={{ color: 'green' }}> Long: {perChange.toFixed(2)}% </span>;\r\n                            quantity = Math.floor(10000 / element.BuyAt);\r\n                            pnlAmount = ((LtpData.ltp - element.BuyAt) * quantity);\r\n                            brokerageCharges = (((element.BuyAt * quantity) * brokerageCharges / 100) * 2);\r\n                            netPnLAmount = (pnlAmount - brokerageCharges);\r\n                            this.setState({ nr4TotalPer: this.state.nr4TotalPer + perChange });\r\n                            this.setState({ totalBrokerChargesNR4: this.state.totalBrokerChargesNR4 + brokerageCharges, totalNetProfit: this.state.totalNetProfit + netPnLAmount });\r\n                            this.setState({ totelActivatedCount: this.state.totelActivatedCount + 1, pnlAmountTotal: this.state.pnlAmountTotal + pnlAmount });\r\n\r\n                            perChangeOnHighLow = ((LtpData.high - element.BuyAt) * 100 / element.BuyAt);\r\n                            var pnlAmountOnhigh = ((LtpData.high - element.BuyAt) * quantity);\r\n                            netPnLAmountOnHighlow = (pnlAmountOnhigh - brokerageCharges);\r\n                            this.setState({ perHighLowTotal: this.state.perHighLowTotal + perChangeOnHighLow, netPnLAmountOnHighlowTotal: this.state.netPnLAmountOnHighlowTotal + netPnLAmountOnHighlow });\r\n\r\n\r\n                        }\r\n                        if (LtpData.ltp < element.SellAt) {\r\n                            perChange = ((element.SellAt - LtpData.ltp) * 100 / element.SellAt);\r\n                            orderActivated = <span style={{ color: 'red' }}> Short: {perChange.toFixed(2)}%</span>;\r\n                            quantity = Math.floor(10000 / element.SellAt);\r\n                            pnlAmount = ((element.SellAt - LtpData.ltp) * quantity);\r\n                            brokerageCharges = (((element.SellAt * quantity) * brokerageCharges / 100) * 2);\r\n                            netPnLAmount = (pnlAmount - brokerageCharges);\r\n                            this.setState({ nr4TotalPer: this.state.nr4TotalPer + perChange });\r\n                            this.setState({ totelActivatedCount: this.state.totelActivatedCount + 1, pnlAmountTotal: this.state.pnlAmountTotal + pnlAmount });\r\n                            this.setState({ totalBrokerChargesNR4: this.state.totalBrokerChargesNR4 + brokerageCharges, totalNetProfit: this.state.totalNetProfit + netPnLAmount });\r\n\r\n                            perChangeOnHighLow = ((element.SellAt - LtpData.low) * 100 / element.SellAt);\r\n                            var pnlAmountOnLow = ((element.SellAt - LtpData.low) * quantity);\r\n                            netPnLAmountOnHighlow = (pnlAmountOnLow - brokerageCharges);\r\n                            this.setState({ perHighLowTotal: this.state.perHighLowTotal + perChangeOnHighLow, netPnLAmountOnHighlowTotal: this.state.netPnLAmountOnHighlowTotal + netPnLAmountOnHighlow });\r\n\r\n                        }\r\n\r\n                        var todayChange = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;\r\n\r\n\r\n                        var builtupCandle = [new Date(), LtpData.open, LtpData.high, LtpData.low, LtpData.ltp];\r\n                        element.candleChartData.push(builtupCandle);\r\n\r\n                        var foundData = {\r\n                            symbol: element.symbol,\r\n                            symbolUpdated: LtpData.ltp + \"(\" + (todayChange).toFixed(2) + \"%)\",\r\n                            token: element.token,\r\n                            pattenName: 'NR4',\r\n                            OnHighLowActivated: quantity ? perChangeOnHighLow.toFixed(2) + \"% | \" + netPnLAmountOnHighlow.toFixed(2) : \"\",\r\n                            time: new Date().toLocaleTimeString(),\r\n                            BuyAt: element.BuyAt,\r\n                            SellAt: element.SellAt,\r\n                            foundAt: element.foundAt,\r\n                            orderActivated: orderActivated,\r\n                            candleChartData: element.candleChartData,\r\n                            quantity: quantity ? quantity : \"\",\r\n                            brokerageCharges: quantity ? brokerageCharges.toFixed(2) : \"\",\r\n                            pnlAmount: pnlAmount ? pnlAmount.toFixed(2) : \"\",\r\n                            netPnLAmount: netPnLAmount ? netPnLAmount.toFixed(2) : \"\",\r\n                            perChange: perChange,\r\n                            todayChange: todayChange,\r\n                            pastPerferm: element.pastPerferm\r\n                        }\r\n\r\n                        console.log('nr4 updated', foundData);\r\n\r\n                        this.setState({ foundPatternList: [...this.state.foundPatternList, foundData] });\r\n\r\n                        var foundlist = this.state.foundPatternList;\r\n\r\n                        foundlist.sort(function (a, b) {\r\n                            return b.perChange - a.perChange;\r\n                        });\r\n\r\n                        this.setState({ foundPatternList: foundlist });\r\n\r\n                        var foundPatternList = localStorage.getItem(\"foundPatternList\") ? JSON.parse(localStorage.getItem(\"foundPatternList\")) : [];\r\n                        foundPatternList.push(foundData);\r\n                        localStorage.setItem('foundPatternList', JSON.stringify(foundPatternList));\r\n\r\n                    }\r\n\r\n                }).catch(error => {\r\n                    Notify.showError(element.symbol + \" ltd data not found!\");\r\n                })\r\n\r\n            }\r\n            await new Promise(r => setTimeout(r, 101));\r\n        }\r\n    }\r\n\r\n\r\n    getStoplossFromOrderbook = (row) => {\r\n        var oderbookData = localStorage.getItem('oderbookData');\r\n        oderbookData = JSON.parse(oderbookData);\r\n        var stopLoss = 0;\r\n        var data = {};\r\n        for (let index = 0; index < oderbookData.length; index++) {\r\n            const element = oderbookData[index];\r\n\r\n            if (element.status === \"trigger pending\" && element.symboltoken === row.symboltoken) {\r\n                if (row.netqty > 0) {\r\n                    data.stopLoss = element.triggerprice + \"(\" + ((element.triggerprice - row.buyavgprice) * 100 / row.buyavgprice).toFixed(2) + \"%)\";\r\n                    data.maxLossAmount = ((element.triggerprice - row.buyavgprice) * parseInt(row.netqty)).toFixed(2);\r\n                } else if (row.netqty < 0) {\r\n                    console.log(row.tradingsymbol, \"sellage\", row.sellavgprice, \"trigger\", element.triggerprice);\r\n                    data.stopLoss = element.triggerprice + \"(\" + ((element.triggerprice - row.sellavgprice) * 100 / row.sellavgprice).toFixed(2) + \"%)\";\r\n                    data.maxLossAmount = ((element.triggerprice - row.sellavgprice) * parseInt(row.netqty)).toFixed(2);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n    getStoplossForSELLFromOrderbook = (row) => {\r\n        var oderbookData = localStorage.getItem('oderbookData');\r\n        oderbookData = JSON.parse(oderbookData);\r\n        var stopLoss = 0;\r\n        var data = {};\r\n        oderbookData.forEach(element => {\r\n            if (element.status === \"trigger pending\" && element.symboltoken === row.symboltoken) {\r\n                data.stopLoss = element.triggerprice + \"(\" + ((row.buyavgprice - element.triggerprice) * 100 / row.buyavgprice).toFixed(2) + \"%)\";\r\n                data.maxLossAmount = ((element.triggerprice - row.buyavgprice) * parseInt(row.netqty)).toFixed(2);\r\n            }\r\n        });\r\n        return data;\r\n    }\r\n    getHighLowPercentage = async () => {\r\n\r\n        this.setState({showHighLowWisePer: true});\r\n\r\n        if (!this.state.positionList.length) {\r\n            Notify.showError(\"First Refresh Position\")\r\n        }\r\n\r\n        for (let index = 0; index < this.state.positionList.length; index++) {\r\n            const element = this.state.positionList[index];\r\n\r\n            if (element.producttype == \"DELIVERY\") {\r\n                return \"\";\r\n            }\r\n\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"tradingsymbol\": element.tradingsymbol,\r\n                \"symboltoken\": element.symboltoken,\r\n            }\r\n            AdminService.getLTP(data).then(res => {\r\n                let data = resolveResponse(res, 'noPop');\r\n                var LtpData = data && data.data;\r\n                //console.log(LtpData);\r\n                if (LtpData && LtpData.ltp) {\r\n                    this.state.positionList[index].high = LtpData.high;\r\n                    this.state.positionList[index].low = LtpData.low;\r\n                }\r\n            })\r\n            await new Promise(r => setTimeout(r, 125));\r\n            this.setState({ positionList: this.state.positionList });\r\n\r\n        }\r\n\r\n    }\r\n    tagPatternWhichTaken =(token)=> {\r\n       var orderTagToPosition = localStorage.getItem('orderTagToPosition') && JSON.parse(localStorage.getItem('orderTagToPosition')) || []; \r\n       \r\n       var pattern = ''; \r\n       for (let index = 0; index < orderTagToPosition.length; index++) {\r\n           const element = orderTagToPosition[index];\r\n           if(token == element.token){\r\n            pattern = element.pattenName; \r\n            break;\r\n           }\r\n        }\r\n        return pattern\r\n    //    console.log(\"findpatter\", token, orderTagToPosition);\r\n    //    orderTagToPosition.forEach(element => {\r\n    //         if(token == element.token){\r\n    //             return element.pattenName; \r\n    //         }\r\n    //    });\r\n\r\n    }\r\n    calculateTradeExpence =(element)=>{\r\n\r\n        var totalbuyvalue =  parseFloat(element.totalbuyvalue) === 0 ? parseFloat(element.totalsellvalue) : parseFloat(element.totalbuyvalue);\r\n        var buyCharge = parseFloat(totalbuyvalue) * 0.25/100; \r\n        if(buyCharge > 20 || (element.optiontype  == 'CE' || element.optiontype  == 'PE')){\r\n            buyCharge = 20; \r\n        }\r\n        var totalsellvalue =  parseFloat(element.totalsellvalue) === 0 ? parseFloat(element.totalbuyvalue) : parseFloat(element.totalsellvalue);\r\n        var sellCharge = parseFloat(totalsellvalue) * 0.25/100; \r\n        if(sellCharge > 20 || (element.optiontype  == 'CE' || element.optiontype  == 'PE')){\r\n            sellCharge = 20; \r\n        }\r\n        let turnOver = totalbuyvalue + totalsellvalue; \r\n        let totalBroker = buyCharge+sellCharge;\r\n\r\n        let sst = 0.025; //stock intraday\r\n        if(element.optiontype  == 'CE' || element.optiontype  == 'PE'){\r\n            sst = 0.05;  \r\n        }\r\n\r\n        let sstCharge = totalsellvalue *  sst/100; \r\n        let transCharge = turnOver *  0.00335/100; \r\n        let stampDuty  = totalbuyvalue *   0.003/100; \r\n        let sebiCharge = turnOver * 10/10000000; \r\n        let gstCharge = (totalBroker+transCharge+sebiCharge) * 18/100; \r\n\r\n        let total = totalBroker+sstCharge+transCharge+stampDuty+sebiCharge+gstCharge; \r\n\r\n        var chargeInfo ={\r\n          tradeExpence:  total,\r\n          expenceInfo : \"Brokerage: \"+totalBroker.toFixed(2)+ \" \\nSTT: \"+ sstCharge.toFixed(2) + \" \\nTransaction: \"+ transCharge.toFixed(2) + \" \\nStamp Duty: \"+stampDuty.toFixed(2) + \" \\nSebi: \"+sebiCharge.toFixed(2) + \" \\nGST: \" + gstCharge.toFixed(2) + \" \\n\\nTotal: \"+ total.toFixed(2)\r\n        }\r\n        return chargeInfo; \r\n    }\r\n    refreshBasedAmount =()=> {\r\n        let totCheckAmount = 0, checkTotalNet = 0, totCheckExp = 0 ; \r\n        this.state.positionList.forEach((item)=> {\r\n\r\n            let perchange =  this.state.checkAmountPer ? this.state.checkAmountPer : item.percentPnL; \r\n            item.checkAmount = (this.state.checkAmount * perchange/100).toFixed(2) \r\n            totCheckAmount = totCheckAmount + parseFloat(item.checkAmount);\r\n\r\n            let quantity = Math.floor(this.state.checkAmount / item.buyavgprice);\r\n            item.checkQty = quantity; \r\n            item.totalbuyvalue = quantity * item.buyavgprice; \r\n            item.totalsellvalue = quantity * item.sellavgprice; \r\n            item.checkExpence = this.calculateTradeExpence(item); \r\n            if(item.checkExpence){\r\n                item.checkNet =  (item.checkAmount - item.checkExpence.tradeExpence)\r\n                totCheckExp = totCheckExp + item.checkExpence.tradeExpence;\r\n                checkTotalNet = checkTotalNet +  parseFloat(item.checkNet); \r\n            }\r\n            console.log(item)\r\n \r\n        })\r\n        this.setState({totCheckAmount : totCheckAmount.toFixed(2), checkTotalNet : checkTotalNet.toFixed(2),totCheckExp : totCheckExp.toFixed(2),  positionList : this.state.positionList }); \r\n    }\r\n\r\n    checkSLOrTarget =(row)=>{\r\n        let trackSLPrice = localStorage.getItem('trackSLPrice') ? JSON.parse( localStorage.getItem('trackSLPrice')) : []; \r\n        if(trackSLPrice.length>0){\r\n            for (let index = 0; index < trackSLPrice.length; index++) {\r\n                const element = trackSLPrice[index];\r\n                \r\n                if(element.optiontype == 'EQ'){\r\n                    if(element.tradingsymbol == row.tradingsymbol && (row.ltp < parseFloat(element.priceStopLoss) || row.ltp >= parseFloat(element.priceTarget))){ \r\n                        console.log(\"checkSLOrTarget\",element, element.tradingsymbol == row.tradingsymbol,row.ltp, (row.ltp < parseFloat(element.priceStopLoss) || row.ltp >= parseFloat(element.priceTarget)) )\r\n                        this.squareOff(row); \r\n                    }\r\n                }\r\n                \r\n              \r\n            }\r\n        }\r\n    }\r\n\r\n    getPositionData = async () => {\r\n        //   document.getElementById('orderRefresh') && document.getElementById('orderRefresh').click(); \r\n        var maxPnL = 0, totalMaxPnL = 0;\r\n        var trackSLPriceList = localStorage.getItem('trackSLPrice') ? JSON.parse( localStorage.getItem('trackSLPrice')) : []; \r\n\r\n        AdminService.getPosition().then(res => {\r\n            let data = resolveResponse(res, 'noPop');\r\n            var positionList = data && data.data;\r\n            if (positionList && positionList.length > 0) {\r\n\r\n\r\n                var todayProfitPnL = 0, totalbuyvalue = 0, totalsellvalue = 0, totalQtyTraded = 0, allbuyavgprice = 0, allsellavgprice = 0, totalPercentage = 0, totalExpence=0; \r\n                \r\n                let tradingPositionlist = []; \r\n                for (let index = 0; index < positionList.length; index++) {\r\n                    const element = positionList[index];\r\n                    // if (element.netqty < 0) {\r\n                    //     continue;\r\n                    // }\r\n                    tradingPositionlist.push(element); \r\n\r\n                    todayProfitPnL += parseFloat(element.pnl);\r\n                    totalbuyvalue += parseFloat(element.totalbuyvalue);\r\n                    totalsellvalue += parseFloat(element.totalsellvalue) === 0 ? parseFloat(element.totalbuyvalue) : parseFloat(element.totalsellvalue);\r\n                    totalQtyTraded += parseInt(element.buyqty);\r\n                    allbuyavgprice += parseFloat(element.buyavgprice);\r\n                    allsellavgprice += parseFloat(element.sellavgprice);\r\n                    if(element.netqty == 0){\r\n                        let percentPnL = ((parseFloat(element.sellavgprice) - parseFloat(element.buyavgprice)) * 100 / parseFloat(element.buyavgprice));\r\n                        element.percentPnL = percentPnL.toFixed(2) ;\r\n                        totalPercentage += parseFloat(percentPnL);\r\n\r\n                        localStorage.removeItem('firstTimeModify' + element.tradingsymbol)\r\n                        localStorage.removeItem('lastTriggerprice_' + element.tradingsymbol)\r\n                    }\r\n                   \r\n                    element.pattenName = this.tagPatternWhichTaken(element.symboltoken); \r\n\r\n                    let chargeInfo = this.calculateTradeExpence(element);\r\n                    element.tradeExpence = chargeInfo.tradeExpence.toFixed(2); \r\n                    element.expenceInfo = chargeInfo.expenceInfo; \r\n                    totalExpence += chargeInfo.tradeExpence; \r\n\r\n                    var slData = this.getStoplossFromOrderbook(element);\r\n                    if (slData) {\r\n                        element.stopLoss = slData.stopLoss;\r\n                        element.stopLossAmount = slData.maxLossAmount;\r\n                        totalMaxPnL += parseFloat(slData.maxLossAmount) ? parseFloat(slData.maxLossAmount) : 0;\r\n                    }\r\n\r\n                    this.checkSLOrTarget(element); \r\n\r\n                }\r\n               \r\n                this.setState({ todayProfitPnL: todayProfitPnL.toFixed(2), totalbuyvalue: totalbuyvalue.toFixed(2), totalsellvalue: totalsellvalue.toFixed(2), totalQtyTraded: totalQtyTraded });\r\n                this.setState({ allbuyavgprice: (allbuyavgprice / positionList.length).toFixed(2), allsellavgprice: (allsellavgprice / positionList.length).toFixed(2), totalPercentage: totalPercentage });\r\n\r\n                var brokerageOnlyCharges = ((totalbuyvalue + totalsellvalue) * 0.25 / 100);\r\n                var allCharges = brokerageOnlyCharges + brokerageOnlyCharges * 25 / 100;\r\n                this.setState({ totalExpence: totalExpence.toFixed(2) });\r\n\r\n                this.setState({ totalTornOver: (totalbuyvalue + totalsellvalue).toFixed(2), totalMaxPnL: totalMaxPnL.toFixed(2) });\r\n\r\n                tradingPositionlist.sort((a,b) => b.netqty - a.netqty);\r\n\r\n                this.setState({ positionList: tradingPositionlist });\r\n\r\n                \r\n\r\n\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    \r\n\r\n     getNSETopStock = () => {\r\n\r\n        var stop = new Date().toLocaleTimeString() > \"15:00:00\" ? clearInterval(this.state.scaninterval) : \"\";\r\n\r\n        var totalDayLoss = TradeConfig.totalCapital * TradeConfig.dailyLossPer / 100;\r\n        totalDayLoss = -Math.abs(totalDayLoss);\r\n        if (this.state.todayProfitPnL < totalDayLoss) {\r\n            console.log(\"daily loss crossed\", totalDayLoss);\r\n            clearInterval(this.state.scaninterval);\r\n        } else {\r\n            AdminService.getNSETopStock().then(res => {\r\n                let data = resolveResponse(res, \"noPop\");\r\n                if (data.status && data.message === 'SUCCESS') {\r\n                    var scandata = data.result;\r\n                    // console.log(\"scandata\",scandata);  \r\n                    if(scandata &&  scandata.length){\r\n                        for (let index = 0; index < scandata.length; index++) {\r\n                            var isFound = false;\r\n                            for (let j = 0; j < this.state.positionList.length; j++) {\r\n                                if (this.state.positionList[j].symbolname === scandata[index].symbolName) {\r\n                                    isFound = true;\r\n                                }\r\n                            }\r\n    \r\n                           // console.log(\"index\",index, \"symbolName\",scandata[index].symbolName);    \r\n                            if (!isFound && !localStorage.getItem('NseStock_' + scandata[index].symbolName)) {\r\n    \r\n                                AdminService.autoCompleteSearch(scandata[index].symbolName).then(searchRes => {\r\n    \r\n                                    let searchResdata = searchRes.data;\r\n                                    var found = searchResdata.filter(row => row.exch_seg === \"NSE\" && row.lotsize === \"1\" && row.name === scandata[index].symbolName);\r\n    \r\n                                    if (found.length) {\r\n                                        console.log(found[0].symbol, \"found\", found);\r\n                                        localStorage.setItem('NseStock_' + scandata[index].symbolName, \"orderdone\");\r\n                                        this.historyWiseOrderPlace(found[0].token, found[0].symbol, scandata[index].symbolName);\r\n                                    }\r\n                                })\r\n    \r\n                            }\r\n                        }\r\n                    }\r\n                  \r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    getChartInkStock = () => {\r\n\r\n        var stop = new Date().toLocaleTimeString() > \"15:00:00\" ? clearInterval(this.state.scaninterval) : \"\";\r\n\r\n        var totalDayLoss = TradeConfig.totalCapital * TradeConfig.dailyLossPer / 100;\r\n        totalDayLoss = -Math.abs(totalDayLoss);\r\n        if (this.state.todayProfitPnL < totalDayLoss) {\r\n            console.log(\"daily loss crossed\", totalDayLoss);\r\n            clearInterval(this.state.scaninterval);\r\n        } else {\r\n            AdminService.getChartInkStock().then(res => {\r\n               // let data = resolveResponse(res, \"noPop\");\r\n               let response = res.data; \r\n\r\n                if (response.success) {\r\n\r\n                    let triggered_at = response.results[0] && response.results[0].body.data.triggered_at; \r\n                    let scandata = response.results[0] && response.results[0].body.data.stocks; \r\n\r\n                    let time = triggered_at.split(' '); \r\n                    let mtime = time[0]+time[1]; \r\n                    var endTime = moment(mtime, 'h:mma');\r\n                    console.log(\"last triggered_at \", triggered_at, \"stock found\", scandata , endTime.minutes(), new Date().getMinutes() ); \r\n\r\n                    if(endTime.minutes() == new Date().getMinutes()){\r\n\r\n                        scandata = scandata.split(','); \r\n    \r\n                        for (let index = 0; index < scandata.length; index++) {\r\n                            var isFound = false;\r\n                            for (let j = 0; j < this.state.positionList.length; j++) {\r\n                                if (this.state.positionList[j].symbolname === scandata[index].symbolName) {\r\n                                    isFound = true;\r\n                                }\r\n                            }\r\n    \r\n                            if (!isFound && !localStorage.getItem('NseStock_' + scandata[index])) {\r\n    \r\n                                AdminService.autoCompleteSearch(scandata[index]).then(searchRes => {\r\n    \r\n                                    let searchResdata = searchRes.data;\r\n                                    var found = searchResdata.filter(row => row.exch_seg === \"NSE\" && row.lotsize === \"1\" && row.name === scandata[index]);\r\n    \r\n                                    if (found.length) {\r\n                                        console.log(found[0].symbol, \"found\", found);\r\n                                        localStorage.setItem('NseStock_' + scandata[index], \"orderdone\");\r\n                                        this.historyWiseOrderPlace(found[0].token, found[0].symbol, scandata[index]);\r\n                                    }\r\n                                })\r\n    \r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                   \r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    longBuiltUpOrder = async(scandata) => {\r\n\r\n\r\n        for (let index = 0; index < scandata.length; index++) {\r\n            var isFound = false;\r\n\r\n            // for (let j = 0; j < this.state.positionList.length; j++) {\r\n            //     if (this.state.positionList[j].symbolname === scandata[index].symbolName) {\r\n            //         isFound = true;\r\n            //     }\r\n            // }\r\n            var found = this.state.positionList.filter(row => row.symbolname === scandata[index].symbolName);\r\n\r\n              console.log(\"index\",index, \"symbolName\",scandata[index].symbolName, found);    \r\n            if (!found.length  && !localStorage.getItem('NseStock_' + scandata[index].symbolName)) {\r\n\r\n                AdminService.autoCompleteSearch(scandata[index].symbolName).then(searchRes => {\r\n\r\n                    let searchResdata = searchRes.data;\r\n                    var found = searchResdata.filter(row => row.exch_seg === \"NSE\" && row.lotsize === \"1\" && row.name === scandata[index].symbolName);\r\n\r\n                    if (found.length) {\r\n                        console.log(found[0].symbol, \"found\", found);\r\n                        localStorage.setItem('NseStock_' + scandata[index].symbolName, \"orderdone\");\r\n                        this.historyWiseOrderPlace(found[0].token, found[0].symbol, scandata[index].symbolName);\r\n                    }\r\n                })\r\n\r\n            }\r\n\r\n            await new Promise(r => setTimeout(r, 300));\r\n\r\n        }\r\n    \r\n    }\r\n\r\n\r\n    getMySelectedStock() {\r\n\r\n        var stop = new Date().toLocaleTimeString() > \"15:00:00\" ? clearInterval(this.state.selectedStockInteval) : \"\";\r\n\r\n        var totalDayLoss = TradeConfig.totalCapital * TradeConfig.dailyLossPer / 100;\r\n        totalDayLoss = -Math.abs(totalDayLoss);\r\n        if (this.state.todayProfitPnL < totalDayLoss) {\r\n            console.log(\"daily loss crossed\", totalDayLoss);\r\n            clearInterval(this.state.scaninterval);\r\n        } else {\r\n            AdminService.getSelectedStockFromDb().then(res => {\r\n                let data = resolveResponse(res, \"noPop\");\r\n                if (data.status && data.message === 'SUCCESS') {\r\n                    var scandata = data.result;\r\n                    // console.log(\"scandata\",scandata); \r\n\r\n                    for (let index = 0; index < scandata.length; index++) {\r\n                        var isFound = false;\r\n                        for (let j = 0; j < this.state.positionList.length; j++) {\r\n                            if (this.state.positionList[j].symbolname === scandata[index].symbol) {\r\n                                isFound = true;\r\n                            }\r\n                        }\r\n\r\n                        //   console.log(\"index\",index, \"symbolName\",scandata[index].symbolName);    \r\n                        if (!isFound && !localStorage.getItem('NseStock_' + scandata[index].symbolName)) {\r\n\r\n                            AdminService.autoCompleteSearch(scandata[index].symbolName).then(searchRes => {\r\n\r\n                                let searchResdata = searchRes.data;\r\n                                var found = searchResdata.filter(row => row.exch_seg === \"NSE\" && row.lotsize === \"1\" && row.name === scandata[index].symbolName);\r\n\r\n                                if (found.length) {\r\n\r\n                                    var selectedStockwatchList = localStorage.getItem(\"selectedStockwatchList\") ? JSON.parse(localStorage.getItem(\"selectedStockwatchList\")) : [];\r\n                                    selectedStockwatchList.push(found[0]);\r\n                                    localStorage.setItem('selectedStockwatchList', JSON.stringify(selectedStockwatchList));\r\n\r\n                                }\r\n                            })\r\n\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    checkAndPlaceSingleOrder = (stock) => {\r\n        AdminService.autoCompleteSearch(stock).then(res => {\r\n            let data = res.data;\r\n            var found = data.filter(row => row.exch_seg === \"NSE\" && row.lotsize === \"1\");\r\n            console.log(\"stockfound\", found);\r\n            if (found && found.length) {\r\n                this.orderWithFlatstoploss(found[0].token, found[0].symbol);\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    getStockOnebyOne() {\r\n\r\n        var totalDayLoss = TradeConfig.totalCapital * TradeConfig.dailyLossPer / 100;\r\n        totalDayLoss = -Math.abs(totalDayLoss);\r\n        if (this.state.todayProfitPnL < totalDayLoss) {\r\n            console.log(\"daily loss crossed\", totalDayLoss);\r\n            clearInterval(this.state.scaninterval);\r\n        } else {\r\n            console.log(\"still ok\");\r\n            AdminService.getAutoScanStock().then(res => {\r\n                let data = resolveResponse(res, \"noPop\");\r\n                if (data.status && data.message === 'SUCCESS') {\r\n                    var scandata = data.result;\r\n                    if (scandata && scandata.length > 0) {\r\n                        var lastSeachStock = scandata[scandata.length - 1].symbolName;\r\n                        localStorage.setItem('scannedStocks', JSON.stringify(scandata));\r\n                        var isFound = false;\r\n                        for (let index = 0; index < this.state.positionList.length; index++) {\r\n                            if (this.state.positionList[index].symbolname === lastSeachStock) {\r\n                                isFound = true;\r\n                            }\r\n                        }\r\n                        if (!isFound && !localStorage.getItem('scannedstock_' + lastSeachStock)) {\r\n                            console.log(\"found new\", lastSeachStock)\r\n                            var msg = new SpeechSynthesisUtterance();\r\n                            msg.text = 'hey Vijay, ' + lastSeachStock;\r\n                            window.speechSynthesis.speak(msg);\r\n                            localStorage.setItem('scannedstock_' + lastSeachStock, \"orderdone\");\r\n                            this.checkAndPlaceSingleOrder(lastSeachStock);\r\n                        }\r\n                    }\r\n\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    orderWithFlatstoploss = (token, symbol) => {\r\n        var data = {\r\n            \"exchange\": \"NSE\",\r\n            \"tradingsymbol\": symbol,\r\n            \"symboltoken\": token,\r\n        }\r\n        AdminService.getLTP(data).then(res => {\r\n            let data = resolveResponse(res, 'noPop');\r\n\r\n            var LtpData = data && data.data;\r\n            var ltpPrice = LtpData.ltp\r\n            if (ltpPrice) {\r\n\r\n                //  var stopLossPrice = ltp - (ltp*0.7/100);\r\n                var stopLossPrice = ltpPrice - (ltpPrice * TradeConfig.perTradeStopLossPer / 100);\r\n                stopLossPrice = this.getMinPriceAllowTick(stopLossPrice);\r\n                let perTradeExposureAmt = TradeConfig.totalCapital * TradeConfig.perTradeExposurePer / 100;\r\n                let quantity = Math.floor(perTradeExposureAmt / ltpPrice);\r\n                console.log(symbol + 'ltp ' + ltpPrice, \"quantity\", quantity, \"stopLossPrice\", stopLossPrice, \"perTradeExposureAmt\", perTradeExposureAmt);\r\n                var orderOption = {\r\n                    transactiontype: 'BUY',\r\n                    tradingsymbol: symbol,\r\n                    symboltoken: token,\r\n                    buyPrice: 0,\r\n                    quantity: quantity,\r\n                    stopLossPrice: stopLossPrice\r\n                }\r\n\r\n                if (quantity && stopLossPrice) {\r\n                    this.placeOrderMethod(orderOption);\r\n                }\r\n\r\n            }\r\n\r\n        }).catch((error) => {\r\n            console.log(symbol, \"not found\", 'error', error);\r\n        })\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        var data = e.target.value;\r\n        AdminService.autoCompleteSearch(data).then(res => {\r\n            let data = res.data;\r\n            //    console.log(data);       \r\n            localStorage.setItem('autoSearchTemp', JSON.stringify(data));\r\n            this.setState({ autoSearchList: data });\r\n        })\r\n    }\r\n\r\n    onTrailChange=(e)=>{\r\n        this.setState({ [e.target.name]: e.target.value });\r\n      //  console.log([e.target.name],  e.target.value)\r\n    }\r\n\r\n    onAddSLChange=(e)=>{\r\n        let addSLInfo = this.state.addSLInfo; \r\n        addSLInfo[e.target.name] = e.target.value.toUpperCase(); \r\n        this.setState({ addSLInfo: addSLInfo });\r\n    }\r\n\r\n    deleteOptionPriceSL =(element, deleteindex)=> {\r\n        for (let indexP = 0; indexP <  this.state.positionList.length; indexP++) {\r\n            const position = this.state.positionList[indexP];\r\n            console.log(\"squireoffff\", position.tradingsymbol, element.tradingsymbol,  position.buyqty )\r\n\r\n            if(position.tradingsymbol == element.tradingsymbol && position.buyqty > 0){\r\n\r\n                var trackSLPriceList = localStorage.getItem('trackSLPrice') && JSON.parse( localStorage.getItem('trackSLPrice')); \r\n                if(trackSLPriceList && trackSLPriceList.length > 0){\r\n                    trackSLPriceList.splice(deleteindex, 1); \r\n                    localStorage.setItem('trackSLPrice', JSON.stringify(trackSLPriceList)); \r\n                    this.setState({trackSLPrice : trackSLPriceList},  ()=> {\r\n                        this.squareOff(position, true);\r\n                    }); \r\n                    break; \r\n                }\r\n              \r\n            }\r\n        }\r\n    }\r\n\r\n    getNiftyLTP = () => {\r\n        var data = {\r\n            \"exchange\": \"NSE\",\r\n            \"tradingsymbol\": \"NIFTY\",\r\n            \"symboltoken\": \"26000\",\r\n        }\r\n        AdminService.getLTP(data).then(res => {\r\n            let data = resolveResponse(res, 'noPop');\r\n            var LtpData = data && data.data;\r\n            //console.log(LtpData);\r\n            if (LtpData && LtpData.ltp) {\r\n                let per = (LtpData.ltp - LtpData.close) * 100 / LtpData.close; \r\n                if(document.getElementById('niftySpid')){\r\n                    this.state.niftyLtpSec.push({ltp: LtpData.ltp.toFixed(2), time: new Date().toLocaleTimeString()}); \r\n                    localStorage.setItem(\"niftyLtpSec\", JSON.stringify(this.state.niftyLtpSec));\r\n                    document.getElementById('niftySpid').innerHTML = \"<span style='color:red'> Nifty \" + LtpData.ltp.toFixed(2) + ' (' + (per).toFixed(2) + '%)</span>'; \r\n                }\r\n              }\r\n            \r\n            let trackSLPrice = localStorage.getItem('trackSLPrice') ? JSON.parse( localStorage.getItem('trackSLPrice')) : []; \r\n            \r\n            if(trackSLPrice.length>0){\r\n                for (let index = 0; index < trackSLPrice.length; index++) {\r\n                    const element = trackSLPrice[index];\r\n                    console.log(\"this.state.trackSLPrice\", element)\r\n\r\n                    if(element.name == 'NIFTY' && element.optiontype == 'CE' && ((LtpData.ltp < element.priceStopLoss) || (LtpData.ltp >= element.priceTarget))){\r\n                        //delete sloption &  trigeer squireoff  \r\n                        console.log(\"deleteOptionPriceSL call sl \", element, index)\r\n\r\n                        this.deleteOptionPriceSL(element, index); \r\n                    }\r\n                    if(element.name == 'NIFTY' && element.optiontype == 'PE' &&  ((LtpData.ltp > element.priceStopLoss) || (LtpData.ltp <= element.priceTarget))){\r\n                        //delete sloption &  trigeer sl  \r\n                        console.log(\"deleteOptionPriceSL put sl \", element, index)\r\n\r\n                        this.deleteOptionPriceSL(element);   \r\n                    }\r\n                }\r\n            }\r\n            \r\n\r\n        })\r\n    }\r\n\r\n\r\n    getBankNiftyLTP = () => {\r\n        var data = {\r\n            \"exchange\": \"NSE\",\r\n            \"tradingsymbol\": \"BANKNIFTY\",\r\n            \"symboltoken\": \"26009\",\r\n        }\r\n        AdminService.getLTP(data).then(res => {\r\n            let data = resolveResponse(res, 'noPop');\r\n            var LtpData = data && data.data;\r\n            //console.log(LtpData);\r\n            if (LtpData && LtpData.ltp) {\r\n                let per = (LtpData.ltp - LtpData.close) * 100 / LtpData.close; \r\n                if(document.getElementById('bankniftySpid')) {\r\n                    if (per > 0)\r\n                    document.getElementById('bankniftySpid').innerHTML = \"<span style='color:green'> Banknifty \" + LtpData.ltp.toFixed(2) + ' (' + (per).toFixed(2) + '%)</span>'; \r\n                    else\r\n                    document.getElementById('bankniftySpid').innerHTML = \"<span style='color:red'> Banknifty \" + LtpData.ltp.toFixed(2) + ' (' + (per).toFixed(2) + '%)</span>';    \r\n                    this.state.bnniftyLtpSec.push({ltp: LtpData.ltp.toFixed(2), time: new Date().toLocaleTimeString()}); \r\n                    localStorage.setItem(\"bnniftyLtpSec\", JSON.stringify(this.state.bnniftyLtpSec));\r\n                }\r\n            }\r\n            let trackSLPrice = localStorage.getItem('trackSLPrice') ? JSON.parse( localStorage.getItem('trackSLPrice')) : []; \r\n            if(trackSLPrice.length>0){\r\n                for (let index = 0; index < trackSLPrice.length; index++) {\r\n                    const element = trackSLPrice[index];\r\n                    if(element.name == 'BANKNIFTY' && element.optiontype == 'CE' && ((LtpData.ltp < element.priceStopLoss) || (LtpData.ltp >= element.priceTarget))){\r\n                        //delete sloption &  trigeer sl    \r\n                        this.deleteOptionPriceSL(element, index); \r\n                    }\r\n                    if(element.name == 'BANKNIFTY' && element.optiontype == 'PE' && ((LtpData.ltp > element.priceStopLoss) || (LtpData.ltp <= element.priceTarget))){\r\n                        //delete sloption &  trigeer sl    \r\n                        this.deleteOptionPriceSL(element, index); \r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    getStopLossPrice = async (token, symbol) => {\r\n        var data = {\r\n            \"exchange\": \"NSE\",\r\n            \"tradingsymbol\": symbol,\r\n            \"symboltoken\": token,\r\n        }\r\n\r\n        await AdminService.getLTP(data).then(res => {\r\n            let data = resolveResponse(res, 'noPop');\r\n            var LtpData = data && data.data;\r\n            if (LtpData && LtpData.ltp) {\r\n                var ltp = parseFloat(LtpData.ltp);\r\n                ltp = ltp - (ltp * 0.7 / 100);\r\n                var slPrice = this.getMinPriceAllowTick(ltp);\r\n\r\n                this.setState({ stoploss: slPrice });\r\n                return slPrice;\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    placeOrderMethod = (orderOption) => {\r\n\r\n        var data = {\r\n            \"transactiontype\": orderOption.transactiontype,//BUY OR SELL\r\n            \"tradingsymbol\": orderOption.tradingsymbol,\r\n            \"symboltoken\": orderOption.symboltoken,\r\n            \"quantity\": orderOption.quantity,\r\n            \"ordertype\": orderOption.buyPrice === 0 ? \"MARKET\" : \"LIMIT\",\r\n            \"price\": orderOption.buyPrice,\r\n            \"producttype\": \"INTRADAY\",//\"DELIVERY\",\r\n            \"duration\": \"DAY\",\r\n            \"squareoff\": \"0\",\r\n            \"stoploss\": \"0\",\r\n            \"exchange\": \"NSE\",\r\n            \"variety\": \"NORMAL\"\r\n        }\r\n        console.log(\"place order option\", data);\r\n        AdminService.placeOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n            //  console.log(data);   \r\n            if (data.status && data.message === 'SUCCESS') {\r\n                this.setState({ orderid: data.data && data.data.orderid });\r\n                if (orderOption.stopLossPrice) {\r\n                    this.placeSLMOrder(orderOption);\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    historyWiseOrderPlace = (token, symbol, LockedSymbolName) => {\r\n\r\n        var ltpdata = { \"exchange\": \"NSE\", \"tradingsymbol\": symbol, \"symboltoken\": token, }\r\n        AdminService.getLTP(ltpdata).then(res => {\r\n            let ltpres = resolveResponse(res, 'noPop');\r\n            var LtpData = ltpres && ltpres.data;\r\n            console.log(symbol, \" ltd data \", LtpData);\r\n            let quantity = 0;\r\n            if (LtpData && LtpData.ltp) {\r\n                let perTradeExposureAmt = TradeConfig.totalCapital * TradeConfig.perTradeExposurePer / 100;\r\n                quantity = Math.floor(perTradeExposureAmt / LtpData.ltp);\r\n            }\r\n\r\n\r\n            quantity = quantity > 0 ? 1 : 0;\r\n            console.log(symbol, \"  quantity can be order \", quantity);\r\n            if (quantity) {\r\n                const format1 = \"YYYY-MM-DD HH:mm\";\r\n                var beginningTime = moment('9:15am', 'h:mma').format(format1);\r\n\r\n                console.log(\"beginningTime\", beginningTime);\r\n\r\n                var time = moment.duration(\"21:10:00\");\r\n                var startdate = moment(new Date()).subtract(time);\r\n                var data = {\r\n                    \"exchange\": \"NSE\",\r\n                    \"symboltoken\": token,\r\n                    \"interval\": \"FIVE_MINUTE\", //ONE_DAY FIVE_MINUTE \r\n                    \"fromdate\": moment(startdate).format(format1),\r\n                    \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n                }\r\n\r\n                AdminService.getHistoryData(data).then(res => {\r\n                    let histdata = resolveResponse(res, 'noPop');\r\n                    // console.log(\"candle history\", histdata); \r\n                    if (histdata && histdata.data && histdata.data.length) {\r\n\r\n\r\n                        var candleData = histdata.data, clossest = 0, lowerest = 0, highestHigh = 0, lowestLow = 0;\r\n                        candleData.reverse();\r\n                        lowestLow = candleData[0][3];\r\n                        highestHigh = candleData[0][2];\r\n                        if (candleData && candleData.length > 0) {\r\n                            for (let index = 0; index < 20; index++) {\r\n                                if (candleData[index]) {\r\n                                    clossest += candleData[index][4]; //close  \r\n                                    lowerest += candleData[index][3];  //low\r\n                                    if (candleData[index][2] > highestHigh) {\r\n                                        console.log(index, highestHigh, candleData[index][2]);\r\n                                        highestHigh = candleData[index][2];\r\n                                    }\r\n                                    if (candleData[index][3] <= lowestLow) {\r\n                                        lowestLow = candleData[index][3];\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n\r\n                            let devideLen = candleData.length > 20 ? 20 : candleData.length;\r\n\r\n                            var bbmiddleValue = clossest / devideLen;\r\n                            var bblowerValue = lowerest / devideLen;\r\n\r\n                            var stoploss = bblowerValue - (highestHigh - lowestLow) * 3 / 100;\r\n                            stoploss = this.getMinPriceAllowTick(stoploss);\r\n\r\n                            var stoplossPer = (highestHigh - stoploss) * 100 / highestHigh;\r\n\r\n                            console.log(symbol + \"highestHigh:\", highestHigh, \"lowestLow\", lowestLow, \"stoploss after tick:\", stoploss, \"stoploss%\", stoplossPer);\r\n\r\n                            var orderOption = {\r\n                                transactiontype: 'BUY',\r\n                                tradingsymbol: symbol,\r\n                                symboltoken: token,\r\n                                buyPrice: 0,\r\n                                quantity: quantity,\r\n                                stopLossPrice: stoploss\r\n                            }\r\n                            let mySL = 3.5; \r\n                            if (stoplossPer) {\r\n                                this.placeOrderMethod(orderOption);\r\n                            } else {\r\n                                localStorage.setItem('NseStock_' + LockedSymbolName, \"\");\r\n                                console.log(symbol + \" SL \"+stoplossPer+\"% is grater than my SL: \"+mySL+\"  not fullfilled\");\r\n                            }\r\n                        }\r\n\r\n\r\n                    } else {\r\n                        //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                        console.log(symbol + \" candle data emply\");\r\n                    }\r\n                })\r\n\r\n            }\r\n        })\r\n        // await new Promise(r => setTimeout(r, 2000)); \r\n    }\r\n\r\n\r\n\r\n    cancelOrderOfSame = (row) => {\r\n\r\n        var orderData = this.getOpenPeningOrderId(row.symboltoken);\r\n        var data = {\r\n            \"variety\": orderData.variety,\r\n            \"orderid\": orderData.orderId,\r\n        }\r\n        AdminService.cancelOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n            if (data.status && data.message === 'SUCCESS') {\r\n                console.log(\"cancel order\", data);\r\n                this.deleteOptionPriceSL(row);   \r\n                // this.setState({ orderid : data.data && data.data.orderid });\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    squareOff = (row, marketOrder) => {\r\n\r\n        let price = 0; \r\n        var data = {\r\n            \"variety\": \"NORMAL\",\r\n            \"tradingsymbol\": row.tradingsymbol,\r\n            \"symboltoken\": row.symboltoken,\r\n            \"transactiontype\": row.netqty > 0 ? 'SELL' : \"BUY\",\r\n            \"exchange\": row.exchange,\r\n            \"ordertype\": \"MARKET\",\r\n            \"producttype\": row.producttype, //\"DELIVERY\",//\"DELIVERY\",\r\n            \"duration\": \"DAY\",\r\n            \"price\": price,\r\n            \"squareoff\": \"0\",\r\n            \"stoploss\": \"0\",\r\n            \"quantity\": Math.abs(row.netqty),\r\n        }\r\n\r\n        console.log('sql', row)\r\n      \r\n      \r\n        if(marketOrder){\r\n            data.price = 0;\r\n        }\r\n  \r\n        if(row.instrumenttype == \"OPTSTK\" &&  (row.optiontype == \"PE\" || row.optiontype == \"CE\")){\r\n            let stopLossPrice = row.ltp - (row.ltp * 0.5 / 100);\r\n            stopLossPrice = CommonOrderMethod.getMinPriceAllowTick(stopLossPrice);\r\n            data.price = stopLossPrice;\r\n            data.triggerprice = row.ltp-0.05; \r\n         }\r\n\r\n        AdminService.placeOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n          //  console.log(\"squireoff\", data);\r\n            if (data.status && data.message === 'SUCCESS') {\r\n                this.setState({ orderid: data.data && data.data.orderid });\r\n                this.cancelOrderOfSame(row);\r\n                document.getElementById('orderRefresh') && document.getElementById('orderRefresh').click();\r\n\r\n            }\r\n        })\r\n\r\n    }\r\n    updateOrderList = () => {\r\n        AdminService.retrieveOrderBook()\r\n            .then((res) => {\r\n                let data = resolveResponse(res);\r\n                if (data && data.data) {\r\n                    var orderlist = data.data;\r\n                    orderlist.sort(function (a, b) {\r\n                        return new Date(b.updatetime) - new Date(a.updatetime);\r\n                    });\r\n                    localStorage.setItem('oderbookData', JSON.stringify(orderlist));\r\n                }\r\n            });\r\n    }\r\n\r\n    addSLOrderInfo =(row)=> {\r\n        \r\n        this.setState({ addSLInfo : row, enableSLMOrderUi : true }); \r\n    }\r\n    placeSLMOrderManually =()=> {\r\n       // this.placeSLMOrder(this.state.addSLInfo); \r\n       this.state.addSLInfo.netqty = Math.abs(this.state.addSLInfo.netqty); \r\n       console.log(\"addSLInfo\", this.state.addSLInfo)\r\n        \r\n        CommonMethods.placeOptionSLMOrder(this.state.addSLInfo)\r\n    }\r\n    placeSLMOrder = (slmOption) => {\r\n\r\n        var data = {\r\n            \"triggerprice\": slmOption.stopLossPrice,\r\n            \"tradingsymbol\": slmOption.tradingsymbol,\r\n            \"symboltoken\": slmOption.symboltoken,\r\n            \"quantity\": slmOption.quantity,\r\n            \"transactiontype\": slmOption.transactiontype === \"BUY\" ? \"SELL\" : \"BUY\",\r\n            \"exchange\": slmOption.exchange ? slmOption.exchange :  'NSE',\r\n            \"producttype\": slmOption.producttype ? slmOption.producttype : \"INTRADAY\",//\"DELIVERY\",\r\n            \"duration\": \"DAY\",\r\n            \"price\": slmOption.price ? slmOption.price : 0 ,\r\n            \"squareoff\": \"0\",\r\n            \"stoploss\": \"0\",\r\n            \"ordertype\": \"STOPLOSS_MARKET\", //STOPLOSS_MARKET STOPLOSS_LIMIT\r\n            \"variety\": \"STOPLOSS\"\r\n        }\r\n        console.log(\"SLM option data\", data);\r\n        AdminService.placeOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n            //  console.log(data);   \r\n            if (data.status && data.message === 'SUCCESS') {\r\n                this.setState({ orderid: data.data && data.data.orderid });\r\n                this.updateOrderList(); \r\n                var msg = new SpeechSynthesisUtterance();\r\n                msg.text = (slmOption.tradingsymbol +\" \"+ slmOption.transactiontype).toLocaleLowerCase();\r\n                window.speechSynthesis.speak(msg);\r\n\r\n                document.getElementById('orderRefresh') && document.getElementById('orderRefresh').click();\r\n            }\r\n        })\r\n    }\r\n\r\n    getOpenPeningOrderId = (symboltoken) => {\r\n\r\n        var oderbookData = localStorage.getItem('oderbookData') && JSON.parse(localStorage.getItem('oderbookData'));\r\n        var data = {};\r\n        for (let index = 0; index < oderbookData.length; index++) {\r\n            if (oderbookData[index].symboltoken === symboltoken && oderbookData[index].variety === \"STOPLOSS\") {\r\n                data.orderId = oderbookData[index].orderid\r\n                data.variety = oderbookData[index].variety\r\n                break;\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n\r\n    modifyOrderMethod = (row, minTriggerPrice, minSLPrice) => {\r\n        var orderData = this.getOpenPeningOrderId(row.symboltoken);\r\n\r\n        if(!orderData.orderId){\r\n            row.stopLossPrice = minTriggerPrice; \r\n            row.price = minSLPrice; \r\n            row.quantity = Math.abs(row.netqty);\r\n            if(row.optiontype == \"CE\" || row.optiontype == \"PE\"){\r\n                row.transactiontype = \"BUY\"; \r\n            }else{\r\n                row.transactiontype = row.netqty > 0 ? \"BUY\" : \"SELL\"; \r\n            }\r\n            this.placeSLMOrder(row);\r\n        }\r\n\r\n        var data = {\r\n            \"variety\": orderData.variety,\r\n            \"orderid\": orderData.orderId,\r\n            \"ordertype\": \"STOPLOSS_MARKET\",   // \"STOPLOSS_LIMIT\",\r\n            \"producttype\": row.producttype, //\"DELIVERY\",\r\n            \"duration\": \"DAY\",\r\n            \"price\": minSLPrice ?  parseFloat(minSLPrice) : 0,\r\n            \"triggerprice\": parseFloat(minTriggerPrice),\r\n            \"quantity\": Math.abs(row.netqty),\r\n            \"tradingsymbol\": row.tradingsymbol,\r\n            \"symboltoken\": row.symboltoken,\r\n            \"exchange\": row.exchange\r\n        }\r\n        AdminService.modifyOrder(data).then(res => {\r\n            let data = resolveResponse(res, \"noPop\");\r\n\r\n            var msg = new SpeechSynthesisUtterance();\r\n\r\n\r\n            if (data.status && data.message === 'SUCCESS') {\r\n                //  this.setState({ ['lastTriggerprice_' + row.tradingsymbol]:  parseFloat(minPrice)})\r\n                msg.text = row.symbolname + ' trailed '.toLocaleLowerCase(); //+ data.message;\r\n                window.speechSynthesis.speak(msg);\r\n                localStorage.setItem('firstTimeModify' + row.tradingsymbol, 'No');\r\n                localStorage.setItem('lastTriggerprice_' + row.tradingsymbol, parseFloat(minTriggerPrice));\r\n                document.getElementById('orderRefresh') && document.getElementById('orderRefresh').click();\r\n\r\n            }\r\n        })\r\n    }\r\n    getMinPriceAllowTick = (minPrice) => {\r\n        minPrice = minPrice.toFixed(2);\r\n        // console.log(\"minPrice\",minPrice); \r\n        var wholenumber = parseInt(minPrice.split('.')[0]);\r\n        //  console.log(\"wholenumber\",wholenumber); \r\n        var decimal = parseFloat(minPrice.split('.')[1]);\r\n        // console.log(\"decimal\",decimal); \r\n        var tickedecimal = decimal - decimal % 5;\r\n        minPrice = parseFloat(wholenumber + '.' + tickedecimal);\r\n        //   console.log(\"minPricexxxx\",minPrice); \r\n        return minPrice;\r\n    }\r\n\r\n    get2DecimalNumber =(number)=>{\r\n        number = parseFloat(number); \r\n        if(number){\r\n            return number.toFixed(2); \r\n        }else{\r\n            return number;  \r\n        }\r\n    }\r\n\r\n    getSLAndTriggerPrice =(price)=> {\r\n        let minTriggerPrice = this.getMinPriceAllowTick(price);\r\n\r\n        var minSLPrice = minTriggerPrice - (minTriggerPrice * 1 / 100);\r\n        minSLPrice = this.getMinPriceAllowTick(minSLPrice);\r\n\r\n        let slPriceData = {\r\n            minTriggerPrice : minTriggerPrice, \r\n            minSLPrice : minSLPrice\r\n        }\r\n        return slPriceData; \r\n    }\r\n    getOptionPercentage =(row)=> {\r\n\r\n        var percentChange = 0, trailPerChange = 0; \r\n\r\n        row.buyavgprice = parseFloat(row.buyavgprice);\r\n        percentChange = ((row.ltp - row.buyavgprice) * 100 / row.buyavgprice);\r\n        if (!localStorage.getItem('firstTimeModify' + row.tradingsymbol) && percentChange >= this.state.firstTimeMoveOption) {\r\n\r\n            var minTriggerPrice = row.buyavgprice + (row.buyavgprice * this.state.firstTimeSLMoveOption / 100);\r\n            let slPriceData =  this.getSLAndTriggerPrice(minTriggerPrice); \r\n\r\n            if(localStorage.getItem('lastTriggerprice_' + row.tradingsymbol) != slPriceData.minTriggerPrice){\r\n                this.modifyOrderMethod(row, slPriceData.minTriggerPrice ,slPriceData.minSLPrice );\r\n            }\r\n\r\n        } else {\r\n            var lastTriggerprice = parseFloat(localStorage.getItem('lastTriggerprice_' + row.tradingsymbol));\r\n            var perchngfromTriggerPrice = ((row.ltp - lastTriggerprice) * 100 / lastTriggerprice);\r\n            trailPerChange = perchngfromTriggerPrice; \r\n            if (perchngfromTriggerPrice >= this.state.nextTimeMoveOption) {\r\n                minTriggerPrice = lastTriggerprice + (lastTriggerprice * this.state.nextTimeSLMoveOption / 100);\r\n                let slPriceData =  this.getSLAndTriggerPrice(minTriggerPrice); \r\n\r\n                if(localStorage.getItem('lastTriggerprice_' + row.tradingsymbol) != slPriceData.minTriggerPrice){\r\n                    this.modifyOrderMethod(row, slPriceData.minTriggerPrice, slPriceData.minSLPrice);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!trailPerChange){\r\n            return percentChange.toFixed(2) + \"%\"; \r\n        }else{\r\n            return percentChange.toFixed(2) + \"% | Trailing \"+ trailPerChange.toFixed(2) + \"%\"; \r\n        }\r\n \r\n    }\r\n\r\n    getPercentage = (row) => {\r\n\r\n        var percentChange = 0, trailPerChange = 0; \r\n        if (row.netqty > 0) {\r\n            row.buyavgprice = parseFloat(row.buyavgprice);\r\n            percentChange = ((row.ltp - row.buyavgprice) * 100 / row.buyavgprice);\r\n            if (!localStorage.getItem('firstTimeModify' + row.tradingsymbol) && percentChange >= this.state.firstTimeMove) {\r\n                var minPrice = row.buyavgprice + (row.buyavgprice * this.state.firstTimeSLMove / 100);\r\n                minPrice = this.getMinPriceAllowTick(minPrice);\r\n                if(localStorage.getItem('lastTriggerprice_' + row.tradingsymbol) != minPrice){\r\n                    this.modifyOrderMethod(row, minPrice);\r\n                }\r\n            } else {\r\n                var lastTriggerprice = parseFloat(localStorage.getItem('lastTriggerprice_' + row.tradingsymbol));\r\n                var perchngfromTriggerPrice = ((row.ltp - lastTriggerprice) * 100 / lastTriggerprice);\r\n                trailPerChange = perchngfromTriggerPrice; \r\n                if (perchngfromTriggerPrice >= this.state.nextTimeMove) {\r\n                    minPrice = lastTriggerprice + (lastTriggerprice * this.state.nextTimeSLMove / 100);\r\n                    minPrice = this.getMinPriceAllowTick(minPrice);\r\n                    if(localStorage.getItem('lastTriggerprice_' + row.tradingsymbol) != minPrice){\r\n                        this.modifyOrderMethod(row, minPrice);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (row.netqty < 0) {\r\n\r\n            row.sellavgprice = parseFloat(row.sellavgprice);\r\n            percentChange = ((row.ltp - row.sellavgprice) * 100 / row.sellavgprice);\r\n            if (!localStorage.getItem('firstTimeModify' + row.tradingsymbol) && percentChange <= -Math.abs(this.state.firstTimeMove)) {\r\n                var minPrice = row.sellavgprice - (row.sellavgprice * this.state.firstTimeSLMove / 100);\r\n                minPrice = this.getMinPriceAllowTick(minPrice);\r\n                // if(localStorage.getItem('lastTriggerprice_' + row.tradingsymbol) != minPrice){\r\n                //     this.modifyOrderMethod(row, minPrice);\r\n                // }\r\n                this.modifyOrderMethod(row, minPrice);\r\n            } else {\r\n                var lastTriggerprice = parseFloat(localStorage.getItem('lastTriggerprice_' + row.tradingsymbol));\r\n                var perchngfromTriggerPrice = ((row.ltp - lastTriggerprice) * 100 / lastTriggerprice);\r\n                trailPerChange = perchngfromTriggerPrice; \r\n                console.log(\"perchngfromTriggerPrice\", row.tradingsymbol , perchngfromTriggerPrice);\r\n                if (perchngfromTriggerPrice <= -Math.abs(this.state.nextTimeMove)  ) {\r\n                    minPrice = lastTriggerprice - (lastTriggerprice * this.state.nextTimeSLMove / 100);\r\n                    minPrice = this.getMinPriceAllowTick(minPrice);\r\n                    // if(localStorage.getItem('lastTriggerprice_' + row.tradingsymbol) != minPrice){\r\n                    //     this.modifyOrderMethod(row, minPrice);\r\n                    // }\r\n                    this.modifyOrderMethod(row, minPrice);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(!trailPerChange){\r\n            return percentChange.toFixed(2) + \"%\"; \r\n        }else{\r\n            return percentChange.toFixed(2) + \"% | Trailing \"+ trailPerChange.toFixed(2) + \"%\"; \r\n        }\r\n    }\r\n\r\n  \r\n\r\n\r\n    render() {\r\n  \r\n\r\n        //var foundPatternList = localStorage.getItem('foundPatternList') && JSON.parse(localStorage.getItem('foundPatternList')).reverse(); \r\n\r\n        return (\r\n            <React.Fragment>\r\n                <PostLoginNavBar />\r\n                <br />\r\n                <ChartDialog /> <ChartMultiple />\r\n                <Grid style={{ padding: '5px' }} justify=\"space-between\" direction=\"row\" container>\r\n                    <Grid item >\r\n\r\n                       <Typography color=\"primary\" gutterBottom>\r\n                       Positions ({this.state.positionList && this.state.positionList.length})    <span id=\"niftySpid\"  > Nifty </span>  &nbsp;&nbsp;  <span id=\"bankniftySpid\" >Banknifty </span>\r\n                        </Typography>\r\n\r\n                     \r\n                    </Grid>\r\n\r\n                    \r\n                    {/* <Grid item  >\r\n                        <Typography component=\"h3\">\r\n                            <b>Net C:  {this.get2DecimalNumber(localStorage.getItem('netCapital'))}  </b>\r\n                        </Typography>\r\n                    </Grid> */}\r\n\r\n                    {/* <Grid item>\r\n                        <Typography component=\"h3\" >\r\n                            <b> Net C P/L: </b> <b style={{ color: ((this.state.todayProfitPnL - this.state.totalExpence) * 100/localStorage.getItem('netCapital')) > 0 ? \"green\" : \"red\" }}>{((this.state.todayProfitPnL - this.state.totalExpence) * 100/localStorage.getItem('netCapital')).toFixed(2)}% </b>\r\n                        </Typography>\r\n                    </Grid> */}\r\n\r\n                   \r\n{/* \r\n                    <Grid item  >\r\n                        <Typography component=\"h3\">\r\n                            <b>Turnover: {this.state.totalTornOver} </b>\r\n                        </Typography>\r\n                    </Grid> */}\r\n\r\n\r\n                    <Grid item >\r\n                        <Typography component=\"h3\"  >\r\n\r\n                        <b style={{ color: \"red\" }}>Expn: {this.state.totalExpence} </b>\r\n\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item  >\r\n                        <Typography component=\"h3\"   >\r\n                            <b>  P/L: </b> <b style={{ color: this.state.todayProfitPnL > 0 ? \"green\" : \"red\" }}>{this.state.todayProfitPnL} </b>\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                        <Typography component=\"h3\"  {...window.document.title = \"PnL:\" + (this.state.todayProfitPnL - this.state.totalExpence).toFixed(2)}>\r\n                        <b> Net P/L: </b> <b style={{ color: (this.state.todayProfitPnL - this.state.totalExpence) > 0 ? \"green\" : \"red\" }}>{this.state.totalExpence ? (this.state.todayProfitPnL - this.state.totalExpence).toFixed(2) : \"\"} </b>\r\n                        </Typography>\r\n                    </Grid>\r\n                    \r\n\r\n                \r\n                    <Grid item  >\r\n                        <Button type=\"number\" variant=\"contained\" style={{ float: \"right\" }} onClick={() => this.getPositionData()}>Refresh</Button>\r\n                    </Grid>\r\n                    <Grid item  >\r\n                        <Button type=\"number\" variant=\"contained\" style={{ float: \"right\" }} onClick={() => this.getHighLowPercentage()}><RefreshIcon /> H/L</Button>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid style={{ padding: '5px' }} spacing={1} direction=\"row\" alignItems=\"center\" container>\r\n\r\n\r\n                     <Grid item xs={12} sm={12}>\r\n                        <Paper style={{ overflow: \"auto\", padding: '5px' }} >\r\n\r\n                            <Table size=\"small\" aria-label=\"sticky table\" >\r\n                                <TableHead style={{ whiteSpace: \"nowrap\", backgroundColor: \"\" }} variant=\"head\">\r\n                                    <TableRow key=\"1\" variant=\"head\" style={{ fontWeight: 'bold' }}>\r\n\r\n                                        {/* <TableCell className=\"TableHeadFormat\" align=\"left\">Instrument</TableCell> */}\r\n                                        <TableCell style={{ paddingLeft: \"3px\" }} className=\"TableHeadFormat\" align=\"left\">&nbsp;Symbol\r\n                                        <Button type=\"number\" onClick={() => this.checkOpenEqualToLow()}>O=H/L</Button>\r\n                                        <input style={{width: \"50px\"}} type='number'step={10000} placeholder='25000' name=\"checkAmount\" onChange={this.onTrailChange} onBlur={()=> this.refreshBasedAmount()}/>\r\n                                        <input style={{width: \"30px\"}} type='number' step={0.1} placeholder='0.5' name=\"checkAmountPer\" onChange={this.onTrailChange} onBlur={()=> this.refreshBasedAmount()}/>\r\n\r\n                                        </TableCell>\r\n                                        {/* <TableCell className=\"TableHeadFormat\" align=\"left\">Trading Token</TableCell> */}\r\n                                        {/* <TableCell className=\"TableHeadFormat\" align=\"left\">Product type</TableCell> */}\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">Type</TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">BuyAvg</TableCell>\r\n                                        {/* <TableCell  className=\"TableHeadFormat\" align=\"left\">Total buy value</TableCell> */}\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">SellAvg</TableCell>\r\n                                        {/* <TableCell  className=\"TableHeadFormat\" align=\"left\">Total Sell value</TableCell> */}\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">QT</TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">NetQty</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">Exp</TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">SL</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">MD</TableCell>\r\n\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">P/L </TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">Chng % </TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">LTP</TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">Action</TableCell>\r\n                                        {/* <TableCell className=\"TableHeadFormat\" align=\"left\">SP.SL</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">SP.Target</TableCell> */}\r\n                                       \r\n                                        {this.state.checkAmount ? \r\n                                        <>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">Qty Cpl</TableCell>\r\n                                         <TableCell  className=\"TableHeadFormat\" align=\"left\">CExp</TableCell>\r\n                                         <TableCell  className=\"TableHeadFormat\" align=\"left\">CNet</TableCell>\r\n                                          </> : \"\"}\r\n\r\n                                        {this.state.showHighLowWisePer ? \r\n                                        <>\r\n                                         <TableCell  className=\"TableHeadFormat\" align=\"left\">High</TableCell>\r\n                                         <TableCell  className=\"TableHeadFormat\" align=\"left\">Low</TableCell>\r\n                                          </> : \"\"}\r\n\r\n\r\n\r\n                                     \r\n\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n\r\n                                    {this.state.positionList ? this.state.positionList.map(row => (\r\n\r\n\r\n                                        row.producttype !== 'DELIVERY1' ? <TableRow hover key={row.symboltoken} style={{ background: row.netqty !== '0' ? 'lightgray' : \"\" }} >\r\n\r\n                                            <TableCell align=\"left\" style={{width:'250px'}}>\r\n                                                <Button style={{ color: (row.ltp - row.close) * 100 / row.close > 0 ? \"green\" : \"red\" }} size=\"small\" variant=\"contained\" title=\"Candle refresh\" onClick={() => this.refreshCandleChartManually(row)} >\r\n                                                    {row.tradingsymbol} {row.ltp} ({((row.ltp - row.close) * 100 / row.close).toFixed(2)}%) <ShowChartIcon />\r\n                                                </Button>\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\">{row.producttype}</TableCell>\r\n\r\n                                            {/* <TableCell align=\"left\">{row.symboltoken}</TableCell> */}\r\n                                            {/* <TableCell align=\"left\">{row.producttype}</TableCell> */}\r\n\r\n                                            <TableCell align=\"left\"><Button onClick={() => this.addSLOrderInfo(row)}> {row.totalbuyavgprice} </Button>  </TableCell>\r\n                                            {/* <TableCell align=\"left\">{row.totalbuyvalue}</TableCell> */}\r\n\r\n                                            <TableCell align=\"left\">{row.totalsellavgprice}</TableCell>\r\n                                            <TableCell align=\"left\">{row.buyqty || row.sellqty}</TableCell>\r\n                                            <TableCell align=\"left\">{row.netqty}</TableCell>\r\n                                            <TableCell style={{cursor:'help'}} title={row.expenceInfo} align=\"left\">{row.tradeExpence}</TableCell>\r\n\r\n                                            {/* <TableCell align=\"left\">{row.totalsellvalue}</TableCell> */}\r\n                                            <TableCell align=\"left\"> {row.stopLoss}</TableCell>\r\n                                            <TableCell align=\"left\"> {row.stopLossAmount}</TableCell>\r\n\r\n\r\n                                            {/* {(localStorage.getItem('lastTriggerprice_'+row.tradingsymbol))} */}\r\n                                            <TableCell align=\"left\" style={{ color: parseFloat(row.pnl) > 0 ? 'green' : 'red' }}><b>{row.pnl}</b></TableCell>\r\n                                            <TableCell align=\"left\">\r\n                                                {row.netqty !== '0' && row.optiontype  == '' ? this.getPercentage(row) : \"\"}\r\n                                                {(row.optiontype  == 'CE' || row.optiontype  == 'PE') && row.netqty > 0 ? this.getOptionPercentage(row) : \"\"}  \r\n                                                {row.percentPnL ? row.percentPnL + \"%\" : \"\"}\r\n                                                {/* new Date().toLocaleTimeString() > \"15:15:00\" ? */}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\">{row.ltp}</TableCell>\r\n\r\n                                           \r\n\r\n                                             <TableCell align=\"left\">\r\n                                                {row.netqty !== \"0\" ? <Button size={'small'} type=\"number\" variant=\"contained\" color=\"Secondary\" onClick={() => this.squareOff(row)}>Square Off</Button> : \"\"}\r\n                                            </TableCell>\r\n                                        \r\n                                        {this.state.checkAmount ? <>\r\n                                            <TableCell   align=\"left\"><i title={ \"Buy value:\" + row.totalbuyvalue + \" | Sell value:\"+ row.totalsellvalue}>  {row.checkQty}</i> &nbsp; {row.checkAmount} </TableCell>\r\n                                            {/* <TableCell   align=\"left\"></TableCell> */}\r\n                                            <TableCell   align=\"left\" title={row.checkExpence && row.checkExpence.expenceInfo}>  {row.checkExpence && row.checkExpence.tradeExpence && row.checkExpence.tradeExpence.toFixed(2)}</TableCell>\r\n                                            <TableCell   align=\"left\">{row.checkNet && row.checkNet.toFixed(2)}</TableCell>\r\n                                          </> : \"\"}\r\n\r\n\r\n                                        {this.state.showHighLowWisePer ? <>\r\n                                            <TableCell   align=\"left\">{row.high}</TableCell>\r\n                                            <TableCell  align=\"left\">{row.low}</TableCell>\r\n                                          </> : \"\"}\r\n\r\n\r\n                                           \r\n\r\n                                        </TableRow> : \"\"\r\n\r\n                                    )) : ''}\r\n\r\n                                    <TableRow variant=\"head\" style={{ fontWeight: 'bold', backgroundColor: \"\" }}>\r\n\r\n                                        {/* <TableCell className=\"TableHeadFormat\" align=\"left\">Instrument</TableCell> */}\r\n                                        {/* <TableCell className=\"TableHeadFormat\" align=\"left\"></TableCell> */}\r\n                                        {/* <TableCell className=\"TableHeadFormat\" align=\"left\"></TableCell> */}\r\n                                        <TableCell  align=\"left\">\r\n\r\n                   \r\n                                        Stock Trail%: &nbsp; F.Move<input name=\"firstTimeMove\"  type={'number'}  step=\"0.1\" onChange={this.onTrailChange} value={this.state.firstTimeMove}  style={{width:'30px',textAlign:'center'}} /> \r\n                                        &nbsp;SL Move<input name=\"firstTimeSLMove\" step=\"0.1\"  type={'number'}  onChange={this.onTrailChange}  value={this.state.firstTimeSLMove} style={{width:'30px',textAlign:'center'}} /> \r\n\r\n                                        &nbsp;Next <input name=\"nextTimeMove\" step=\"0.1\"  type={'number'}  onChange={this.onTrailChange} value={this.state.nextTimeMove}  style={{width:'30px',textAlign:'center'}} /> \r\n                                        &nbsp;SL Move<input name=\"nextTimeSLMove\"  step=\"0.1\" type={'number'}  onChange={this.onTrailChange}  value={this.state.nextTimeSLMove} style={{width:'30px',textAlign:'center'}} /> \r\n\r\n\r\n                                        </TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\"></TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">{this.state.allbuyavgprice}</TableCell>\r\n                                        {/* <TableCell  className=\"TableHeadFormat\" align=\"left\">{this.state.totalbuyvalue}</TableCell> */}\r\n\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">{this.state.allsellavgprice}</TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">{this.state.totalQtyTraded}</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\"></TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\"></TableCell>\r\n\r\n                                        {/* <TableCell  className=\"TableHeadFormat\" align=\"left\">{this.state.totalsellvalue}</TableCell> */}\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\"></TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">{this.state.totalMaxPnL}</TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\" style={{ color: parseFloat(this.state.todayProfitPnL) > 0 ? 'green' : 'red' }}>{this.state.todayProfitPnL} </TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">\r\n\r\n                                        {/* new Date().toLocaleTimeString() > \"15:15:00\" ?  */}\r\n                                            {this.state.totalPercentage && this.state.totalPercentage.toFixed(2) + \"%\"}\r\n\r\n                                        </TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\"></TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\"></TableCell>\r\n\r\n\r\n                                        {this.state.checkAmount ? <>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">{this.state.totCheckAmount}</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">{this.state.totCheckExp}</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">{this.state.checkTotalNet}</TableCell>\r\n                                        </>\r\n                                        : \"\" }\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\"></TableCell>\r\n\r\n\r\n                                    </TableRow>\r\n\r\n                                    <TableRow variant=\"head\">\r\n                                        <TableCell  colSpan={15} align=\"left\">\r\n\r\n                                        Option Trail%: F.Move<input name=\"firstTimeMoveOption\"  type={'number'}  step=\"0.1\" onChange={this.onTrailChange} value={this.state.firstTimeMoveOption}  style={{width:'30px',textAlign:'center'}} /> \r\n                                        &nbsp;SL Move<input name=\"firstTimeSLMoveOption\" step=\"0.1\"  type={'number'}  onChange={this.onTrailChange}  value={this.state.firstTimeSLMoveOption} style={{width:'30px',textAlign:'center'}} /> \r\n\r\n                                        &nbsp;Next <input name=\"nextTimeMoveOption\" step=\"0.1\"  type={'number'}  onChange={this.onTrailChange} value={this.state.nextTimeMoveOption}  style={{width:'30px',textAlign:'center'}} /> \r\n                                        &nbsp;SL Move<input name=\"nextTimeSLMoveOption\"  step=\"0.1\" type={'number'}  onChange={this.onTrailChange}  value={this.state.nextTimeSLMoveOption} style={{width:'30px',textAlign:'center'}} /> \r\n \r\n                                        </TableCell>\r\n                                    \r\n                                    </TableRow>\r\n\r\n                                    {this.state.enableSLMOrderUi ? \r\n                                    <TableRow variant=\"head\">\r\n                                        <TableCell className=\"TableHeadFormat\" colSpan={15} align=\"center\">\r\n\r\n                                        Stoploss\r\n                                        &nbsp;<input placeholder='Symbol' name=\"tradingsymbol\"  onChange={this.onAddSLChange} value={this.state.addSLInfo && this.state.addSLInfo.tradingsymbol}  style={{ width:'200px',  textAlign:'center'}} /> \r\n                                        &nbsp;<input placeholder='Price' name=\"stopLossPrice\"  type={'number'}  step=\"0.1\" onChange={this.onAddSLChange} value={this.state.addSLInfo && this.state.addSLInfo.stopLossPrice}  style={{width:'100px',textAlign:'center'}} /> \r\n                                        &nbsp;<input placeholder='Trigger Price' name=\"stopLossTriggerPrice\" step=\"0.1\"  type={'number'}  onChange={this.onAddSLChange}  value={this.state.addSLInfo && this.state.addSLInfo.price} style={{width:'100px',textAlign:'center'}} /> \r\n                                        &nbsp; <Button size={'small'} type=\"number\" variant=\"contained\"  onClick={() => this.placeSLMOrderManually()}>Place SL</Button> \r\n                                    \r\n                                        </TableCell>\r\n                                    \r\n                                    </TableRow>\r\n\r\n                                     : \"\"}\r\n                                    \r\n\r\n\r\n                                </TableBody>\r\n                            </Table>\r\n\r\n                        </Paper>\r\n\r\n\r\n                    </Grid>\r\n\r\n\r\n\r\n                    <Grid item xs={12} sm={12}>\r\n                        <OrderBook />\r\n                    </Grid>\r\n\r\n\r\n\r\n                    <Grid item xs={12} sm={12} style={{ height: '100%', overflow: \"auto\" }}>\r\n                         {localStorage.getItem('isOpenInNewPage') == \"no\" ?  <OrderWatchlist /> : \"\"}\r\n                    </Grid>\r\n\r\n\r\n                    {this.state.foundPatternList && this.state.foundPatternList.length ? \r\n                    <Grid item xs={12} sm={12} >\r\n                        <Paper style={{ overflow: \"auto\", padding: '5px' }} >\r\n\r\n\r\n\r\n                            <Grid justify=\"space-between\"\r\n                                container>\r\n                                <Grid item  >\r\n                                    <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n                                        Patterns Founds ({this.state.foundPatternList && this.state.foundPatternList.length})\r\n\r\n                                        <span id=\"stockTesting\" style={{ fontSize: \"18px\", color: 'gray' }}> {this.state.stockTesting} </span>\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item >\r\n                                    <Button variant=\"contained\" style={{ marginLeft: '20px' }} onClick={() => this.refreshLtpOnFoundPattern()}>Live Refresh</Button>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n\r\n\r\n                            <Table size=\"small\" aria-label=\"sticky table\" >\r\n                                <TableHead style={{ whiteSpace: \"nowrap\", }} variant=\"head\">\r\n                                    <TableRow key=\"1\" variant=\"head\" style={{ fontWeight: 'bold' }}>\r\n\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">Symbol | Activated({this.state.totelActivatedCount})</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">Performance 6M</TableCell>\r\n\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">OnLtp ({this.state.nr4TotalPer.toFixed(2)})%  </TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">Qty</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">PnL({this.state.pnlAmountTotal.toFixed(2)})</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">Fee({this.state.totalBrokerChargesNR4.toFixed(2)})</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">NetPnL({this.state.totalNetProfit.toFixed(2)})</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">OnH/L({this.state.perHighLowTotal.toFixed(2)}% | {this.state.netPnLAmountOnHighlowTotal.toFixed(2)})  </TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">Patten</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">FoundAt</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">BuyAt</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">SellAt</TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">UpdatedAt</TableCell>\r\n\r\n\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n\r\n                                    {this.state.foundPatternList ? this.state.foundPatternList.map(row => (\r\n                                        <TableRow hover key={row.symboltoken}>\r\n\r\n\r\n                                            <TableCell align=\"left\"> <Button variant=\"contained\" style={{ color: !row.todayChange ? '' : row.todayChange > 0 ? 'green' : 'red' }} onClick={() => this.showCandleChart(row.candleChartData, row.symbol)}>{row.symbol} {row.symbolUpdated} <EqualizerIcon /> </Button></TableCell>\r\n                                            <TableCell title={row.symbol + \" : Open all chart\"} align=\"left\" style={{ fontSize: '9px', cursor: 'pointer' }} onClick={() => this.showMultipleCandleChart(row)}>\r\n                                                {row.pastPerferm ? <>\r\n                                                    <span style={{ background: row.pastPerferm.totalLongPer / row.pastPerferm.totalLongs >= 1 ? \"#92f192\" : \"\" }}>{row.pastPerferm.totalLongs}L({row.pastPerferm.totalLongPer}%) | Avg:{(row.pastPerferm.totalLongPer / row.pastPerferm.totalLongs).toFixed(2)}%</span> <br />\r\n                                                    <span>{row.pastPerferm.totalLongs}LH({row.pastPerferm.totalLongHighPer}%) | Avg: {(row.pastPerferm.totalLongHighPer / row.pastPerferm.totalLongs).toFixed(2)}%</span> <br />\r\n                                                    <span style={{ background: row.pastPerferm.totalShortPer / row.pastPerferm.totalShort >= 1 ? \"#e87b7b\" : \"\" }}>{row.pastPerferm.totalShort}S:{row.pastPerferm.totalShortPer}% | Avg:{(row.pastPerferm.totalShortPer / row.pastPerferm.totalShort).toFixed(2)}%</span> <br />\r\n                                                    <span>{row.pastPerferm.totalShort}SL:{row.pastPerferm.totalShortLowPer}% | Avg:{(row.pastPerferm.totalShortLowPer / row.pastPerferm.totalShort).toFixed(2)}%</span> <br />\r\n                                                </> : \"\"}\r\n\r\n                                            </TableCell>\r\n\r\n                                            <TableCell align=\"left\"><b>{row.orderActivated} </b></TableCell>\r\n\r\n\r\n                                            <TableCell align=\"left\">{row.quantity}</TableCell>\r\n                                            <TableCell align=\"left\">{row.pnlAmount}</TableCell>\r\n                                            <TableCell align=\"left\">{row.brokerageCharges}</TableCell>\r\n                                            <TableCell align=\"left\"><b>{row.netPnLAmount} </b></TableCell>\r\n                                            <TableCell align=\"left\"><b>{row.OnHighLowActivated} </b></TableCell>\r\n\r\n                                            <TableCell align=\"left\">{row.pattenName}</TableCell>\r\n\r\n                                            <TableCell align=\"left\">{row.foundAt && row.foundAt.substr(0, 15)}</TableCell>\r\n\r\n                                            <TableCell align=\"left\">{row.BuyAt}</TableCell>\r\n                                            <TableCell align=\"left\">{row.SellAt}</TableCell>\r\n\r\n                                            <TableCell align=\"left\">{row.time}</TableCell>\r\n\r\n                                        </TableRow>\r\n                                    )) : ''}\r\n                                </TableBody>\r\n                            </Table>\r\n\r\n\r\n\r\n                        </Paper>\r\n                    </Grid> \r\n                    : \"\"}\r\n\r\n\r\n\r\n                </Grid>\r\n\r\n\r\n            </React.Fragment>\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n// const styles ={\r\n//     footerButton: {\r\n//         position: 'fixed',\r\n//     }\r\n// };\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport { resolveResponse } from \"../../utils/ResponseHandler\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport * as moment from 'moment';\r\nimport OrderBook from './Orderbook';\r\nimport OrderWatchlist from './OrderWatchlist';\r\nimport TradeConfig from './TradeConfig.json';\r\nimport ChartDialog from './ChartDialog';\r\nimport ChartMultiple from './ChartMultiple';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\nimport Notify from \"../../utils/Notify\";\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport CommonOrderMethod from \"../../utils/CommonMethods\";\r\nimport CommonMethods from '../../utils/CommonMethods';\r\nimport OrderStatusLive from './OrderStatusLive';\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            positionList: [],\r\n            autoSearchList: [],\r\n            InstrumentLTP: {},\r\n            autoSearchTemp: [],\r\n            foundPatternList: [], //localStorage.getItem('foundPatternList') && JSON.parse(localStorage.getItem('foundPatternList')) || [], \r\n            symboltoken: \"\",\r\n            tradingsymbol: \"\",\r\n            buyPrice: 0,\r\n            quantity: 1,\r\n            producttype: \"DELIVERY\",\r\n            nr4TotalPer: 0,\r\n            pnlAmountTotal: 0,\r\n            totalNetProfit: 0,\r\n            totelActivatedCount: 0,\r\n            totalBrokerChargesNR4: 0,\r\n            stockTesting: \"\",\r\n            perHighLowTotal: 0,\r\n            netPnLAmountOnHighlowTotal: 0,\r\n            firstTimeMove: 0.6,\r\n            firstTimeSLMove: 0.5,\r\n            nextTimeMove: 0.6,\r\n            nextTimeSLMove: 0.3,\r\n            firstTimeMoveOption: 10,\r\n            firstTimeSLMoveOption: 3,\r\n            nextTimeMoveOption: 5,\r\n            nextTimeSLMoveOption: 3,\r\n            staticData: localStorage.getItem('staticData') && JSON.parse(localStorage.getItem('staticData')) || {},\r\n            trackSLPrice: localStorage.getItem('trackSLPrice') && JSON.parse(localStorage.getItem('trackSLPrice')) || [],\r\n            enableSLMOrderUi: false,\r\n            addSLInfo: {},\r\n            niftyLtpSec: [],\r\n            activeStockOptions: []\r\n        };\r\n    }\r\n    componentDidMount() {\r\n\r\n        this.updateOrderList();\r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var endTime = moment('3:30pm', 'h:mma');\r\n        const friday = 5; // for friday\r\n        var currentTime = moment(new Date(), \"h:mma\");\r\n        const today = moment().isoWeekday();\r\n        //market hours\r\n        if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n            this.setState({ positionInterval: setInterval(() => { this.getPositionData(); }, 1000) })\r\n           // this.setState({ bankNiftyInterval: setInterval(() => {  this.getBankNiftyLTP(); }, 1000) })\r\n\r\n            var intervaltime = 1000;\r\n            if (this.state.activeStockOptions.length > 10) {\r\n                intervaltime = this.state.activeStockOptions.length * 110;\r\n            }\r\n            //this.setState({ updateStockInterval: setInterval(() => { this.getOptionStockLiveLtp(); }, intervaltime) });\r\n\r\n            var squireInterval = setInterval(() => {\r\n                let sqrOffbeginningTime = moment('3:14pm', 'h:mma');\r\n                let sqrOffendTime = moment('3:15pm', 'h:mma');\r\n                let sqrOffcurrentTime = moment(new Date(), \"h:mma\");\r\n\r\n                if (sqrOffcurrentTime.isBetween(sqrOffbeginningTime, sqrOffendTime)) {\r\n                    this.state.positionList.forEach((element, i) => {\r\n                        if (element.netqty > 0 || element.netqty < 0) {\r\n                            this.squareOff(element);\r\n                        }\r\n                        if (this.state.positionList.length == i + 1) {\r\n                            clearInterval(squireInterval);\r\n                            console.log(\"squireInterval ended\");\r\n                        }\r\n                    });\r\n                }\r\n            }, 5000);\r\n\r\n        } else {\r\n            clearInterval(this.state.positionInterval);\r\n            // clearInterval(this.state.bankNiftyInterval);\r\n        }\r\n    }\r\n\r\n    getOptionStockLiveLtp = async () => {\r\n\r\n        for (let index = 0; index < this.state.activeStockOptions.length; index++) {\r\n            const element = this.state.activeStockOptions[index];\r\n            var data = { \"exchange\": element.exch_seg, \"tradingsymbol\": element.symbol, \"symboltoken\": element.token };\r\n\r\n\r\n            AdminService.getLTP(data).then(res => {\r\n                let data = resolveResponse(res, 'noPop');\r\n                var LtpData = data && data.data;\r\n                if (LtpData && LtpData.ltp) {\r\n                    element.ltp = LtpData.ltp;\r\n                    element.perChange = ((LtpData.ltp - LtpData.close) * 100 / LtpData.close).toFixed(2);\r\n\r\n                     console.log('element', element)\r\n\r\n                    let elementP = this.state.positionList.filter(name => name.symbolname == element.symbol);\r\n                \r\n                    // for (let indexP = 0; indexP < this.state.positionList.length; indexP++) {\r\n                    //     elementP = this.state.positionList[indexP];\r\n                    //     if (elementP.symbolname === element.symbol) {\r\n                    //         elementP.optionStockLtp = LtpData.ltp;\r\n                    //         elementP.optionStockName = element.symbol;\r\n                    //         elementP.optionStockChange = element.perChange;\r\n\r\n                    //         break;\r\n                    //     }\r\n                    // }\r\n                    // this.setState({ positionList: this.state.positionList });\r\n\r\n                    if(elementP[0]){\r\n                        //ce quireoff \r\n                        if (elementP.optiontype === 'CE' && (LtpData.ltp < element.optionStockStoploss || LtpData.ltp >= element.optionStockTarget)) {\r\n                            var isDelete = this.deleteActiveOptionStock(element);\r\n                            if (isDelete) {\r\n                                //   this.squareOff(elementP, false);\r\n                            }\r\n                        }\r\n                        //pe squired off\r\n                        if (elementP.optiontype === 'PE' && (LtpData.ltp > element.optionStockStoploss || LtpData.ltp <= element.optionStockTarget)) {\r\n                            var isDelete = this.deleteActiveOptionStock(element);\r\n                            if (isDelete) {\r\n                                //    this.squareOff(elementP, false);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                 \r\n                }\r\n                this.setState({ activeStockOptions: this.state.activeStockOptions });\r\n\r\n            })\r\n\r\n            await new Promise(r => setTimeout(r, 100));\r\n        }\r\n    }\r\n\r\n    deleteActiveOptionStock = (row) => {\r\n        var isDeleted = false;\r\n        for (let index = 0; index < this.state.activeStockOptions.length; index++) {\r\n            const element = this.state.activeStockOptions[index];\r\n            if (row.name == element.name) {\r\n                var delitem = this.state.activeStockOptions.splice(index, 1);\r\n                if (delitem[0].name == row.name) {\r\n                    isDeleted = true;\r\n                }\r\n                this.setState({ activeStockOptions: this.state.activeStockOptions });\r\n                break;\r\n            }\r\n        }\r\n        return isDeleted;\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        //clearInterval(this.state.positionInterval);\r\n        // clearInterval(this.state.scaninterval);\r\n        //  clearInterval(this.state.bankNiftyInterval); \r\n    }\r\n\r\n\r\n    refreshCandleChartManually = async (row) => {\r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var time = moment.duration(\"12:00:00\");\r\n        var startdate = moment(new Date()).subtract(time);\r\n\r\n        var data = {\r\n            \"exchange\": \"NSE\",\r\n            \"symboltoken\": row.symboltoken,\r\n            \"interval\": \"FIVE_MINUTE\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n            \"fromdate\": moment(beginningTime).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n            \"todate\": moment(new Date()).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n        }\r\n        AdminService.getHistoryData(data).then(res => {\r\n            let histdata = resolveResponse(res, 'noPop');\r\n            //console.log(\"candle history\", histdata); \r\n            if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                var candleChartData = [];\r\n                histdata.data.forEach(element => {\r\n                    candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                });\r\n\r\n\r\n                localStorage.setItem('candleChangeShow', ((row.ltp - row.close) * 100 / row.close).toFixed(2));\r\n\r\n\r\n                localStorage.setItem('candleChartData', JSON.stringify(candleChartData))\r\n                localStorage.setItem('cadleChartSymbol', row.symbolname);\r\n                document.getElementById('showCandleChart').click();\r\n\r\n            } else {\r\n                //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                console.log(row.symboltoken, \"  emply candle found\");\r\n            }\r\n        }).catch(error => {\r\n            this.setState({ failedCount: this.state.failedCount + 1 });\r\n            Notify.showError(row.symboltoken + \" candle failed!\");\r\n        })\r\n\r\n    }\r\n\r\n    showCandleChart = (candleData, symbol) => {\r\n        candleData = candleData && candleData.reverse();\r\n        localStorage.setItem('candleChartData', JSON.stringify(candleData))\r\n        localStorage.setItem('cadleChartSymbol', symbol)\r\n        document.getElementById('showCandleChart').click();\r\n    }\r\n\r\n    showMultipleCandleChart = (row) => {\r\n        localStorage.setItem('multipleChartData', JSON.stringify(row))\r\n        document.getElementById('showMultipleChart').click();\r\n    }\r\n\r\n    refreshLtpOnFoundPattern = async () => {\r\n\r\n        this.setState({ nr4TotalPer: 0, totalBrokerChargesNR4: 0, totalNetProfit: 0, totelActivatedCount: 0, pnlAmountTotal: 0, perHighLowTotal: 0, netPnLAmountOnHighlowTotal: 0 });\r\n\r\n\r\n        var foundPatternList = this.state.foundPatternList;\r\n\r\n        this.setState({ foundPatternList: [] });\r\n\r\n        var foundPatternsFromStored = localStorage.getItem(\"FoundPatternList\") ? JSON.parse(localStorage.getItem(\"FoundPatternList\")) : [];\r\n\r\n\r\n        //       foundPatternList.forEach(element => {\r\n        for (let index = 0; index < foundPatternsFromStored.length; index++) {\r\n            const element = foundPatternList[index];\r\n\r\n            if (element && element.pattenName == 'NR4') {\r\n\r\n                var data = {\r\n                    \"exchange\": \"NSE\",\r\n                    \"tradingsymbol\": element.symbol,\r\n                    \"symboltoken\": element.token,\r\n                }\r\n\r\n                AdminService.getLTP(data).then(res => {\r\n                    let data = resolveResponse(res, 'noPop');\r\n                    var LtpData = data && data.data;\r\n                    //console.log(LtpData);\r\n                    var quantity = 0, pnlAmount = 0, netPnLAmount = 0, brokerageCharges = 0.06, perChange = 0, perChangeOnHighLow = 0, netPnLAmountOnHighlow = 0;\r\n                    if (LtpData && LtpData.ltp) {\r\n\r\n                        var orderActivated = <span> {LtpData.ltp} </span>;\r\n\r\n                        if (LtpData.ltp > element.BuyAt) {\r\n                            perChange = ((LtpData.ltp - element.BuyAt) * 100 / element.BuyAt);\r\n                            orderActivated = <span style={{ color: 'green' }}> Long: {perChange.toFixed(2)}% </span>;\r\n                            quantity = Math.floor(10000 / element.BuyAt);\r\n                            pnlAmount = ((LtpData.ltp - element.BuyAt) * quantity);\r\n                            brokerageCharges = (((element.BuyAt * quantity) * brokerageCharges / 100) * 2);\r\n                            netPnLAmount = (pnlAmount - brokerageCharges);\r\n                            this.setState({ nr4TotalPer: this.state.nr4TotalPer + perChange });\r\n                            this.setState({ totalBrokerChargesNR4: this.state.totalBrokerChargesNR4 + brokerageCharges, totalNetProfit: this.state.totalNetProfit + netPnLAmount });\r\n                            this.setState({ totelActivatedCount: this.state.totelActivatedCount + 1, pnlAmountTotal: this.state.pnlAmountTotal + pnlAmount });\r\n\r\n                            perChangeOnHighLow = ((LtpData.high - element.BuyAt) * 100 / element.BuyAt);\r\n                            var pnlAmountOnhigh = ((LtpData.high - element.BuyAt) * quantity);\r\n                            netPnLAmountOnHighlow = (pnlAmountOnhigh - brokerageCharges);\r\n                            this.setState({ perHighLowTotal: this.state.perHighLowTotal + perChangeOnHighLow, netPnLAmountOnHighlowTotal: this.state.netPnLAmountOnHighlowTotal + netPnLAmountOnHighlow });\r\n\r\n\r\n                        }\r\n                        if (LtpData.ltp < element.SellAt) {\r\n                            perChange = ((element.SellAt - LtpData.ltp) * 100 / element.SellAt);\r\n                            orderActivated = <span style={{ color: 'red' }}> Short: {perChange.toFixed(2)}%</span>;\r\n                            quantity = Math.floor(10000 / element.SellAt);\r\n                            pnlAmount = ((element.SellAt - LtpData.ltp) * quantity);\r\n                            brokerageCharges = (((element.SellAt * quantity) * brokerageCharges / 100) * 2);\r\n                            netPnLAmount = (pnlAmount - brokerageCharges);\r\n                            this.setState({ nr4TotalPer: this.state.nr4TotalPer + perChange });\r\n                            this.setState({ totelActivatedCount: this.state.totelActivatedCount + 1, pnlAmountTotal: this.state.pnlAmountTotal + pnlAmount });\r\n                            this.setState({ totalBrokerChargesNR4: this.state.totalBrokerChargesNR4 + brokerageCharges, totalNetProfit: this.state.totalNetProfit + netPnLAmount });\r\n\r\n                            perChangeOnHighLow = ((element.SellAt - LtpData.low) * 100 / element.SellAt);\r\n                            var pnlAmountOnLow = ((element.SellAt - LtpData.low) * quantity);\r\n                            netPnLAmountOnHighlow = (pnlAmountOnLow - brokerageCharges);\r\n                            this.setState({ perHighLowTotal: this.state.perHighLowTotal + perChangeOnHighLow, netPnLAmountOnHighlowTotal: this.state.netPnLAmountOnHighlowTotal + netPnLAmountOnHighlow });\r\n\r\n                        }\r\n\r\n                        var todayChange = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;\r\n\r\n\r\n                        var builtupCandle = [new Date(), LtpData.open, LtpData.high, LtpData.low, LtpData.ltp];\r\n                        element.candleChartData.push(builtupCandle);\r\n\r\n                        var foundData = {\r\n                            symbol: element.symbol,\r\n                            symbolUpdated: LtpData.ltp + \"(\" + (todayChange).toFixed(2) + \"%)\",\r\n                            token: element.token,\r\n                            pattenName: 'NR4',\r\n                            OnHighLowActivated: quantity ? perChangeOnHighLow.toFixed(2) + \"% | \" + netPnLAmountOnHighlow.toFixed(2) : \"\",\r\n                            time: new Date().toLocaleTimeString(),\r\n                            BuyAt: element.BuyAt,\r\n                            SellAt: element.SellAt,\r\n                            foundAt: element.foundAt,\r\n                            orderActivated: orderActivated,\r\n                            candleChartData: element.candleChartData,\r\n                            quantity: quantity ? quantity : \"\",\r\n                            brokerageCharges: quantity ? brokerageCharges.toFixed(2) : \"\",\r\n                            pnlAmount: pnlAmount ? pnlAmount.toFixed(2) : \"\",\r\n                            netPnLAmount: netPnLAmount ? netPnLAmount.toFixed(2) : \"\",\r\n                            perChange: perChange,\r\n                            todayChange: todayChange,\r\n                            pastPerferm: element.pastPerferm\r\n                        }\r\n\r\n                        console.log('nr4 updated', foundData);\r\n\r\n                        this.setState({ foundPatternList: [...this.state.foundPatternList, foundData] });\r\n\r\n                        var foundlist = this.state.foundPatternList;\r\n\r\n                        foundlist.sort(function (a, b) {\r\n                            return b.perChange - a.perChange;\r\n                        });\r\n\r\n                        this.setState({ foundPatternList: foundlist });\r\n\r\n                        var foundPatternList = localStorage.getItem(\"foundPatternList\") ? JSON.parse(localStorage.getItem(\"foundPatternList\")) : [];\r\n                        foundPatternList.push(foundData);\r\n                        localStorage.setItem('foundPatternList', JSON.stringify(foundPatternList));\r\n\r\n                    }\r\n\r\n                }).catch(error => {\r\n                    Notify.showError(element.symbol + \" ltd data not found!\");\r\n                })\r\n\r\n            }\r\n            await new Promise(r => setTimeout(r, 101));\r\n        }\r\n    }\r\n\r\n\r\n    getStoplossFromOrderbook = (row) => {\r\n        var oderbookData = localStorage.getItem('oderbookData');\r\n        oderbookData = JSON.parse(oderbookData);\r\n        var stopLoss = 0;\r\n        var data = {};\r\n        for (let index = 0; index < oderbookData.length; index++) {\r\n            const element = oderbookData[index];\r\n\r\n            if (element.status === \"trigger pending\" && element.symboltoken === row.symboltoken) {\r\n                if (row.netqty > 0) {\r\n                    data.stopLoss = element.triggerprice + \"(\" + ((element.triggerprice - row.buyavgprice) * 100 / row.buyavgprice).toFixed(2) + \"%)\";\r\n                    data.maxLossAmount = ((element.triggerprice - row.buyavgprice) * parseInt(row.netqty)).toFixed(2);\r\n                } else if (row.netqty < 0) {\r\n                    console.log(row.tradingsymbol, \"sellage\", row.sellavgprice, \"trigger\", element.triggerprice);\r\n                    data.stopLoss = element.triggerprice + \"(\" + ((element.triggerprice - row.sellavgprice) * 100 / row.sellavgprice).toFixed(2) + \"%)\";\r\n                    data.maxLossAmount = ((element.triggerprice - row.sellavgprice) * parseInt(row.netqty)).toFixed(2);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return data;\r\n    }\r\n    getStoplossForSELLFromOrderbook = (row) => {\r\n        var oderbookData = localStorage.getItem('oderbookData');\r\n        oderbookData = JSON.parse(oderbookData);\r\n        var stopLoss = 0;\r\n        var data = {};\r\n        oderbookData.forEach(element => {\r\n            if (element.status === \"trigger pending\" && element.symboltoken === row.symboltoken) {\r\n                data.stopLoss = element.triggerprice + \"(\" + ((row.buyavgprice - element.triggerprice) * 100 / row.buyavgprice).toFixed(2) + \"%)\";\r\n                data.maxLossAmount = ((element.triggerprice - row.buyavgprice) * parseInt(row.netqty)).toFixed(2);\r\n            }\r\n        });\r\n        return data;\r\n    }\r\n    getHighLowPercentage = async () => {\r\n\r\n        this.setState({ showHighLowWisePer: true });\r\n\r\n        if (!this.state.positionList.length) {\r\n            Notify.showError(\"First Refresh Position\")\r\n        }\r\n\r\n        for (let index = 0; index < this.state.positionList.length; index++) {\r\n            const element = this.state.positionList[index];\r\n\r\n            if (element.producttype == \"DELIVERY\") {\r\n                return \"\";\r\n            }\r\n\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"tradingsymbol\": element.tradingsymbol,\r\n                \"symboltoken\": element.symboltoken,\r\n            }\r\n            AdminService.getLTP(data).then(res => {\r\n                let data = resolveResponse(res, 'noPop');\r\n                var LtpData = data && data.data;\r\n                //console.log(LtpData);\r\n                if (LtpData && LtpData.ltp) {\r\n                    this.state.positionList[index].high = LtpData.high;\r\n                    this.state.positionList[index].low = LtpData.low;\r\n                }\r\n            })\r\n            await new Promise(r => setTimeout(r, 125));\r\n            this.setState({ positionList: this.state.positionList });\r\n\r\n        }\r\n\r\n    }\r\n    tagPatternWhichTaken = (token) => {\r\n        var orderTagToPosition = localStorage.getItem('orderTagToPosition') && JSON.parse(localStorage.getItem('orderTagToPosition')) || [];\r\n\r\n        var pattern = '';\r\n        for (let index = 0; index < orderTagToPosition.length; index++) {\r\n            const element = orderTagToPosition[index];\r\n            if (token == element.token) {\r\n                pattern = element.pattenName;\r\n                break;\r\n            }\r\n        }\r\n        return pattern\r\n        //    console.log(\"findpatter\", token, orderTagToPosition);\r\n        //    orderTagToPosition.forEach(element => {\r\n        //         if(token == element.token){\r\n        //             return element.pattenName; \r\n        //         }\r\n        //    });\r\n\r\n    }\r\n    calculateTradeExpence = (element) => {\r\n\r\n        var totalbuyvalue = parseFloat(element.totalbuyvalue) === 0 ? parseFloat(element.totalsellvalue) : parseFloat(element.totalbuyvalue);\r\n        var buyCharge = parseFloat(totalbuyvalue) * 0.25 / 100;\r\n        if (buyCharge > 20 || (element.optiontype == 'CE' || element.optiontype == 'PE')) {\r\n            buyCharge = 20;\r\n        }\r\n        var totalsellvalue = parseFloat(element.totalsellvalue) === 0 ? parseFloat(element.totalbuyvalue) : parseFloat(element.totalsellvalue);\r\n        var sellCharge = parseFloat(totalsellvalue) * 0.25 / 100;\r\n        if (sellCharge > 20 || (element.optiontype == 'CE' || element.optiontype == 'PE')) {\r\n            sellCharge = 20;\r\n        }\r\n        let turnOver = totalbuyvalue + totalsellvalue;\r\n        let totalBroker = buyCharge + sellCharge;\r\n\r\n        let sst = 0.025; //stock intraday\r\n        if (element.optiontype == 'CE' || element.optiontype == 'PE') {\r\n            sst = 0.05;\r\n        }\r\n\r\n        let sstCharge = totalsellvalue * sst / 100;\r\n        let transCharge = turnOver * 0.00335 / 100;\r\n        let stampDuty = totalbuyvalue * 0.003 / 100;\r\n        let sebiCharge = turnOver * 10 / 10000000;\r\n        let gstCharge = (totalBroker + transCharge + sebiCharge) * 18 / 100;\r\n\r\n        let total = totalBroker + sstCharge + transCharge + stampDuty + sebiCharge + gstCharge;\r\n\r\n        var chargeInfo = {\r\n            tradeExpence: total,\r\n            expenceInfo: \"Brokerage: \" + totalBroker.toFixed(2) + \" \\nSTT: \" + sstCharge.toFixed(2) + \" \\nTransaction: \" + transCharge.toFixed(2) + \" \\nStamp Duty: \" + stampDuty.toFixed(2) + \" \\nSebi: \" + sebiCharge.toFixed(2) + \" \\nGST: \" + gstCharge.toFixed(2) + \" \\n\\nTotal: \" + total.toFixed(2)\r\n        }\r\n        return chargeInfo;\r\n    }\r\n    refreshBasedAmount = () => {\r\n        let totCheckAmount = 0, checkTotalNet = 0, totCheckExp = 0;\r\n        this.state.positionList.forEach((item) => {\r\n\r\n            let perchange = this.state.checkAmountPer ? this.state.checkAmountPer : item.percentPnL;\r\n            item.checkAmount = (this.state.checkAmount * perchange / 100).toFixed(2)\r\n            totCheckAmount = totCheckAmount + parseFloat(item.checkAmount);\r\n\r\n            let quantity = Math.floor(this.state.checkAmount / item.buyavgprice);\r\n            item.checkQty = quantity;\r\n            item.totalbuyvalue = quantity * item.buyavgprice;\r\n            item.totalsellvalue = quantity * item.sellavgprice;\r\n            item.checkExpence = this.calculateTradeExpence(item);\r\n            if (item.checkExpence) {\r\n                item.checkNet = (item.checkAmount - item.checkExpence.tradeExpence)\r\n                totCheckExp = totCheckExp + item.checkExpence.tradeExpence;\r\n                checkTotalNet = checkTotalNet + parseFloat(item.checkNet);\r\n            }\r\n            console.log(item)\r\n\r\n        })\r\n        this.setState({ totCheckAmount: totCheckAmount.toFixed(2), checkTotalNet: checkTotalNet.toFixed(2), totCheckExp: totCheckExp.toFixed(2), positionList: this.state.positionList });\r\n    }\r\n\r\n    checkSLOrTarget = (row) => {\r\n        let trackSLPrice = localStorage.getItem('trackSLPrice') ? JSON.parse(localStorage.getItem('trackSLPrice')) : [];\r\n        if (trackSLPrice.length > 0) {\r\n            for (let index = 0; index < trackSLPrice.length; index++) {\r\n                const element = trackSLPrice[index];\r\n\r\n                if (element.optiontype == 'EQ' || element.optiontype == '') {\r\n                    if (element.tradingsymbol == row.tradingsymbol && (row.ltp < parseFloat(element.priceStopLoss) || row.ltp >= parseFloat(element.priceTarget))) {\r\n                        this.squareOff(row);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    getPositionData = async () => {\r\n        //   document.getElementById('orderRefresh') && document.getElementById('orderRefresh').click(); \r\n        var maxPnL = 0, totalMaxPnL = 0;\r\n        var trackSLPriceList = localStorage.getItem('trackSLPrice') ? JSON.parse(localStorage.getItem('trackSLPrice')) : [];\r\n\r\n        AdminService.getPosition().then(res => {\r\n            let data = resolveResponse(res, 'noPop');\r\n            var positionList = data && data.data;\r\n            if (positionList && positionList.length > 0) {\r\n\r\n\r\n                var todayProfitPnL = 0, totalbuyvalue = 0, totalsellvalue = 0, totalQtyTraded = 0, allbuyavgprice = 0, allsellavgprice = 0, totalPercentage = 0, totalExpence = 0;\r\n\r\n                let tradingPositionlist = [];\r\n                for (let index = 0; index < positionList.length; index++) {\r\n                    const element = positionList[index];\r\n                    // if (element.netqty < 0) {\r\n                    //     continue;\r\n                    // }\r\n                    tradingPositionlist.push(element);\r\n\r\n                    todayProfitPnL += parseFloat(element.pnl);\r\n                    totalbuyvalue += parseFloat(element.totalbuyvalue);\r\n                    totalsellvalue += parseFloat(element.totalsellvalue) === 0 ? parseFloat(element.totalbuyvalue) : parseFloat(element.totalsellvalue);\r\n                    totalQtyTraded += parseInt(element.buyqty);\r\n                    allbuyavgprice += parseFloat(element.buyavgprice);\r\n                    allsellavgprice += parseFloat(element.sellavgprice);\r\n                    if (element.netqty == 0) {\r\n                        let percentPnL = ((parseFloat(element.sellavgprice) - parseFloat(element.buyavgprice)) * 100 / parseFloat(element.buyavgprice));\r\n                        element.percentPnL = percentPnL.toFixed(2);\r\n                        totalPercentage += parseFloat(percentPnL);\r\n\r\n                        localStorage.removeItem('firstTimeModify' + element.tradingsymbol)\r\n                        localStorage.removeItem('lastTriggerprice_' + element.tradingsymbol)\r\n                    }\r\n\r\n                    element.pattenName = this.tagPatternWhichTaken(element.symboltoken);\r\n\r\n                    let chargeInfo = this.calculateTradeExpence(element);\r\n                    element.tradeExpence = chargeInfo.tradeExpence.toFixed(2);\r\n                    element.expenceInfo = chargeInfo.expenceInfo;\r\n                    totalExpence += chargeInfo.tradeExpence;\r\n\r\n                    var slData = this.getStoplossFromOrderbook(element);\r\n                    if (slData) {\r\n                        element.stopLoss = slData.stopLoss;\r\n                        element.stopLossAmount = slData.maxLossAmount;\r\n                        totalMaxPnL += parseFloat(slData.maxLossAmount) ? parseFloat(slData.maxLossAmount) : 0;\r\n                    }\r\n\r\n                    this.checkSLOrTarget(element);\r\n\r\n                    if ((element.optiontype == 'CE' || element.optiontype == 'PE') && element.netqty > 0) {\r\n                        let found = this.state.activeStockOptions.filter(name => name.name == element.symbolname);\r\n                        element.optionStockName = element.symbolname;\r\n                        element.optiontype = element.optiontype;\r\n\r\n                        let spotDetails = CommonMethods.getStockTokenDetails(element.symbolname);\r\n                        spotDetails.optiontype = element.optiontype;\r\n                        spotDetails.netqty = element.netqty;\r\n                        spotDetails.tradingsymbol = element.tradingsymbol;\r\n\r\n                        if (found[0]) {\r\n                            element.optionStockLtp = found[0] && found[0].ltp;\r\n                            element.optionStockChange = found[0] && found[0].perChange;\r\n                        }else{\r\n                            this.setState({ activeStockOptions: [...this.state.activeStockOptions, spotDetails] })\r\n                        }\r\n                    }\r\n                }\r\n\r\n                this.setState({ todayProfitPnL: todayProfitPnL.toFixed(2), totalbuyvalue: totalbuyvalue.toFixed(2), totalsellvalue: totalsellvalue.toFixed(2), totalQtyTraded: totalQtyTraded });\r\n                this.setState({ allbuyavgprice: (allbuyavgprice / positionList.length).toFixed(2), allsellavgprice: (allsellavgprice / positionList.length).toFixed(2), totalPercentage: totalPercentage });\r\n\r\n                var brokerageOnlyCharges = ((totalbuyvalue + totalsellvalue) * 0.25 / 100);\r\n                var allCharges = brokerageOnlyCharges + brokerageOnlyCharges * 25 / 100;\r\n                this.setState({ totalExpence: totalExpence.toFixed(2) });\r\n\r\n                this.setState({ totalTornOver: (totalbuyvalue + totalsellvalue).toFixed(2), totalMaxPnL: totalMaxPnL.toFixed(2) });\r\n\r\n                tradingPositionlist.sort((a, b) => b.netqty - a.netqty);\r\n\r\n                this.setState({ positionList: tradingPositionlist });\r\n\r\n               // this.getOptionStockLiveLtp();\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        var data = e.target.value;\r\n        AdminService.autoCompleteSearch(data).then(res => {\r\n            let data = res.data;\r\n            //    console.log(data);       \r\n            localStorage.setItem('autoSearchTemp', JSON.stringify(data));\r\n            this.setState({ autoSearchList: data });\r\n        })\r\n    }\r\n\r\n    optionStockStoplossChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        for (let index = 0; index < this.state.activeStockOptions.length; index++) {\r\n            const element = this.state.activeStockOptions[index];\r\n            if (e.target.name === element.name) {\r\n                element.optionStockStoploss = e.target.value;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    optionStockTargetChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        for (let index = 0; index < this.state.activeStockOptions.length; index++) {\r\n            const element = this.state.activeStockOptions[index];\r\n            if (e.target.name === element.name) {\r\n                element.optionStockTarget = e.target.value;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    onTrailChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        //  console.log([e.target.name],  e.target.value)\r\n    }\r\n\r\n    onAddSLChange = (e) => {\r\n        let addSLInfo = this.state.addSLInfo;\r\n        addSLInfo[e.target.name] = e.target.value.toUpperCase();\r\n        this.setState({ addSLInfo: addSLInfo });\r\n    }\r\n\r\n    deleteOptionPriceSL = (element, deleteindex) => {\r\n        for (let indexP = 0; indexP < this.state.positionList.length; indexP++) {\r\n            const position = this.state.positionList[indexP];\r\n            console.log(\"squireoffff\", position.tradingsymbol, element.tradingsymbol, position.buyqty)\r\n\r\n            if (position.tradingsymbol == element.tradingsymbol && position.buyqty > 0) {\r\n\r\n                var trackSLPriceList = localStorage.getItem('trackSLPrice') && JSON.parse(localStorage.getItem('trackSLPrice'));\r\n                if (trackSLPriceList && trackSLPriceList.length > 0) {\r\n                    trackSLPriceList.splice(deleteindex, 1);\r\n                    localStorage.setItem('trackSLPrice', JSON.stringify(trackSLPriceList));\r\n                    this.setState({ trackSLPrice: trackSLPriceList }, () => {\r\n                        this.squareOff(position, true);\r\n                    });\r\n                    break;\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    deleteIndexOption = (element, deleteindex) => {\r\n        for (let indexP = 0; indexP < this.state.positionList.length; indexP++) {\r\n            const position = this.state.positionList[indexP];\r\n\r\n            if (position.tradingsymbol == element.tradingsymbol && position.netqty > 0) {\r\n                \r\n                if (this.state.activeStockOptions && this.state.activeStockOptions.length > 0) {\r\n                    this.state.activeStockOptions.splice(deleteindex, 1);\r\n                    this.setState({ activeStockOptions: this.state.activeStockOptions }, () => {\r\n                        this.squareOff(position, true);\r\n                    });\r\n                    break;\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    getNiftyLTP = () => {\r\n        var data = {\r\n            \"exchange\": \"NSE\",\r\n            \"tradingsymbol\": \"NIFTY\",\r\n            \"symboltoken\": \"26000\",\r\n        }\r\n        AdminService.getLTP(data).then(res => {\r\n            let data = resolveResponse(res, 'noPop');\r\n            var LtpData = data && data.data;\r\n            //console.log(LtpData);\r\n            if (LtpData && LtpData.ltp) {\r\n                let per = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;\r\n                if (document.getElementById('niftySpid')) {\r\n                   document.getElementById('niftySpid').innerHTML = \"<span style='color:red'> Nifty \" + LtpData.ltp.toFixed(2) + ' (' + (per).toFixed(2) + '%)</span>';\r\n                }\r\n            }\r\n\r\n            let trackSLPrice = localStorage.getItem('trackSLPrice') ? JSON.parse(localStorage.getItem('trackSLPrice')) : [];\r\n\r\n            if (trackSLPrice.length > 0) {\r\n                for (let index = 0; index < trackSLPrice.length; index++) {\r\n                    const element = trackSLPrice[index];\r\n                    console.log(\"this.state.trackSLPrice\", element)\r\n\r\n                    if (element.name == 'NIFTY' && element.optiontype == 'CE' && ((LtpData.ltp < element.priceStopLoss) || (LtpData.ltp >= element.priceTarget))) {\r\n                        //delete sloption &  trigeer squireoff  \r\n                        console.log(\"deleteOptionPriceSL call sl \", element, index)\r\n\r\n                        this.deleteOptionPriceSL(element, index);\r\n                    }\r\n                    if (element.name == 'NIFTY' && element.optiontype == 'PE' && ((LtpData.ltp > element.priceStopLoss) || (LtpData.ltp <= element.priceTarget))) {\r\n                        //delete sloption &  trigeer sl  \r\n                        console.log(\"deleteOptionPriceSL put sl \", element, index)\r\n\r\n                        this.deleteOptionPriceSL(element);\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        })\r\n    }\r\n\r\n\r\n    getBankNiftyLTP = () => {\r\n        var data = {\r\n            \"exchange\": \"NSE\",\r\n            \"tradingsymbol\": \"BANKNIFTY\",\r\n            \"symboltoken\": \"26009\",\r\n        }\r\n        AdminService.getLTP(data).then(res => {\r\n            let data = resolveResponse(res, 'noPop');\r\n            var LtpData = data && data.data;\r\n            //console.log(LtpData);\r\n            if (LtpData && LtpData.ltp) {\r\n                let per = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;\r\n                if (document.getElementById('bankniftySpid')) {\r\n                    if (per > 0)\r\n                        document.getElementById('bankniftySpid').innerHTML = \"<span style='color:green'> Banknifty \" + LtpData.ltp.toFixed(2) + ' (' + (per).toFixed(2) + '%)</span>';\r\n                    else\r\n                        document.getElementById('bankniftySpid').innerHTML = \"<span style='color:red'> Banknifty \" + LtpData.ltp.toFixed(2) + ' (' + (per).toFixed(2) + '%)</span>';\r\n                }\r\n            }\r\n            let trackSLPrice = localStorage.getItem('trackSLPrice') ? JSON.parse(localStorage.getItem('trackSLPrice')) : [];\r\n            if (trackSLPrice.length > 0) {\r\n                for (let index = 0; index < trackSLPrice.length; index++) {\r\n                    const element = trackSLPrice[index];\r\n                    if (element.name == 'BANKNIFTY' && element.optiontype == 'CE' && ((LtpData.ltp < element.priceStopLoss) || (LtpData.ltp >= element.priceTarget))) {\r\n                        //delete sloption &  trigeer sl    \r\n                        this.deleteOptionPriceSL(element, index);\r\n                    }\r\n                    if (element.name == 'BANKNIFTY' && element.optiontype == 'PE' && ((LtpData.ltp > element.priceStopLoss) || (LtpData.ltp <= element.priceTarget))) {\r\n                        //delete sloption &  trigeer sl    \r\n                        this.deleteOptionPriceSL(element, index);\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    getBankNiftyLiveLtp = (LtpData) => {\r\n    \r\n        // symbolListArray[index].tvalue = foundLive[0].tvalue;\r\n        // symbolListArray[index].cng = foundLive[0].cng;\r\n        // symbolListArray[index].iv = foundLive[0].iv;\r\n        // symbolListArray[index].tk = foundLive[0].tk;\r\n        // symbolListArray[index].nc = foundLive[0].nc;   \r\n\r\n        if (LtpData && LtpData.iv) {\r\n            let per = LtpData.nc;\r\n\r\n            \r\n            if (document.getElementById('bankniftySpid')) {\r\n                if (per > 0)\r\n                    document.getElementById('bankniftySpid').innerHTML = \"<span style='color:green'> Banknifty \" + LtpData.iv+ ' (' + (per) + '%)</span> '+ '<span>  '+ LtpData.cng+ '</span> ' + moment(LtpData.tvalue).format('h:mm:ss A');\r\n                else\r\n                    document.getElementById('bankniftySpid').innerHTML = \"<span style='color:red'> Banknifty \" + LtpData.iv+ ' (' + (per) + '%)</span> ' + '<span> '+ LtpData.cng+ ' </span> ' + moment(LtpData.tvalue).format('h:mm:ss A');\r\n            }\r\n        }\r\n\r\n        console.log('this.state.activeStockOptions', this.state.activeStockOptions)\r\n        if (this.state.activeStockOptions.length > 0) {\r\n            for (let index = 0; index < this.state.activeStockOptions.length; index++) {\r\n                const element = this.state.activeStockOptions[index];\r\n                if (element.name == 'BANKNIFTY' && element.optiontype == 'CE' && element.netqty > 0 && ((LtpData.iv < element.optionStockStoploss) || (LtpData.iv >= element.optionStockTarget))) {\r\n                    //delete sloption &  trigeer sl    \r\n                    this.deleteIndexOption(element, index);\r\n                }\r\n                if (element.name == 'BANKNIFTY' && element.optiontype == 'PE' && element.netqty > 0 && ((LtpData.iv > element.optionStockStoploss) || (LtpData.iv <= element.optionStockTarget))) {\r\n                    //delete sloption &  trigeer sl    \r\n                    this.deleteIndexOption(element, index);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    placeOrderMethod = (orderOption) => {\r\n\r\n        var data = {\r\n            \"transactiontype\": orderOption.transactiontype,//BUY OR SELL\r\n            \"tradingsymbol\": orderOption.tradingsymbol,\r\n            \"symboltoken\": orderOption.symboltoken,\r\n            \"quantity\": orderOption.quantity,\r\n            \"ordertype\": orderOption.buyPrice === 0 ? \"MARKET\" : \"LIMIT\",\r\n            \"price\": orderOption.buyPrice,\r\n            \"producttype\": \"INTRADAY\",//\"DELIVERY\",\r\n            \"duration\": \"DAY\",\r\n            \"squareoff\": \"0\",\r\n            \"stoploss\": \"0\",\r\n            \"exchange\": \"NSE\",\r\n            \"variety\": \"NORMAL\"\r\n        }\r\n        console.log(\"place order option\", data);\r\n        AdminService.placeOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n            //  console.log(data);   \r\n            if (data.status && data.message === 'SUCCESS') {\r\n                this.setState({ orderid: data.data && data.data.orderid });\r\n                if (orderOption.stopLossPrice) {\r\n                    this.placeSLMOrder(orderOption);\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    cancelOrderOfSame = (row) => {\r\n\r\n        var orderData = this.getOpenPeningOrderId(row.symboltoken);\r\n        var data = {\r\n            \"variety\": orderData.variety,\r\n            \"orderid\": orderData.orderId,\r\n        }\r\n        AdminService.cancelOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n            if (data.status && data.message === 'SUCCESS') {\r\n                console.log(\"cancel order\", data);\r\n                //this.deleteOptionPriceSL(row);\r\n                // this.setState({ orderid : data.data && data.data.orderid });\r\n            }\r\n        })\r\n\r\n    }\r\n\r\n    squareOff = (row, marketOrder) => {\r\n        this.cancelOrderOfSame(row);\r\n\r\n        let price = 0;\r\n        var data = {\r\n            \"variety\": \"NORMAL\",\r\n            \"tradingsymbol\": row.tradingsymbol,\r\n            \"symboltoken\": row.symboltoken,\r\n            \"transactiontype\": row.netqty > 0 ? 'SELL' : \"BUY\",\r\n            \"exchange\": row.exchange,\r\n            \"ordertype\": marketOrder ? \"MARKET\" : \"LIMIT\",\r\n            \"producttype\": row.producttype, //\"DELIVERY\",//\"DELIVERY\",\r\n            \"duration\": \"DAY\",\r\n            \"price\": price,\r\n            \"squareoff\": \"0\",\r\n            \"stoploss\": \"0\",\r\n            \"quantity\": Math.abs(row.netqty),\r\n        }\r\n\r\n        if (marketOrder) {\r\n            data.price = 0;\r\n        }\r\n\r\n        if (row.instrumenttype == \"OPTSTK\" && (row.optiontype == \"PE\" || row.optiontype == \"CE\")) {\r\n            data.price = CommonOrderMethod.getMinPriceAllowTick(row.ltp - (row.ltp * 0.5 / 100));\r\n            data.triggerprice = CommonOrderMethod.getMinPriceAllowTick(row.ltp - (row.ltp * 0.1 / 100));\r\n        }\r\n\r\n        AdminService.placeOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n            //  console.log(\"squireoff\", data);\r\n            if (data.status && data.message === 'SUCCESS') {\r\n                this.setState({ orderid: data.data && data.data.orderid });\r\n                document.getElementById('orderRefresh') && document.getElementById('orderRefresh').click();\r\n            }\r\n        })\r\n\r\n    }\r\n    updateOrderList = () => {\r\n        AdminService.retrieveOrderBook()\r\n            .then((res) => {\r\n                let data = resolveResponse(res);\r\n                if (data && data.data) {\r\n                    var orderlist = data.data;\r\n                    orderlist.sort(function (a, b) {\r\n                        return new Date(b.updatetime) - new Date(a.updatetime);\r\n                    });\r\n                    localStorage.setItem('oderbookData', JSON.stringify(orderlist));\r\n                }\r\n            });\r\n    }\r\n\r\n    addSLOrderInfo = (row) => {\r\n        this.setState({ addSLInfo: row, enableSLMOrderUi: true });\r\n    }\r\n    placeSLMOrderManually = () => {\r\n        // this.placeSLMOrder(this.state.addSLInfo); \r\n        this.state.addSLInfo.netqty = Math.abs(this.state.addSLInfo.netqty);\r\n        console.log(\"addSLInfo\", this.state.addSLInfo)\r\n        CommonMethods.placeOptionSLMOrder(this.state.addSLInfo)\r\n    }\r\n    placeSLMOrder = (slmOption) => {\r\n\r\n        var data = {\r\n            \"triggerprice\": slmOption.stopLossPrice,\r\n            \"tradingsymbol\": slmOption.tradingsymbol,\r\n            \"symboltoken\": slmOption.symboltoken,\r\n            \"quantity\": slmOption.quantity,\r\n            \"transactiontype\": slmOption.transactiontype === \"BUY\" ? \"SELL\" : \"BUY\",\r\n            \"exchange\": slmOption.exchange ? slmOption.exchange : 'NSE',\r\n            \"producttype\": slmOption.producttype ? slmOption.producttype : \"INTRADAY\",//\"DELIVERY\",\r\n            \"duration\": \"DAY\",\r\n            \"price\": slmOption.price ? slmOption.price : 0,\r\n            \"squareoff\": \"0\",\r\n            \"stoploss\": \"0\",\r\n            \"ordertype\": \"STOPLOSS_MARKET\", //STOPLOSS_MARKET STOPLOSS_LIMIT\r\n            \"variety\": \"STOPLOSS\"\r\n        }\r\n        console.log(\"SLM option data\", data);\r\n        AdminService.placeOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n            //  console.log(data);   \r\n            if (data.status && data.message === 'SUCCESS') {\r\n                this.setState({ orderid: data.data && data.data.orderid });\r\n                this.updateOrderList();\r\n                var msg = new SpeechSynthesisUtterance();\r\n                msg.text = (slmOption.tradingsymbol + \" \" + slmOption.transactiontype).toLocaleLowerCase();\r\n                window.speechSynthesis.speak(msg);\r\n\r\n                document.getElementById('orderRefresh') && document.getElementById('orderRefresh').click();\r\n            }\r\n        })\r\n    }\r\n\r\n    getOpenPeningOrderId = (symboltoken) => {\r\n\r\n        var oderbookData = localStorage.getItem('oderbookData') && JSON.parse(localStorage.getItem('oderbookData'));\r\n        var data = {};\r\n        for (let index = 0; index < oderbookData.length; index++) {\r\n            if (oderbookData[index].symboltoken === symboltoken && oderbookData[index].variety === \"STOPLOSS\") {\r\n                data.orderId = oderbookData[index].orderid\r\n                data.variety = oderbookData[index].variety\r\n                break;\r\n            }\r\n        }\r\n        return data;\r\n    }\r\n\r\n    modifyOrderMethod = (row, minTriggerPrice, minSLPrice) => {\r\n        var orderData = this.getOpenPeningOrderId(row.symboltoken);\r\n\r\n        if (!orderData.orderId) {\r\n            row.stopLossPrice = minTriggerPrice;\r\n            row.price = minSLPrice;\r\n            row.quantity = Math.abs(row.netqty);\r\n            if (row.optiontype == \"CE\" || row.optiontype == \"PE\") {\r\n                row.transactiontype = \"BUY\";\r\n            } else {\r\n                row.transactiontype = row.netqty > 0 ? \"BUY\" : \"SELL\";\r\n            }\r\n            this.placeSLMOrder(row);\r\n        }\r\n\r\n        var data = {\r\n            \"variety\": orderData.variety,\r\n            \"orderid\": orderData.orderId,\r\n            \"ordertype\": \"STOPLOSS_MARKET\",   // \"STOPLOSS_LIMIT\",\r\n            \"producttype\": row.producttype, //\"DELIVERY\",\r\n            \"duration\": \"DAY\",\r\n            \"price\": minSLPrice ? parseFloat(minSLPrice) : 0,\r\n            \"triggerprice\": parseFloat(minTriggerPrice),\r\n            \"quantity\": Math.abs(row.netqty),\r\n            \"tradingsymbol\": row.tradingsymbol,\r\n            \"symboltoken\": row.symboltoken,\r\n            \"exchange\": row.exchange\r\n        }\r\n        AdminService.modifyOrder(data).then(res => {\r\n            let data = resolveResponse(res, \"noPop\");\r\n\r\n            var msg = new SpeechSynthesisUtterance();\r\n\r\n\r\n            if (data.status && data.message === 'SUCCESS') {\r\n                //  this.setState({ ['lastTriggerprice_' + row.tradingsymbol]:  parseFloat(minPrice)})\r\n                msg.text = row.symbolname + ' trailed '.toLocaleLowerCase(); //+ data.message;\r\n                window.speechSynthesis.speak(msg);\r\n                localStorage.setItem('firstTimeModify' + row.tradingsymbol, 'No');\r\n                localStorage.setItem('lastTriggerprice_' + row.tradingsymbol, parseFloat(minTriggerPrice));\r\n                document.getElementById('orderRefresh') && document.getElementById('orderRefresh').click();\r\n\r\n            }\r\n        })\r\n    }\r\n    getMinPriceAllowTick = (minPrice) => {\r\n        minPrice = minPrice.toFixed(2);\r\n        // console.log(\"minPrice\",minPrice); \r\n        var wholenumber = parseInt(minPrice.split('.')[0]);\r\n        //  console.log(\"wholenumber\",wholenumber); \r\n        var decimal = parseFloat(minPrice.split('.')[1]);\r\n        // console.log(\"decimal\",decimal); \r\n        var tickedecimal = decimal - decimal % 5;\r\n        minPrice = parseFloat(wholenumber + '.' + tickedecimal);\r\n        //   console.log(\"minPricexxxx\",minPrice); \r\n        return minPrice;\r\n    }\r\n\r\n    get2DecimalNumber = (number) => {\r\n        number = parseFloat(number);\r\n        if (number) {\r\n            return number.toFixed(2);\r\n        } else {\r\n            return number;\r\n        }\r\n    }\r\n\r\n    getSLAndTriggerPrice = (price) => {\r\n        let minTriggerPrice = this.getMinPriceAllowTick(price);\r\n\r\n        var minSLPrice = minTriggerPrice - (minTriggerPrice * 1 / 100);\r\n        minSLPrice = this.getMinPriceAllowTick(minSLPrice);\r\n\r\n        let slPriceData = {\r\n            minTriggerPrice: minTriggerPrice,\r\n            minSLPrice: minSLPrice\r\n        }\r\n        return slPriceData;\r\n    }\r\n    getOptionPercentage = (row) => {\r\n\r\n        var percentChange = 0, trailPerChange = 0;\r\n\r\n        row.buyavgprice = parseFloat(row.buyavgprice);\r\n        percentChange = ((row.ltp - row.buyavgprice) * 100 / row.buyavgprice);\r\n        if (!localStorage.getItem('firstTimeModify' + row.tradingsymbol) && percentChange >= this.state.firstTimeMoveOption) {\r\n\r\n            var minTriggerPrice = row.buyavgprice + (row.buyavgprice * this.state.firstTimeSLMoveOption / 100);\r\n            let slPriceData = this.getSLAndTriggerPrice(minTriggerPrice);\r\n\r\n            if (localStorage.getItem('lastTriggerprice_' + row.tradingsymbol) != slPriceData.minTriggerPrice) {\r\n                this.modifyOrderMethod(row, slPriceData.minTriggerPrice, slPriceData.minSLPrice);\r\n            }\r\n\r\n        } else {\r\n            var lastTriggerprice = parseFloat(localStorage.getItem('lastTriggerprice_' + row.tradingsymbol));\r\n            var perchngfromTriggerPrice = ((row.ltp - lastTriggerprice) * 100 / lastTriggerprice);\r\n            trailPerChange = perchngfromTriggerPrice;\r\n            if (perchngfromTriggerPrice >= this.state.nextTimeMoveOption) {\r\n                minTriggerPrice = lastTriggerprice + (lastTriggerprice * this.state.nextTimeSLMoveOption / 100);\r\n                let slPriceData = this.getSLAndTriggerPrice(minTriggerPrice);\r\n\r\n                if (localStorage.getItem('lastTriggerprice_' + row.tradingsymbol) != slPriceData.minTriggerPrice) {\r\n                    this.modifyOrderMethod(row, slPriceData.minTriggerPrice, slPriceData.minSLPrice);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!trailPerChange) {\r\n            return percentChange.toFixed(2) + \"%\";\r\n        } else {\r\n            return percentChange.toFixed(2) + \"% | Trailing \" + trailPerChange.toFixed(2) + \"%\";\r\n        }\r\n\r\n    }\r\n\r\n    getPercentage = (row) => {\r\n\r\n        var percentChange = 0, trailPerChange = 0;\r\n        if (row.netqty > 0) {\r\n            row.buyavgprice = parseFloat(row.buyavgprice);\r\n            percentChange = ((row.ltp - row.buyavgprice) * 100 / row.buyavgprice);\r\n            if (!localStorage.getItem('firstTimeModify' + row.tradingsymbol) && percentChange >= this.state.firstTimeMove) {\r\n                var minPrice = row.buyavgprice + (row.buyavgprice * this.state.firstTimeSLMove / 100);\r\n                minPrice = this.getMinPriceAllowTick(minPrice);\r\n                if (localStorage.getItem('lastTriggerprice_' + row.tradingsymbol) != minPrice) {\r\n                    this.modifyOrderMethod(row, minPrice);\r\n                }\r\n            } else {\r\n                var lastTriggerprice = parseFloat(localStorage.getItem('lastTriggerprice_' + row.tradingsymbol));\r\n                var perchngfromTriggerPrice = ((row.ltp - lastTriggerprice) * 100 / lastTriggerprice);\r\n                trailPerChange = perchngfromTriggerPrice;\r\n                if (perchngfromTriggerPrice >= this.state.nextTimeMove) {\r\n                    minPrice = lastTriggerprice + (lastTriggerprice * this.state.nextTimeSLMove / 100);\r\n                    minPrice = this.getMinPriceAllowTick(minPrice);\r\n                    if (localStorage.getItem('lastTriggerprice_' + row.tradingsymbol) != minPrice) {\r\n                        this.modifyOrderMethod(row, minPrice);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (row.netqty < 0) {\r\n\r\n            row.sellavgprice = parseFloat(row.sellavgprice);\r\n            percentChange = ((row.ltp - row.sellavgprice) * 100 / row.sellavgprice);\r\n            if (!localStorage.getItem('firstTimeModify' + row.tradingsymbol) && percentChange <= -Math.abs(this.state.firstTimeMove)) {\r\n                var minPrice = row.sellavgprice - (row.sellavgprice * this.state.firstTimeSLMove / 100);\r\n                minPrice = this.getMinPriceAllowTick(minPrice);\r\n                // if(localStorage.getItem('lastTriggerprice_' + row.tradingsymbol) != minPrice){\r\n                //     this.modifyOrderMethod(row, minPrice);\r\n                // }\r\n                this.modifyOrderMethod(row, minPrice);\r\n            } else {\r\n                var lastTriggerprice = parseFloat(localStorage.getItem('lastTriggerprice_' + row.tradingsymbol));\r\n                var perchngfromTriggerPrice = ((row.ltp - lastTriggerprice) * 100 / lastTriggerprice);\r\n                trailPerChange = perchngfromTriggerPrice;\r\n                console.log(\"perchngfromTriggerPrice\", row.tradingsymbol, perchngfromTriggerPrice);\r\n                if (perchngfromTriggerPrice <= -Math.abs(this.state.nextTimeMove)) {\r\n                    minPrice = lastTriggerprice - (lastTriggerprice * this.state.nextTimeSLMove / 100);\r\n                    minPrice = this.getMinPriceAllowTick(minPrice);\r\n                    // if(localStorage.getItem('lastTriggerprice_' + row.tradingsymbol) != minPrice){\r\n                    //     this.modifyOrderMethod(row, minPrice);\r\n                    // }\r\n                    this.modifyOrderMethod(row, minPrice);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!trailPerChange) {\r\n            return percentChange.toFixed(2) + \"%\";\r\n        } else {\r\n            return percentChange.toFixed(2) + \"% | Trailing \" + trailPerChange.toFixed(2) + \"%\";\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        //var foundPatternList = localStorage.getItem('foundPatternList') && JSON.parse(localStorage.getItem('foundPatternList')).reverse(); \r\n\r\n        return (\r\n            <React.Fragment>\r\n                <PostLoginNavBar />\r\n                <br />\r\n                <OrderStatusLive getBankNiftyLiveLtp={this.getBankNiftyLiveLtp} />\r\n                <ChartDialog /> <ChartMultiple />\r\n                <Grid style={{ padding: '5px' }} justify=\"space-between\" direction=\"row\" container>\r\n                    <Grid item >\r\n\r\n                        <Typography color=\"primary\" gutterBottom>\r\n                              <span id=\"bankniftySpid\" >Banknifty </span>\r\n                                {/* Positions ({this.state.positionList && this.state.positionList.length})   \r\n                               <span id=\"niftySpid\"  > Nifty </span>  &nbsp;&nbsp; */}\r\n                        </Typography>\r\n\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item >\r\n                        <Typography component=\"h3\"  >\r\n\r\n                            <b style={{ color: \"red\" }}>Expn: {this.state.totalExpence} </b>\r\n\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item  >\r\n                        <Typography component=\"h3\"   >\r\n                            <b>  P/L: </b> <b style={{ color: this.state.todayProfitPnL > 0 ? \"green\" : \"red\" }}>{this.state.todayProfitPnL} </b>\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                        <Typography component=\"h3\"  {...window.document.title = \"PnL:\" + (this.state.todayProfitPnL - this.state.totalExpence).toFixed(2)}>\r\n                            <b> Net P/L: </b> <b style={{ color: (this.state.todayProfitPnL - this.state.totalExpence) > 0 ? \"green\" : \"red\" }}>{this.state.totalExpence ? (this.state.todayProfitPnL - this.state.totalExpence).toFixed(2) : \"\"} </b>\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n\r\n\r\n                    <Grid item  >\r\n                        <Button type=\"number\" variant=\"contained\" style={{ float: \"right\" }} onClick={() => this.getPositionData()}>Refresh</Button>\r\n                    </Grid>\r\n                    <Grid item  >\r\n                        <Button type=\"number\" variant=\"contained\" style={{ float: \"right\" }} onClick={() => this.getHighLowPercentage()}><RefreshIcon /> H/L</Button>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid style={{ padding: '5px' }} spacing={1} direction=\"row\" alignItems=\"center\" container>\r\n\r\n\r\n                    <Grid item xs={12} sm={12}>\r\n                        <Paper style={{ overflow: \"auto\", padding: '5px' }} >\r\n\r\n                            <Table size=\"small\" aria-label=\"sticky table\" >\r\n                                <TableHead style={{ whiteSpace: \"nowrap\", backgroundColor: \"\" }} variant=\"head\">\r\n                                    <TableRow key=\"1\" variant=\"head\" style={{ fontWeight: 'bold' }}>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">Trading Symbol</TableCell>\r\n\r\n                                        {/* <TableCell className=\"TableHeadFormat\" align=\"left\">Instrument</TableCell> */}\r\n                                        <TableCell style={{ paddingLeft: \"3px\" }} className=\"TableHeadFormat\" align=\"left\">&nbsp;Spot Name\r\n                                            {/* <Button type=\"number\" onClick={() => this.checkOpenEqualToLow()}>O=H/L</Button>\r\n                                            <input style={{ width: \"50px\" }} type='number' step={10000} placeholder='25000' name=\"checkAmount\" onChange={this.onTrailChange} onBlur={() => this.refreshBasedAmount()} />\r\n                                            <input style={{ width: \"30px\" }} type='number' step={0.1} placeholder='0.5' name=\"checkAmountPer\" onChange={this.onTrailChange} onBlur={() => this.refreshBasedAmount()} /> */}\r\n\r\n                                        </TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">Spot Stoploss</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">Spot Target</TableCell>\r\n\r\n\r\n\r\n                                        {/* <TableCell className=\"TableHeadFormat\" align=\"left\">Trading Token</TableCell> */}\r\n                                        {/* <TableCell className=\"TableHeadFormat\" align=\"left\">Product type</TableCell> */}\r\n                                        {/* <TableCell className=\"TableHeadFormat\" align=\"left\">Type</TableCell> */}\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">BuyAvg</TableCell>\r\n                                        {/* <TableCell  className=\"TableHeadFormat\" align=\"left\">Total buy value</TableCell> */}\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">SellAvg</TableCell>\r\n                                        {/* <TableCell  className=\"TableHeadFormat\" align=\"left\">Total Sell value</TableCell> */}\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">QT</TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">NetQty</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">Exp</TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">SL</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">MD</TableCell>\r\n\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">P/L </TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">Chng % </TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">LTP</TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">Action</TableCell>\r\n                                        {/* <TableCell className=\"TableHeadFormat\" align=\"left\">SP.SL</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">SP.Target</TableCell> */}\r\n\r\n                                        {this.state.checkAmount ?\r\n                                            <>\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"left\">Qty Cpl</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"left\">CExp</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"left\">CNet</TableCell>\r\n                                            </> : \"\"}\r\n\r\n                                        {this.state.showHighLowWisePer ?\r\n                                            <>\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"left\">High</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"left\">Low</TableCell>\r\n                                            </> : \"\"}\r\n\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n                                    {this.state.positionList ? this.state.positionList.map(row => (\r\n                                        row.producttype !== 'DELIVERY1' ? <TableRow hover key={row.symboltoken} style={{ background: row.netqty !== '0' ? 'lightgray' : \"\" }} >\r\n\r\n\r\n                                            {/* <TableCell align=\"left\">\r\n                                                <p style={{ color: row.optionStockChange > 0 ? \"green\" : \"red\" }} size=\"small\" variant=\"contained\" title=\"Candle refresh\" onClick={() => this.refreshCandleChartManually(row)} >\r\n                                                &nbsp;  {row.optionStockName ? `${row.optionStockName} ${row.optionStockLtp} (${row.optionStockChange} '%')`: '-'}\r\n                                                </p>\r\n                                            </TableCell>\r\n\r\n                                            <TableCell align=\"left\">\r\n                                                {row.optionStockName ? <input step=\"0.5\" style={{ width: '40%', textAlign: 'center' }} type='number' value={row.optionStockStoploss} name={row.optionStockName} onChange={this.optionStockStoplossChange} /> : \"-\"}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\">\r\n                                                {row.optionStockName ? <input step=\"0.5\" style={{ width: '40%', textAlign: 'center' }} type='number' value={row.optionStockTarget} name={row.optionStockName} onChange={this.optionStockTargetChange} /> : \"-\"}\r\n                                            </TableCell> */}\r\n\r\n                                            <TableCell align=\"left\">\r\n                                                <Button style={{ color: (row.ltp - row.close) * 100 / row.close > 0 ? \"green\" : \"red\" }} size=\"small\" variant=\"contained\" title=\"Candle refresh\" onClick={() => this.refreshCandleChartManually(row)} >\r\n                                                    {row.tradingsymbol} {row.ltp} ({((row.ltp - row.close) * 100 / row.close).toFixed(2)}%) <ShowChartIcon />\r\n                                                </Button>\r\n                                            </TableCell>\r\n\r\n                                            <TableCell align=\"left\">\r\n                                                <p style={{ color: row.optionStockChange > 0 ? \"green\" : \"red\" }} size=\"small\" variant=\"contained\" title=\"Candle refresh\" onClick={() => this.refreshCandleChartManually(row)} >\r\n                                                    &nbsp;  {row.netqty && row.optionStockName ? `${row.optionStockName} ${row.optionStockLtp} (${row.optionStockChange}%)` : '-'}\r\n                                                </p>\r\n                                            </TableCell>\r\n\r\n                                            <TableCell align=\"left\">\r\n                                                {row.netqty  && row.optionStockName?  <input step=\"0.5\" style={{ width: '40%', textAlign: 'center' }} type='number' value={row.optionStockStoploss} name={row.optionStockName} onChange={this.optionStockStoplossChange} /> : \"-\"}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\">\r\n                                                {row.netqty  && row.optionStockName ? <input step=\"0.5\" style={{ width: '40%', textAlign: 'center' }} type='number' value={row.optionStockTarget} name={row.optionStockName} onChange={this.optionStockTargetChange} /> : \"-\"}\r\n                                            </TableCell>\r\n\r\n\r\n                                           \r\n\r\n\r\n\r\n\r\n                                            {/* <TableCell align=\"left\">{row.producttype}</TableCell> */}\r\n\r\n                                            {/* <TableCell align=\"left\">{row.symboltoken}</TableCell> */}\r\n                                            {/* <TableCell align=\"left\">{row.producttype}</TableCell> */}\r\n\r\n                                            <TableCell align=\"left\"><Button onClick={() => this.addSLOrderInfo(row)}> {row.totalbuyavgprice} </Button>  </TableCell>\r\n                                            {/* <TableCell align=\"left\">{row.totalbuyvalue}</TableCell> */}\r\n\r\n                                            <TableCell align=\"left\">{row.totalsellavgprice}</TableCell>\r\n                                            <TableCell align=\"left\">{row.buyqty || row.sellqty}</TableCell>\r\n                                            <TableCell align=\"left\">{row.netqty}</TableCell>\r\n                                            <TableCell style={{ cursor: 'help' }} title={row.expenceInfo} align=\"left\">{row.tradeExpence}</TableCell>\r\n\r\n                                            {/* <TableCell align=\"left\">{row.totalsellvalue}</TableCell> */}\r\n                                            <TableCell align=\"left\"> {row.stopLoss}</TableCell>\r\n                                            <TableCell align=\"left\"> {row.stopLossAmount}</TableCell>\r\n\r\n\r\n                                            {/* {(localStorage.getItem('lastTriggerprice_'+row.tradingsymbol))} */}\r\n                                            <TableCell align=\"left\" style={{ color: parseFloat(row.pnl) > 0 ? 'green' : 'red' }}><b>{row.pnl}</b></TableCell>\r\n                                            <TableCell align=\"left\">\r\n                                                {row.netqty !== '0' && row.optiontype == '' ? this.getPercentage(row) : \"\"}\r\n                                                {(row.optiontype == 'CE' || row.optiontype == 'PE') && row.netqty > 0 ? this.getOptionPercentage(row) : \"\"}\r\n                                                {row.percentPnL ? row.percentPnL + \"%\" : \"\"}\r\n                                                {/* new Date().toLocaleTimeString() > \"15:15:00\" ? */}\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\">{row.ltp}</TableCell>\r\n                                            <TableCell align=\"left\">\r\n                                                {row.netqty !== \"0\" ? <Button size={'small'} type=\"number\" variant=\"contained\" color=\"Secondary\" onClick={() => this.squareOff(row)}>Square Off</Button> : \"\"}\r\n                                            </TableCell>\r\n\r\n                                            {this.state.checkAmount ? <>\r\n                                                <TableCell align=\"left\"><i title={\"Buy value:\" + row.totalbuyvalue + \" | Sell value:\" + row.totalsellvalue}>  {row.checkQty}</i> &nbsp; {row.checkAmount} </TableCell>\r\n                                                {/* <TableCell   align=\"left\"></TableCell> */}\r\n                                                <TableCell align=\"left\" title={row.checkExpence && row.checkExpence.expenceInfo}>  {row.checkExpence && row.checkExpence.tradeExpence && row.checkExpence.tradeExpence.toFixed(2)}</TableCell>\r\n                                                <TableCell align=\"left\">{row.checkNet && row.checkNet.toFixed(2)}</TableCell>\r\n                                            </> : \"\"}\r\n\r\n\r\n                                            {this.state.showHighLowWisePer ? <>\r\n                                                <TableCell align=\"left\">{row.high}</TableCell>\r\n                                                <TableCell align=\"left\">{row.low}</TableCell>\r\n                                            </> : \"\"}\r\n                                        </TableRow> : \"\"\r\n\r\n                                    )) : ''}\r\n\r\n                                    <TableRow variant=\"head\" style={{ fontWeight: 'bold', backgroundColor: \"\" }}>\r\n\r\n                                        {/* <TableCell className=\"TableHeadFormat\" align=\"left\">Instrument</TableCell> */}\r\n                                        {/* <TableCell className=\"TableHeadFormat\" align=\"left\"></TableCell> */}\r\n                                        {/* <TableCell className=\"TableHeadFormat\" align=\"left\"></TableCell> */}\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" colSpan={7} align=\"left\"></TableCell>\r\n\r\n                                        {/* <TableCell className=\"TableHeadFormat\" align=\"left\">{this.state.allbuyavgprice}</TableCell> */}\r\n                                        {/* <TableCell  className=\"TableHeadFormat\" align=\"left\">{this.state.totalbuyvalue}</TableCell> */}\r\n                                        {/* <TableCell className=\"TableHeadFormat\" align=\"left\">{this.state.allsellavgprice}</TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">{this.state.totalQtyTraded}</TableCell> */}\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\"></TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\"></TableCell>\r\n\r\n                                        {/* <TableCell  className=\"TableHeadFormat\" align=\"left\">{this.state.totalsellvalue}</TableCell> */}\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\"></TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">{this.state.totalMaxPnL}</TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\" style={{ color: parseFloat(this.state.todayProfitPnL) > 0 ? 'green' : 'red' }}>{this.state.todayProfitPnL} </TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\">\r\n\r\n                                            {/* new Date().toLocaleTimeString() > \"15:15:00\" ?  */}\r\n                                            {this.state.totalPercentage && this.state.totalPercentage.toFixed(2) + \"%\"}\r\n\r\n                                        </TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\"></TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\"></TableCell>\r\n                                        {this.state.checkAmount ? <>\r\n                                            <TableCell className=\"TableHeadFormat\" align=\"left\">{this.state.totCheckAmount}</TableCell>\r\n                                            <TableCell className=\"TableHeadFormat\" align=\"left\">{this.state.totCheckExp}</TableCell>\r\n                                            <TableCell className=\"TableHeadFormat\" align=\"left\">{this.state.checkTotalNet}</TableCell>\r\n                                        </>\r\n                                            : \"\"}\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" align=\"left\"></TableCell>\r\n                                    </TableRow>\r\n\r\n                                    {this.state.enableSLMOrderUi ?\r\n                                        <TableRow variant=\"head\">\r\n                                            <TableCell className=\"TableHeadFormat\" colSpan={15} align=\"center\">\r\n\r\n                                                Stoploss\r\n                                                &nbsp;<input placeholder='Symbol' name=\"tradingsymbol\" onChange={this.onAddSLChange} value={this.state.addSLInfo && this.state.addSLInfo.tradingsymbol} style={{ width: '200px', textAlign: 'center' }} />\r\n                                                &nbsp;<input placeholder='Price' name=\"stopLossPrice\" type={'number'} step=\"0.1\" onChange={this.onAddSLChange} value={this.state.addSLInfo && this.state.addSLInfo.stopLossPrice} style={{ width: '100px', textAlign: 'center' }} />\r\n                                                &nbsp;<input placeholder='Trigger Price' name=\"stopLossTriggerPrice\" step=\"0.1\" type={'number'} onChange={this.onAddSLChange} value={this.state.addSLInfo && this.state.addSLInfo.price} style={{ width: '100px', textAlign: 'center' }} />\r\n                                                &nbsp; <Button size={'small'} type=\"number\" variant=\"contained\" onClick={() => this.placeSLMOrderManually()}>Place SL</Button>\r\n\r\n                                            </TableCell>\r\n\r\n                                        </TableRow>\r\n\r\n                                        : \"\"}\r\n                                </TableBody>\r\n\r\n\r\n                            </Table>\r\n\r\n                            <hr />\r\n\r\n                            <Grid style={{ padding: '5px', background: \"lightgray\" }} justify=\"space-between\" direction=\"row\" container>\r\n\r\n                                <Grid>\r\n                                    Stoploss Trail Setting:\r\n\r\n                                    Stock &nbsp; F.Move<input name=\"firstTimeMove\" type={'number'} step=\"0.1\" onChange={this.onTrailChange} value={this.state.firstTimeMove} style={{ width: '30px', textAlign: 'center' }} />\r\n                                    &nbsp;SL Move<input name=\"firstTimeSLMove\" step=\"0.1\" type={'number'} onChange={this.onTrailChange} value={this.state.firstTimeSLMove} style={{ width: '30px', textAlign: 'center' }} />\r\n\r\n                                    &nbsp;Next <input name=\"nextTimeMove\" step=\"0.1\" type={'number'} onChange={this.onTrailChange} value={this.state.nextTimeMove} style={{ width: '30px', textAlign: 'center' }} />\r\n                                    &nbsp;SL Move<input name=\"nextTimeSLMove\" step=\"0.1\" type={'number'} onChange={this.onTrailChange} value={this.state.nextTimeSLMove} style={{ width: '30px', textAlign: 'center' }} />\r\n                                </Grid>\r\n\r\n                                <Grid>\r\n                                    &nbsp; &nbsp; &nbsp;\r\n                                    Option Trail%: F.Move<input name=\"firstTimeMoveOption\" type={'number'} step=\"0.1\" onChange={this.onTrailChange} value={this.state.firstTimeMoveOption} style={{ width: '30px', textAlign: 'center' }} />\r\n                                    &nbsp;SL Move<input name=\"firstTimeSLMoveOption\" step=\"0.1\" type={'number'} onChange={this.onTrailChange} value={this.state.firstTimeSLMoveOption} style={{ width: '30px', textAlign: 'center' }} />\r\n\r\n                                    &nbsp;Next <input name=\"nextTimeMoveOption\" step=\"0.1\" type={'number'} onChange={this.onTrailChange} value={this.state.nextTimeMoveOption} style={{ width: '30px', textAlign: 'center' }} />\r\n                                    &nbsp;SL Move<input name=\"nextTimeSLMoveOption\" step=\"0.1\" type={'number'} onChange={this.onTrailChange} value={this.state.nextTimeSLMoveOption} style={{ width: '30px', textAlign: 'center' }} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={12}>\r\n                        <OrderBook />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12} style={{ width: '90%', height: '100%', overflow: \"auto\" }}>\r\n                        {localStorage.getItem('isOpenInNewPage') == \"no\" ? <OrderWatchlist /> : \"\"}\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import * as moment from 'moment';\r\n\r\n\r\nconst workercode = () => {\r\n\r\n        onmessage = function(e) {\r\n        console.log('message received', e.data);\r\n\r\n        var data = e.data;\r\n\r\n        let histdata = data.chunkCandleData; \r\n        let stockInfo = data.stock; \r\n        let stock = {}; \r\n        if (histdata.length > 0) {\r\n\r\n            var candleData = histdata;\r\n            stock.name = stockInfo.name;\r\n            stock.symbol = stockInfo.symbol;\r\n            stock.token = stockInfo.token;\r\n            stock.entryPrice = candleData[0][4];\r\n            stock.foundAt = moment(candleData[0][0]).format('YYYY-MM-DD HH:mm')\r\n\r\n            let priceChangeList = [];\r\n            for (let index2 = 1; index2 < candleData.length; index2++) {\r\n                let perChange = (candleData[index2][4] - stock.entryPrice) * 100 / stock.entryPrice;\r\n                let datetime = moment(candleData[index2][0]).format('h:mma')\r\n               \r\n                priceChangeList.push({ perChange: perChange.toFixed(2), close: candleData[index2][4], datetime: datetime });\r\n            }\r\n            stock.candleData = priceChangeList;\r\n            \r\n        }\r\n\r\n        console.log('message prepared ', stock);\r\n\r\n        postMessage(stock);\r\n\r\n\r\n    }\r\n};\r\n\r\nlet code = workercode.toString();\r\ncode = code.substring(code.indexOf(\"{\")+1, code.lastIndexOf(\"}\"));\r\n\r\nconst blob = new Blob([code], {type: \"application/javascript\"});\r\nconst worker_script = URL.createObjectURL(blob);\r\n\r\n//module.exports = worker_script;\r\nexport default worker_script","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport {resolveResponse} from \"../../utils/ResponseHandler\";\r\nimport * as moment from 'moment';\r\n\r\nimport worker_script from './worker';\r\n\r\n\r\n\r\nexport default class Example extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n  //  this.handleKeyDown = this.handleKeyDown.bind(this)\r\n    this.state = {\r\n      cursor: 0,\r\n      \r\n    }\r\n  }\r\n\r\n\r\n  componentDidMount(){\r\n\r\n\r\n\r\n\r\n\r\n    // var dataltp = {\r\n    //   \"exchange\": \"NSE\",\r\n    //   \"tradingsymbol\": 'NIFTY27JAN22FUT',\r\n    //   \"symboltoken\": 52264,\r\n    // }\r\n\r\n    // AdminService.getLTP(dataltp).then(res => {\r\n    //   console.log(res)\r\n    // })\r\n\r\n    // const format1 = \"YYYY-MM-DD HH:mm\";\r\n    // var beginningTime = moment('9:15am', 'h:mma').format(format1);\r\n    // var time = moment.duration(\"100:00:00\");  //22:00:00\" for last day  2hours  timeDuration\r\n    // var startDate = moment(new Date()).subtract(time);\r\n\r\n    // var data = {\r\n    //       \"exchange\": 'NSE',\r\n    //       \"symboltoken\": 67795,\r\n    //       \"interval\": 'FIFTEEN_MINUTE',  // THIRTY_MINUTE\r\n    //       \"fromdate\": moment(startDate).format(format1),\r\n    //       \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n    //   }\r\n\r\n    //   AdminService.getHistoryData(data).then(res => {\r\n\r\n    //   }); \r\n\r\n\r\n    var myWorker = new Worker(worker_script);\r\n    myWorker.onmessage = (m) => {\r\n        console.log(\"msg from worker: \", m.data);\r\n    };\r\n\r\n    myWorker.postMessage({arr:  [{name : \"vijay\"}], no : 10 });\r\n\r\n  }\r\n\r\n  render() {\r\n    const { cursor } = this.state\r\n\r\n    return (\r\n      <Container>\r\n                 \r\n\r\n      </Container>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {connect} from \"react-redux\";\r\nimport {setPackLoaded} from \"../../action\";\r\nimport Spinner from \"react-spinner-material\";\r\nimport * as moment from 'moment';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Input from \"@material-ui/core/Input\";\r\nimport \"./ViewStyle.css\";\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport AdminService from \"../service/AdminService\";\r\nimport {resolveResponse} from \"../../utils/ResponseHandler\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport Chart from \"./Chart\";\r\nimport { ContactlessOutlined, Sync } from \"@material-ui/icons\";\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nclass MyView extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            products: [],\r\n            stopnview:'', \r\n            curnewdata:'', \r\n            underlyingValue : '', \r\n            timestamp:'',\r\n            totalCOI : 0,\r\n            expiry: '', \r\n            strike:'',\r\n            FilteredBY: '',\r\n            AllspTotalOI:[],\r\n            PEoi:0,\r\n            CEoi:0,\r\n            scrollcount : 0,\r\n            resMessage: [],\r\n            counter:0,\r\n            listCount:0\r\n            \r\n            //JSON.parse(localStorage.getItem('optionChainDataBN')).records.data\r\n\r\n\r\n\r\n        }\r\n//          this.findSupportResistence = this.findSupportResistence.bind(this);\r\n            \r\n    }\r\n\r\n    onChange = (e) =>{\r\n      this.setState({[e.target.name]: e.target.value}); \r\n\r\n    }\r\n   \r\n  \r\n  \r\n    componentDidMount() {\r\n\r\n        // AdminService.scanStocks().then(fundsRes => {\r\n        //     // console.log('profiledata', profileRes); \r\n        //      //  let fundsResData = resolveResponse(fundsRes);\r\n        //      //  var fundsResData =  fundsRes && fundsRes.data; \r\n        //        if(fundsResData.status & fundsResData.message == 'SUCCESS'){\r\n               \r\n        //         this.setState({  fundData :fundsResData.data })\r\n        //        }\r\n        //    })\r\n\r\n        AdminService.getStaticData().then(res => {\r\n          var data = res.data;\r\n          //data = JSON.parse(data);   \r\n          localStorage.setItem('staticData', JSON.stringify(data));\r\n\r\n          var totalWatchlist = Object.keys(data);\r\n          this.setState({ totalWatchlist: totalWatchlist });\r\n          localStorage.setItem('totalWatchlist', JSON.stringify(totalWatchlist));\r\n\r\n          this.setState({ staticData: data });\r\n\r\n          var watchlist = [];\r\n          totalWatchlist.forEach(element => {\r\n\r\n              var mylist = data[element];\r\n              mylist.forEach(element2 => {\r\n                  var foundInWatchlist = watchlist.filter(row => row.token === element2.token);\r\n                  if (!foundInWatchlist.length) {\r\n                      watchlist.push(element2);\r\n                  }\r\n              });\r\n          });\r\n\r\n          localStorage.setItem('watchList', JSON.stringify(watchlist));\r\n\r\n      });\r\n\r\n\r\n\r\n        var list = localStorage.getItem(\"watchList\") ? JSON.parse(localStorage.getItem(\"watchList\")) : []; \r\n        this.setState({watchlistCount : list.length})\r\n\r\n    }\r\n\r\n    readCsv = async() => {\r\n\r\n      var list = this.state.addtowatchlist; \r\n\r\n      var parsedList =JSON.parse(list) \r\n      console.log(parsedList.length);\r\n      \r\n      var newJsonList = []; \r\n\r\n      for (let index = 0; index < parsedList.length; index++) {\r\n        const element = parsedList[index];\r\n        console.log(element);\r\n\r\n        AdminService.autoCompleteSearch(element.SYMBOL).then(searchRes => {\r\n\r\n          let searchResdata =  searchRes.data; \r\n          var found = searchResdata.filter(row => row.exch_seg  === \"NSE\" &&  row.lotsize === \"1\" && row.name === element.SYMBOL);                                \r\n        \r\n         // && element.LTP >= 200\r\n          if(found.length){ \r\n            newJsonList.push(found[0]); \r\n         \r\n            var watchlist = localStorage.getItem(\"watchList\") ? JSON.parse(localStorage.getItem(\"watchList\")) : []; \r\n              var foundInWatchlist = watchlist.filter(row => row && row.token  === found[0] && found[0].token);                                \r\n              if(!foundInWatchlist.length){\r\n                this.setState({resMessage: [...this.state.resMessage,  index + \". ======================> New Symbol:  \"+ element.SYMBOL]})\r\n\r\n                this.setState({watchlistCount : watchlist.length, counter:this.state.counter+1})\r\n                watchlist.push(found[0]); \r\n                localStorage.setItem('watchList', JSON.stringify(watchlist));\r\n                console.log(\"fdaata\");\r\n               \r\n              }else{\r\n                this.setState({watchlistCount : watchlist.length,})\r\n                this.setState({resMessage: [...this.state.resMessage,  index + \". Already in List:  \"+ element.SYMBOL]})\r\n\r\n              }\r\n            //  console.log(found[0].symbol, \"found\",found);      \r\n            //  localStorage.setItem('NseStock_' + found[0].symbol, \"orderdone\");\r\n          }\r\n          if(this.state.resMessage && this.state.resMessage.length){\r\n            this.setState({resMessage: [...this.state.resMessage.reverse()]})\r\n\r\n          }\r\n        \r\n       })\r\n\r\n       await new Promise(r => setTimeout(r, 500));  \r\n      }\r\n\r\n      //\"NIFTY PSU BANK\".split(' ').join('') // \"NIFTYPSUBANK\"\r\n      \r\n      var data = {\r\n        listName : parsedList[0].SYMBOL, \r\n        listItem : newJsonList \r\n      }\r\n      console.log(\"newjosnlist:\", data);\r\n      AdminService.addIntoStaticData(data).then(res => {\r\n        let resdata = resolveResponse(res,'noPop' );\r\n       // console.log(resdata);\r\n        this.setState({listName: resdata.listName,listCount: resdata.count})\r\n      });\r\n      \r\n    }\r\n    resetCsv=()=>{\r\n      this.setState({addtowatchlist:\"\",resMessage:\"\"})\r\n\r\n    }\r\n   \r\n  \r\n\r\n\r\n    render(){\r\n\r\n      return(\r\n        <React.Fragment>\r\n            \r\n            <PostLoginNavBar />\r\n\r\n          \r\n            <Paper style={{padding:\"25px\" }}>   \r\n\r\n            \r\n            <Grid   direction=\"row\" container className=\"flexGrow\" spacing={2}  style={{paddingLeft:\"5px\",paddingRight:\"5px\", justifyContent:'center'}}>\r\n              \r\n              \r\n           \r\n              \r\n\r\n\r\n              \r\n\r\n                <Grid item xs={12} sm={8}> \r\n                <Typography variant=\"h6\">\r\n                   Current Watchlist Count   {this.state.watchlistCount} \r\n\r\n                   &nbsp; &nbsp;   &nbsp; &nbsp;   &nbsp; &nbsp;  \r\n                   <Button  onClick={() => { localStorage.setItem('watchList', []); window.location.reload();}}>Delete All</Button>    \r\n\r\n                   <br />\r\n                  </Typography>\r\n                         \r\n\r\n                    <TextField variant=\"outlined\" multiline rows={10} fullwidth style={{width:'90%', height: '50%'}}  label=\"Paste only JSON to add into watchlist\"  value={this.state.addtowatchlist}   name=\"addtowatchlist\" onChange={this.onChange}/>\r\n              \r\n\r\n                </Grid>\r\n\r\n            \r\n                  \r\n                <Grid  item xs={8} sm={8}>\r\n\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => this.readCsv()}> Add to Watchlist</Button>    &nbsp; &nbsp;\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={() => this.resetCsv()}>Reset</Button>    \r\n                &nbsp; &nbsp;   <b>Total Added to Watchlist : {this.state.counter}</b>\r\n                &nbsp; &nbsp;   <b> Static Data Update: {this.state.listName}({this.state.listCount})</b>\r\n\r\n\r\n\r\n                   \r\n                    {/* {this.state.notAddedSymbol? \"Already in list: \" + this.state.notAddedSymbol : \"\" }\r\n                    {this.state.addedSymbol? \"Added: \" + this.state.addedSymbol : \"\" }\r\n                     */}\r\n                       \r\n                </Grid>\r\n\r\n                <Grid  item xs={8} sm={8}>\r\n                        {this.state.resMessage ? this.state.resMessage.map(data => (\r\n                         <>  <span> {data} </span>  <br /> </>\r\n                           \r\n                        )) : ''}\r\n   \r\n                </Grid>\r\n\r\n               \r\n              \r\n                </Grid>\r\n                   \r\n                </Paper>\r\n\r\n                \r\n           \r\n          \r\n\r\n            </React.Fragment> \r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst styles = {\r\n    tableStyle : {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    }, \r\n    selectStyle:{\r\n        marginBottom: '0px',\r\n        minWidth: 240,\r\n        maxWidth: 240\r\n\r\n    }\r\n  \r\n}\r\n\r\nconst mapStateToProps=(state)=>{\r\n    return {packs:state.packs.packs.data};\r\n}\r\nexport default connect(mapStateToProps,{setPackLoaded})(MyView);\r\n","import React from \"react\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { connect } from \"react-redux\";\r\nimport { setPackLoaded } from \"../../action\";\r\nimport Spinner from \"react-spinner-material\";\r\nimport * as moment from 'moment';\r\nimport { resolveResponse } from \"../../utils/ResponseHandler\";\r\nimport \"./ViewStyle.css\";\r\nimport MyDialog from './MyDialog'\r\nimport Notify from \"../../utils/Notify\";\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport pako from 'pako';\r\nimport { w3cwebsocket } from 'websocket';\r\nimport ChartDialog from './ChartDialog';\r\nimport LineChart from \"./LineChart\";\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport TradeConfig from './TradeConfig.json';\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport vwap from 'vwap';\r\nimport { SMA, RSI, VWAP, BollingerBands } from 'technicalindicators';\r\n\r\n\r\n\r\n\r\nconst wsClintSectorUpdate = new w3cwebsocket('wss://omnefeeds.angelbroking.com/NestHtml5Mobile/socket/stream');\r\n\r\nclass MyView extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // sectorList: [],\r\n            stopnview: '',\r\n            indexTimeStamp: '',\r\n            refreshFlag: true,\r\n            topGLCount: 0, \r\n            refreshFlagCandle: true,\r\n            sectorStockList: localStorage.getItem('sectorStockList') && JSON.parse(localStorage.getItem('sectorStockList')) || [],\r\n            sectorList: localStorage.getItem('sectorList') && JSON.parse(localStorage.getItem('sectorList')) || [],\r\n            watchList: localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')) || [],\r\n            staticData: localStorage.getItem('staticData') && JSON.parse(localStorage.getItem('staticData')) || {},\r\n        }\r\n        this.refreshSectorCandle = this.refreshSectorCandle.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // window.location.reload(); \r\n\r\n        //  this.loadIndexesList();\r\n        var tokens = JSON.parse(localStorage.getItem(\"userTokens\"));\r\n        var feedToken = tokens && tokens.feedToken;\r\n        var userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\r\n        var clientcode = userProfile && userProfile.clientcode;\r\n        this.setState({ feedToken: feedToken, clientcode: clientcode });\r\n\r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var endTime = moment('3:30pm', 'h:mma');\r\n        const friday = 5; // for friday\r\n        var currentTime = moment(new Date(), \"h:mma\");\r\n        const today = moment().isoWeekday();\r\n        //market hours\r\n        if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n\r\n\r\n            wsClintSectorUpdate.onopen = (res) => {\r\n                // this.makeConnection();\r\n                // this.updateSocketWatch();\r\n            }\r\n\r\n\r\n            wsClintSectorUpdate.onmessage = (message) => {\r\n                var decoded = window.atob(message.data);\r\n                var data = this.decodeWebsocketData(pako.inflate(decoded));\r\n                var liveData = JSON.parse(data);\r\n\r\n                //  console.log(\"sector live data\", liveData);\r\n                window.document.title = \"Sector Live WS: \" + liveData.length;\r\n\r\n                this.state.sectorList && this.state.sectorList.forEach((outerEelement, index) => {\r\n\r\n                    outerEelement.stockList && outerEelement.stockList.forEach((element, stockIndex) => {\r\n                        var foundLive = liveData.filter(row => row.tk == element.token);\r\n                        if (foundLive.length > 0 && foundLive[0].ltp && foundLive[0].nc) {\r\n                            this.state.sectorList[index].stockList[stockIndex].ltp = foundLive[0].ltp;\r\n                            this.state.sectorList[index].stockList[stockIndex].nc = foundLive[0].nc;\r\n                            this.state.sectorList[index].stockList[stockIndex].cng = foundLive[0].cng;\r\n                            this.state.sectorList[index].stockList[stockIndex].ltt = foundLive[0].ltt;\r\n\r\n                            this.state.sectorList[index].isStocksLtpUpdted = true;\r\n                        }\r\n                    });\r\n                });\r\n\r\n                this.setState({ sectorList: this.state.sectorList });\r\n                // this.setState({ sectorList: sectorList });\r\n                // localStorage.setItem('sectorList', JSON.stringify(sectorList));\r\n\r\n                // if(index){\r\n                //     this.state.sectorList.forEach((element, i) => {\r\n                //         if(element.index == index){\r\n                //             this.state.sectorList[i].stockList = sectorUpdate; \r\n                //             this.state.sectorList[i].isStocksLtpUpdted = true; \r\n                //             this.setState({ sectorList: this.state.sectorList  });\r\n                //             return; \r\n                //         }\r\n                //     });\r\n                // }\r\n            }\r\n\r\n            wsClintSectorUpdate.onerror = (e) => {\r\n                console.log(\"socket error\", e);\r\n                window.location.reload();\r\n            }\r\n\r\n            // setInterval(() => {\r\n            //     this.makeConnection();\r\n            //     var _req = '{\"task\":\"hb\",\"channel\":\"\",\"token\":\"' + feedToken + '\",\"user\": \"' + clientcode + '\",\"acctid\":\"' + clientcode + '\"}';\r\n            //     // console.log(\"Connection sectior top hb Request :- \" + _req);\r\n            //     wsClintSectorUpdate.send(_req);\r\n            // }, 59000);\r\n\r\n            setInterval(() => {\r\n                this.loadIndexesList();\r\n            }, 120000);\r\n\r\n\r\n\r\n            // var tostartInteral =  setInterval(() => {\r\n\r\n            //     console.log(\"1st interval every second\", new Date().toLocaleTimeString());\r\n            //     var time = new Date(); \r\n            //     if(time.getMinutes() % 5 === 0){\r\n            //         console.log(\"5th min completed at\", new Date().toLocaleTimeString());\r\n            //         console.log(\"next scan at\", new Date(new Date().getTime()+70000).toLocaleTimeString());\r\n\r\n            //         setTimeout(() => {\r\n            //             console.log(\"set timout at 70sec \", new Date());\r\n            //            this.refreshSectorCandle(); \r\n            //         }, 70000);\r\n\r\n            //         setInterval(() => {\r\n            //            this.refreshSectorCandle(); \r\n            //          }, 60000 * 5 + 70000 );  \r\n\r\n            //          clearInterval(tostartInteral); \r\n            //     } \r\n            // }, 1000);\r\n\r\n\r\n\r\n        } else {\r\n            // wsClintSectorUpdate.close();\r\n        }\r\n\r\n\r\n        // setInterval(() => {\r\n        //     AdminService.checkOtherApi().then(res => {\r\n        //         //let data = resolveResponse(res, 'noPop');\r\n        //         console.log(res); \r\n\r\n        //     }).catch(error => {\r\n\r\n        //     })\r\n        // }, 1000);\r\n\r\n        // setInterval(() => {\r\n        //     AdminService.checkSectorApiOther(\"nifty100EqualWeight\").then(res => {\r\n        //         //let data = resolveResponse(res, 'noPop');\r\n        //         console.log(res); \r\n\r\n        //     }).catch(error => {\r\n\r\n        //     })\r\n        // }, 1000);\r\n\r\n        // setInterval(() => {\r\n        //     AdminService.checkSectorApiOther(\"nifty\").then(res => {\r\n        //         //let data = resolveResponse(res, 'noPop');\r\n        //         console.log(res); \r\n\r\n        //     }).catch(error => {\r\n\r\n        //     })\r\n        // }, 1000);\r\n\r\n        \r\n        // setInterval(() => {\r\n        //     AdminService.checkSectorApiOther(\"cnxRealty\").then(res => {\r\n        //         //let data = resolveResponse(res, 'noPop');\r\n        //         console.log(res); \r\n\r\n        //     }).catch(error => {\r\n\r\n        //     })\r\n        // }, 1000);\r\n        // setInterval(() => {\r\n        //     AdminService.checkSectorApiOther(\"niftyPvtBank\").then(res => {\r\n        //         //let data = resolveResponse(res, 'noPop');\r\n        //         console.log(res); \r\n\r\n        //     }).catch(error => {\r\n\r\n        //     })\r\n        // }, 1000);\r\n        // setInterval(() => {\r\n        //     AdminService.checkSectorApiOther(\"cnxCommodities\").then(res => {\r\n        //         //let data = resolveResponse(res, 'noPop');\r\n        //         console.log(res); \r\n\r\n        //     }).catch(error => {\r\n\r\n        //     })\r\n        // }, 1000);\r\n        // setInterval(() => {\r\n        //     AdminService.checkSectorApiOther(\"cnxPSU\").then(res => {\r\n        //         //let data = resolveResponse(res, 'noPop');\r\n        //         console.log(res); \r\n\r\n        //     }).catch(error => {\r\n\r\n        //     })\r\n        // }, 1000);\r\n\r\n        // setInterval(() => {\r\n        //     AdminService.checkSectorApiOther(\"cnxit\").then(res => {\r\n        //         //let data = resolveResponse(res, 'noPop');\r\n        //         console.log(res); \r\n\r\n        //     }).catch(error => {\r\n\r\n        //     })\r\n        // }, 1000);\r\n        // setInterval(() => {\r\n        //     AdminService.checkSectorApiOther(\"cnxMedia\").then(res => {\r\n        //         //let data = resolveResponse(res, 'noPop');\r\n        //         console.log(res); \r\n\r\n        //     }).catch(error => {\r\n\r\n        //     })\r\n        // }, 1000);\r\n        // setInterval(() => {\r\n        //     AdminService.checkSectorApiOther(\"cnxMetal\").then(res => {\r\n        //         //let data = resolveResponse(res, 'noPop');\r\n        //         console.log(res); \r\n\r\n        //     }).catch(error => {\r\n\r\n        //     })\r\n        // }, 1000);\r\n        // setInterval(() => {\r\n        //     AdminService.checkSectorApiOther(\"cnxPharma\").then(res => {\r\n        //         //let data = resolveResponse(res, 'noPop');\r\n        //         console.log(res); \r\n\r\n        //     }).catch(error => {\r\n\r\n        //     })\r\n        // }, 1000);\r\n        // setInterval(() => {\r\n        //     AdminService.checkSectorApiOther(\"cnxPSU\").then(res => {\r\n        //         //let data = resolveResponse(res, 'noPop');\r\n        //         console.log(res); \r\n\r\n        //     }).catch(error => {\r\n\r\n        //     })\r\n        // }, 1000);\r\n\r\n        // setInterval(() => {\r\n        //     AdminService.checkSectorApiOther(\"cnxPSU\").then(res => {\r\n        //         //let data = resolveResponse(res, 'noPop');\r\n        //         console.log(res); \r\n\r\n        //     }).catch(error => {\r\n\r\n        //     })\r\n        // }, 1000);\r\n        // setInterval(() => {\r\n        //     AdminService.checkSectorApiOther(\"cnxMNC\").then(res => {\r\n        //         //let data = resolveResponse(res, 'noPop');\r\n        //         console.log(res); \r\n\r\n        //     }).catch(error => {\r\n\r\n        //     })\r\n        // }, 1000);\r\n        // setInterval(() => {\r\n        //     AdminService.checkSectorApiOther(\"cnxInfra\").then(res => {\r\n        //         //let data = resolveResponse(res, 'noPop');\r\n        //         console.log(res); \r\n\r\n        //     }).catch(error => {\r\n\r\n        //     })\r\n        // }, 1000);\r\n        // setInterval(() => {\r\n        //     AdminService.checkSectorApiOther(\"cpse\").then(res => {\r\n        //         //let data = resolveResponse(res, 'noPop');\r\n        //         console.log(res); \r\n\r\n        //     }).catch(error => {\r\n\r\n        //     })\r\n        // }, 1000);\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    getTodayOrder = () => {\r\n        AdminService.retrieveOrderBook()\r\n            .then((res) => {\r\n                let data = resolveResponse(res, \"noPop\");\r\n                if (data && data.data) {\r\n                    var orderlist = data.data;\r\n                    orderlist.sort(function (a, b) {\r\n                        return new Date(b.updatetime) - new Date(a.updatetime);\r\n                    });\r\n                    localStorage.setItem('oderbookData', JSON.stringify(orderlist));\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n    placeSLMOrder = (slmOption) => {\r\n\r\n        var data = {\r\n            \"triggerprice\": slmOption.stopLossPrice,\r\n            \"tradingsymbol\": slmOption.tradingsymbol,\r\n            \"symboltoken\": slmOption.symboltoken,\r\n            \"quantity\": slmOption.quantity,\r\n            \"transactiontype\": slmOption.transactiontype === \"BUY\" ? \"SELL\" : \"BUY\",\r\n            \"exchange\": 'NSE',\r\n            \"producttype\": \"INTRADAY\",//\"DELIVERY\",\r\n            \"duration\": \"DAY\",\r\n            \"price\": 0,\r\n            \"squareoff\": \"0\",\r\n            \"stoploss\": \"0\",\r\n            \"ordertype\": \"STOPLOSS_MARKET\", //STOPLOSS_MARKET STOPLOSS_LIMIT\r\n            \"variety\": \"STOPLOSS\"\r\n        }\r\n        console.log(\"SLM option data\", data);\r\n        AdminService.placeOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n            //  console.log(data);   \r\n            if (data.status && data.message === 'SUCCESS') {\r\n                this.setState({ orderid: data.data && data.data.orderid });\r\n                // this.updateOrderList(); \r\n                this.speckIt('hey Vijay, ' + slmOption.tradingsymbol + \" buy order placed\");\r\n                this.getTodayOrder();\r\n                document.getElementById('orderRefresh') && document.getElementById('orderRefresh').click();\r\n            }\r\n        })\r\n    }\r\n\r\n    placeOrderMethod = (orderOption) => {\r\n\r\n        var data = {\r\n            \"transactiontype\": orderOption.transactiontype,//BUY OR SELL\r\n            \"tradingsymbol\": orderOption.tradingsymbol,\r\n            \"symboltoken\": orderOption.symboltoken,\r\n            \"quantity\": orderOption.quantity,\r\n            \"ordertype\": orderOption.buyPrice === 0 ? \"MARKET\" : \"LIMIT\",\r\n            \"price\": orderOption.buyPrice,\r\n            \"producttype\": \"INTRADAY\",//\"DELIVERY\",\r\n            \"duration\": \"DAY\",\r\n            \"squareoff\": \"0\",\r\n            \"stoploss\": \"0\",\r\n            \"exchange\": \"NSE\",\r\n            \"variety\": \"NORMAL\"\r\n        }\r\n        console.log(\"place order option\", data);\r\n        AdminService.placeOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n            //  console.log(data);   \r\n            if (data.status && data.message === 'SUCCESS') {\r\n                this.speckIt(orderOption.tradingsymbol + \" Added\");\r\n                this.setState({ orderid: data.data && data.data.orderid });\r\n                if (orderOption.stopLossPrice) {\r\n                    this.placeSLMOrder(orderOption);\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    getMinPriceAllowTick = (minPrice) => {\r\n        minPrice = minPrice.toFixed(2);\r\n        // console.log(\"minPrice\",minPrice); \r\n        var wholenumber = parseInt(minPrice.split('.')[0]);\r\n        //  console.log(\"wholenumber\",wholenumber); \r\n        var decimal = parseFloat(minPrice.split('.')[1]);\r\n        // console.log(\"decimal\",decimal); \r\n        var tickedecimal = decimal - decimal % 5;\r\n        minPrice = parseFloat(wholenumber + '.' + tickedecimal);\r\n        //   console.log(\"minPricexxxx\",minPrice); \r\n        return minPrice;\r\n    }\r\n\r\n\r\n    historyWiseOrderPlace = (sectorItem, orderType, isAutomatic, spinnerIndex) => {\r\n\r\n\r\n        this.setState({ [spinnerIndex]: true })\r\n\r\n        var token = sectorItem.token;\r\n        var symbol = sectorItem.symbol;\r\n\r\n        if (isAutomatic != \"Automatic\") {\r\n            if (!window.confirm(orderType + \" \" + symbol + \" Are you sure ? \")) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        var ltpdata = { \"exchange\": \"NSE\", \"tradingsymbol\": symbol, \"symboltoken\": token, }\r\n        AdminService.getLTP(ltpdata).then(res => {\r\n            let ltpres = resolveResponse(res, 'noPop');\r\n            var LtpData = ltpres && ltpres.data;\r\n            console.log(symbol, \" ltd data \", LtpData);\r\n            let quantity = 0;\r\n            if (LtpData && LtpData.ltp) {\r\n                let perTradeExposureAmt = TradeConfig.totalCapital * TradeConfig.perTradeExposurePer / 100;\r\n                quantity = Math.floor(perTradeExposureAmt / LtpData.ltp);\r\n            }\r\n\r\n\r\n            quantity = quantity > 0 ? 1 : 0;\r\n            console.log(symbol, \"  quantity can be order \", quantity);\r\n\r\n            if (quantity) {\r\n                const format1 = \"YYYY-MM-DD HH:mm\";\r\n                var beginningTime = moment('9:15am', 'h:mma').format(format1);\r\n\r\n                console.log(\"beginningTime\", beginningTime);\r\n\r\n                var time = moment.duration(\"54:10:00\");  //21:10:00\"\r\n                var startdate = moment(new Date()).subtract(time);\r\n                var data = {\r\n                    \"exchange\": \"NSE\",\r\n                    \"symboltoken\": token,\r\n                    \"interval\": \"FIVE_MINUTE\", //ONE_DAY FIVE_MINUTE \r\n                    \"fromdate\": moment(startdate).format(format1),\r\n                    \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n                }\r\n\r\n                AdminService.getHistoryData(data).then(res => {\r\n                    let histdata = resolveResponse(res, 'noPop');\r\n                    // console.log(\"candle history\", histdata); \r\n                    if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                        var candleData = histdata.data, clossest = 0, lowerest = 0, highestHigh = 0, lowestLow = 0, highestsum = 0;\r\n                        candleData.reverse();\r\n                        lowestLow = candleData[0][3];\r\n                        highestHigh = candleData[0][2];\r\n                        if (candleData && candleData.length > 0) {\r\n                            for (let index = 0; index < 20; index++) {\r\n                                if (candleData[index]) {\r\n                                    clossest += candleData[index][4]; //close  \r\n                                    lowerest += candleData[index][3];  //low\r\n                                    highestsum += candleData[index][2];  //low\r\n                                    if (candleData[index][2] > highestHigh) {\r\n                                        console.log(index, highestHigh, candleData[index][2]);\r\n                                        highestHigh = candleData[index][2];\r\n                                    }\r\n                                    if (candleData[index][3] <= lowestLow) {\r\n                                        lowestLow = candleData[index][3];\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            let devideLen = candleData.length > 20 ? 20 : candleData.length;\r\n\r\n                            var bbmiddleValue = clossest / devideLen;\r\n                            var bblowerValue = lowerest / devideLen;\r\n                            var bbhigerValue = highestsum / devideLen;\r\n\r\n                            var stoploss = 0, stoplossPer = 0;\r\n\r\n                            if (orderType == \"BUY\") {\r\n                                stoploss = bblowerValue - (highestHigh - lowestLow) * 3 / 100;\r\n                                stoploss = this.getMinPriceAllowTick(stoploss);\r\n                                stoplossPer = (LtpData.ltp - stoploss) * 100 / LtpData.ltp;\r\n\r\n                                console.log(symbol, orderType, \" LTP \", LtpData.ltp);\r\n                                console.log(symbol + \"highestHigh:\", highestHigh, \"lowestLow\", lowestLow, \"stoploss after tick:\", stoploss, \"stoploss%\", stoplossPer);\r\n                                console.log(symbol + \"  close avg middle \", bbmiddleValue, \"lowerest avg\", bblowerValue, \"bbhigerValue\", bbhigerValue);\r\n\r\n                            }\r\n\r\n\r\n                            if (orderType == \"SELL\") {\r\n                                stoploss = bbhigerValue + (highestHigh - lowestLow) * 3 / 100;\r\n                                stoploss = this.getMinPriceAllowTick(stoploss);\r\n                                stoplossPer = (stoploss - LtpData.ltp) * 100 / LtpData.ltp;\r\n\r\n                                console.log(symbol, orderType, \" LTP \", LtpData.ltp);\r\n                                console.log(symbol + \"highestHigh:\", highestHigh, \"lowestLow\", lowestLow, \"stoploss after tick:\", stoploss, \"stoploss%\", stoplossPer);\r\n                                console.log(symbol + \"  close avg middle \", bbmiddleValue, \"lowerest avg\", bblowerValue, \"bbhigerValue\", bbhigerValue);\r\n\r\n                            }\r\n\r\n\r\n\r\n                            var orderOption = {\r\n                                transactiontype: orderType,\r\n                                tradingsymbol: symbol,\r\n                                symboltoken: token,\r\n                                buyPrice: 0,\r\n                                quantity: quantity,\r\n                                stopLossPrice: stoploss\r\n                            }\r\n                            if (quantity) {\r\n\r\n                                this.placeOrderMethod(orderOption);\r\n                                this.setState({ [spinnerIndex]: false })\r\n\r\n                            } else {\r\n                                Notify.showError(symbol + \" stoploss is > 1.5% Rejected\");\r\n                                console.log(symbol + \" its not fullfilled\");\r\n\r\n                            }\r\n                        }\r\n\r\n\r\n                    } else {\r\n                        //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                        Notify.showError(symbol + \" candle data emply\");\r\n                        console.log(symbol + \" candle data emply\");\r\n                        this.setState({ [spinnerIndex]: true })\r\n                    }\r\n                })\r\n\r\n            }else{\r\n                Notify.showError(quantity + \"  quantity |  \" + symbol + \" \" + orderType + \" Rejected\");\r\n                this.setState({ [spinnerIndex]: false })\r\n            }\r\n        }).catch(function(error){\r\n            this.setState({ [spinnerIndex]: true })\r\n        })\r\n        // await new Promise(r => setTimeout(r, 2000)); \r\n    }\r\n\r\n\r\n//     loadIndexesList() {\r\n//         this.setState({ indexTimeStamp: '', refreshFlag: false, failedCount: 0, topGLCount : 0 });\r\n\r\n//         AdminService.getAllIndices()\r\n//             .then((res) => {\r\n//                 if (res.data) {\r\n//                     var data = res.data, sectorStockList = [];\r\n//                     this.setState({ indexTimeStamp: data.timestamp })\r\n//                     var foundSectors = data.data.filter(row => row.key === \"SECTORAL INDICES\");\r\n//                     var softedData = foundSectors.sort(function (a, b) { return b.percentChange - a.percentChange });\r\n//                   //  this.setState({sectorList :  softedData});\r\n                  \r\n// //                    this.setState({ sectorList: []});\r\n//                     function sleep(ms) {\r\n//                         return new Promise(resolve => setTimeout(resolve, ms));\r\n//                     }\r\n//                     var updateLtpOnInterval = async (ref, softedData) => {\r\n\r\n//                             var middleSector = []; \r\n//                             for (let i = 0; i < softedData.length; i++) {\r\n\r\n//                                 var length = 1;                                     \r\n//                                 var sectorStocks = this.state.staticData[softedData[i].index];\r\n//                                 this.setState({stockUpdate : i+1 + \". \" + softedData[i].index});\r\n//                                 console.log(softedData[i].index,softedData[i].percentChange,  softedData[i]); \r\n//                                 if (softedData[i].percentChange >= 0.75 || softedData[i].percentChange <= -0.75) {\r\n//                                     softedData[i].stockList = sectorStocks;\r\n//                                     length = sectorStocks.length; \r\n//                                     if (sectorStocks && sectorStocks.length) {\r\n//                                         ref.refreshSectorLtp(sectorStocks,softedData[i].index );\r\n//                                     }\r\n//                                     this.setState({ sectorList: [...this.state.sectorList, softedData[i]], topGLCount: this.state.topGLCount+1 });\r\n//                                 }else{\r\n//                                     softedData[i].stockList = sectorStocks;\r\n//                                     middleSector.push(softedData[i]); \r\n//                                 }\r\n\r\n                                \r\n                            \r\n//                                 await sleep(length / 10 * 1500);\r\n//                             }\r\n\r\n\r\n//                             middleSector.forEach(element => {\r\n//                                 this.setState({ sectorList: [...this.state.sectorList, element] });\r\n//                             });\r\n//                         }\r\n//                         updateLtpOnInterval(this, softedData);\r\n//                 }\r\n//             })\r\n//             .catch((reject) => {\r\n//                 Notify.showError(\"All Indices API Failed\" + <br /> + reject);\r\n//                 this.speckIt(\"All Indices API Failed\");\r\n\r\n//             })\r\n\r\n//         this.setState({ refreshFlag: true });\r\n\r\n//     }\r\n\r\n    loadIndexesList() {\r\n        this.setState({ indexTimeStamp: '', refreshFlag: false, failedCount: 0, topGLCount : 0 });\r\n\r\n        AdminService.allIndicesDirectJSON()\r\n            .then((res) => {\r\n\r\n\r\n                if (res.data) {\r\n\r\n        \r\n\r\n                    var data = res.data && res.data.data, sectorStockList = [];\r\n                   // this.setState({ indexTimeStamp: data.timestamp })\r\n                   // var foundSectors = data.filter(row => row.key === \"SECTORAL INDICES\");\r\n                    var softedData = data.sort(function (a, b) { return b.percChange - a.percChange });\r\n                  //  this.setState({sectorList :  softedData});\r\n\r\n                  console.log(softedData); \r\n\r\n                    this.setState({ sectorList: []});  \r\n                    function sleep(ms) {\r\n                        return new Promise(resolve => setTimeout(resolve, ms));\r\n                    }\r\n                    var updateLtpOnInterval = async (ref, softedData) => {\r\n\r\n                            var middleSector = []; \r\n                            for (let i = 0; i < softedData.length; i++) {\r\n\r\n                                var length = 1;                                     \r\n                                var sectorStocks = this.state.staticData[softedData[i].indexName];\r\n                                this.setState({stockUpdate : i+1 + \". \" + softedData[i].indexName});\r\n                                console.log(softedData[i].index,softedData[i].percChange,  softedData[i]); \r\n                                if (softedData[i].percChange >= 0.75 || softedData[i].percChange <= -0.75) {\r\n\r\n                                    if(sectorStocks && sectorStocks.length){\r\n                                        softedData[i].stockList = sectorStocks;\r\n                                        length = sectorStocks.length; \r\n                                        if (sectorStocks && sectorStocks.length) {\r\n                                            ref.refreshSectorLtp(sectorStocks, softedData[i].indexName );\r\n                                        }\r\n                                       this.setState({ sectorList: [...this.state.sectorList, softedData[i]], topGLCount: this.state.topGLCount+1 });\r\n                                    }\r\n                                }else{\r\n                                    if(sectorStocks && sectorStocks.length>=1){\r\n                                        softedData[i].stockList = sectorStocks;\r\n                                        middleSector.push(softedData[i]); \r\n                                    }\r\n                                  \r\n                                }\r\n\r\n                                await sleep(length / 10 * 150);\r\n                            }\r\n\r\n\r\n                            middleSector.forEach(element => {\r\n                                this.setState({ sectorList: [...this.state.sectorList, element] });\r\n                            });\r\n                        }\r\n                        updateLtpOnInterval(this, softedData);\r\n                }\r\n            })\r\n            .catch((reject) => {\r\n          //      Notify.showError(\"All Indices API Failed\" + <br /> + reject);\r\n          //      this.speckIt(\"All Indices API Failed\");\r\n\r\n            })\r\n\r\n        this.setState({ refreshFlag: true });\r\n\r\n    }\r\n\r\n\r\n    updateLTPMannually = (index) => {\r\n\r\n        var sectorStocks = this.state.staticData[index];\r\n        this.refreshSectorLtp(sectorStocks, index);\r\n    }\r\n\r\n\r\n    refreshSectorLtp = async (sectorStocks, index) => {\r\n\r\n        this.setState({stockUpdate : index});\r\n\r\n    // console.log(index, \"sectorStocks\",sectorStocks,  new Date())\r\n        this.setState({ refreshFlag: false, failedCount: 0 });\r\n        var sectorUpdate = [];\r\n        var sectorStockList = this.state.sectorStockList;\r\n\r\n        for (let index = 0; index < sectorStocks.length; index++) {\r\n\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"tradingsymbol\": sectorStocks[index].symbol,\r\n                \"symboltoken\": sectorStocks[index].token,\r\n            }\r\n\r\n            //   this.setState({ stockUpdate: index + 1 + \". \" + sectorStocks[index].symbol });\r\n\r\n            AdminService.getLTP(data).then(res => {\r\n                let data = resolveResponse(res, 'noPop');\r\n                var LtpData = data && data.data;\r\n\r\n\r\n                if (LtpData.symboltoken == sectorStocks[index].token) {\r\n\r\n                    //  console.log(index + 1 , sectorStocks[index].symbol , LtpData);\r\n\r\n                    var todayChange = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;   //close\r\n                    var indexData = sectorStocks[index];\r\n                    indexData.ltp = LtpData.ltp;\r\n                    indexData.nc = todayChange;\r\n                    indexData.cng = (LtpData.ltp - LtpData.close);\r\n                    indexData.ltt = new Date().toLocaleString();\r\n\r\n\r\n                    sectorUpdate.push(indexData);\r\n                }\r\n\r\n            }).catch(error => {\r\n                this.setState({ failedCount: this.state.failedCount + 1 });\r\n\r\n                console.log(sectorStocks[index].symbol, error);\r\n\r\n                //  Notify.showError(sectorStocks[index].symbol + \" ltd data not found!\");\r\n            })\r\n\r\n\r\n\r\n            await new Promise(r => setTimeout(r, 101));\r\n\r\n\r\n        }\r\n\r\n\r\n        if (index) {\r\n            this.state.sectorList.forEach((element, i) => {\r\n                if (element.index == index) {\r\n                    this.state.sectorList[i].stockList = sectorUpdate;\r\n                    this.state.sectorList[i].isStocksLtpUpdted = true;\r\n                    this.setState({ sectorList: this.state.sectorList });\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.setState({ refreshFlag: true });\r\n       // this.refreshSectorCandleManually(index); \r\n      //  this.checkLast5MinMovement(index); \r\n\r\n      \r\n    }\r\n\r\n\r\n\r\n\r\n    checkLast5MinMovement = async (index) => {\r\n\r\n        var sectorStocks = this.state.staticData[index];\r\n     //   this.refreshSectorLtp(sectorStocks, index);\r\n\r\n\r\n        this.setState({ refreshFlagCandle: false });\r\n        console.log(\"sectorStockList\", index);\r\n\r\n\r\n        for (let index = 0; index < sectorStocks.length; index++) {\r\n           \r\n           \r\n            var beginningTime = moment('9:15am', 'h:mma');\r\n\r\n            var time = moment.duration(\"00:06:00\");\r\n            var startdate = moment(new Date()).subtract(time);\r\n\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"symboltoken\": sectorStocks[index].token,\r\n                \"interval\": \"ONE_MINUTE\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                \"fromdate\": moment(startdate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                \"todate\": moment(new Date()).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n            }\r\n\r\n            this.setState({ stockCandleUpdate: index + 1 + \". \" + sectorStocks && sectorStocks[index].symbol });\r\n\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n                if (histdata && histdata.data && histdata.data.length) {\r\n                    console.log(sectorStocks[index].symbol , \"candle history\", histdata.data); \r\n\r\n                    \r\n                    var candleData = histdata.data;\r\n                    var candleChartData = [], vwapdata = [], closeingData = [], highData = [], lowData = [], openData = [], valumeData = [];\r\n                    candleData.forEach((element, index) => {\r\n                        candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                        vwapdata.push([element[5], (element[2] + element[3] + element[4]) / 3]);\r\n                        closeingData.push(element[4]);\r\n                        highData.push(element[2]);\r\n                        lowData.push(element[3]);\r\n                        openData.push(element[3]);\r\n                        valumeData.push(element[5]);\r\n\r\n                    });\r\n\r\n                    // var sma = SMA.calculate({period : 10, values : closeingData});\r\n                    // console.log(sectorStocks[index].symbol,\"SMA\", sma);\r\n\r\n\r\n                    // var inputRSI = { values: closeingData, period: 14 };\r\n                    // var lastRsiValue = RSI.calculate(inputRSI)\r\n                    // console.log(sectorStocks[index].symbol, \"lastRsiValue\", lastRsiValue[lastRsiValue.length - 1]);\r\n\r\n\r\n                    // var inputVWAP = {\r\n                    //     open: openData,\r\n                    //     high: highData,\r\n                    //     low: lowData,\r\n                    //     close: closeingData,\r\n                    //     volume: valumeData\r\n                    // };\r\n\r\n\r\n                    // if (candleData.length > 0) {\r\n                    //     sectorStocks[index].candleChartData = candleChartData;\r\n                    //     sectorStocks[index].vwapValue = vwap(vwapdata);\r\n                    //     sectorStocks[index].vwapDataChart = VWAP.calculate(inputVWAP);\r\n                    //     sectorStocks[index].lastRsiValue = lastRsiValue[lastRsiValue.length - 1];\r\n                    // }\r\n\r\n                    console.log(sectorStocks[index].symbol, sectorStocks[index]);\r\n\r\n\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(sectorStocks[index].symbol, \"  emply candle found\");\r\n                }\r\n            }).catch(error => {\r\n                this.setState({ failedCount: this.state.failedCount + 1 });\r\n                Notify.showError(sectorStocks[index].symbol + \" candle failed!\");\r\n            })\r\n\r\n            await new Promise(r => setTimeout(r, 350));\r\n        }\r\n\r\n\r\n        if (index) {\r\n            this.state.sectorList.forEach((element, i) => {\r\n                if (element.index == index) {\r\n                    this.state.sectorList[i].stockList = sectorStocks;\r\n                    this.setState({ sectorList: this.state.sectorList });\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        this.setState({ refreshFlagCandle: true });\r\n\r\n\r\n\r\n\r\n        console.log(\"sectorStockswithcandle\", sectorStocks);\r\n    }\r\n    refreshSectorCandleManually = async (index) => {\r\n\r\n        var sectorStocks = this.state.staticData[index];\r\n     //   this.refreshSectorLtp(sectorStocks, index);\r\n\r\n\r\n        this.setState({ refreshFlagCandle: false });\r\n        console.log(\"sectorStockList\", index);\r\n\r\n\r\n        for (let index = 0; index < sectorStocks.length; index++) {\r\n           \r\n           \r\n            var beginningTime = moment('9:15am', 'h:mma');\r\n\r\n            var time = moment.duration(\"22:00:00\");\r\n            var startdate = moment(new Date()).subtract(time);\r\n\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"symboltoken\": sectorStocks[index].token,\r\n                \"interval\": \"FIFTEEN_MINUTE\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                \"fromdate\": moment(startdate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                \"todate\": moment(new Date()).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n            }\r\n\r\n            this.setState({ stockCandleUpdate: index + 1 + \". \" + sectorStocks && sectorStocks[index].symbol });\r\n\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n                //console.log(\"candle history\", histdata); \r\n                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                    var candleData = histdata.data;\r\n                    var candleChartData = [], vwapdata = [], closeingData = [], highData = [], lowData = [], openData = [], valumeData = [], bbdata=[];\r\n                    candleData.forEach((element, index) => {\r\n                        candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                        vwapdata.push([element[5], (element[2] + element[3] + element[4]) / 3]);\r\n                        closeingData.push(element[4]);\r\n                        highData.push(element[2]);\r\n                        lowData.push(element[3]);\r\n                        openData.push(element[3]);\r\n                        valumeData.push(element[5]);\r\n\r\n                        bbdata.push((element[2] + element[3] + element[4]) / 3);\r\n\r\n                    });\r\n\r\n                    // var sma = SMA.calculate({period : 10, values : closeingData});\r\n                    // console.log(sectorStocks[index].symbol,\"SMA\", sma);\r\n\r\n\r\n                    var inputRSI = { values: closeingData, period: 14 };\r\n                    var lastRsiValue = RSI.calculate(inputRSI)\r\n                    console.log(sectorStocks[index].symbol, \"lastRsiValue\", lastRsiValue[lastRsiValue.length - 1]);\r\n\r\n                    var inputVWAP = {\r\n                        open: openData,\r\n                        high: highData,\r\n                        low: lowData,\r\n                        close: closeingData,\r\n                        volume: valumeData\r\n                    };\r\n\r\n                    var input = {\r\n                    period : 20, \r\n                    values : bbdata,\r\n                    stdDev : 2\r\n                    }\r\n\r\n                    var bb = BollingerBands.calculate(input); \r\n                    console.log(sectorStocks[index].symbol , \"BB\",input, bb);\r\n\r\n\r\n                    if (candleData.length > 0) {\r\n                        sectorStocks[index].candleChartData = candleChartData;\r\n                        sectorStocks[index].vwapValue = vwap(vwapdata);\r\n                        sectorStocks[index].vwapDataChart = VWAP.calculate(inputVWAP);\r\n                        sectorStocks[index].lastRsiValue = lastRsiValue[lastRsiValue.length - 1];\r\n                    }\r\n\r\n                    console.log(sectorStocks[index].symbol, sectorStocks[index]);\r\n\r\n\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(sectorStocks[index].symbol, \"  emply candle found\");\r\n                }\r\n            }).catch(error => {\r\n                this.setState({ failedCount: this.state.failedCount + 1 });\r\n                Notify.showError(sectorStocks[index].symbol + \" candle failed!\");\r\n            })\r\n\r\n            await new Promise(r => setTimeout(r, 350));\r\n        }\r\n\r\n\r\n        if (index) {\r\n            this.state.sectorList.forEach((element, i) => {\r\n                if (element.index == index) {\r\n                    this.state.sectorList[i].stockList = sectorStocks;\r\n                    this.setState({ sectorList: this.state.sectorList });\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        this.setState({ refreshFlagCandle: true });\r\n\r\n\r\n\r\n\r\n        console.log(\"sectorStockswithcandle\", sectorStocks);\r\n    }\r\n\r\n\r\n    refreshSectorCandle = async () => {\r\n\r\n        this.setState({ refreshFlagCandle: false });\r\n\r\n        var sectorStockList = this.state.sectorStockList;\r\n\r\n        console.log(\"sectorStockList\", this.state.sectorStockList.length);\r\n\r\n\r\n        for (let index = 0; index < this.state.sectorStockList.length; index++) {\r\n            var beginningTime = moment('9:15am', 'h:mma');\r\n            var time = moment.duration(\"61:00:00\");\r\n            var startdate = moment(new Date()).subtract(time);\r\n\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"symboltoken\": this.state.sectorStockList[index].token,\r\n                \"interval\": \"FIVE_MINUTE\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                \"fromdate\": moment(beginningTime).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                \"todate\": moment(new Date()).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n            }\r\n\r\n            this.setState({ stockCandleUpdate: index + 1 + \". \" + this.state.sectorStockList && this.state.sectorStockList[index].symbol });\r\n\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n                //console.log(\"candle history\", histdata); \r\n                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                    var candleData = histdata.data;\r\n                    var candleChartData = [];\r\n                    candleData.forEach(element => {\r\n                        candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                    });\r\n\r\n\r\n                    if (candleData.length > 0) {\r\n\r\n                        sectorStockList[index].candleChartData = candleChartData;\r\n                        var sectorList = this.state.sectorList;\r\n                        this.state.sectorList && this.state.sectorList.forEach((outerEelement, index) => {\r\n                            outerEelement.stockList && outerEelement.stockList.forEach((element, stockIndex) => {\r\n                                var foundLive = sectorStockList.filter(row => row.token == element.token);\r\n\r\n                                if (foundLive.length) {\r\n                                    sectorList[index].stockList[stockIndex].candleChartData = foundLive[0].candleChartData;\r\n                                }\r\n                            });\r\n                        });\r\n                        this.setState({ sectorList: sectorList });\r\n                        localStorage.setItem('sectorList', JSON.stringify(sectorList));\r\n                    }\r\n\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(this.state.sectorStockList[index].symbol, \"  emply candle found\");\r\n                }\r\n            }).catch(error => {\r\n                this.setState({ failedCount: this.state.failedCount + 1 });\r\n\r\n                Notify.showError(this.state.sectorStockList[index].symbol + \" candle failed!\");\r\n            })\r\n\r\n            await new Promise(r => setTimeout(r, 350));\r\n        }\r\n\r\n        this.setState({ refreshFlagCandle: true });\r\n    }\r\n\r\n    decodeWebsocketData = (array) => {\r\n        var newarray = [];\r\n        try {\r\n            for (var i = 0; i < array.length; i++) {\r\n                newarray.push(String.fromCharCode(array[i]));\r\n            }\r\n        } catch (e) { }\r\n\r\n        return newarray.join('');\r\n    }\r\n\r\n    makeConnection = () => {\r\n\r\n        var firstTime_req = '{\"task\":\"cn\",\"channel\":\"NONLM\",\"token\":\"' + this.state.feedToken + '\",\"user\": \"' + this.state.clientcode + '\",\"acctid\":\"' + this.state.clientcode + '\"}';\r\n        console.log(\"Connection sectior top firstTime_req :- \" + firstTime_req);\r\n\r\n        if (!wsClintSectorUpdate) return;\r\n        wsClintSectorUpdate.send(firstTime_req);\r\n\r\n        this.updateSocketWatch();\r\n    }\r\n\r\n    showCandleChart = (candleData, symbol, price, change, vwapDataChart) => {\r\n\r\n        //  candleData  = candleData && candleData.reverse();\r\n\r\n        localStorage.setItem('candleChartData', JSON.stringify(candleData));\r\n        localStorage.setItem('cadleChartSymbol', symbol);\r\n        localStorage.setItem('candlePriceShow', price);\r\n        localStorage.setItem('candleChangeShow', change);\r\n        localStorage.setItem('vwapDataChart', vwapDataChart);\r\n\r\n\r\n\r\n        if (candleData && candleData.length > 0) {\r\n            document.getElementById('showCandleChart').click();\r\n        }\r\n    }\r\n\r\n    updateSocketWatch = () => {\r\n\r\n\r\n\r\n        var channel = [];\r\n        this.state.sectorList.forEach(element => {\r\n            if (element.percentChange >= 0.75) {\r\n                element.stockList && element.stockList.forEach(stock => {\r\n                    channel.push('nse_cm|' + stock.token);\r\n                });\r\n            }\r\n        });\r\n\r\n\r\n        if (channel && channel.length) {\r\n            var updateWatch = {\r\n                \"task\": \"mw\",\r\n                \"channel\": channel.join('&'),\r\n                \"token\": this.state.feedToken,\r\n                \"user\": this.state.clientcode,\r\n                \"acctid\": this.state.clientcode\r\n            }\r\n\r\n            console.log(\"update watch channel\", updateWatch);\r\n            wsClintSectorUpdate.send(JSON.stringify(updateWatch));\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    speckIt = (text) => {\r\n        var msg = new SpeechSynthesisUtterance();\r\n        msg.text = text.toString();\r\n        window.speechSynthesis.speak(msg);\r\n    }\r\n\r\n    getPercentageColor = (percent) => {\r\n        percent = percent * 100;\r\n        var r = percent < 50 ? 255 : Math.floor(255 - (percent * 2 - 100) * 255 / 100);\r\n        var g = percent > 50 ? 255 : Math.floor((percent * 2) * 255 / 100);\r\n        return 'rgb(' + r + ',' + g + ',0)';\r\n    }\r\n\r\n    get2DecimalNumber =(number)=>{\r\n\r\n        if(number){\r\n            return number.toFixed(2); \r\n        }else{\r\n            return number;  \r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        this.state.sectorList && this.state.sectorList.forEach((outerEelement, index) => {\r\n            outerEelement.stockList && outerEelement.stockList.sort(function (a, b) {\r\n                return b.nc - a.nc;\r\n            });\r\n        });\r\n\r\n\r\n        let sqrOffbeginningTime = moment('9:15am', 'h:mma');\r\n        let sqrOffendTime = moment('03:30pm', 'h:mma');\r\n        let sqrOffcurrentTime = moment(new Date(), \"h:mma\");\r\n        if (sqrOffcurrentTime.isBetween(sqrOffbeginningTime, sqrOffendTime)) {\r\n            this.state.sectorList && this.state.sectorList.forEach((outerEelement, index) => {\r\n                if (outerEelement.percentChange > 0.75 && outerEelement.isStocksLtpUpdted) {\r\n                    outerEelement.stockList && outerEelement.stockList.forEach((element, index2) => {\r\n                        if (index2 < 2) {\r\n                            var autoTradeTopList = localStorage.getItem('autoTradeTopList') && JSON.parse(localStorage.getItem('autoTradeTopList')) || [];\r\n                            var isThere = autoTradeTopList.filter(row => row.token === element.token);\r\n                            if (!isThere.length) {\r\n                                element.foundAt = new Date().toLocaleString();\r\n                                autoTradeTopList.push(element);\r\n                                localStorage.setItem('autoTradeTopList', JSON.stringify(autoTradeTopList));\r\n                                console.log(element.name + \" is on top  \" + (index2 + 1) + new Date().toLocaleString());\r\n                                this.speckIt(element.name + \" is on top  \" + (index2 + 1));\r\n                                //  this.historyWiseOrderPlace(element , 'BUY', \"Automatic\"); \r\n                            }\r\n                        }\r\n\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <PostLoginNavBar />\r\n\r\n                <ChartDialog />\r\n\r\n                <Grid direction=\"row\" container className=\"flexGrow\" spacing={1} style={{ paddingLeft: \"5px\", paddingRight: \"5px\" }}>\r\n                    <Grid item xs={12} sm={12} >\r\n                        <Typography component=\"h3\" variant=\"h6\" color=\"primary\" >\r\n                            Top Gainer/Looser Sectors({this.state.topGLCount}) at {this.state.indexTimeStamp}\r\n                            {this.state.refreshFlag ? <Button variant=\"contained\" onClick={() => this.loadIndexesList()}>Live Ltp</Button> : <> <Button> <Spinner /> &nbsp; {this.state.stockUpdate}  </Button> </>}\r\n                            {this.state.failedCount ? this.state.failedCount + \"Failed\" : \"\"}\r\n\r\n                            &nbsp;\r\n\r\n                            {/* {this.state.refreshFlagCandle ? <Button variant=\"contained\" onClick={() => this.refreshSectorCandle()}>Refresh Candle</Button> : <> <Button> <Spinner /> &nbsp; {this.state.stockCandleUpdate}  </Button> </>}\r\n                            &nbsp; */}\r\n\r\n                            {/* <Button variant=\"contained\" onClick={() => this.makeConnection()}> WS Refresh</Button> */}\r\n\r\n\r\n\r\n\r\n                        </Typography>\r\n\r\n                        {/* {localStorage.getItem('autoTradeTopList')} */}\r\n\r\n                    </Grid>\r\n\r\n\r\n\r\n                    {this.state.sectorList ? this.state.sectorList.map((indexdata, index) => (\r\n\r\n\r\n                        <Grid item xs={12} sm={this.state.topGLCount <= 2 ? 6 : this.state.topGLCount == 3 ? 4 : 3}>\r\n\r\n                            <Paper style={{ padding: '10px', background: \"lightgray\", textAlign: \"center\" }}>\r\n\r\n\r\n                                <Button size=\"small\" variant=\"contained\" title=\"update ltp\" onClick={() => this.updateLTPMannually(indexdata.index)}>\r\n                                    <b> {index + 1}. {indexdata.index || indexdata.indexName + \" \" + indexdata.last}({indexdata.percentChange || indexdata.percChange}%) </b>\r\n\r\n                                </Button>\r\n                                &nbsp;\r\n\r\n                                <Button size=\"small\" variant=\"contained\" title=\"Candle refresh\" onClick={() => this.refreshSectorCandleManually(indexdata.index)}>\r\n                                    <ShowChartIcon />\r\n                                </Button>\r\n\r\n\r\n                                <Grid direction=\"row\" container className=\"flexGrow\" spacing={1} >\r\n\r\n\r\n                                    {indexdata.stockList && indexdata.stockList.map((sectorItem, i) => (\r\n\r\n                                        <Grid item xs={12} sm={6} >\r\n                                            <Paper style={{ textAlign: \"center\" }} >\r\n\r\n                                                {/* {sectorItem.cng} */}\r\n                                                <Typography style={{ background: this.getPercentageColor(sectorItem.cng), fontSize: '14px' }}>\r\n                                                    {i + 1}. {sectorItem.name} {sectorItem.ltp} ({ this.get2DecimalNumber(sectorItem.nc)}%)\r\n                                                </Typography>\r\n\r\n                                          \r\n                                            \r\n\r\n                                                {sectorItem.candleChartData ?  <span style={{ cursor: 'pointer' }} onClick={() => this.showCandleChart(sectorItem.candleChartData, sectorItem.name, sectorItem.ltp, sectorItem.nc, sectorItem.vwapDataChart)} >\r\n                                                   <LineChart candleChartData={sectorItem.candleChartData} percentChange={sectorItem.nc} vwapDataChart={sectorItem.vwapDataChart} /> \r\n                                                </span> : \"\"}\r\n\r\n                                                {sectorItem.vwapValue ? \r\n                                                <Typography >\r\n                                                    {sectorItem.vwapValue ? <span  style={{ background: sectorItem.ltp > sectorItem.vwapValue ? \"#00ff00\" : \"red\", fontSize: '14px' }}>VWAP:<b>{sectorItem.vwapValue && sectorItem.vwapValue.toFixed(2)}</b> </span> : \"\"}\r\n                                                    &nbsp;\r\n                                                    {sectorItem.lastRsiValue ? <span title=\"OB means 'Overbought'\" style={{ background: sectorItem.lastRsiValue >= 60 ? \"#00ff00\" : sectorItem.lastRsiValue >= 40 && sectorItem.lastRsiValue < 60 ? \"lightgray\" : \"red\", fontSize: '14px' }}>RSI:<b>{sectorItem.lastRsiValue}</b> {sectorItem.lastRsiValue > 80 ? \"OB\" : sectorItem.lastRsiValue >= 60 && sectorItem.lastRsiValue <= 80 ? \"Buy\" : sectorItem.lastRsiValue >= 40 && sectorItem.lastRsiValue < 60 ? \"NoTrade\" : \"Sell\"} </span> : \"\"}\r\n                                                </Typography>\r\n                                               : \"\"}\r\n\r\n\r\n                                                {/* {sectorItem.candleChartData ? <ReactApexChart\r\n                                                    options={{\r\n                                                        chart: {\r\n                                                            type: 'candlestick',\r\n                                                            //  height: 40\r\n\r\n                                                        },\r\n                                                        title: {\r\n                                                            text: '',\r\n                                                            align: 'left'\r\n                                                        },\r\n                                                        xaxis: {\r\n                                                            type: 'datetime',\r\n                                                        },\r\n                                                        yaxis: {\r\n                                                            tooltip: {\r\n                                                                enabled: true\r\n                                                            }\r\n                                                        }\r\n                                                    }}\r\n                                                    series={[{\r\n                                                        data: sectorItem.candleChartData\r\n\r\n                                                    }]}\r\n                                                    type=\"candlestick\"\r\n                                        \r\n                                                /> : \"\"} */}\r\n\r\n\r\n                                            <Grid direction=\"row\" style={{padding:'5px'}} container className=\"flexGrow\" justify=\"space-between\" >\r\n\r\n                                                <Grid item>\r\n                                                    {!this.state['buyButtonClicked' + indexdata.index + i] ? <Button size=\"small\" variant=\"contained\" color=\"primary\"  onClick={() => this.historyWiseOrderPlace(sectorItem, 'BUY', \"\", 'buyButtonClicked' + indexdata.index + i)}>Buy</Button> : <Spinner />}\r\n                                                </Grid>\r\n\r\n                                                <Grid item >\r\n                                                {sectorItem.ltt && new Date(sectorItem.ltt).toLocaleTimeString()}\r\n                                                </Grid>\r\n\r\n                                                <Grid item >\r\n                                                    {!this.state['sellButtonClicked' + indexdata.index + i] ? <Button size=\"small\" variant=\"contained\" color=\"secondary\" onClick={() => this.historyWiseOrderPlace(sectorItem, 'SELL', \"\", 'sellButtonClicked' + indexdata.index + i)}>Sell</Button>: <Spinner />}\r\n                                                </Grid>\r\n                                            </Grid>\r\n\r\n\r\n\r\n                                            </Paper>\r\n\r\n                                            \r\n                                        </Grid>\r\n\r\n                                    ))\r\n                                    }\r\n\r\n                                </Grid>\r\n\r\n                            </Paper>\r\n                        </Grid>\r\n\r\n\r\n\r\n                    )) : <Spinner />}\r\n\r\n\r\n                </Grid>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n// const styles = {\r\n//     tableStyle : {\r\n//         display: 'flex',\r\n//         justifyContent: 'center'\r\n//     }, \r\n//     selectStyle:{\r\n//         marginBottom: '0px',\r\n//         minWidth: 240,\r\n//         maxWidth: 240\r\n\r\n//     }\r\n\r\n// }\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { packs: state.packs.packs.data };\r\n}\r\nexport default connect(mapStateToProps, { setPackLoaded })(MyView);\r\n","import React, { useEffect } from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport { data } from 'jquery';\r\n\r\nimport LineChart from \"./LineChart\";\r\nimport LightChartCom from './LightChartCom';\r\n\r\nimport Test from './Test';\r\n\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nexport default function CustomizedDialogs(props) {\r\n\r\n\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  var [values, setValues] = React.useState({\r\n    data: [],\r\n    candledata: {}\r\n  })\r\n\r\n\r\n\r\n\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n\r\n   \r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" id=\"showLightCandleChart\" color=\"primary\" style={{ display: \"none\" }} onClick={handleClickOpen}>\r\n        Chart\r\n      </Button>\r\n      <Dialog maxWidth={'lg'} onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose} style={{color : props.LightChartData.InstrumentLTP  && props.LightChartData.InstrumentLTP.change > 0 ? \"green\" : \"red\" }}>\r\n          {props.LightChartData.selectedSymbol}  {props.LightChartData.InstrumentLTP && props.LightChartData.InstrumentLTP.ltp}    ({props.LightChartData.InstrumentLTP  && props.LightChartData.InstrumentLTP.change.toFixed(2)}%) \r\n          <br />\r\n\r\n\r\n        </DialogTitle>\r\n        <DialogContent dividers id=\"chart\">\r\n\r\n        <Grid style={{ display: \"visible\" }} spacing={1} direction=\"row\" alignItems=\"center\" container>\r\n\r\n          <br />\r\n\r\n          {props.LightChartData && props.LightChartData.InstrumentLTP ?\r\n            <Grid item xs={12} sm={3} style={{ background: \"#00000014\" }} >\r\n\r\n              <div style={{ background: '#bdbdbd' }}>\r\n                <b>  Daily: {props.LightChartData.selectedSymbol}</b> <br />\r\n\r\n                <span title=\"20SMA\" item xs={12} sm={12} style={{ color: props.LightChartData.InstrumentLTP.ltp > props.LightChartData.DailyBulishStatus ? \"green\" : \"red\", fontWeight: \"bold\" }}>\r\n                  Daily Avg Price: {props.LightChartData.DailyBulishStatus && props.LightChartData.DailyBulishStatus.toFixed(0)} {props.LightChartData.DailyBulishStatus ? props.LightChartData.InstrumentLTP.ltp > props.LightChartData.DailyBulishStatus ? \"BUY\" : \"SELL\" : \"\"}\r\n                </span><br />\r\n\r\n\r\n                <span title=\"averge of showed candle volume\" item xs={12} sm={12}>\r\n                  <b>Daily Avg Volume:</b>  {(props.LightChartData.dailyAvgValume / 100000).toFixed(2)}L\r\n                </span><br />\r\n                <span title=\"averge of showed candle volume\" item xs={12} sm={12}>\r\n                  {props.LightChartData.todayCurrentVolume > props.LightChartData.dailyAvgValume ? <b title=\"if cossed avg volume then its green\" style={{ color: \"green\" }}>Today Volume: {(props.LightChartData.todayCurrentVolume / 100000).toFixed(2)}L </b> : \"Today Volume:\" + (props.LightChartData.todayCurrentVolume / 100000).toFixed(2) + \"L\"}\r\n                </span>\r\n              </div>\r\n              <br />\r\n\r\n\r\n\r\n              <b>  Intraday: {props.LightChartData.timeFrame} : {props.LightChartData.tradingsymbol}</b> <br />\r\n              {props.LightChartData.bblastValue ? <span item xs={12} sm={12} >\r\n\r\n                <span title=\"Green color mean price running above upper bb band\" style={{ color: props.LightChartData.InstrumentLTP.ltp >= props.LightChartData.bblastValue.upper ? \"green\" : \"\", fontWeight: \"bold\" }}>BB Upper: {props.LightChartData.bblastValue.upper.toFixed(2)}</span><br />\r\n                BB Middle(20 SMA): {props.LightChartData.bblastValue.middle.toFixed(2)}<br />\r\n                <span title=\"Green red mean price running below lower bb band\" style={{ color: props.LightChartData.InstrumentLTP.ltp <= props.LightChartData.bblastValue.lower ? \"red\" : \"\", fontWeight: \"bold\" }}>BB Lower: {props.LightChartData.bblastValue.lower.toFixed(2)}</span><br />\r\n              </span> : \"\"}\r\n\r\n              <span item xs={12} sm={12} style={{ color: props.LightChartData.InstrumentLTP.ltp > props.LightChartData.vwapvalue ? \"green\" : \"red\", fontWeight: \"bold\" }}>\r\n                VWAP:  {props.LightChartData.vwapvalue && props.LightChartData.vwapvalue.toFixed(2)}\r\n              </span>\r\n              <br />\r\n              <b> RSI: </b>{props.LightChartData.rsiValues && props.LightChartData.rsiValues.map((item, j) => (\r\n                item >= 60 ? <span style={{ color: 'green', fontWeight: \"bold\" }}> {item} &nbsp;</span> : <span style={{ color: item <= 40 ? 'red' : \"\", fontWeight: \"bold\" }}> {item} &nbsp;</span>\r\n              ))}\r\n\r\n\r\n              <br />\r\n              <b>Vol:</b> {props.LightChartData.valumeData && props.LightChartData.valumeData.map((item, j) => (\r\n                <span style={{ color: item > props.LightChartData.dailyAvgValume ? \"green\" : \"\", fontWeight: item > props.LightChartData.dailyAvgValume ? \"bold\" : \"\" }}> {(item / 100000).toFixed(2)}L &nbsp;</span>\r\n              ))}\r\n\r\n              <br />  <br />\r\n\r\n            </Grid>\r\n            : \"\"}\r\n\r\n\r\n\r\n          {/* <Grid item xs={12} sm={9}  >\r\n            <div id=\"showChartTitle\">\r\n            </div>\r\n            <div id=\"tvchart\"></div>\r\n          </Grid> */}\r\n\r\n\r\n            <Grid item xs={12} sm={9}  >\r\n            {localStorage.getItem('candleChartData') ? <ReactApexChart\r\n            options={{\r\n              chart: {\r\n                type: 'candlestick',\r\n                height: 350\r\n              },\r\n              title: {\r\n                text: '',\r\n                align: 'left'\r\n              },\r\n              xaxis: {\r\n                type: 'datetime',\r\n              },\r\n              yaxis: {\r\n                tooltip: {\r\n                  enabled: true\r\n                }\r\n              }\r\n            }}\r\n            series={[{\r\n              data: props.LightChartData.chartStaticData\r\n\r\n            }]}\r\n            type=\"candlestick\"\r\n            width={500}\r\n            height={350}\r\n          /> : \"\"}\r\n\r\n\r\n\r\n            </Grid>\r\n\r\n\r\n          </Grid>\r\n\r\n\r\n\r\n          {/* <Grid direction=\"row\" style={{ padding: '5px' }} container className=\"flexGrow\" justify=\"space-between\" >\r\n          <Grid item>\r\n             <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={() => this.handleClick(row, 'BUY', 'buyButtonClicked' )}>BUY</Button> \r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <TextField label=\"Qty\" type=\"number\" name=\"qtyToTake\" value={props.LightChartData.qtyToTake} onChange={this.onChangeQty} />\r\n          </Grid>\r\n\r\n          <Grid item >\r\n            <Button size=\"small\" variant=\"contained\" color=\"Secondary\" onClick={() => this.handleClick(row, 'SELL', 'sellButtonClicked')}>SELL</Button> \r\n          </Grid>\r\n          </Grid> */}\r\n\r\n          {/* body data\r\n        <ReactApexChart\r\n              options={props.data && props.data.options}\r\n              series={props.data && props.data.series}\r\n              type=\"bar\"\r\n              width=\"500\"\r\n            /> */}\r\n\r\n         \r\n\r\n\r\n          {/* below line chart \r\n          {localStorage.getItem('candleChartData') && localStorage.getItem('vwapDataChart') ? <LineChart candleChartData={JSON.parse(localStorage.getItem('candleChartData'))} percentChange={localStorage.getItem('candleChangeShow')} vwapDataChart={JSON.parse(localStorage.getItem('vwapDataChart'))}/>: \"\"}\r\n          */}\r\n          {/* {props.LightChartData.chartStaticData ? <Test ChartData={props.LightChartData} /> : \"\"} */}\r\n\r\n\r\n        </DialogContent>\r\n        <DialogActions>\r\n\r\n\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport { resolveResponse } from \"../../utils/ResponseHandler\";\r\nimport Spinner from \"react-spinner-material\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport * as moment from 'moment';\r\n\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { SMA, RSI, VWAP, BollingerBands } from 'technicalindicators';\r\nimport vwap from 'vwap';\r\nimport CommonMethods from \"../../utils/CommonMethods\";\r\nimport LightChart from \"./LightChart\";\r\nimport LightChartCom from \"./LightChartCom\";\r\n\r\n\r\nclass OrderBook extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            oderbookData: [],\r\n            listofzones: [],\r\n            selectedZone: [],\r\n            zone: '',\r\n            selectAllzone: 'Select All',\r\n            triggerprice: 0,\r\n            price: 0,\r\n            lotsize: 0,\r\n            firstTimeFlag: true,\r\n            staticData: localStorage.getItem('staticData') && JSON.parse(localStorage.getItem('staticData')) || {},\r\n            totalWatchlist: localStorage.getItem('totalWatchlist') && JSON.parse(localStorage.getItem('totalWatchlist')) || [],\r\n            selectedWatchlist: localStorage.getItem('clickedIndexName') ? localStorage.getItem('clickedIndexName') :  'NIFTY BANK', //decodeURIComponent(window.location.href.split('?')[1].split('=')[1]),\r\n            totalStockToWatch: 0,\r\n            timeFrame: \"TEN_MINUTE\",\r\n            chartStaticData: [],\r\n            qtyToTake: '',\r\n            BBBlastType: \"BBBlastOnly\",\r\n            liveBidsList: [],  //localStorage.getItem('liveBidsList') && JSON.parse(localStorage.getItem('liveBidsList')) || [],\r\n            sortedType: \"pChange\",\r\n            backupDeleverydata: [],\r\n            backupBidata: [],\r\n            backupDateList: [],\r\n            backDate : ''\r\n\r\n        }\r\n    }\r\n\r\n    getTodayOrder = () => {\r\n        AdminService.retrieveOrderBook()\r\n            .then((res) => {\r\n                let data = resolveResponse(res, \"noPop\");\r\n                if (data && data.data) {\r\n                    var orderlist = data.data;\r\n                    orderlist.sort(function (a, b) {\r\n                        return new Date(b.updatetime) - new Date(a.updatetime);\r\n                    });\r\n\r\n                    this.setState({ oderbookData: orderlist });\r\n                    localStorage.setItem('oderbookData', JSON.stringify(orderlist));\r\n\r\n                    // var pendingOrder = orderlist.filter(function(row){\r\n                    //     return row.status == \"trigger pending\";\r\n                    // }); \r\n                    // this.setState({pendingOrder: pendingOrder});\r\n\r\n                }\r\n            });\r\n    }\r\n\r\n    // getDerivedStateFromProps(){\r\n    //     //console.log(' this.props.indexName', this.props.indexName)\r\n    //    // this.setState({selectedWatchlist : this.props.indexName }); \r\n    // }\r\n\r\n    componentDidMount() {\r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var endTime = moment('3:30pm', 'h:mma');\r\n        const friday = 5; // for friday\r\n        var currentTime = moment(new Date(), \"h:mma\");\r\n        const today = moment().isoWeekday();\r\n        //market hours\r\n        if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n            console.log(\"setInterval\");\r\n            setInterval(() => {\r\n                this.checkLiveBids();\r\n            }, 5 * 60000);\r\n        }\r\n\r\n        // setInterval(() => {\r\n        //     this.checkLiveBids();\r\n        // }, 5 * 60000);\r\n\r\n\r\n      this.checkLiveBids();\r\n\r\n\r\n        this.getBackUpDate();\r\n\r\n        console.log(\"ddd\", this.state.selectedWatchlist);\r\n    }\r\n\r\n\r\n\r\n    onChangeWatchlist = (e) => {\r\n        clearInterval(this.state.findlast5minMovementInterval);\r\n        this.setState({ [e.target.name]: e.target.value }, function () {\r\n            // this.findlast5minMovement(); //one time only\r\n            //this.startSearching();\r\n            this.checkLiveBids();\r\n\r\n        });\r\n    }\r\n\r\n    onChangeBackDate = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value }, function () {\r\n            this.getByDateBidHistory();\r\n\r\n        });\r\n    }\r\n\r\n    backupData = () => {\r\n        console.log(this.state.backupDeleverydata);\r\n        AdminService.saveDeliveryData({ backupDeleverydata: this.state.backupDeleverydata }).then(storeRes => {\r\n            console.log(\"storeRes\", new Date().toLocaleTimeString(), storeRes);\r\n        });\r\n    }\r\n\r\n    updatebidHistory =(storeResData)=> {\r\n\r\n        console.log(\"storeResData\", storeResData);\r\n\r\n\r\n        this.state.liveBidsList.forEach(element => {\r\n                \r\n            let symbolHist = storeResData.length &&  storeResData.filter(item => item.symbol == element.symbol); \r\n\r\n            \r\n            let buyHist = [], sellHist=[], lastbuybid=0, lastsellbid=0;  \r\n            symbolHist.forEach((element , index)=> {\r\n              \r\n               if(lastbuybid){\r\n                   buyHist.push(((element.totalBuyBid - lastbuybid)*100/lastbuybid).toFixed(2)); \r\n               }\r\n\r\n               if(lastsellbid){\r\n                   sellHist.push(((element.totalSellBid - lastsellbid)*100/lastsellbid).toFixed(2)); \r\n               }\r\n               lastbuybid = element.totalBuyBid; \r\n               lastsellbid = element.totalSellBid; \r\n              \r\n            });\r\n\r\n            element.buybidHistory = buyHist; \r\n            element.sellbidHistory = sellHist; \r\n             \r\n           });\r\n\r\n           this.setState({liveBidsList : this.state.liveBidsList}); \r\n    }\r\n\r\n    storeBidData = () => {\r\n        console.log(this.state.backupBidata);\r\n\r\n        let data = { backupBiddata: this.state.backupBidata, dbUpdateTime: moment(new Date()).format(\"YYYY-MM-DD HH:mm:ss\") }; \r\n        AdminService.saveBidData(data).then(storeRes => {\r\n            let storeResData = resolveResponse(storeRes, \"noPop\");\r\n            this.updatebidHistory(storeResData.result); \r\n        });\r\n    }\r\n\r\n\r\n    checkLiveBids = async () => {\r\n\r\n        var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n        this.setState({ liveBidsList: [], backupDeleverydata: [], backupBidata: [] });\r\n\r\n        console.log(\"watchList\", this.state.staticData)\r\n\r\n        var delData = [];\r\n        for (let index = 0; index < watchList.length; index++) {\r\n            const row = watchList[index];\r\n\r\n            AdminService.checkLiveBids(row.name).then(resd => {\r\n                // let histdatad = resolveResponse(resd, 'noPop');\r\n\r\n               // console.log(\"bid\", resd.data.data)\r\n\r\n                if (resd.data && resd.data.data.length) {\r\n                    let bidlivedata = resd.data.data[0];\r\n                    let biddata = {\r\n                        quantityTraded: parseFloat(bidlivedata.quantityTraded.split(\",\").join('')),\r\n                        deliveryQuantity: parseFloat(bidlivedata.deliveryQuantity.split(\",\").join('')),\r\n                        deliveryToTradedQuantity: parseFloat(bidlivedata.deliveryToTradedQuantity.split(\",\").join('')),\r\n                        symbol: bidlivedata.symbol,\r\n                        todayChange: bidlivedata.pChange,\r\n                        ltp: parseFloat(bidlivedata.lastPrice.split(\",\").join('')),\r\n                        datetime: moment(bidlivedata.secDate).format(\"YYYY-MM-DD HH:mm:ss\"),\r\n                        averagePrice: parseFloat(bidlivedata.averagePrice.split(\",\").join('')),\r\n                    }\r\n                    // delData.push(biddata);\r\n\r\n                    let bidLivedata = {\r\n                        symbol: bidlivedata.symbol,\r\n                        priceChangePer: bidlivedata.pChange,\r\n                        ltp: parseFloat(bidlivedata.lastPrice.split(\",\").join('')),\r\n                        updatedTime: moment(bidlivedata.secDate).format(\"YYYY-MM-DD HH:mm:ss\"),\r\n                        totalBuyBid: parseFloat(bidlivedata.totalBuyQuantity.split(\",\").join('')) ? parseFloat(bidlivedata.totalBuyQuantity.split(\",\").join(''))  : 0,\r\n                        totalSellBid: parseFloat(bidlivedata.totalSellQuantity.split(\",\").join('')) ? parseFloat(bidlivedata.totalSellQuantity.split(\",\").join('')) : 0, \r\n                   \r\n                        quantityTraded : bidlivedata.quantityTraded != '-' ? parseFloat(bidlivedata.quantityTraded.split(\",\").join('')) : 0, \r\n                        deliveryToTradedQuantity: parseFloat(bidlivedata.deliveryToTradedQuantity.split(\",\").join('')),  \r\n                        deliveryQuantity: parseFloat(bidlivedata.deliveryQuantity.split(\",\").join('')), \r\n                 \r\n                        averagePrice: parseFloat(bidlivedata.averagePrice.split(\",\").join('')),\r\n                        buyPrice1: parseFloat(bidlivedata.buyPrice1.split(\",\").join('')),\r\n                        buyPrice2:  parseFloat(bidlivedata.buyPrice2.split(\",\").join('')),\r\n                        buyPrice3:  parseFloat(bidlivedata.buyPrice3.split(\",\").join('')),\r\n                        buyPrice4:  parseFloat(bidlivedata.buyPrice4.split(\",\").join('')),\r\n                        buyPrice5:  parseFloat(bidlivedata.buyPrice5.split(\",\").join('')),\r\n                        buyQuantity1:  parseFloat(bidlivedata.buyQuantity1.split(\",\").join('')),\r\n                        buyQuantity2:  parseFloat(bidlivedata.buyQuantity2.split(\",\").join('')),\r\n                        buyQuantity3:  parseFloat(bidlivedata.buyQuantity3.split(\",\").join('')),\r\n                        buyQuantity4:  parseFloat(bidlivedata.buyQuantity4.split(\",\").join('')),\r\n                        buyQuantity5:  parseFloat(bidlivedata.buyQuantity5.split(\",\").join('')),\r\n\r\n                        sellPrice1:  parseFloat(bidlivedata.sellPrice1.split(\",\").join('')),\r\n                        sellPrice2:  parseFloat(bidlivedata.sellPrice2.split(\",\").join('')),\r\n                        sellPrice3:  parseFloat(bidlivedata.sellPrice3.split(\",\").join('')),\r\n                        sellPrice4:  parseFloat(bidlivedata.sellPrice4.split(\",\").join('')),\r\n                        sellPrice5:  parseFloat(bidlivedata.sellPrice5.split(\",\").join('')),\r\n                        sellQuantity1:  parseFloat(bidlivedata.sellQuantity1.split(\",\").join('')),\r\n                        sellQuantity2:  parseFloat(bidlivedata.sellQuantity2.split(\",\").join('')),\r\n                        sellQuantity3:  parseFloat(bidlivedata.sellQuantity3.split(\",\").join('')),\r\n                        sellQuantity4:  parseFloat(bidlivedata.sellQuantity4.split(\",\").join('')),\r\n                        sellQuantity5:  parseFloat(bidlivedata.sellQuantity5.split(\",\").join('')),\r\n                        \r\n                       \r\n\r\n                    }\r\n\r\n\r\n                    this.setState({ backupBidata: [...this.state.backupBidata, bidLivedata] });\r\n\r\n                    if (index === watchList.length - 1) {\r\n                        setTimeout(() => {\r\n                            console.log(\"last loaggged\")\r\n                            this.storeBidData();\r\n                        }, 1000);\r\n                    }\r\n\r\n                    this.setState({ backupDeleverydata: [...this.state.backupDeleverydata, biddata] });\r\n\r\n\r\n                    bidlivedata.quantityTraded = bidlivedata.quantityTraded != '-' ? parseFloat(bidlivedata.quantityTraded.split(\",\").join('')) : \"0\";\r\n                    bidlivedata.deliveryQuantity = bidlivedata.deliveryQuantity != '-' ? parseFloat(bidlivedata.deliveryQuantity.split(\",\").join('')) : \"0\";\r\n\r\n                    bidlivedata.totalBuyQuantity = bidlivedata.totalBuyQuantity != '-' ? parseFloat(bidlivedata.totalBuyQuantity.split(\",\").join('')) : \"0\";\r\n\r\n                    bidlivedata.totalSellQuantity = bidlivedata.totalSellQuantity != '-' ? parseFloat(bidlivedata.totalSellQuantity.split(\",\").join('')) : \"0\";\r\n                    bidlivedata.totalTradedVolume = bidlivedata.totalTradedVolume != '-' ? parseFloat(bidlivedata.totalTradedVolume.split(\",\").join('')) : \"0\";\r\n                    bidlivedata.totalTradedValue = bidlivedata.totalTradedValue != '-' ? parseFloat(bidlivedata.totalTradedValue.split(\",\").join('')) : \"0\";\r\n\r\n\r\n                    bidlivedata.buytosellTime = bidlivedata.totalBuyQuantity / bidlivedata.totalSellQuantity;\r\n                    bidlivedata.selltobuyTime = bidlivedata.totalSellQuantity / bidlivedata.totalBuyQuantity;\r\n\r\n                    this.state.liveBidsList.sort(function (a, b) {\r\n                        return b.pChange - a.pChange;\r\n                    });\r\n\r\n\r\n                    if (bidlivedata.totalBuyQuantity / bidlivedata.totalSellQuantity > 1.25) {\r\n                        // CommonMethods.speckIt(bidlivedata.symbol + \" \" + (bidlivedata.totalBuyQuantity / bidlivedata.totalSellQuantity).toFixed(2) + \" time buying\");\r\n                        bidlivedata.highlightbuy = true;\r\n                    }\r\n\r\n                    if (bidlivedata.totalSellQuantity / bidlivedata.totalBuyQuantity > 1.25) {\r\n                        //  CommonMethods.speckIt(bidlivedata.symbol + \"  \" + (bidlivedata.totalSellQuantity / bidlivedata.totalBuyQuantity).toFixed(2) + \" time selling\");\r\n                        bidlivedata.highlightsell = true;\r\n                    }\r\n\r\n                    this.setState({ liveBidsList: [...this.state.liveBidsList, bidlivedata], lastUpdateTime: resd.data.lastUpdateTime }, function () {\r\n                        localStorage.setItem(\"liveBidsList\", JSON.stringify(this.state.liveBidsList));\r\n                        window.document.title = \"Del: \" + this.state.liveBidsList[0].symbol;\r\n                    });\r\n\r\n\r\n                }\r\n\r\n            });\r\n            await new Promise(r => setTimeout(r, 200));\r\n        }\r\n\r\n        // if(watchList.length == delData.length)\r\n        // console.log(\"delData\",  delData);\r\n\r\n    }\r\n\r\n    getDeliveryHistory = () => {\r\n\r\n\r\n        for (let index = 0; index < this.state.liveBidsList.length; index++) {\r\n            const element = this.state.liveBidsList[index];\r\n            AdminService.getDeliveryDataFromDb(element.symbol)\r\n                .then((res) => {\r\n                    let data = resolveResponse(res, \"noPop\");\r\n                    console.log(\"hist data\", data.result);\r\n                    if (data && data.result) {\r\n                        var result = data.result;\r\n                        element.delHistory = result;\r\n                        console.log(element.symbol, result);\r\n\r\n                        this.setState({ liveBidsList: this.state.liveBidsList });\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    getByDateBidHistory = () => {\r\n        this.setState({ liveBidsList: []});\r\n\r\n        var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n        let allSymbol = []; \r\n        watchList.forEach(element => {\r\n            allSymbol.push( \"'\" + element.name+\"'\"); \r\n        });\r\n\r\n        AdminService.getBidDataFromDb(this.state.backDate,  allSymbol.join(','), allSymbol.length )\r\n            .then((res) => {\r\n                let data = resolveResponse(res, \"noPop\");\r\n                console.log(\"hist bidHistoty\",data.result);\r\n                \r\n                if (data && data.result) {\r\n                    var result = data.result;\r\n                \r\n                    for (let index = 0; index < result.length; index++) {\r\n                        const bidlivedata = result[index];\r\n                        \r\n                        let data = {\r\n                            quantityTraded : bidlivedata.quantityTraded,\r\n                            deliveryQuantity : bidlivedata.deliveryQuantity, \r\n                            totalBuyQuantity :  bidlivedata.totalBuyBid , \r\n                            totalSellQuantity : bidlivedata.totalSellBid, \r\n                            lastPrice : bidlivedata.ltp, \r\n                            pChange: bidlivedata.priceChangePer,\r\n                            symbol : bidlivedata.symbol,\r\n                            updatedTime :bidlivedata.updatedTime \r\n\r\n                        }\r\n\r\n    \r\n                        data.buytosellTime = bidlivedata.totalBuyBid / bidlivedata.totalSellBid;\r\n                        data.selltobuyTime = bidlivedata.totalSellBid / bidlivedata.totalBuyBid;\r\n    \r\n                        if (bidlivedata.totalBuyBid / bidlivedata.totalSellBid > 1.25) {\r\n                            data.highlightbuy = true;\r\n                        }\r\n    \r\n                        if (bidlivedata.totalSellBid / bidlivedata.totalBuyBid > 1.25) {\r\n                            data.highlightsell = true;\r\n                        }\r\n    \r\n                    \r\n                        this.setState({ liveBidsList: [...this.state.liveBidsList, data], lastUpdateTime: this.state.backDate }, function () {\r\n                           \r\n                            this.state.liveBidsList.sort(function (a, b) {\r\n                                return b.pChange - a.pChange;\r\n                            });\r\n\r\n                        });\r\n                    }\r\n                    this.updatebidHistory(data.bidHistoty); \r\n                }\r\n            });\r\n    }\r\n\r\n    getBackUpDate = () => {\r\n        AdminService.getBackUpdateList()\r\n            .then((res) => {\r\n                let data = resolveResponse(res, \"noPop\");\r\n                console.log(data);\r\n                if (data && data.result) {\r\n\r\n                    let result = [];\r\n                    data.result.forEach(element => {\r\n                        if (element.dbUpdateTime) {\r\n                            result.push(moment(element.dbUpdateTime).format(\"YYYY-MM-DD HH:mm:ss\"));\r\n                        }\r\n                    });\r\n\r\n                    this.setState({ backupDateList: result }, function () {\r\n                       // console.log(\"dates\", this.state.backupDateList)\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value.trim() });\r\n    }\r\n\r\n\r\n    convertToFloat = (str) => {\r\n        if (!isNaN(str)) {\r\n            return \"(\" + (str / 100000).toFixed(2) + \"L)\";\r\n        }\r\n\r\n    }\r\n\r\n    getPercentageColor = (percent) => {\r\n        percent = percent * 100;\r\n        var r = percent < 50 ? 255 : Math.floor(255 - (percent * 2 - 100) * 255 / 100);\r\n        var g = percent > 50 ? 255 : Math.floor((percent * 2) * 255 / 100);\r\n        return 'rgb(' + r + ',' + g + ',0)';\r\n    }\r\n    sortByColumn = (type) => {\r\n\r\n        this.state.liveBidsList.sort(function (a, b) {\r\n            return b[type] - a[type];\r\n        });\r\n\r\n        this.setState({ liveBidsList: this.state.liveBidsList, sortedType: type });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <React.Fragment>\r\n\r\n                {window.location.hash === \"#/delivery\" ? <PostLoginNavBar /> : \"\"}\r\n\r\n\r\n                <Grid direction=\"row\" alignItems=\"center\" container>\r\n                     <Grid item xs={12} sm={12} >\r\n\r\n                        <Paper style={{ padding: \"10px\" }} >\r\n\r\n                            <Grid justify=\"space-between\"\r\n                                container spacing={1}>\r\n\r\n                                <Grid item xs={12} sm={4} >\r\n                                    <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n                                        {this.state.selectedWatchlist} ({this.state.liveBidsList.length}) updated at {this.state.lastUpdateTime}\r\n                                    </Typography>\r\n\r\n                                    <span>Sorted By:  {this.state.sortedType} </span>\r\n\r\n                                </Grid>\r\n\r\n\r\n                                <Grid item xs={12} sm={2} >\r\n                                    <FormControl style={styles.selectStyle} >\r\n                                        <InputLabel htmlFor=\"gender\">Select Watchlist</InputLabel>\r\n                                        <Select value={this.state.selectedWatchlist} name=\"selectedWatchlist\" onChange={this.onChangeWatchlist}>\r\n                                            <MenuItem value={\"selectall\"}>{\"Select All\"}</MenuItem>\r\n                                            {this.state.totalWatchlist && this.state.totalWatchlist.map(element => (\r\n                                                <MenuItem value={element}>{element}</MenuItem>\r\n                                            ))\r\n                                            }\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n\r\n                                <Grid item xs={12} sm={3} >\r\n                                    <Button variant=\"contained\" style={{ marginRight: '20px' }} onClick={() => this.checkLiveBids()}>Refresh</Button>\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} sm={1} >\r\n                                    <Button variant=\"contained\" style={{ marginRight: '20px' }} onClick={() => this.backupData()}>BackUp</Button>\r\n                                </Grid>\r\n\r\n\r\n                                <Grid item xs={12} sm={1} >\r\n                                    <FormControl style={styles.selectStyle} >\r\n                                        <InputLabel htmlFor=\"gender\">Select Back Date</InputLabel>\r\n                                        <Select value={this.state.backDate} name=\"backDate\" onChange={this.onChangeBackDate}>\r\n                                            <MenuItem value={\"\"}>{\"Select Date\"}</MenuItem>\r\n                                            {this.state.backupDateList && this.state.backupDateList.map(element => (\r\n                                                <MenuItem value={element}>{element}</MenuItem>\r\n                                            ))\r\n                                            }\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n\r\n\r\n                            </Grid>\r\n\r\n\r\n                            <Table size=\"small\" style={{ width: \"100%\" }} aria-label=\"sticky table\" >\r\n\r\n                                <TableHead style={{ whiteSpace: \"nowrap\" }} variant=\"head\">\r\n                                    <TableRow variant=\"head\" >\r\n\r\n                                        <TableCell align=\"left\"><Button onClick={() => this.sortByColumn(\"pChange\")}> Symbol</Button> </TableCell>\r\n                                        <TableCell align=\"center\" ><Button onClick={() => this.sortByColumn(\"buytosellTime\")}>buyTosell</Button>  </TableCell>\r\n                                        <TableCell align=\"center\" ><Button onClick={() => this.sortByColumn(\"selltobuyTime\")}>sellTobuy</Button>  </TableCell>\r\n\r\n\r\n\r\n                                        <TableCell align=\"center\" ><Button onClick={() => this.sortByColumn(\"totalBuyQuantity\")}> Total Buy Quantity</Button>  </TableCell>\r\n                                        <TableCell align=\"center\" ><Button onClick={() => this.sortByColumn(\"totalSellQuantity\")}> Total Sell Quantity</Button>  </TableCell>\r\n\r\n\r\n\r\n                                        <TableCell align=\"center\">Average Price</TableCell>\r\n                                        <TableCell align=\"center\"><Button onClick={() => this.sortByColumn(\"quantityTraded\")}> Quantity Traded</Button>  </TableCell>\r\n                                        <TableCell align=\"center\" ><Button onClick={() => this.sortByColumn(\"deliveryQuantity\")}> Delivery Quantity</Button>  </TableCell>\r\n                                        <TableCell align=\"center\" ><Button title={\"Delivery To Traded Quantity\"} onClick={() => this.sortByColumn(\"deliveryToTradedQuantity\")}> Del To Traded Qty%</Button>  </TableCell>\r\n\r\n\r\n\r\n                                        {/* <TableCell align=\"center\" ><Button onClick={() => this.sortByColumn(\"totalTradedVolume\")}> Total Traded Volume</Button>  </TableCell>\r\n                                        <TableCell align=\"center\" ><Button onClick={() => this.sortByColumn(\"totalTradedValue\")}> Total Traded Value(L)</Button>  </TableCell> */}\r\n\r\n                                        {/* <TableCell  align=\"center\">Day Open</TableCell>\r\n                                        <TableCell  align=\"center\">Day High</TableCell>\r\n                                        <TableCell  align=\"center\">Day Low</TableCell>\r\n                                        <TableCell  align=\"center\">Previous Close</TableCell> */}\r\n\r\n\r\n                                        <TableCell align=\"center\" ><Button onClick={() => this.getDeliveryHistory()}>Delivery History</Button>  </TableCell>\r\n\r\n\r\n\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n\r\n\r\n                                    {this.state.liveBidsList ? this.state.liveBidsList.map((row, i) => (\r\n                                        <TableRow hover key={i} style={{ background: this.getPercentageColor(row.pChange) }}>\r\n\r\n                                            <TableCell align=\"left\">{row.symbol} {row.lastPrice} ({row.pChange}%)</TableCell>\r\n                                            <TableCell style={{ background: row.highlightbuy ? \"lightgray\" : \"\" }} align=\"center\">\r\n                                              \r\n                                                {row.buytosellTime.toFixed(2)} time buy</TableCell>\r\n\r\n                                            <TableCell style={{ background: row.highlightsell ? \"lightgray\" : \"\" }} align=\"center\">\r\n                                             \r\n                                                {row.selltobuyTime.toFixed(2)} time sell</TableCell>\r\n\r\n                                     \r\n\r\n                                            <TableCell align=\"center\" style={{background: \"#eceff1\" }}>\r\n                                                    {row.buybidHistory &&  row.buybidHistory.map(item => (\r\n                                                        <span style={{color: item>0 ? \"green\" : \"red\"}}> {item}% </span>\r\n                                                    ))}\r\n                                                <br />\r\n                                                {row.totalBuyQuantity} {this.convertToFloat(row.totalBuyQuantity)}</TableCell>\r\n                                            <TableCell align=\"center\" style={{background: \"#eceff1\" }}>\r\n                                                    {row.sellbidHistory &&  row.sellbidHistory.map(item => (\r\n                                                        <span style={{color: item>0 ? \"green\" : \"red\"}}> {item}% </span>\r\n                                                    ))}\r\n                                                <br />\r\n                                                {row.totalSellQuantity} {this.convertToFloat(row.totalSellQuantity)}</TableCell>\r\n\r\n                                            <TableCell align=\"left\">{row.averagePrice}</TableCell>\r\n\r\n\r\n                                            <TableCell align=\"center\">{row.quantityTraded} {this.convertToFloat(row.quantityTraded)}</TableCell>\r\n                                            <TableCell align=\"center\">{row.deliveryQuantity} {this.convertToFloat(row.deliveryQuantity)}</TableCell>\r\n                                            <TableCell align=\"center\">{row.deliveryToTradedQuantity}%</TableCell>\r\n\r\n                                            {/* <TableCell align=\"center\">{row.totalTradedVolume} {this.convertToFloat(row.totalTradedVolume)}</TableCell>\r\n                                            <TableCell align=\"center\">{row.totalTradedValue}L</TableCell> */}\r\n\r\n                                            {/* <TableCell  align=\"center\">{row.open}</TableCell>\r\n                                    <TableCell  align=\"center\">{row.dayHigh}</TableCell>\r\n                                    <TableCell  align=\"center\">{row.dayLow}</TableCell>\r\n                                    <TableCell  align=\"center\">{row.previousClose}</TableCell> */}\r\n\r\n                                            <TableCell style={{ background: \"#eceff1\" }} align=\"center\">\r\n\r\n                                                {row.delHistory && row.delHistory.map(item => (\r\n                                                    <span> {new Date(item.datetime).toLocaleDateString()}  &nbsp;\r\n                                                        <span title={\"quantityTraded \" + item.quantityTraded}> {(item.quantityTraded / 100000).toFixed(2)}L  </span>  &nbsp;\r\n                                                        <span title={\"deliveryToTradedQuantity\"}> {item.deliveryToTradedQuantity}%  </span>  &nbsp;\r\n                                                        <span title={\"deliveryQuantity \" + item.deliveryQuantity}> {(item.deliveryQuantity / 100000).toFixed(2)}L  </span>  &nbsp;\r\n                                                        <span style={{ color: item.todayChange > 0 ? \"green\" : \"red\" }}> ({item.todayChange}%)   </span>\r\n                                                        &nbsp;  <br /></span>\r\n                                                ))}\r\n\r\n                                            </TableCell>\r\n\r\n\r\n                                        </TableRow>\r\n                                    )) : <Spinner />}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst styles = {\r\n    formContainer: {\r\n        display: 'flex',\r\n        flexFlow: 'row wrap'\r\n    },\r\n\r\n    textStyle: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n\r\n    },\r\n    imgStyle: {\r\n        display: 'flex'\r\n    },\r\n\r\n    selectStyle: {\r\n        minWidth: '100%',\r\n        marginBottom: '10px'\r\n    },\r\n    MuiTextField: {\r\n        overflowY: 'scroll',\r\n        fontSize: \"12px\",\r\n        maxHeight: \"50px\",\r\n\r\n    },\r\n    footerButton: {\r\n        position: 'fixed',\r\n        left: 0,\r\n        bottom: '20px',\r\n        width: '100%',\r\n        textAlign: 'right'\r\n    }\r\n\r\n};\r\n\r\n// const mapStateToProps=(state)=>{\r\n//     return {packs:state.packs.packs.data};\r\n// }\r\n\r\n//export default connect(mapStateToProps,{setPackLoaded})(OrderBook);\r\nexport default OrderBook;","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport { resolveResponse } from \"../../utils/ResponseHandler\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport * as moment from 'moment';\r\nimport OrderBook from './Orderbook';\r\nimport TradeConfig from './TradeConfig.json';\r\nimport ChartDialog from './ChartDialog';\r\nimport ChartMultiple from './ChartMultiple';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\nimport Notify from \"../../utils/Notify\";\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport Parser from 'html-react-parser';\r\nimport Spinner from \"react-spinner-material\";\r\n\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { SMA, RSI, VWAP, BollingerBands } from 'technicalindicators';\r\nimport vwap from 'vwap';\r\nimport CommonOrderMethod from \"../../utils/CommonMethods\";\r\nimport LightChart from \"./LightChart\";\r\nimport LightChartMultiple from \"./LightChartMultiple\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { createChart } from 'lightweight-charts';\r\n\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            staticData: localStorage.getItem('staticData') && JSON.parse(localStorage.getItem('staticData')) || {},\r\n            totalWatchlist: localStorage.getItem('totalWatchlist') && JSON.parse(localStorage.getItem('totalWatchlist')) || [],\r\n            selectedWatchlist:  localStorage.getItem('clickedIndexName') ? localStorage.getItem('clickedIndexName') :  'NIFTY BANK',  //decodeURIComponent(window.location.href.split('?')[1].split('=')[1]),\r\n            totalStockToWatch: 0,\r\n            chartSize: 300, \r\n            timeFrame: \"FIFTEEN_MINUTE\",\r\n            chartStaticData: [],\r\n            BBBlastType: \"BBStrongBreakout\",\r\n            qtyToTake: '',\r\n            fastMovementList: localStorage.getItem('fastMovementList') && JSON.parse(localStorage.getItem('fastMovementList')) || [],\r\n            findlast5minMovement: [],\r\n            gainerList: localStorage.getItem('gainerList') && JSON.parse(localStorage.getItem('gainerList')) || [],\r\n            looserList: localStorage.getItem('looserList') && JSON.parse(localStorage.getItem('looserList')) || [],\r\n\r\n\r\n        };\r\n    }\r\n\r\n\r\n    componentDidMount = async () => {\r\n\r\n        window.document.title = \"Index Charts\";\r\n\r\n        var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n        this.setState({ totalStockToWatch: watchList && watchList.length });\r\n        // this.findlast5minMovement(); //one time only\r\n\r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var endTime = moment('3:30pm', 'h:mma');\r\n        const friday = 5; // for friday\r\n        var currentTime = moment(new Date(), \"h:mma\");\r\n        const today = moment().isoWeekday();\r\n\r\n        var tostartInteral = setInterval(() => {\r\n            var time = new Date();\r\n            //console.log(\"set interval 1sec min/10==0 \", time.toLocaleTimeString());\r\n            if (time.getMinutes() % 10 === 0) {\r\n                console.log(\"search method call in with setTimeout 70sec\", time.toLocaleTimeString());\r\n\r\n                setTimeout(() => {\r\n                    this.find10MinBBBlast();\r\n                }, 70000);\r\n                this.setState({\r\n                    stop10bbSearch:\r\n                        setInterval(() => {\r\n                            console.log(\"search method call in with setInterval in 10min\", time.toLocaleTimeString());\r\n                            if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n                                this.find10MinBBBlast();\r\n                            }\r\n                        }, 60000 * 10 + 70000)\r\n                });\r\n\r\n                clearInterval(tostartInteral);\r\n            }\r\n        }, 1000);\r\n\r\n\r\n        this.find10MinBBBlast();\r\n\r\n    }\r\n\r\n\r\n    stopSearching = () => {\r\n        console.log(\"stop the search\")\r\n        clearInterval(this.state.findlast5minMovementInterval);\r\n        clearInterval(this.state.stop10bbSearch);\r\n\r\n    }\r\n\r\n\r\n    showCandleChart = (candleData, symbol, ltp, perChange) => {\r\n        localStorage.setItem('candleChartData', JSON.stringify(candleData))\r\n        localStorage.setItem('cadleChartSymbol', symbol)\r\n        localStorage.setItem('candlePriceShow', ltp);\r\n        localStorage.setItem('candleChangeShow', perChange.toFixed(2));\r\n        document.getElementById('showCandleChart').click();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //  clearInterval(this.state.findlast5minMovementInterval);\r\n        //        clearInterval(this.state.stop10bbSearch);\r\n        // clearInterval(this.state.scaninterval);\r\n        //  clearInterval(this.state.bankNiftyInterval); \r\n    }\r\n\r\n    onChangeWatchlist = (e) => {\r\n        clearInterval(this.state.findlast5minMovementInterval);\r\n        this.setState({ [e.target.name]: e.target.value }, function () {\r\n            // this.findlast5minMovement(); //one time only\r\n            this.find10MinBBBlast();\r\n\r\n        });\r\n    }\r\n    shouldComponentUpdate(flag, nextProps, nextState) {\r\n        return flag //!equals(nextProps, this.props); // equals() is your implementation\r\n    }\r\n    onChangeQty = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    // startSearching = () => {\r\n\r\n    //     console.log(\"Starting the search\");\r\n\r\n    //     var beginningTime = moment('9:15am', 'h:mma');\r\n    //     var endTime = moment('3:30pm', 'h:mma');\r\n    //     const friday = 5; // for friday\r\n    //     var currentTime = moment(new Date(), \"h:mma\");\r\n    //     const today = moment().isoWeekday();\r\n    //     //market hours\r\n\r\n    //     if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n    //         var intervaltime = 60000;\r\n    //         if (this.state.totalStockToWatch > 180) {\r\n    //             intervaltime = this.state.totalStockToWatch * 333;\r\n    //         }\r\n    //       //  this.setState({ findlast5minMovementInterval: setInterval(() => { this.findlast5minMovement(); }, intervaltime) });\r\n    //     }\r\n    // }\r\n\r\n    getTimeFrameValue = (timeFrame) => {\r\n\r\n        //18 HOURS FOR BACK 1 DATE BACK MARKET OFF\r\n\r\n        switch (timeFrame) {\r\n            case 'ONE_MINUTE':\r\n                return \"200:00:00\";\r\n                break;\r\n            case 'FIVE_MINUTE':\r\n                    return \"1000:00:00\";\r\n                break;\r\n            case 'TEN_MINUTE':\r\n                    return \"1500:00:00\";\r\n                break;\r\n            case 'FIFTEEN_MINUTE':\r\n                return \"2160:00:00\";\r\n                break;\r\n            case 'THIRTY_MINUTE':\r\n                return \"4320:00:00\";\r\n                break;\r\n            case 'ONE_HOUR':\r\n                return \"8320:00:00\";\r\n                break;\r\n            case 'ONE_DAY':\r\n                return \"15000:00:00\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    calculateSMA =(data, count) => {\r\n        var avg = function (data) {\r\n            var sum = 0;\r\n            for (var i = 0; i < data.length; i++) {\r\n                sum += data[i].close;\r\n            }\r\n            return sum / data.length;\r\n        };\r\n        var result = [];\r\n        for (var i = count - 1, len = data.length; i < len; i++) {\r\n            var val = avg(data.slice(i - count + 1, i));\r\n            result.push({ time: data[i].time, value: val });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getRSIBBString=(row)=>{\r\n        var str = ''; \r\n        if(row.BB){\r\n            if(row.ltp >= row.BB.upper){\r\n                str +=  '<span style=\"color:green\">BBupr:' + row.BB.upper+'</span>';\r\n            }else{\r\n                str += '<span style=\"color:red\">BBupr:' + row.BB.upper+'</span>';\r\n            }\r\n    \r\n            if(row.ltp <= row.BB.lower){\r\n                str +=  ' <span style=\"color:green\">BBlwr:' + row.BB.lower+'</span>';\r\n            }else{\r\n                str += ' <span style=\"color:red\">BBlwr:' + row.BB.lower+'</span>';\r\n            }\r\n        }\r\n       \r\n\r\n        str += \"<br/>RSI:\"; \r\n        row.RSI.forEach(element => {\r\n            if(element >= 60){\r\n                str +=  ' <span style=\"color:green\">' + element+'</span>';\r\n            }else if(element >= 40 && element <= 59){\r\n                str +=  ' <span style=\"color:black\">' + element+'</span>';\r\n            }else{\r\n                str += ' <span style=\"color:red\">' + element+'</span>';\r\n            }\r\n        });\r\n\r\n        return str; \r\n    }\r\n\r\n    createMultpleChart = (row) => {\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.style.display = 'block';\r\n        div.style.padding = 10 + 'px';\r\n        div.style.marginLeft = 10 + 'px';\r\n        div.style.marginTop = 10 + 'px';\r\n        div.style.border =  \"2px solid \"+CommonOrderMethod.getPercentageColor(row.perChange);      \r\n\r\n        var legend = document.createElement('div');\r\n        //legend.className = 'sma-legend';\r\n        div.appendChild(legend);\r\n        legend.style.display = 'block';\r\n        legend.style.left = 3 + 'px';\r\n        legend.style.top = 3 + 'px';\r\n\r\n        if(row.perChange > 0){\r\n            legend.style.color = 'green';\r\n        }else{\r\n            legend.style.color = 'red';\r\n        }\r\n\r\n        legend.innerHTML = row.name + \" \" + row.ltp + \" (\"+ row.perChange +'%) <br />';\r\n\r\n\r\n        var legendTitle = document.createElement('div');\r\n        //legend.className = 'sma-legend';\r\n        div.appendChild(legendTitle);\r\n//        legendTitle.style.display = 'block';\r\n        legendTitle.style.fontSize = '10px';\r\n\r\n\r\n        //  const domElement = document.getElementById('tvchart');\r\n        //   document.getElementById('tvchart').innerHTML = '';\r\n\r\n\r\n        const chart = createChart(div, { width: this.state.chartSize, height: this.state.chartSize, timeVisible: true, secondsVisible: true });\r\n\r\n        \r\n        var candleSeries = chart.addCandlestickSeries({\r\n            upColor: 'green',\r\n            downColor: 'red',\r\n            borderDownColor: 'red',\r\n            borderUpColor: 'green',\r\n            wickDownColor: 'red',\r\n            wickUpColor: 'green',\r\n        });\r\n\r\n        candleSeries.setData(row.lightChartData);\r\n\r\n        var smaData = this.calculateSMA(row.lightChartData, 20);\r\n\t\tvar smaLine = chart.addLineSeries({\r\n\t\t\tcolor: 'rgba(4, 111, 232, 1)',\r\n\t\t\tlineWidth: 2,\r\n\t\t});\r\n\t\tsmaLine.setData(smaData);\r\n        \r\n        var volumeSeries = chart.addHistogramSeries({\r\n            color: '#26a69a',\r\n            priceFormat: {\r\n                type: 'volume',\r\n            },\r\n            priceScaleId: '',\r\n            scaleMargins: {\r\n                top: 0.8,\r\n                bottom: 0,\r\n            },\r\n        });\r\n        volumeSeries.setData(row.volumeSeriesData);\r\n        var legend = document.createElement('div');\r\n        //legend.className = 'sma-legend';\r\n        div.append(legend);\r\n        legend.style.display = 'block';\r\n\r\n        legend.innerHTML =  this.getRSIBBString(row); \r\n        document.getElementById(\"allchart\") && document.getElementById(\"allchart\").append(div);\r\n\r\n\r\n        chart.subscribeCrosshairMove((param) => {\r\n\r\n\t\t\tvar getit = param.seriesPrices[Symbol.iterator]();\r\n\r\n\t\t\tvar string = \"\";\r\n\t\t\tvar change = \"\";\r\n\r\n\t\t\tfor (var elem of getit) {\r\n\r\n\t\t\t\t//console.log(elem);\r\n\t\t\t\tif (typeof elem[1] == 'object') {\r\n\t\t\t\t\tstring += \" O: <b>\" + elem[1].open + \"</b>\";\r\n\t\t\t\t\tstring += \" H: <b>\" + elem[1].high + \"</b>\";\r\n\t\t\t\t\tstring += \" L: <b>\" + elem[1].low + \"</b>\";\r\n\t\t\t\t\tstring += \" C: <b>\" + elem[1].close + \"</b>\";\r\n\t\t\t\t\tchange = (elem[1].close - elem[1].open) * 100 / elem[1].open;\r\n\t\t\t\t\tstring += \" CH: <b>\" + change.toFixed(2) + '%</b><br />';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tstring += \" \" + elem[1].toFixed(2) + \" \";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (param.time)\r\n\t\t\t\tstring += \" Time:<b> \" + new Date(param.time).toLocaleString()+ \"</b>\" ;\r\n\r\n\t\t\tvar str = \"<span style=color:green>\" + string + \"</span> \";\r\n\t\t\tif (change < 0)\r\n\t\t\t\tstr = \"<span style=color:red>\" + string + \"</span> \";\r\n\r\n             legendTitle.innerHTML = str;\r\n\t\t});\r\n    \r\n        this.sortTheChart(); \r\n    }\r\n\r\n    \r\n\r\n    sortTheChart =()=> {\r\n       \r\n        let allchart = document.getElementById(\"allchart\");\r\n        let createNewArray = []; \r\n        function getItem(name){\r\n                document.querySelector('#allchart').childNodes.forEach(function(e){\r\n                    if(e.innerText && e.innerText.split(' ')[0] == name){ \r\n                        console.log(\"item\",name, e.innerText.split(' ')[0], e)\r\n                        allchart.appendChild(e); \r\n                        createNewArray.push(e);   \r\n                     //   return e; \r\n                    }\r\n                }) \r\n        }\r\n\r\n        for (let index = 0; index < this.state.findlast5minMovement.length; index++) {\r\n            const element = this.state.findlast5minMovement[index];\r\n            let item = getItem(element.name); \r\n        }\r\n\r\n    }\r\n\r\n\r\n    updateToLocalStorage = (row) => {\r\n\r\n        let foundAt = new Date(row.foundAt).toLocaleString();\r\n        var isfound = this.state.fastMovementList.filter(element => (element.token == row.token && element.foundAt == foundAt));\r\n        console.log(\"isfound\", isfound);\r\n        if (!isfound.length) {\r\n            var updateData = {\r\n                token: row.token,\r\n                foundAt: foundAt,\r\n                ltp: row.ltp,\r\n                symbol: row.symbol,\r\n                nc: row.perChange.toFixed(2),\r\n                orderType: row.orderType\r\n            }\r\n            this.state.fastMovementList.push(updateData);\r\n            //this.setState({ fastMovementList: [..., updateData] });\r\n            localStorage.setItem(\"fastMovementList\", JSON.stringify(this.state.fastMovementList));\r\n            return true;\r\n\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    find10MinBBBlast = async () => {\r\n       \r\n        if(document.getElementById(\"allchart\")){\r\n            document.getElementById(\"allchart\").innerHTML = ''\r\n        } \r\n\r\n        this.setState({ findlast5minMovementUpdate: '', findlast5minMovement: [] });\r\n        var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n        if (this.state.selectedWatchlist == \"gainerList\") {\r\n            watchList = localStorage.getItem('gainerList') && JSON.parse(localStorage.getItem('gainerList'));\r\n        }\r\n        if (this.state.selectedWatchlist == \"looserList\") {\r\n            watchList = localStorage.getItem('looserList') && JSON.parse(localStorage.getItem('looserList'));\r\n        }\r\n        if (this.state.selectedWatchlist == \"selectall\") {\r\n            watchList = localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList'));\r\n        }\r\n        this.setState({ totalStockToWatch: watchList && watchList.length });\r\n\r\n\r\n        if (watchList && watchList.length) {\r\n            for (let index = 0; index < watchList.length; index++) {\r\n\r\n                this.setState({ findlast5minMovementUpdate: index + 1 + \". \" + watchList[index].symbol + \" At \" + new Date().toLocaleTimeString() });\r\n\r\n                const format1 = \"YYYY-MM-DD HH:mm\";\r\n                var beginningTime = moment('9:15am', 'h:mma').format(format1);\r\n\r\n                let timeDuration = this.getTimeFrameValue(this.state.timeFrame);\r\n                var time = moment.duration(\"1000:00:00\");  //22:00:00\" for last day  2hours  timeDuration\r\n                var startDate = moment(new Date()).subtract(timeDuration);\r\n\r\n                var data = {\r\n                    \"exchange\": watchList[index].exch_seg,\r\n                    \"symboltoken\": watchList[index].token,\r\n                    \"interval\": this.state.timeFrame, //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                    \"fromdate\": moment(startDate).format(format1),\r\n                    \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n                }\r\n\r\n                AdminService.getHistoryData(data).then(res => {\r\n                    let histdata = resolveResponse(res, 'noPop');\r\n                    // console.log(\"candle history\", histdata);\r\n\r\n                    if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                        var candleData = histdata.data;\r\n                        var candleChartData = [], vwapdata = [], closeingData = [], highData = [], lowData = [], openData = [], valumeData = [], bbdata = [], volumeSeriesData = [];\r\n                        candleData.forEach((element, loopindex) => {\r\n\r\n                            candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n\r\n                            vwapdata.push([element[5], (element[2] + element[3] + element[4]) / 3]);\r\n                            closeingData.push(element[4]);\r\n                            highData.push(element[2]);\r\n                            lowData.push(element[3]);\r\n                            openData.push(element[3]);\r\n                            valumeData.push(element[5]);\r\n                            bbdata.push((element[2] + element[3] + element[4]) / 3);\r\n                            volumeSeriesData.push({ time: new Date(element[0]).getTime(), value: element[5], color: 'rgba(211, 211, 211, 1)' })\r\n\r\n\r\n                        });\r\n\r\n                        // { time: '2018-10-19', value: 19103293.00, color: 'rgba(0, 150, 136, 0.8)' },\r\n\r\n                        var sma = SMA.calculate({ period: 20, values: closeingData });\r\n                        //   console.log(watchList[index].symbol, \"SMA\", sma);\r\n\r\n\r\n                        var inputRSI = { values: closeingData, period: 14 };\r\n                        var lastRsiValue = RSI.calculate(inputRSI);\r\n\r\n                        // console.log(watchList[index].symbol, \"Rsi\", inputRSI, lastRsiValue);\r\n                        // console.log(watchList[index].symbol, \"vwap\", vwapdata, vwap(vwapdata));\r\n\r\n\r\n                        var inputVWAP = {\r\n                            open: openData,\r\n                            high: highData,\r\n                            low: lowData,\r\n                            close: closeingData,\r\n                            volume: valumeData\r\n                        };\r\n\r\n                        var input = {\r\n                            period: 20,\r\n                            values: bbdata,\r\n                            stdDev: 2\r\n\r\n                        }\r\n\r\n                        var bb = BollingerBands.calculate(input);\r\n\r\n                        var vwapdata = VWAP.calculate(inputVWAP);\r\n                        //   console.log(watchList[index].symbol, \"Bolinger band\", input, bb);\r\n                      //  console.log(watchList[index].symbol, \"vwap daa\", VWAP.calculate(inputVWAP));\r\n\r\n                        var bbvlastvalue = bb[bb.length - 1];\r\n                        if (bbvlastvalue) {\r\n                            bbvlastvalue.upper = bbvlastvalue.upper.toFixed(2);\r\n                            bbvlastvalue.middle = bbvlastvalue.middle.toFixed(2);\r\n                            bbvlastvalue.lower = bbvlastvalue.lower.toFixed(2);\r\n\r\n                        }\r\n\r\n                        const lightChartData = candleData.map(d => {\r\n                            return { time: new Date(d[0]).getTime(), open: parseFloat(d[1]), high: parseFloat(d[2]), low: parseFloat(d[3]), close: parseFloat(d[4]) }\r\n                        });\r\n\r\n\r\n                        var dataltp = {\r\n                            \"exchange\": \"NSE\",\r\n                            \"tradingsymbol\": watchList[index].symbol,\r\n                            \"symboltoken\": watchList[index].token,\r\n                        }\r\n\r\n                        AdminService.getLTP(dataltp).then(res => {\r\n                            let data = resolveResponse(res, 'noPop');\r\n                            var LtpData = data && data.data;\r\n                            //console.log(LtpData);\r\n                            if (LtpData && LtpData.ltp) {\r\n                                let data = {\r\n                                    symbol: watchList[index].symbol,\r\n                                    token: watchList[index].token,\r\n                                    RSIValue: lastRsiValue[lastRsiValue.length - 1],\r\n                                    RSI: lastRsiValue.slice(Math.max(lastRsiValue.length - 8, 1)),\r\n                                    valumeData: valumeData.slice(Math.max(valumeData.length - 8, 1)),\r\n                                    VWAP: vwapdata[vwapdata.length - 1], //vwap(vwapdata),\r\n                                    BB: bbvlastvalue,\r\n                                    candleChartData: candleChartData,\r\n                                    foundAt: candleData && new Date(candleData[candleData.length - 1][0]).toLocaleString(),\r\n                                    name: watchList[index].name,\r\n                                    lightChartData: lightChartData,\r\n                                    volumeSeriesData: volumeSeriesData\r\n                                }\r\n\r\n                                data.perChange = ((LtpData.ltp - LtpData.close) * 100 / LtpData.close).toFixed(2);\r\n                                data.ltp = LtpData.ltp;\r\n\r\n\r\n\r\n                                this.setState({ findlast5minMovement: [...this.state.findlast5minMovement, data] }, function(){\r\n                                  \r\n                                    this.state.findlast5minMovement && this.state.findlast5minMovement.sort(function (a, b) {\r\n                                        return b.perChange - a.perChange;\r\n                                    });\r\n                                    this.createMultpleChart(data);\r\n                                    \r\n                                });\r\n                                                                \r\n                              \r\n                            }\r\n                        });\r\n\r\n\r\n\r\n                    } else {\r\n                        //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                        console.log(watchList[index].symbol, \"  emply candle found\");\r\n                    }\r\n                })\r\n\r\n                await new Promise(r => setTimeout(r, 600));\r\n            }\r\n        } else {\r\n            Notify.showError(\"No Stock Found\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    callbackAfterOrderDone = (order) => {\r\n        // setValues({ ...values, ['buyFlag']: order.status });\r\n        // setValues({ ...values, ['sellFlag']:  order.status  });\r\n        //  this.setState({ [spineerId]: order.status}); \r\n        console.log(\"order executed\", order);\r\n    }\r\n\r\n\r\n\r\n    handleClick = (row, type, spinnerIndex) => {\r\n\r\n        console.log(row);\r\n        if (row.token && row.symbol) {\r\n            if (type == 'BUY') {\r\n                this.setState({ [spinnerIndex]: true });\r\n                var symbolInfo = {\r\n                    token: row.token,\r\n                    symbol: row.symbol,\r\n                    qtyToTake: this.state.qtyToTake\r\n                }\r\n                console.log(symbolInfo);\r\n                CommonOrderMethod.historyWiseOrderPlace(symbolInfo, 'BUY', \"no\", this.callbackAfterOrderDone);\r\n                this.setState({ [spinnerIndex]: false });\r\n\r\n            }\r\n\r\n            if (type == 'SELL') {\r\n                this.setState({ [spinnerIndex]: true });\r\n                var symbolInfo = {\r\n                    token: row.token,\r\n                    symbol: row.symbol,\r\n                    qtyToTake: this.state.qtyToTake\r\n                }\r\n                console.log(symbolInfo);\r\n                CommonOrderMethod.historyWiseOrderPlace(symbolInfo, 'SELL', \"no\", this.callbackAfterOrderDone);\r\n                this.setState({ [spinnerIndex]: false });\r\n            }\r\n        } else {\r\n            Notify.showError(\" Symbol Not found!!!\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        //var foundPatternList = localStorage.getItem('foundPatternList') && JSON.parse(localStorage.getItem('foundPatternList')).reverse(); \r\n\r\n        return (\r\n            <React.Fragment>\r\n\r\n                 {window.location.hash === \"#/index-charts\" ? <PostLoginNavBar /> : \"\"}\r\n\r\n                <br />\r\n                <ChartDialog /> <ChartMultiple />\r\n\r\n                <Grid justify=\"space-between\"\r\n                    container spacing={1}>\r\n\r\n                    <Grid item xs={12} sm={4} >\r\n                        <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n                            &nbsp; {this.state.selectedWatchlist} Stocks ({this.state.findlast5minMovement && this.state.findlast5minMovement.length})\r\n                            <span id=\"stockTesting\" style={{ fontSize: \"18px\", color: 'gray' }}> {this.state.findlast5minMovementUpdate} </span>\r\n                        </Typography>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={1} >\r\n                        <FormControl style={styles.selectStyle} >\r\n                            <InputLabel htmlFor=\"gender\">Chart Size</InputLabel>\r\n                            <Select value={this.state.chartSize} name=\"chartSize\" onChange={this.onChangeWatchlist}>\r\n                                <MenuItem value={250}>{'250px'}</MenuItem>\r\n                                <MenuItem value={300}>{'300px'}</MenuItem>\r\n                                <MenuItem value={350}>{'350px'}</MenuItem>\r\n                                <MenuItem value={450}>{'450px'}</MenuItem>\r\n                                <MenuItem value={550}>{'550px'}</MenuItem>\r\n                                <MenuItem value={650}>{'650px'}</MenuItem>\r\n\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n\r\n                    <Grid item xs={12} sm={2} >\r\n                        <FormControl style={styles.selectStyle} >\r\n                            <InputLabel htmlFor=\"gender\">Select Watchlist</InputLabel>\r\n                            <Select value={this.state.selectedWatchlist} name=\"selectedWatchlist\" onChange={this.onChangeWatchlist}>\r\n                                <MenuItem value={\"gainerList\"}>{\"Gainer List (\" +  this.state.gainerList.length +\")\"}</MenuItem>\r\n                                <MenuItem value={\"looserList\"}>{\"Looser List (\" +  this.state.looserList.length +\")\"}</MenuItem>\r\n\r\n                                <MenuItem value={\"selectall\"}>{\"Select All\"}</MenuItem>\r\n                                {this.state.totalWatchlist && this.state.totalWatchlist.map(element => (\r\n                                    <MenuItem value={element}>{element}</MenuItem>\r\n                                ))\r\n                                }\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={1} >\r\n                        <FormControl style={styles.selectStyle} >\r\n                            <InputLabel htmlFor=\"gender\">Select Time</InputLabel>\r\n                            <Select value={this.state.timeFrame} name=\"timeFrame\" onChange={this.onChangeWatchlist}>\r\n                                <MenuItem value={'ONE_MINUTE'}>{'1 Min'}</MenuItem>\r\n                                <MenuItem value={'FIVE_MINUTE'}>{'5 Min'}</MenuItem>\r\n                                <MenuItem value={'TEN_MINUTE'}>{'10 Min'}</MenuItem>\r\n                                <MenuItem value={'FIFTEEN_MINUTE'}>{'15 Min'}</MenuItem>\r\n                                <MenuItem value={'THIRTY_MINUTE'}>{'30 Min'}</MenuItem>\r\n                                <MenuItem value={'ONE_HOUR'}>{'1 Hour'}</MenuItem>\r\n                                <MenuItem value={'ONE_DAY'}>{'1 Day'}</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    \r\n                    {/* \r\n                    <Grid item xs={12} sm={1} >\r\n                        <FormControl style={styles.selectStyle} >\r\n                            <InputLabel htmlFor=\"gender\">Select Time</InputLabel>\r\n                            <Select value={this.state.BBBlastType} name=\"BBBlastType\" onChange={this.onChangeWatchlist}>\r\n       \r\n                                <MenuItem value={'BBStrongBreakout'}>{'BB Strong Breakout'}</MenuItem>\r\n\r\n\r\n\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid> */}\r\n\r\n                    <Grid item xs={12} sm={4} >\r\n                        <Button variant=\"contained\" style={{ marginRight: '20px' }} onClick={() => this.find10MinBBBlast()}>Start</Button>\r\n                        <Button variant=\"contained\" style={{ marginRight: '20px' }} onClick={() => this.stopSearching()}>Stop</Button>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n\r\n\r\n                <Grid container spacing={2} style={{padding:'10px'}} id=\"allchart\" >\r\n\r\n\r\n                    {/* {this.state.findlast5minMovement ? this.state.findlast5minMovement.map((row, i) => (\r\n\r\n                        <Grid item xs={12} sm={3}>\r\n                            <Paper style={{ overflow: \"auto\", padding: '10px' }} >\r\n\r\n                                <Typography style={{ color: row.perChange > 0 ? \"green\" : \"red\" }}> {row.name} {row.ltp} {row.perChange ? \"(\" + row.perChange + \"%\" + \")\" : \"\"} <span> &nbsp;&nbsp;  {row.foundAt}</span></Typography>\r\n\r\n                            \r\n                                {row.candleChartData.length > 0 ? <ReactApexChart\r\n                                    options={{\r\n                                        chart: {\r\n                                            type: 'candlestick',\r\n                                            height: 350\r\n                                          },\r\n                                          title: {\r\n                                            text: 'CandleStick Chart',\r\n                                            align: 'left'\r\n                                          },\r\n                                          xaxis: {\r\n                                            type: 'datetime',\r\n                                          },\r\n                                          yaxis: {\r\n                                            tooltip: {\r\n                                              enabled: true\r\n                                            }\r\n                                          }\r\n                                       \r\n                                    }}\r\n                                   \r\n                                    series={[{\r\n                                        data: row.candleChartData.slice(Math.max(row.candleChartData.length - 100, 1))\r\n                                    },\r\n                                    ]}\r\n\r\n                                    type=\"candlestick\"\r\n                                    width={350}\r\n                                    height={250}\r\n\r\n                                /> : \"\"}\r\n\r\n\r\n                                <Grid direction=\"row\" style={{ padding: '5px' }} container className=\"flexGrow\" justify=\"space-between\" >\r\n\r\n\r\n\r\n                                    {row.DSMALastValue ? <Grid item xs={12} sm={12} style={{ color: row.ltp > row.DSMALastValue ? \"green\" : \"red\", fontWeight: \"bold\" }}>\r\n                                        Daily SMA: {row.DSMALastValue} {row.ltp > row.DSMALastValue ? \"BUY\" : \"SELL\"}\r\n                                    </Grid> : \"\"}\r\n                                    <Grid item xs={12} sm={12} style={{ color: row.ltp > row.VWAP ? \"green\" : \"red\", fontWeight: \"bold\" }}>\r\n                                        VWAP:  {row.VWAP}\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={12} sm={12} >\r\n                                        BB {row.BB ? <>\r\n                                            &nbsp; <span style={{ color: row.ltp >= row.BB && row.BB.upper ? \"green\" : \"\", fontWeight: \"bold\" }}>Upper: {row.BB && row.BB.upper}</span>\r\n                                            &nbsp; <span style={{ color: row.ltp >= row.BB.middle ? \"green\" : \"red\", fontWeight: \"bold\" }}>Middle: {row.BB && row.BB.middle}</span>\r\n                                            &nbsp; <span style={{ color: row.ltp <= row.BB && row.BB.lower ? \"red\" : \"\", fontWeight: \"bold\" }}> Lower: {row.BB && row.BB.lower}</span>\r\n\r\n                                        </> : \"\"}\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={12} sm={12}>\r\n                                        RSI: {row.RSI.map((item, j) => (\r\n                                            item >= 60 ? <span style={{ color: 'green', fontWeight: \"bold\" }}> {item} </span> : <span style={{ color: item <= 40 ? 'red' : \"\", fontWeight: \"bold\" }}> {item} </span>\r\n                                        ))}\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={12}>\r\n                                        Volume: {row.valumeData.map((item, j) => (\r\n                                            <span> {(item / 100000).toFixed(2)}L </span>\r\n                                        ))}\r\n                                    </Grid>\r\n\r\n\r\n\r\n\r\n                                </Grid>\r\n\r\n                                <Grid direction=\"row\" style={{ padding: '5px' }} container className=\"flexGrow\" justify=\"space-between\" >\r\n                                    <Grid item>\r\n                                        {!this.state['buyButtonClicked' + row.symbol + i] ? <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={() => this.handleClick(row, 'BUY', 'buyButtonClicked' + row.symbol + i)}>BUY</Button> : <Spinner />}\r\n                                    </Grid>\r\n\r\n                                    <Grid item>\r\n                                        <TextField style={{ marginTop: '-15px' }} label=\"Qty\" type=\"number\" name=\"qtyToTake\" value={this.state.qtyToTake} onChange={this.onChangeQty} />\r\n                                    </Grid>\r\n\r\n                                    <Grid item >\r\n                                        {!this.state['sellButtonClicked' + row.symbol + i] ? <Button size=\"small\" variant=\"contained\" color=\"Secondary\" onClick={() => this.handleClick(row, 'SELL', 'sellButtonClicked' + row.symbol + i)}>SELL</Button> : <Spinner />}\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n\r\n                            </Paper>\r\n\r\n                        </Grid>\r\n\r\n                    )) : ''} */}\r\n                </Grid>\r\n\r\n            </React.Fragment>\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nconst styles = {\r\n    formContainer: {\r\n        display: 'flex',\r\n        flexFlow: 'row wrap'\r\n    },\r\n\r\n    textStyle: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n\r\n    },\r\n    imgStyle: {\r\n        display: 'flex'\r\n    },\r\n\r\n    selectStyle: {\r\n        minWidth: '100%',\r\n        marginBottom: '10px'\r\n    },\r\n    MuiTextField: {\r\n        overflowY: 'scroll',\r\n        fontSize: \"12px\",\r\n        maxHeight: \"50px\",\r\n\r\n    },\r\n    footerButton: {\r\n        position: 'fixed',\r\n        left: 0,\r\n        bottom: '20px',\r\n        width: '100%',\r\n        textAlign: 'right'\r\n    }\r\n\r\n};\r\n\r\nexport default Home;","import React, {useEffect} from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport OrderWatchlist from \"./OrderWatchlist\";\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nexport default function CustomizedDialogs(props) {\r\n\r\n\r\n \r\n  const [open, setOpen] = React.useState(false);\r\n \r\n  var [values, setValues] = React.useState({\r\n    data : [],\r\n    candledata: {}\r\n})\r\n\r\n\r\n \r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" id=\"showCandleChart\" color=\"primary\" style={{display:\"visible\"}} onClick={handleClickOpen}>\r\n        Add to OW\r\n      </Button>\r\n      <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n    \r\n        <DialogContent dividers id=\"chart\">\r\n            <OrderWatchlist />\r\n      \r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport { resolveResponse } from \"../../utils/ResponseHandler\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport * as moment from 'moment';\r\nimport OrderBook from './Orderbook';\r\nimport TradeConfig from './TradeConfig.json';\r\nimport ChartMultiple from './ChartMultiple';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\nimport Notify from \"../../utils/Notify\";\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport Parser from 'html-react-parser';\r\nimport Spinner from \"react-spinner-material\";\r\n\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { SMA, RSI, VWAP, BollingerBands } from 'technicalindicators';\r\nimport vwap from 'vwap';\r\nimport CommonOrderMethod from \"../../utils/CommonMethods\";\r\nimport LightChart from \"./LightChart\";\r\nimport LightChartMultiple from \"./LightChartMultiple\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { createChart } from 'lightweight-charts';\r\nimport OrderWatchlistDialog from './OrderWatchlistDialog'\r\n\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            staticData: localStorage.getItem('staticData') && JSON.parse(localStorage.getItem('staticData')) || {},\r\n            totalWatchlist: localStorage.getItem('totalWatchlist') && JSON.parse(localStorage.getItem('totalWatchlist')) || [],\r\n            selectedWatchlist: localStorage.getItem('clickedIndexName') ? localStorage.getItem('clickedIndexName') : 'NIFTY BANK',  //decodeURIComponent(window.location.href.split('?')[1].split('=')[1]),\r\n            totalStockToWatch: 0,\r\n            chartSize: 300, \r\n            timeFrame: \"ONE_DAY\",\r\n            chartStaticData: [],\r\n            BBBlastType: \"BBStrongBreakout\",\r\n            qtyToTake: '',\r\n            fastMovementList: localStorage.getItem('fastMovementList') && JSON.parse(localStorage.getItem('fastMovementList')) || [],\r\n            strongChartList: [],\r\n            gainerList: localStorage.getItem('gainerList') && JSON.parse(localStorage.getItem('gainerList')) || [],\r\n            looserList: localStorage.getItem('looserList') && JSON.parse(localStorage.getItem('looserList')) || [],\r\n            sortBy: \"perChange\",\r\n            softedIndexList: [],\r\n            sluglist: {\r\n                'NIFTY 50': 'nifty',\r\n                'NIFTY AUTO': 'cnxAuto',\r\n                'NIFTY BANK': 'bankNifty',\r\n                'NIFTY ENERGY': 'cnxEnergy',\r\n                'NIFTY FIN SERVICE': 'cnxFinance',\r\n                'NIFTY FMCG': 'cnxFMCG',\r\n                'NIFTY IT': 'cnxit',\r\n                'NIFTY MEDIA': 'cnxMedia',\r\n                'NIFTY METAL': 'cnxMetal',\r\n                'NIFTY PHARMA': 'cnxPharma',\r\n                'NIFTY PSU BANK': 'cnxPSU',\r\n                'NIFTY REALTY': 'cnxRealty',\r\n                'NIFTY PVT BANK': 'niftyPvtBank',\r\n                'NIFTY CONSUMPTION': 'cnxConsumption',\r\n                'NIFTY CPSE': 'cpse',\r\n                'NIFTY INFRA': 'cnxInfra',\r\n                'NIFTY MNC': 'cnxMNC',\r\n                'NIFTY PSE': 'cnxPSE',\r\n            },\r\n\r\n        };\r\n    }\r\n\r\n\r\n    componentDidMount = async () => {\r\n\r\n        window.document.title = \"Index Charts\";\r\n\r\n        var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n        this.setState({ totalStockToWatch: watchList && watchList.length });\r\n        // this.strongChartList(); //one time only\r\n\r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var endTime = moment('3:30pm', 'h:mma');\r\n        const friday = 5; // for friday\r\n        var currentTime = moment(new Date(), \"h:mma\");\r\n        const today = moment().isoWeekday();\r\n\r\n    // var tostartInteral = setInterval(() => {\r\n    //     var time = new Date();\r\n    //     //console.log(\"set interval 1sec min/10==0 \", time.toLocaleTimeString());\r\n    //     if (time.getMinutes() % 10 === 0) {\r\n    //         //  console.log(\"search method call in with setTimeout 70sec\", time.toLocaleTimeString());\r\n\r\n    //         setTimeout(() => {\r\n    //             this.findStrongCharts();\r\n    //         }, 70000);\r\n    //         this.setState({\r\n    //             stop10bbSearch:\r\n    //                 setInterval(() => {\r\n    //                     console.log(\"search method call in with setInterval in 10min\", time.toLocaleTimeString());\r\n    //                     if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n    //                         this.findStrongCharts();\r\n    //                     }\r\n    //                 }, 60000 * 10 + 70000)\r\n    //         });\r\n\r\n    //         clearInterval(tostartInteral);\r\n    //     }\r\n    // }, 1000);\r\n\r\n\r\n      //  this.getUpdateIndexData()\r\n        //  this.findStrongCharts();\r\n\r\n\r\n    }\r\n\r\n\r\n    stopSearching = () => {\r\n        //console.log(\"stop the search\")\r\n        clearInterval(this.state.strongChartListInterval);\r\n        clearInterval(this.state.stop10bbSearch);\r\n        this.setState({ stopChart: true })\r\n\r\n\r\n    }\r\n\r\n\r\n    showCandleChart = (candleData, symbol, ltp, perChange) => {\r\n        localStorage.setItem('candleChartData', JSON.stringify(candleData))\r\n        localStorage.setItem('cadleChartSymbol', symbol)\r\n        localStorage.setItem('candlePriceShow', ltp);\r\n        localStorage.setItem('candleChangeShow', perChange.toFixed(2));\r\n        document.getElementById('showCandleChart').click();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        //  clearInterval(this.state.strongChartListInterval);\r\n        //        clearInterval(this.state.stop10bbSearch);\r\n        // clearInterval(this.state.scaninterval);\r\n        //  clearInterval(this.state.bankNiftyInterval); \r\n    }\r\n\r\n    onChangeWatchlist = (e) => {\r\n        clearInterval(this.state.strongChartListInterval);\r\n        this.setState({ [e.target.name]: e.target.value }, function () {\r\n            // this.strongChartList(); //one time only\r\n            this.findStrongCharts();\r\n\r\n        });\r\n    }\r\n    shouldComponentUpdate(flag, nextProps, nextState) {\r\n        return flag //!equals(nextProps, this.props); // equals() is your implementation\r\n    }\r\n    onChangeQty = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    // startSearching = () => {\r\n\r\n    //     console.log(\"Starting the search\");\r\n\r\n    //     var beginningTime = moment('9:15am', 'h:mma');\r\n    //     var endTime = moment('3:30pm', 'h:mma');\r\n    //     const friday = 5; // for friday\r\n    //     var currentTime = moment(new Date(), \"h:mma\");\r\n    //     const today = moment().isoWeekday();\r\n    //     //market hours\r\n\r\n    //     if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n    //         var intervaltime = 60000;\r\n    //         if (this.state.totalStockToWatch > 180) {\r\n    //             intervaltime = this.state.totalStockToWatch * 333;\r\n    //         }\r\n    //       //  this.setState({ strongChartListInterval: setInterval(() => { this.strongChartList(); }, intervaltime) });\r\n    //     }\r\n    // }\r\n\r\n    getTimeFrameValue = (timeFrame) => {\r\n\r\n        //18 HOURS FOR BACK 1 DATE BACK MARKET OFF\r\n\r\n        switch (timeFrame) {\r\n            case 'ONE_MINUTE':\r\n                return \"200:00:00\";\r\n                break;\r\n            case 'FIVE_MINUTE':\r\n                return \"1000:00:00\";\r\n                break;\r\n            case 'TEN_MINUTE':\r\n                return \"1500:00:00\";\r\n                break;\r\n            case 'FIFTEEN_MINUTE':\r\n                return \"2160:00:00\";\r\n                break;\r\n            case 'THIRTY_MINUTE':\r\n                return \"4320:00:00\";\r\n                break;\r\n            case 'ONE_HOUR':\r\n                return \"8320:00:00\";\r\n                break;\r\n            case 'ONE_DAY':\r\n                return \"15000:00:00\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    calculateSMA = (data, count) => {\r\n        var avg = function (data) {\r\n            var sum = 0;\r\n            for (var i = 0; i < data.length; i++) {\r\n                sum += data[i].close;\r\n            }\r\n            return sum / data.length;\r\n        };\r\n        var result = [];\r\n        for (var i = count - 1, len = data.length; i < len; i++) {\r\n            var val = avg(data.slice(i - count + 1, i));\r\n            result.push({ time: data[i].time, value: val });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    getRSIBBString = (row) => {\r\n        var str = '';\r\n\r\n        if (row.BB) {\r\n            if (row.ltp >= row.BB.upper) {\r\n                str += '<span style=\"color:green\">BBupr:' + row.BB.upper + '</span>';\r\n            } else {\r\n                str += '<span style=\"color:red\">BBupr:' + row.BB.upper + '</span>';\r\n            }\r\n\r\n            if (row.ltp <= row.BB.lower) {\r\n                str += ' <span style=\"color:green\">BBlwr:' + row.BB.lower + '</span>';\r\n            } else {\r\n                str += ' <span style=\"color:red\">BBlwr:' + row.BB.lower + '</span>';\r\n            }\r\n        }\r\n\r\n\r\n        str += \"<br/>RSI:\";\r\n        row.RSI.forEach(element => {\r\n            if (element >= 60) {\r\n                str += ' <span style=\"color:green\">' + element + '</span>';\r\n            } else if (element >= 40 && element <= 59) {\r\n                str += ' <span style=\"color:black\">' + element + '</span>';\r\n            } else {\r\n                str += ' <span style=\"color:red\">' + element + '</span>';\r\n            }\r\n        });\r\n\r\n        return str;\r\n    }\r\n\r\n    createMultpleChart = (row) => {\r\n\r\n        var div = document.createElement(\"div\");\r\n        div.style.display = 'block';\r\n        div.style.padding = 10 + 'px';\r\n        div.style.marginLeft = 10 + 'px';\r\n        div.style.marginTop = 10 + 'px';\r\n        div.style.border = \"2px solid \" + CommonOrderMethod.getPercentageColor(row.perChange);\r\n\r\n        var legend = document.createElement('div');\r\n        //legend.className = 'sma-legend';\r\n        div.appendChild(legend);\r\n        legend.style.display = 'block';\r\n        legend.style.left = 3 + 'px';\r\n        legend.style.top = 3 + 'px';\r\n\r\n        if (row.perChange > 0) {\r\n            legend.style.color = 'green';\r\n        } else {\r\n            legend.style.color = 'red';\r\n        }\r\n\r\n\r\n        let str = row.name + \" \" + row.ltp + \" (<b>\" + row.perChange + '%</b>)  &nbsp;&nbsp; <b title=\"previous volume broken count\" >VBC:  ' + row.candleVolBrokenCount + ' </b><br />';\r\n\r\n        str += '<span style=\"color:black\">Emotions: </span> ';\r\n        if (row.strongPer) {\r\n            if (row.strongPer >= 75) {\r\n                str += '<span style=\"color:green\"><b>Buying :' + row.strongPer.toFixed(2) + '%</b></span>';\r\n            } else {\r\n                str += '<span  style=\"color:black\">Buying:' + row.strongPer.toFixed(2) + '% </span>';\r\n            }\r\n        }\r\n\r\n        if (row.strongPer) {\r\n            if (row.strongPer <= 25) {\r\n                str += '<span style=\"color:red\"><b> Selling :' + (100 - row.strongPer).toFixed(2) + '%</b></span>';\r\n            } else {\r\n                str += '<span  style=\"color:black\"> Selling:' + (100 - row.strongPer).toFixed(2) + '%</span>';\r\n            }\r\n        }\r\n\r\n        str += '<br />';\r\n        legend.innerHTML = str;\r\n\r\n        var legendTitle = document.createElement('div');\r\n        //legend.className = 'sma-legend';\r\n        div.appendChild(legendTitle);\r\n        //        legendTitle.style.display = 'block';\r\n        legendTitle.style.fontSize = '10px';\r\n\r\n\r\n        //  const domElement = document.getElementById('tvchart');\r\n        //   document.getElementById('tvchart').innerHTML = '';\r\n\r\n\r\n        const chart = createChart(div, { width: this.state.chartSize, height: this.state.chartSize, timeVisible: true, secondsVisible: true });\r\n\r\n        var candleSeries = chart.addCandlestickSeries({\r\n            upColor: 'green',\r\n            downColor: 'red',\r\n            borderDownColor: 'red',\r\n            borderUpColor: 'green',\r\n            wickDownColor: 'red',\r\n            wickUpColor: 'green',\r\n        });\r\n\r\n        candleSeries.setData(row.lightChartData);\r\n\r\n        var smaData = this.calculateSMA(row.lightChartData, 20);\r\n        var smaLine = chart.addLineSeries({\r\n            color: 'rgba(4, 111, 232, 1)',\r\n            lineWidth: 2,\r\n        });\r\n        smaLine.setData(smaData);\r\n\r\n        var volumeSeries = chart.addHistogramSeries({\r\n            color: '#26a69a',\r\n            priceFormat: {\r\n                type: 'volume',\r\n            },\r\n            priceScaleId: '',\r\n            scaleMargins: {\r\n                top: 0.8,\r\n                bottom: 0,\r\n            },\r\n        });\r\n        volumeSeries.setData(row.volumeSeriesData);\r\n        var legend = document.createElement('div');\r\n        //legend.className = 'sma-legend';\r\n        div.append(legend);\r\n        legend.style.display = 'block';\r\n\r\n        legend.innerHTML = this.getRSIBBString(row);\r\n        document.getElementById(\"allchart\") && document.getElementById(\"allchart\").append(div);\r\n\r\n\r\n        chart.subscribeCrosshairMove((param) => {\r\n\r\n            var getit = param.seriesPrices[Symbol.iterator]();\r\n\r\n            var string = \"\";\r\n            var change = \"\";\r\n\r\n            for (var elem of getit) {\r\n\r\n                //console.log(elem);\r\n                if (typeof elem[1] == 'object') {\r\n                    string += \" O: <b>\" + elem[1].open + \"</b>\";\r\n                    string += \" H: <b>\" + elem[1].high + \"</b>\";\r\n                    string += \" L: <b>\" + elem[1].low + \"</b>\";\r\n                    string += \" C: <b>\" + elem[1].close + \"</b>\";\r\n                    change = (elem[1].close - elem[1].open) * 100 / elem[1].open;\r\n                    string += \" CH: <b>\" + change.toFixed(2) + '%</b><br />';\r\n                } else {\r\n                    string += \" \" + elem[1].toFixed(2) + \" \";\r\n                }\r\n            }\r\n\r\n            if (param.time)\r\n                string += \" Time:<b> \" + moment(param.time).format(\"DD-MM-YYYY hh:mm A\") + \"</b>\";\r\n\r\n            var str = \"<span style=color:green>\" + string + \"</span> \";\r\n            if (change < 0)\r\n                str = \"<span style=color:red>\" + string + \"</span> \";\r\n\r\n            legendTitle.innerHTML = str;\r\n        });\r\n\r\n        //  this.sortTheChart(); \r\n    }\r\n\r\n\r\n\r\n    sortTheChart = () => {\r\n\r\n        let allchart = document.getElementById(\"allchart\");\r\n        let createNewArray = [];\r\n        function getItem(name) {\r\n            document.querySelector('#allchart').childNodes.forEach(function (e) {\r\n                if (e.innerText && e.innerText.split(' ')[0] == name) {\r\n                    //   console.log(\"item\",name, e.innerText.split(' ')[0], e)\r\n                    allchart.appendChild(e);\r\n                    createNewArray.push(e);\r\n                    //   return e; \r\n                }\r\n            })\r\n        }\r\n\r\n        for (let index = 0; index < this.state.strongChartList.length; index++) {\r\n            const element = this.state.strongChartList[index];\r\n            let item = getItem(element.name);\r\n        }\r\n\r\n    }\r\n\r\n    shortByVolume = (type, emotions) => {\r\n\r\n        this.state.strongChartList.sort(function (a, b) {\r\n            if (emotions === 'selling')\r\n                return a[type] - b[type];\r\n            else\r\n                return b[type] - a[type];\r\n        });\r\n\r\n        this.setState({ strongChartList: this.state.strongChartList, sortBy: type }, function () {\r\n            if (document.getElementById(\"allchart\")) {\r\n                document.getElementById(\"allchart\").innerHTML = ''\r\n            }\r\n            for (let index = 0; index < this.state.strongChartList.length; index++) {\r\n                const element = this.state.strongChartList[index];\r\n                this.createMultpleChart(element);\r\n            }\r\n        })\r\n\r\n        if (type === 'strongPer' && emotions === 'selling') {\r\n            this.setState({ sortBy: \"Selling%\" })\r\n        } else if (type === 'strongPer') {\r\n            this.setState({ sortBy: \"Buying%\" })\r\n        }\r\n\r\n        this.setState({ filterByCount: this.state.strongChartList.length + ' Stocks Found' })\r\n    }\r\n\r\n    getUpdateIndexData = () => {\r\n        this.setState({ softedIndexList: [] })\r\n        AdminService.allIndicesDirectJSON()\r\n            .then((res) => {\r\n\r\n                if (res.data) {\r\n\r\n                    var softedData = res.data && res.data.data;\r\n                    softedData.sort(function (a, b) {\r\n                        return b.percChange - a.percChange;\r\n                    });\r\n\r\n                    for (let index = 0; index < softedData.length; index++) {\r\n                        const element = softedData[index];\r\n                        var slugName = this.state.sluglist[element.indexName];\r\n                        if (slugName) {\r\n                            this.setState({ softedIndexList: [...this.state.softedIndexList, element] }, () => {\r\n\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    this.findStrongCharts()\r\n                }\r\n            })\r\n            .catch((reject) => {\r\n                // Notify.showError(\"All Indices API Failed\");\r\n            }).finally((ok) => {\r\n            })\r\n    }\r\n\r\n    filterByVolumePrice = (type) => {\r\n\r\n        if (document.getElementById(\"allchart\")) {\r\n            document.getElementById(\"allchart\").innerHTML = ''\r\n        }\r\n\r\n        let filteredList = [];\r\n\r\n        for (let index = 0; index < this.state.strongChartList.length; index++) {\r\n            const element = this.state.strongChartList[index];\r\n            let candledata = element.candleChartData;\r\n            if (element.candleChartData.length >= 1) {\r\n                let lastCandle = candledata[candledata.length - 1];\r\n                if (lastCandle)\r\n                    var lastCanPrs = (lastCandle[4] - lastCandle[1]) * 100 / lastCandle[1];\r\n                let secondCandle = candledata[candledata.length - 2];\r\n                if (secondCandle)\r\n                    var secondCandlePer = (secondCandle[4] - secondCandle[1]) * 100 / secondCandle[1];\r\n                // this.state.timeFrame\r\n\r\n                if (type === 'Buy V+P') {\r\n                    console.log(\"Buy V+P section\")\r\n                    if (element.candleVolBrokenCount > 9 && (lastCanPrs >= 0.5)) {  //|| secondCandlePer  >= 0.3\r\n                        filteredList.push(element);\r\n                        console.log(element.name, element.candleVolBrokenCount, lastCanPrs, secondCandlePer);\r\n                    }\r\n                }\r\n\r\n                if (type === 'Sell V+P') {\r\n                    console.log(\"Sell V+P section\", lastCanPrs)\r\n\r\n                    if (element.candleVolBrokenCount > 9 && (lastCanPrs <= -0.5)) { // || secondCandlePer  <= -0.3\r\n                        filteredList.push(element);\r\n                        console.log(element.name, type, element.candleVolBrokenCount, lastCanPrs, secondCandlePer);\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        console.log(\"filteredList\", filteredList)\r\n\r\n\r\n        // this.setState({ strongChartList:filteredList, sortBy: type }, function () { \r\n        //     for (let index = 0; index < this.state.strongChartList.length; index++) {\r\n        //         const element = this.state.strongChartList[index];\r\n        //         this.createMultpleChart(element);\r\n        //     }\r\n        // })\r\n\r\n\r\n        for (let index = 0; index < filteredList.length; index++) {\r\n            const element = filteredList[index];\r\n            this.createMultpleChart(element);\r\n        }\r\n        this.setState({ filterBy: type, filterByCount: filteredList.length + ' Stocks Found' })\r\n\r\n\r\n    }\r\n\r\n\r\n    updateToLocalStorage = (row) => {\r\n\r\n        let foundAt = new Date(row.foundAt).toLocaleString();\r\n        var isfound = this.state.fastMovementList.filter(element => (element.token == row.token && element.foundAt == foundAt));\r\n        //  console.log(\"isfound\", isfound);\r\n        if (!isfound.length) {\r\n            var updateData = {\r\n                token: row.token,\r\n                foundAt: foundAt,\r\n                ltp: row.ltp,\r\n                symbol: row.symbol,\r\n                nc: row.perChange.toFixed(2),\r\n                orderType: row.orderType\r\n            }\r\n            this.state.fastMovementList.push(updateData);\r\n            //this.setState({ fastMovementList: [..., updateData] });\r\n            localStorage.setItem(\"fastMovementList\", JSON.stringify(this.state.fastMovementList));\r\n            return true;\r\n\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    findStrongCharts = async () => {\r\n\r\n        if (document.getElementById(\"allchart\")) {\r\n            document.getElementById(\"allchart\").innerHTML = ''\r\n        }\r\n\r\n        this.setState({ strongChartListUpdate: '', strongChartList: [] });\r\n        var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n        if (this.state.selectedWatchlist == \"gainerList\") {\r\n            watchList = localStorage.getItem('gainerList') && JSON.parse(localStorage.getItem('gainerList'));\r\n        }\r\n        if (this.state.selectedWatchlist == \"looserList\") {\r\n            watchList = localStorage.getItem('looserList') && JSON.parse(localStorage.getItem('looserList'));\r\n        }\r\n        if (this.state.selectedWatchlist == \"selectall\") {\r\n            watchList = localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList'));\r\n        }\r\n        this.setState({ totalStockToWatch: watchList && watchList.length, stopChart: false });\r\n\r\n        console.log(\"select wathlist\", watchList)\r\n\r\n        if (watchList && watchList.length) {\r\n            for (let index = 0; index < watchList.length; index++) {\r\n\r\n                this.setState({ strongChartListUpdate: index + 1 + \". \" + watchList[index].symbol + \" At \" + new Date().toLocaleTimeString() });\r\n\r\n                const format1 = \"YYYY-MM-DD HH:mm\";\r\n                var beginningTime = moment('9:15am', 'h:mma').format(format1);\r\n\r\n                let timeDuration = this.getTimeFrameValue(this.state.timeFrame);\r\n                var time = moment.duration(\"1000:00:00\");  //22:00:00\" for last day  2hours  timeDuration\r\n                var startDate = moment(new Date()).subtract(timeDuration);\r\n\r\n                if (this.state.stopChart) {\r\n                    break;\r\n                }\r\n\r\n                var data = {\r\n                    \"exchange\": watchList[index].exch_seg,\r\n                    \"symboltoken\": watchList[index].token,\r\n                    \"interval\": this.state.timeFrame, //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                    \"fromdate\": moment(startDate).format(format1),\r\n                    \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n                }\r\n\r\n                AdminService.getHistoryData(data).then(res => {\r\n                    let histdata = resolveResponse(res, 'noPop');\r\n                    // console.log(\"candle history\", histdata);\r\n\r\n                    if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                        var candleData = histdata.data;\r\n                        var candleChartData = [], vwapdata = [], closeingData = [], highData = [], lowData = [], openData = [], valumeData = [], bbdata = [], volumeSeriesData = [];\r\n\r\n\r\n                        let lastCandle = candleData[candleData.length - 1];\r\n                        let changePer = (lastCandle[4] - lastCandle[1]) * 100 / lastCandle[1];\r\n                        let candleDistance = lastCandle[2] - lastCandle[3]; //high - low\r\n                        let strongPer = ((lastCandle[4] - lastCandle[3]) * 100) / candleDistance; // close-low*100/distance \r\n                        //                        console.log(watchList[index].symbol, candleData[candleData.length - 1], strongPer);\r\n\r\n                        if (true) {   //changePer >= 0.3 ||  changePer <= -0.3\r\n                            candleData.forEach((element, loopindex) => {\r\n                                candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                                vwapdata.push([element[5], (element[2] + element[3] + element[4]) / 3]);\r\n                                closeingData.push(element[4]);\r\n                                highData.push(element[2]);\r\n                                lowData.push(element[3]);\r\n                                openData.push(element[3]);\r\n                                valumeData.push(element[5]);\r\n                                bbdata.push((element[2] + element[3] + element[4]) / 3);\r\n                                volumeSeriesData.push({ time: new Date(element[0]).getTime(), value: element[5], color: 'rgba(211, 211, 211, 1)' })\r\n                            });\r\n\r\n                            var sma = SMA.calculate({ period: 20, values: closeingData });\r\n\r\n                            var inputRSI = { values: closeingData, period: 14 };\r\n                            var lastRsiValue = RSI.calculate(inputRSI);\r\n\r\n                            var inputVWAP = {\r\n                                open: openData,\r\n                                high: highData,\r\n                                low: lowData,\r\n                                close: closeingData,\r\n                                volume: valumeData\r\n                            };\r\n\r\n                            var input = {\r\n                                period: 20,\r\n                                values: bbdata,\r\n                                stdDev: 2\r\n\r\n                            }\r\n                            var bb = BollingerBands.calculate(input);\r\n                            var vwapdata = VWAP.calculate(inputVWAP);\r\n                            var bbvlastvalue = bb[bb.length - 1];\r\n                            if (bbvlastvalue) {\r\n                                bbvlastvalue.upper = bbvlastvalue.upper.toFixed(2);\r\n                                bbvlastvalue.middle = bbvlastvalue.middle.toFixed(2);\r\n                                bbvlastvalue.lower = bbvlastvalue.lower.toFixed(2);\r\n\r\n                            }\r\n\r\n                            const lightChartData = candleData.map(d => {\r\n                                return { time: new Date(d[0]).getTime(), open: parseFloat(d[1]), high: parseFloat(d[2]), low: parseFloat(d[3]), close: parseFloat(d[4]) }\r\n                            });\r\n\r\n                            let candleVolBrokenCount = 0, lastVol = valumeData[valumeData.length - 1];\r\n                            if (valumeData && valumeData.length) {\r\n                                valumeData.reverse();\r\n                                for (let indexVol = 1; indexVol < valumeData.length; indexVol++) {\r\n                                    const volelement = valumeData[indexVol];\r\n                                    if (volelement < lastVol) {\r\n                                        candleVolBrokenCount++;\r\n                                    } else {\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            //  console.log(watchList[index].symbol, candleVolBrokenCount)\r\n\r\n\r\n                            var dataltp = {\r\n                                \"exchange\": \"NSE\",\r\n                                \"tradingsymbol\": watchList[index].symbol,\r\n                                \"symboltoken\": watchList[index].token,\r\n                            }\r\n\r\n                            AdminService.getLTP(dataltp).then(res => {\r\n                                let data = resolveResponse(res, 'noPop');\r\n                                var LtpData = data && data.data;\r\n                                //console.log(LtpData);\r\n                                if (LtpData && LtpData.ltp) {\r\n                                    let data = {\r\n                                        symbol: watchList[index].symbol,\r\n                                        token: watchList[index].token,\r\n                                        RSIValue: lastRsiValue[lastRsiValue.length - 1],\r\n                                        RSI: lastRsiValue.slice(Math.max(lastRsiValue.length - 8, 1)),\r\n                                        valumeData: valumeData.slice(Math.max(valumeData.length - 8, 1)),\r\n                                        VWAP: vwapdata[vwapdata.length - 1], //vwap(vwapdata),\r\n                                        BB: bbvlastvalue,\r\n                                        candleChartData: candleChartData,\r\n                                        foundAt: candleData && new Date(candleData[candleData.length - 1][0]).toLocaleString(),\r\n                                        name: watchList[index].name, //index+1 +'. '+ \r\n                                        lightChartData: lightChartData,\r\n                                        volumeSeriesData: volumeSeriesData,\r\n                                        strongPer: strongPer,\r\n                                        candleVolBrokenCount: candleVolBrokenCount\r\n                                    }\r\n\r\n\r\n\r\n                                    data.perChange = ((LtpData.ltp - LtpData.close) * 100 / LtpData.close).toFixed(2);\r\n                                    data.ltp = LtpData.ltp;\r\n                                    let sortBy = this.state.sortBy;\r\n\r\n                                    this.setState({ strongChartList: [...this.state.strongChartList, data] }, function () {\r\n\r\n                                        this.state.strongChartList && this.state.strongChartList.sort(function (a, b) {\r\n                                            return b[sortBy] - a[sortBy];\r\n                                        });\r\n\r\n                                        this.createMultpleChart(data);\r\n\r\n                                    });\r\n\r\n\r\n                                }\r\n                            });\r\n                        }\r\n\r\n\r\n                    } else {\r\n                        //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                        console.log(watchList[index].symbol, \"  emply candle found\");\r\n                    }\r\n                })\r\n\r\n                await new Promise(r => setTimeout(r, 600));\r\n            }\r\n        } else {\r\n            Notify.showError(\"No Stock Found\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    callbackAfterOrderDone = (order) => {\r\n        // setValues({ ...values, ['buyFlag']: order.status });\r\n        // setValues({ ...values, ['sellFlag']:  order.status  });\r\n        //  this.setState({ [spineerId]: order.status}); \r\n        console.log(\"order executed\", order);\r\n    }\r\n\r\n\r\n\r\n    handleClick = (row, type, spinnerIndex) => {\r\n\r\n        //   console.log(row);\r\n        if (row.token && row.symbol) {\r\n            if (type == 'BUY') {\r\n                this.setState({ [spinnerIndex]: true });\r\n                var symbolInfo = {\r\n                    token: row.token,\r\n                    symbol: row.symbol,\r\n                    qtyToTake: this.state.qtyToTake\r\n                }\r\n                //   console.log(symbolInfo);\r\n                CommonOrderMethod.historyWiseOrderPlace(symbolInfo, 'BUY', \"no\", this.callbackAfterOrderDone);\r\n                this.setState({ [spinnerIndex]: false });\r\n\r\n            }\r\n\r\n            if (type == 'SELL') {\r\n                this.setState({ [spinnerIndex]: true });\r\n                var symbolInfo = {\r\n                    token: row.token,\r\n                    symbol: row.symbol,\r\n                    qtyToTake: this.state.qtyToTake\r\n                }\r\n                //   console.log(symbolInfo);\r\n                CommonOrderMethod.historyWiseOrderPlace(symbolInfo, 'SELL', \"no\", this.callbackAfterOrderDone);\r\n                this.setState({ [spinnerIndex]: false });\r\n            }\r\n        } else {\r\n            Notify.showError(\" Symbol Not found!!!\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        //var foundPatternList = localStorage.getItem('foundPatternList') && JSON.parse(localStorage.getItem('foundPatternList')).reverse(); \r\n\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <PostLoginNavBar />\r\n\r\n                <br />\r\n\r\n                <Grid justify=\"space-between\"\r\n                    container spacing={1}>\r\n                   \r\n\r\n\r\n                    <Grid item xs={12} sm={5} >\r\n\r\n                        <Typography color=\"primary\" >\r\n                            &nbsp; {this.state.selectedWatchlist} ({this.state.strongChartList && this.state.strongChartList.length})\r\n                            &nbsp; Sorted: <span style={{ color: 'blue' }}>{this.state.sortBy} </span>\r\n                            &nbsp; Filter: <span style={{ color: 'blue' }}>{this.state.filterBy} </span>\r\n                            <span id=\"stockTesting\" style={{ color: 'gray' }}> {this.state.strongChartListUpdate} </span>\r\n\r\n\r\n                        </Typography>\r\n\r\n\r\n                        <Button style={{ marginRight: '20px' }} onClick={() => this.shortByVolume('perChange')}>Chng%</Button>\r\n                        <Button title='previous volume broken count' style={{ marginRight: '20px' }} onClick={() => this.shortByVolume('candleVolBrokenCount')}>VBC</Button>\r\n\r\n                        <Button title='Emotions: Buying%' style={{ marginRight: '20px' }} onClick={() => this.shortByVolume('strongPer')}>Buying%</Button>\r\n                        <Button title='Emotions: Selling%' style={{ marginRight: '20px' }} onClick={() => this.shortByVolume('strongPer', 'selling')}>Selling%</Button>\r\n\r\n\r\n                        <Button title=' 9 or more candles volume with price >= 0.3 breakout ' style={{ marginRight: '20px' }} onClick={() => this.filterByVolumePrice('Buy V+P')}>Buy V+P</Button>\r\n                        <Button title=' 9 or more candles volume with price <= -0.3 breakout ' style={{ marginRight: '20px' }} onClick={() => this.filterByVolumePrice('Sell V+P')}>Sell V+P</Button>\r\n\r\n                        <span style={{ fontStyle: 'italic', fontSize: 'smaller', color: 'gray' }}>{this.state.filterByCount}</span>\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={1} >\r\n                        <OrderWatchlistDialog />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={1} >\r\n                        <FormControl style={styles.selectStyle} >\r\n                            <InputLabel htmlFor=\"gender\">Chart Size</InputLabel>\r\n                            <Select value={this.state.chartSize} name=\"chartSize\" onChange={this.onChangeWatchlist}>\r\n                                <MenuItem value={250}>{'250px'}</MenuItem>\r\n                                <MenuItem value={300}>{'300px'}</MenuItem>\r\n                                <MenuItem value={350}>{'350px'}</MenuItem>\r\n                                <MenuItem value={450}>{'450px'}</MenuItem>\r\n                                <MenuItem value={550}>{'550px'}</MenuItem>\r\n                                <MenuItem value={650}>{'650px'}</MenuItem>\r\n\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n\r\n                    <Grid item xs={12} sm={2} >\r\n                        <FormControl style={styles.selectStyle} >\r\n                            <InputLabel htmlFor=\"gender\">Select Watchlist</InputLabel>\r\n                            <Select value={this.state.selectedWatchlist} name=\"selectedWatchlist\" onChange={this.onChangeWatchlist}>\r\n                                <MenuItem value={\"gainerList\"}>{\"Gainer List (\" + this.state.gainerList.length + \")\"}</MenuItem>\r\n                                <MenuItem value={\"looserList\"}>{\"Looser List (\" + this.state.looserList.length + \")\"}</MenuItem>\r\n\r\n                                {/* <MenuItem value={\"selectall\"}>{\"Select All\"}</MenuItem> */}\r\n                                {this.state.softedIndexList && this.state.softedIndexList.map(element => (\r\n                                    <MenuItem style={{ color: element.percChange > 0 ? \"green\" : \"red\" }} value={element.indexName}>{element.indexName} ({element.percChange}%)</MenuItem>\r\n                                ))\r\n                                }\r\n\r\n                                {\r\n                                    this.state.totalWatchlist && this.state.totalWatchlist.map(element => (\r\n                                        <MenuItem value={element}>{element}</MenuItem>\r\n                                    ))\r\n                                }\r\n                                <MenuItem value={\"Securities in F&O\"}>{\"Securities in F&O\"}</MenuItem>\r\n\r\n                            </Select>\r\n\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={1} >\r\n                        <FormControl style={styles.selectStyle} >\r\n                            <InputLabel htmlFor=\"gender\">Select Time</InputLabel>\r\n                            <Select value={this.state.timeFrame} name=\"timeFrame\" onChange={this.onChangeWatchlist}>\r\n                                <MenuItem value={'ONE_MINUTE'}>{'1 Min'}</MenuItem>\r\n                                <MenuItem value={'FIVE_MINUTE'}>{'5 Min'}</MenuItem>\r\n                                <MenuItem value={'TEN_MINUTE'}>{'10 Min'}</MenuItem>\r\n                                <MenuItem value={'FIFTEEN_MINUTE'}>{'15 Min'}</MenuItem>\r\n                                <MenuItem value={'THIRTY_MINUTE'}>{'30 Min'}</MenuItem>\r\n                                <MenuItem value={'ONE_HOUR'}>{'1 Hour'}</MenuItem>\r\n                                <MenuItem value={'ONE_DAY'}>{'1 Day'}</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    {/* \r\n                    <Grid item xs={12} sm={1} >\r\n                        <FormControl style={styles.selectStyle} >\r\n                            <InputLabel htmlFor=\"gender\">Select Time</InputLabel>\r\n                            <Select value={this.state.BBBlastType} name=\"BBBlastType\" onChange={this.onChangeWatchlist}>\r\n       \r\n                                <MenuItem value={'BBStrongBreakout'}>{'BB Strong Breakout'}</MenuItem>\r\n\r\n\r\n\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid> */}\r\n\r\n                    <Grid item xs={12} sm={2} >\r\n                        <Button variant=\"contained\" style={{ marginRight: '20px' }} onClick={() => this.getUpdateIndexData()}>Start</Button>\r\n                        <Button variant=\"contained\" style={{ marginRight: '20px' }} onClick={() => this.stopSearching()}>Stop</Button>\r\n\r\n                    </Grid>\r\n\r\n\r\n\r\n                </Grid>\r\n\r\n\r\n\r\n\r\n                <Grid container spacing={2} style={{ padding: '10px' }} id=\"allchart\" >\r\n\r\n\r\n                </Grid>\r\n\r\n            </React.Fragment>\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nconst styles = {\r\n    formContainer: {\r\n        display: 'flex',\r\n        flexFlow: 'row wrap'\r\n    },\r\n\r\n    textStyle: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n\r\n    },\r\n    imgStyle: {\r\n        display: 'flex'\r\n    },\r\n\r\n    selectStyle: {\r\n        minWidth: '100%',\r\n        marginBottom: '10px'\r\n    },\r\n    MuiTextField: {\r\n        overflowY: 'scroll',\r\n        fontSize: \"12px\",\r\n        maxHeight: \"50px\",\r\n\r\n    },\r\n    footerButton: {\r\n        position: 'fixed',\r\n        left: 0,\r\n        bottom: '20px',\r\n        width: '100%',\r\n        textAlign: 'right'\r\n    }\r\n\r\n};\r\n\r\nexport default Home;","import React, {useEffect} from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport { data } from 'jquery';\r\n\r\nimport LineChart from \"./LineChart\";\r\nimport LightChartCom from \"./LightChartCom\";\r\nimport DeliveryData from \"./DeliveryData\";\r\nimport IndexCharts from \"./IndexCharts\";\r\nimport StrongCharts from \"./StrongCharts\";\r\n\r\n\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nexport default function CustomizedDialogs(props) {\r\n\r\n\r\n \r\n  const [open, setOpen] = React.useState(false);\r\n \r\n  var [values, setValues] = React.useState({\r\n    data : [],\r\n    candledata: {}\r\n})\r\n\r\n\r\n  //console.log('props.indexName',props)\r\n \r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" id=\"fullModelId\" color=\"primary\" style={{display:\"none\"}} onClick={handleClickOpen}>\r\n        Chart \r\n      </Button>\r\n      <Dialog fullScreen onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose} onClick={handleClose}>\r\n        <Button fullWidth={true} autoFocus onClick={handleClose} color=\"primary\">\r\n            {localStorage.getItem('clickedIndexName') } {localStorage.getItem('clickedIndexType')}\r\n         </Button>\r\n        \r\n         \r\n        </DialogTitle>\r\n        <DialogContent dividers id=\"chart\">\r\n\r\n            {localStorage.getItem('clickedIndexType') == 'Charts' ?  <StrongCharts /> : <DeliveryData /> }\r\n            \r\n        </DialogContent>\r\n        <DialogActions>\r\n\r\n\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { connect } from \"react-redux\";\r\nimport { setPackLoaded } from \"../../action\";\r\nimport Spinner from \"react-spinner-material\";\r\nimport * as moment from 'moment';\r\nimport { resolveResponse } from \"../../utils/ResponseHandler\";\r\nimport \"./ViewStyle.css\";\r\nimport MyDialog from './MyDialog'\r\nimport Notify from \"../../utils/Notify\";\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport pako from 'pako';\r\nimport { w3cwebsocket } from 'websocket';\r\nimport ChartDialog from './ChartDialog';\r\nimport LightChartDialog from './LightChartDialog';\r\nimport LineChart from \"./LineChart\";\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport TradeConfig from './TradeConfig.json';\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport vwap from 'vwap';\r\nimport { SMA, RSI, VWAP, BollingerBands } from 'technicalindicators';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\nimport FullModel from './FullModel';\r\n\r\n\r\n\r\nconst wsClintSectorUpdate = new w3cwebsocket('wss://omnefeeds.angelbroking.com/NestHtml5Mobile/socket/stream');\r\n\r\nclass MyView extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // sectorList: [],\r\n            sluglist: {\r\n                'NIFTY 50': 'nifty',\r\n                'NIFTY AUTO': 'cnxAuto',\r\n                'NIFTY BANK': 'bankNifty',\r\n                'NIFTY ENERGY': 'cnxEnergy',\r\n                'NIFTY FIN SERVICE': 'cnxFinance',\r\n                'NIFTY FMCG': 'cnxFMCG',\r\n                'NIFTY IT': 'cnxit',\r\n                'NIFTY MEDIA': 'cnxMedia',\r\n                'NIFTY METAL': 'cnxMetal',\r\n                'NIFTY PHARMA': 'cnxPharma',\r\n                'NIFTY PSU BANK': 'cnxPSU',\r\n                'NIFTY REALTY': 'cnxRealty',\r\n                'NIFTY PVT BANK': 'niftyPvtBank',\r\n                'NIFTY CONSUMPTION': 'cnxConsumption',\r\n                'NIFTY CPSE': 'cpse',\r\n                'NIFTY INFRA': 'cnxInfra',\r\n                'NIFTY MNC': 'cnxMNC',\r\n                'NIFTY PSE': 'cnxPSE',\r\n\r\n                //  \"NIFTY HEALTHCARE\": \"niftyHealthcare\"\r\n                //'NIFTY CONSR DURBL':  \"niftyConsrDurbl\"\r\n                // 'NIFTY GROWSECT 15': 'ni15',H\r\n                // 'NIFTY COMMODITIES': 'cnxCommodities',\r\n                // 'NIFTY SERV SECTOR': 'cnxService',\r\n                // 'NIFTY100 LIQ 15': 'nseliquid',\r\n                // 'NIFTY MID LIQ 15': 'niftyMidcapLiq15',\r\n                // 'NIFTY DIV OPPS 50': 'cnxDividendOppt',\r\n                // 'NIFTY50 VALUE 20': 'nv20',\r\n                // 'NIFTY QUALITY 30': 'niftyQuality30',\r\n                // 'NIFTY50 EQL WGT': 'nifty50EqualWeight',\r\n                // 'NIFTY100 EQL WGT': 'nifty100EqualWeight',\r\n                // 'NIFTY ALPHA 50': 'niftyAlpha50',\r\n                // 'NIFTY NEXT 50': 'juniorNifty',\r\n                // 'NIFTY MIDCAP 50': 'niftyMidcap50',\r\n            },\r\n            stopnview: '',\r\n            indexTimeStamp: '',\r\n            refreshFlag: true,\r\n            topGLCount: 0,\r\n            refreshFlagCandle: true,\r\n            switchToListViewFlag: true,\r\n            slowMotionStockList: localStorage.getItem('slowMotionStockList') && JSON.parse(localStorage.getItem('slowMotionStockList')) || [],\r\n            sectorStockList: localStorage.getItem('sectorStockList') && JSON.parse(localStorage.getItem('sectorStockList')) || [],\r\n            sectorList: localStorage.getItem('sectorList') && JSON.parse(localStorage.getItem('sectorList')) || [],\r\n            watchList: localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')) || [],\r\n            staticData: localStorage.getItem('staticData') && JSON.parse(localStorage.getItem('staticData')) || {},\r\n            gainerList: localStorage.getItem('gainerList') && JSON.parse(localStorage.getItem('gainerList')) || [],\r\n            looserList: localStorage.getItem('looserList') && JSON.parse(localStorage.getItem('looserList')) || [],\r\n            timeFrame: \"FIFTEEN_MINUTE\"\r\n\r\n        }\r\n        this.refreshSectorCandle = this.refreshSectorCandle.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // window.location.reload(); \r\n\r\n        window.document.title = \"Hit Map2\";\r\n\r\n\r\n        this.loadIndexesList();\r\n\r\n\r\n        var tokens = localStorage.getItem(\"userTokens\") && JSON.parse(localStorage.getItem(\"userTokens\"));\r\n        var feedToken = tokens && tokens.feedToken;\r\n        var userProfile = localStorage.getItem(\"userProfile\") && JSON.parse(localStorage.getItem(\"userProfile\"));\r\n        var clientcode = userProfile && userProfile.clientcode;\r\n        this.setState({ feedToken: feedToken, clientcode: clientcode });\r\n\r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var endTime = moment('3:30pm', 'h:mma');\r\n        const friday = 5; // for friday\r\n        var currentTime = moment(new Date(), \"h:mma\");\r\n        const today = moment().isoWeekday();\r\n        //market hours\r\n        if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n\r\n            wsClintSectorUpdate.onopen = (res) => {\r\n                // this.makeConnection();\r\n                // this.updateSocketWatch();\r\n            }\r\n\r\n\r\n            wsClintSectorUpdate.onmessage = (message) => {\r\n                var decoded = window.atob(message.data);\r\n                var data = this.decodeWebsocketData(pako.inflate(decoded));\r\n                var liveData = JSON.parse(data);\r\n\r\n                //  console.log(\"sector live data\", liveData);\r\n                window.document.title = \"Sector Live WS: \" + liveData.length;\r\n\r\n                this.state.sectorList && this.state.sectorList.forEach((outerEelement, index) => {\r\n\r\n                    outerEelement.stockList && outerEelement.stockList.forEach((element, stockIndex) => {\r\n                        var foundLive = liveData.filter(row => row.tk == element.token);\r\n                        if (foundLive.length > 0 && foundLive[0].ltp && foundLive[0].nc) {\r\n                            this.state.sectorList[index].stockList[stockIndex].ltp = foundLive[0].ltp;\r\n                            this.state.sectorList[index].stockList[stockIndex].nc = foundLive[0].nc;\r\n                            this.state.sectorList[index].stockList[stockIndex].cng = foundLive[0].cng;\r\n                            this.state.sectorList[index].stockList[stockIndex].ltt = foundLive[0].ltt;\r\n\r\n                            this.state.sectorList[index].isStocksLtpUpdted = true;\r\n                        }\r\n                    });\r\n                });\r\n\r\n                this.setState({ sectorList: this.state.sectorList });\r\n                // this.setState({ sectorList: sectorList });\r\n                // localStorage.setItem('sectorList', JSON.stringify(sectorList));\r\n\r\n                // if(index){\r\n                //     this.state.sectorList.forEach((element, i) => {\r\n                //         if(element.index == index){\r\n                //             this.state.sectorList[i].stockList = sectorUpdate; \r\n                //             this.state.sectorList[i].isStocksLtpUpdted = true; \r\n                //             this.setState({ sectorList: this.state.sectorList  });\r\n                //             return; \r\n                //         }\r\n                //     });\r\n                // }\r\n            }\r\n\r\n            wsClintSectorUpdate.onerror = (e) => {\r\n                console.log(\"socket error\", e);\r\n                window.location.reload();\r\n            }\r\n\r\n            // setInterval(() => {\r\n            //     this.makeConnection();\r\n            //     var _req = '{\"task\":\"hb\",\"channel\":\"\",\"token\":\"' + feedToken + '\",\"user\": \"' + clientcode + '\",\"acctid\":\"' + clientcode + '\"}';\r\n            //     // console.log(\"Connection sectior top hb Request :- \" + _req);\r\n            //     wsClintSectorUpdate.send(_req);\r\n            // }, 59000);\r\n\r\n            setInterval(() => {\r\n                this.loadIndexesList();\r\n            }, 120000);\r\n\r\n\r\n\r\n        } else {\r\n            // wsClintSectorUpdate.close();\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    getTodayOrder = () => {\r\n        AdminService.retrieveOrderBook()\r\n            .then((res) => {\r\n                let data = resolveResponse(res, \"noPop\");\r\n                if (data && data.data) {\r\n                    var orderlist = data.data;\r\n                    orderlist.sort(function (a, b) {\r\n                        return new Date(b.updatetime) - new Date(a.updatetime);\r\n                    });\r\n                    localStorage.setItem('oderbookData', JSON.stringify(orderlist));\r\n                }\r\n            });\r\n    }\r\n\r\n\r\n    updateTokenSymbol = (gainerList) => {\r\n\r\n        var gainerList = localStorage.getItem('gainerList') && JSON.parse(localStorage.getItem('gainerList')) || [];\r\n\r\n        for (let index = 0; index < gainerList.length; index++) {\r\n            const element = gainerList[index];\r\n\r\n\r\n\r\n            if(!element.token && !element.symbol){\r\n                AdminService.autoCompleteSearch(element.name).then(searchRes => {\r\n                    let searchResdata = searchRes.data;\r\n                    if (searchResdata.length) {\r\n                        var uppercaseNameEQ = element.name.toUpperCase() + \"-EQ\";\r\n                        var uppercaseNameBE = element.name.toUpperCase() + \"-BE\";\r\n                        var found = searchResdata.filter(row => row.name === element.name && (row.symbol === uppercaseNameEQ || row.symbol === uppercaseNameBE));\r\n                        if (found.length) {\r\n                            element.symbol = found[0].symbol;\r\n                            element.token = found[0].token;\r\n                            element.exch_seg = found[0].exch_seg; \r\n                            localStorage.setItem('gainerList', JSON.stringify(gainerList));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            \r\n        }\r\n\r\n        var looserList = localStorage.getItem('looserList') && JSON.parse(localStorage.getItem('looserList')) || [];\r\n\r\n        for (let index = 0; index < looserList.length; index++) {\r\n            const element = looserList[index];\r\n            if(!element.token && !element.symbol){\r\n                AdminService.autoCompleteSearch(element.name).then(searchRes => {\r\n                    let searchResdata = searchRes.data;\r\n                    if (searchResdata.length) {\r\n                        var uppercaseNameEQ = element.name.toUpperCase() + \"-EQ\";\r\n                        var uppercaseNameBE = element.name.toUpperCase() + \"-BE\";\r\n                        var found = searchResdata.filter(row => row.name === element.name && (row.symbol === uppercaseNameEQ || row.symbol === uppercaseNameBE));\r\n                        if (found.length) {\r\n                            element.symbol = found[0].symbol;\r\n                            element.token = found[0].token;\r\n                            element.exch_seg = found[0].exch_seg; \r\n                            localStorage.setItem('looserList', JSON.stringify(looserList));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n          \r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    loadIndexesList() {\r\n        this.setState({ indexTimeStamp: '', refreshFlag: false, failedCount: 0, topGLCount: 0 });\r\n\r\n        AdminService.allIndicesDirectJSON()\r\n            .then((res) => {\r\n\r\n\r\n                if (res.data) {\r\n\r\n                    var softedData = res.data && res.data.data;\r\n                    softedData.sort(function (a, b) {\r\n                        return b.percChange - a.percChange;\r\n                    });\r\n\r\n\r\n                    this.setState({ indexTimeStamp: softedData[0].timeVal });\r\n\r\n                    var gainerList = [], looserList = [];\r\n\r\n                    for (let index = 0; index < softedData.length; index++) {\r\n                        const element = softedData[index];\r\n                        var slugName = this.state.sluglist[element.indexName];\r\n                        console.log(\"element\", slugName, element.percChange);\r\n\r\n                        if (slugName) {\r\n                            console.log(\"secName\", element.indexName, slugName);\r\n                            AdminService.checkSectorApiOther(slugName).then(res => {\r\n                                console.log(element.indexName, res.data.data);\r\n                                softedData[index].stockList = res.data && res.data.data;\r\n                                softedData[index].time = res.data && res.data.time;\r\n                                this.setState({ sectorList: softedData });\r\n\r\n                                if (element.percChange >= 0.75 || (softedData[index].indexName == \"NIFTY 50\" && element.percChange >= 0.25)) {\r\n\r\n                                    for (let indexStock = 0; indexStock < res.data.data.length - 3; indexStock++) {\r\n                                        const stockElement = res.data.data[indexStock];\r\n                                        var stockInfo = {\r\n                                            name: stockElement.symbol,\r\n                                            ltp: stockElement.ltP,\r\n                                            nc: stockElement.iislPercChange,\r\n                                            sector: softedData[index].indexName,\r\n                                            foundAt: new Date().toLocaleString()\r\n                                        }\r\n\r\n                                        let glist = localStorage.getItem('gainerList') && JSON.parse(localStorage.getItem('gainerList')) || [];\r\n                                        var isfound = glist.filter(row => row.name == stockElement.symbol);\r\n\r\n                                        console.log(stockElement.symbol, isfound);\r\n                                        if (!isfound.length) {\r\n                                            gainerList.push(stockInfo);\r\n                                            localStorage.setItem('gainerList', JSON.stringify(gainerList));\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                                if (element.percChange <= -0.75 || (softedData[index].indexName == \"NIFTY 50\" && element.percChange <= -0.25)) {\r\n\r\n                                    var sectorStock = res.data.data;\r\n                                    sectorStock.reverse();\r\n\r\n                                    for (let indexStock = 0; indexStock < res.data.data.length - 5; indexStock++) {\r\n                                        const stockElement = res.data.data[indexStock];\r\n                                        var stockInfo = {\r\n                                            name: stockElement.symbol,\r\n                                            ltp: stockElement.ltP,\r\n                                            nc: stockElement.iislPercChange,\r\n                                            sector: softedData[index].indexName,\r\n                                            foundAt: new Date().toLocaleString()\r\n                                        }\r\n\r\n                                        let llist = localStorage.getItem('looserList') && JSON.parse(localStorage.getItem('looserList')) || [];\r\n\r\n                                        var isfound = llist.filter(row => row.name == stockElement.symbol);\r\n\r\n                                        console.log(\"looseer\", stockElement.symbol, isfound);\r\n                                        if (!isfound.length) {\r\n                                            looserList.push(stockInfo);\r\n                                            localStorage.setItem('looserList', JSON.stringify(looserList));\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                            }).catch(error => {\r\n                                // Notify.showError(element.indexName + \"fail to get stockdata\"); \r\n                                console.log(\"list fetch error\", error)\r\n                            })\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n\r\n                }\r\n            })\r\n            .catch((reject) => {\r\n                //      Notify.showError(\"All Indices API Failed\" + <br /> + reject);\r\n                //      this.speckIt(\"All Indices API Failed\");\r\n\r\n            }).finally((ok) => {\r\n\r\n\r\n                setTimeout(() => {\r\n                    this.updateTokenSymbol(\"ok\");\r\n                }, 5000);\r\n\r\n\r\n\r\n            })\r\n\r\n        this.setState({ refreshFlag: true });\r\n\r\n    }\r\n\r\n\r\n    updateLTPMannually = (index) => {\r\n\r\n        var sectorStocks = this.state.staticData[index];\r\n        this.refreshSectorLtp(sectorStocks, index);\r\n    }\r\n\r\n\r\n    refreshSectorLtp = async (sectorStocks, index) => {\r\n\r\n        this.setState({ stockUpdate: index });\r\n\r\n        // console.log(index, \"sectorStocks\",sectorStocks,  new Date())\r\n        this.setState({ refreshFlag: false, failedCount: 0 });\r\n        var sectorUpdate = [];\r\n        var sectorStockList = this.state.sectorStockList;\r\n\r\n        for (let index = 0; index < sectorStocks.length; index++) {\r\n\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"tradingsymbol\": sectorStocks[index].symbol,\r\n                \"symboltoken\": sectorStocks[index].token,\r\n            }\r\n\r\n            //   this.setState({ stockUpdate: index + 1 + \". \" + sectorStocks[index].symbol });\r\n\r\n            AdminService.getLTP(data).then(res => {\r\n                let data = resolveResponse(res, 'noPop');\r\n                var LtpData = data && data.data;\r\n\r\n\r\n                if (LtpData.symboltoken == sectorStocks[index].token) {\r\n\r\n                    //  console.log(index + 1 , sectorStocks[index].symbol , LtpData);\r\n\r\n                    var todayChange = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;   //close\r\n                    var indexData = sectorStocks[index];\r\n                    indexData.ltp = LtpData.ltp;\r\n                    indexData.nc = todayChange;\r\n                    indexData.cng = (LtpData.ltp - LtpData.close);\r\n                    indexData.ltt = new Date().toLocaleString();\r\n\r\n\r\n                    sectorUpdate.push(indexData);\r\n                }\r\n\r\n            }).catch(error => {\r\n                this.setState({ failedCount: this.state.failedCount + 1 });\r\n\r\n                console.log(sectorStocks[index].symbol, error);\r\n\r\n                //  Notify.showError(sectorStocks[index].symbol + \" ltd data not found!\");\r\n            })\r\n\r\n\r\n\r\n            await new Promise(r => setTimeout(r, 101));\r\n\r\n\r\n        }\r\n\r\n\r\n        if (index) {\r\n            this.state.sectorList.forEach((element, i) => {\r\n                if (element.index == index) {\r\n                    this.state.sectorList[i].stockList = sectorUpdate;\r\n                    this.state.sectorList[i].isStocksLtpUpdted = true;\r\n                    this.setState({ sectorList: this.state.sectorList });\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n\r\n        this.setState({ refreshFlag: true });\r\n        // this.refreshSectorCandleManually(index); \r\n        //  this.checkLast5MinMovement(index); \r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    checkLast5MinMovement = async (index) => {\r\n\r\n        var sectorStocks = this.state.staticData[index];\r\n        //   this.refreshSectorLtp(sectorStocks, index);\r\n\r\n\r\n        this.setState({ refreshFlagCandle: false });\r\n        console.log(\"sectorStockList\", index);\r\n\r\n\r\n        for (let index = 0; index < sectorStocks.length; index++) {\r\n\r\n\r\n            var beginningTime = moment('9:15am', 'h:mma');\r\n\r\n            var time = moment.duration(\"00:06:00\");\r\n            var startdate = moment(new Date()).subtract(time);\r\n\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"symboltoken\": sectorStocks[index].token,\r\n                \"interval\": \"ONE_MINUTE\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                \"fromdate\": moment(startdate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                \"todate\": moment(new Date()).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n            }\r\n\r\n            this.setState({ stockCandleUpdate: index + 1 + \". \" + sectorStocks && sectorStocks[index].symbol });\r\n\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n                if (histdata && histdata.data && histdata.data.length) {\r\n                    console.log(sectorStocks[index].symbol, \"candle history\", histdata.data);\r\n\r\n\r\n                    var candleData = histdata.data;\r\n                    var candleChartData = [], vwapdata = [], closeingData = [], highData = [], lowData = [], openData = [], valumeData = [];\r\n                    candleData.forEach((element, index) => {\r\n                        candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                        vwapdata.push([element[5], (element[2] + element[3] + element[4]) / 3]);\r\n                        closeingData.push(element[4]);\r\n                        highData.push(element[2]);\r\n                        lowData.push(element[3]);\r\n                        openData.push(element[3]);\r\n                        valumeData.push(element[5]);\r\n\r\n                    });\r\n\r\n                    // var sma = SMA.calculate({period : 10, values : closeingData});\r\n                    // console.log(sectorStocks[index].symbol,\"SMA\", sma);\r\n\r\n\r\n                    // var inputRSI = { values: closeingData, period: 14 };\r\n                    // var lastRsiValue = RSI.calculate(inputRSI)\r\n                    // console.log(sectorStocks[index].symbol, \"lastRsiValue\", lastRsiValue[lastRsiValue.length - 1]);\r\n\r\n\r\n                    // var inputVWAP = {\r\n                    //     open: openData,\r\n                    //     high: highData,\r\n                    //     low: lowData,\r\n                    //     close: closeingData,\r\n                    //     volume: valumeData\r\n                    // };\r\n\r\n\r\n                    // if (candleData.length > 0) {\r\n                    //     sectorStocks[index].candleChartData = candleChartData;\r\n                    //     sectorStocks[index].vwapValue = vwap(vwapdata);\r\n                    //     sectorStocks[index].vwapDataChart = VWAP.calculate(inputVWAP);\r\n                    //     sectorStocks[index].lastRsiValue = lastRsiValue[lastRsiValue.length - 1];\r\n                    // }\r\n\r\n                    console.log(sectorStocks[index].symbol, sectorStocks[index]);\r\n\r\n\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(sectorStocks[index].symbol, \"  emply candle found\");\r\n                }\r\n            }).catch(error => {\r\n                this.setState({ failedCount: this.state.failedCount + 1 });\r\n                Notify.showError(sectorStocks[index].symbol + \" candle failed!\");\r\n            })\r\n\r\n            await new Promise(r => setTimeout(r, 350));\r\n        }\r\n\r\n\r\n        if (index) {\r\n            this.state.sectorList.forEach((element, i) => {\r\n                if (element.index == index) {\r\n                    this.state.sectorList[i].stockList = sectorStocks;\r\n                    this.setState({ sectorList: this.state.sectorList });\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        this.setState({ refreshFlagCandle: true });\r\n\r\n\r\n\r\n\r\n        console.log(\"sectorStockswithcandle\", sectorStocks);\r\n    }\r\n    refreshSectorCandleManually = async (index) => {\r\n\r\n        var sectorStocks = this.state.staticData[index];\r\n        //   this.refreshSectorLtp(sectorStocks, index);\r\n\r\n\r\n        this.setState({ refreshFlagCandle: false });\r\n        console.log(\"sectorStockList\", index);\r\n\r\n\r\n        for (let index = 0; index < sectorStocks.length; index++) {\r\n\r\n\r\n            var beginningTime = moment('9:15am', 'h:mma');\r\n\r\n            var time = moment.duration(\"22:00:00\");\r\n            var startdate = moment(new Date()).subtract(time);\r\n\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"symboltoken\": sectorStocks[index].token,\r\n                \"interval\": \"FIFTEEN_MINUTE\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                \"fromdate\": moment(startdate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                \"todate\": moment(new Date()).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n            }\r\n\r\n            this.setState({ stockCandleUpdate: index + 1 + \". \" + sectorStocks && sectorStocks[index].symbol });\r\n\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n                //console.log(\"candle history\", histdata); \r\n                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                    var candleData = histdata.data;\r\n                    var candleChartData = [], vwapdata = [], closeingData = [], highData = [], lowData = [], openData = [], valumeData = [], bbdata = [];\r\n                    candleData.forEach((element, index) => {\r\n                        candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                        vwapdata.push([element[5], (element[2] + element[3] + element[4]) / 3]);\r\n                        closeingData.push(element[4]);\r\n                        highData.push(element[2]);\r\n                        lowData.push(element[3]);\r\n                        openData.push(element[3]);\r\n                        valumeData.push(element[5]);\r\n\r\n                        bbdata.push((element[2] + element[3] + element[4]) / 3);\r\n\r\n                    });\r\n\r\n                    // var sma = SMA.calculate({period : 10, values : closeingData});\r\n                    // console.log(sectorStocks[index].symbol,\"SMA\", sma);\r\n\r\n\r\n                    var inputRSI = { values: closeingData, period: 14 };\r\n                    var lastRsiValue = RSI.calculate(inputRSI)\r\n                    console.log(sectorStocks[index].symbol, \"lastRsiValue\", lastRsiValue[lastRsiValue.length - 1]);\r\n\r\n\r\n                    var inputVWAP = {\r\n                        open: openData,\r\n                        high: highData,\r\n                        low: lowData,\r\n                        close: closeingData,\r\n                        volume: valumeData\r\n                    };\r\n\r\n                    var input = {\r\n                        period: 20,\r\n                        values: bbdata,\r\n                        stdDev: 2\r\n\r\n                    }\r\n\r\n                    var bb = BollingerBands.calculate(input);\r\n                    console.log(sectorStocks[index].symbol, \"BB\", input, bb);\r\n\r\n\r\n                    if (candleData.length > 0) {\r\n                        sectorStocks[index].candleChartData = candleChartData;\r\n                        sectorStocks[index].vwapValue = vwap(vwapdata);\r\n                        sectorStocks[index].vwapDataChart = VWAP.calculate(inputVWAP);\r\n                        sectorStocks[index].lastRsiValue = lastRsiValue[lastRsiValue.length - 1];\r\n                    }\r\n\r\n                    console.log(sectorStocks[index].symbol, sectorStocks[index]);\r\n\r\n\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(sectorStocks[index].symbol, \"  emply candle found\");\r\n                }\r\n            }).catch(error => {\r\n                this.setState({ failedCount: this.state.failedCount + 1 });\r\n                Notify.showError(sectorStocks[index].symbol + \" candle failed!\");\r\n            })\r\n\r\n            await new Promise(r => setTimeout(r, 350));\r\n        }\r\n\r\n\r\n        if (index) {\r\n            this.state.sectorList.forEach((element, i) => {\r\n                if (element.index == index) {\r\n                    this.state.sectorList[i].stockList = sectorStocks;\r\n                    this.setState({ sectorList: this.state.sectorList });\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n\r\n\r\n        this.setState({ refreshFlagCandle: true });\r\n\r\n\r\n\r\n\r\n        console.log(\"sectorStockswithcandle\", sectorStocks);\r\n    }\r\n\r\n\r\n    refreshSectorCandle = async () => {\r\n\r\n        this.setState({ refreshFlagCandle: false });\r\n\r\n        var sectorStockList = this.state.sectorStockList;\r\n\r\n        console.log(\"sectorStockList\", this.state.sectorStockList.length);\r\n\r\n\r\n        for (let index = 0; index < this.state.sectorStockList.length; index++) {\r\n            var beginningTime = moment('9:15am', 'h:mma');\r\n            var time = moment.duration(\"61:00:00\");\r\n            var startdate = moment(new Date()).subtract(time);\r\n\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"symboltoken\": this.state.sectorStockList[index].token,\r\n                \"interval\": \"FIVE_MINUTE\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                \"fromdate\": moment(beginningTime).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                \"todate\": moment(new Date()).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n            }\r\n\r\n            this.setState({ stockCandleUpdate: index + 1 + \". \" + this.state.sectorStockList && this.state.sectorStockList[index].symbol });\r\n\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n                //console.log(\"candle history\", histdata); \r\n                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                    var candleData = histdata.data;\r\n                    var candleChartData = [];\r\n                    candleData.forEach(element => {\r\n                        candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                    });\r\n\r\n\r\n                    if (candleData.length > 0) {\r\n\r\n                        sectorStockList[index].candleChartData = candleChartData;\r\n                        var sectorList = this.state.sectorList;\r\n                        this.state.sectorList && this.state.sectorList.forEach((outerEelement, index) => {\r\n                            outerEelement.stockList && outerEelement.stockList.forEach((element, stockIndex) => {\r\n                                var foundLive = sectorStockList.filter(row => row.token == element.token);\r\n\r\n                                if (foundLive.length) {\r\n                                    sectorList[index].stockList[stockIndex].candleChartData = foundLive[0].candleChartData;\r\n                                }\r\n                            });\r\n                        });\r\n                        this.setState({ sectorList: sectorList });\r\n                        localStorage.setItem('sectorList', JSON.stringify(sectorList));\r\n                    }\r\n\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(this.state.sectorStockList[index].symbol, \"  emply candle found\");\r\n                }\r\n            }).catch(error => {\r\n                this.setState({ failedCount: this.state.failedCount + 1 });\r\n\r\n                Notify.showError(this.state.sectorStockList[index].symbol + \" candle failed!\");\r\n            })\r\n\r\n            await new Promise(r => setTimeout(r, 350));\r\n        }\r\n\r\n        this.setState({ refreshFlagCandle: true });\r\n    }\r\n\r\n    decodeWebsocketData = (array) => {\r\n        var newarray = [];\r\n        try {\r\n            for (var i = 0; i < array.length; i++) {\r\n                newarray.push(String.fromCharCode(array[i]));\r\n            }\r\n        } catch (e) { }\r\n\r\n        return newarray.join('');\r\n    }\r\n\r\n    showCandleChart = (candleData, symbol, price, change, vwapDataChart) => {\r\n\r\n        //  candleData  = candleData && candleData.reverse();\r\n\r\n        localStorage.setItem('candleChartData', JSON.stringify(candleData));\r\n        localStorage.setItem('cadleChartSymbol', symbol);\r\n        localStorage.setItem('candlePriceShow', price);\r\n        localStorage.setItem('candleChangeShow', change);\r\n        localStorage.setItem('vwapDataChart', vwapDataChart);\r\n\r\n\r\n\r\n        if (candleData && candleData.length > 0) {\r\n            document.getElementById('showCandleChart').click();\r\n        }\r\n    }\r\n\r\n    getTimeFrameValue = (timeFrame) => {\r\n        //18 HOURS FOR BACK 1 DATE BACK MARKET OFF\r\n\r\n        switch (timeFrame) {\r\n            case 'ONE_MINUTE':\r\n                if (new Date().toLocaleTimeString() < \"10:05:00\")\r\n                    return \"19:00:00\";\r\n                else\r\n                    return \"01:00:00\";\r\n                break;\r\n            case 'FIVE_MINUTE':\r\n                if (new Date().toLocaleTimeString() < \"11:00:00\")\r\n                    return \"23:00:00\";\r\n                else\r\n                    return \"03:00:00\";\r\n                break;\r\n            case 'TEN_MINUTE':\r\n                if (new Date().toLocaleTimeString() < \"12:35:00\")\r\n                    return \"24:21:00\";\r\n                else\r\n                    return \"07:00:00\";\r\n                break;\r\n            case 'FIFTEEN_MINUTE':\r\n                if (new Date().toLocaleTimeString() < \"14:15:00\")\r\n                    return \"28:01:00\";\r\n                else\r\n                    return \"10:01:00\";\r\n                break;\r\n            case 'THIRTY_MINUTE':\r\n                return \"100:01:00\";\r\n                break;\r\n            case 'ONE_HOUR':\r\n                return \"200:01:00\";\r\n                break;\r\n            case 'ONE_DAY':\r\n                return \"1000:01:00\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    dailyBasisInfoCheck = (token, element) => {\r\n        //this.setState({DailyBulishStatus: ''}); \r\n\r\n        const format1 = \"YYYY-MM-DD HH:mm\";\r\n\r\n        let timeDuration = this.getTimeFrameValue('ONE_DAY');\r\n        var time = moment.duration(timeDuration);  //22:00:00\" for last day  2hours \r\n        var startDateforDaily = moment(new Date()).subtract(time);\r\n        var dataDay = {\r\n            \"exchange\": 'NSE',\r\n            \"symboltoken\": token,\r\n            \"interval\": 'ONE_DAY',\r\n            \"fromdate\": moment(startDateforDaily).format(format1),\r\n            \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n        }\r\n        AdminService.getHistoryData(dataDay).then(resd => {\r\n            let histdatad = resolveResponse(resd, 'noPop');\r\n            var DSMA = '';\r\n            if (histdatad && histdatad.data && histdatad.data.length) {\r\n                var candleDatad = histdatad.data;\r\n                var closeingDatadaily = [], valumeSum = 0;\r\n\r\n\r\n                for (let index = candleDatad.length - 20; index < candleDatad.length; index++) {\r\n                    const element = candleDatad[index];\r\n                    if (element) {\r\n                        closeingDatadaily.push(element[4]);\r\n                        valumeSum += element[5];\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                DSMA = SMA.calculate({ period: 20, values: closeingDatadaily });\r\n                this.setState({ dailyAvgValume: valumeSum / 20 });\r\n\r\n                var DSMALastValue = DSMA && DSMA[DSMA.length - 1];\r\n                console.log(token, \"DSMA\", DSMALastValue);\r\n\r\n                if (DSMALastValue) {\r\n                    this.setState({ DailyBulishStatus: DSMALastValue, todayCurrentVolume: candleDatad[candleDatad.length - 1][5] });\r\n                }\r\n\r\n                if (candleDatad[candleDatad.length - 1][5] > valumeSum / 20) {\r\n                    console.log(\"crosssed voliue\", element);\r\n                    //   this.setState({ volumeCrossedList: [...this.state.volumeCrossedList, element] })\r\n                }\r\n\r\n            }\r\n\r\n\r\n        });\r\n    }\r\n\r\n\r\n\r\n    showCandleChartPopUp = (symbol) => {\r\n\r\n\r\n        // //  candleData  = candleData && candleData.reverse();\r\n\r\n        // // localStorage.setItem('candleChartData', JSON.stringify(candleData));\r\n        // localStorage.setItem('cadleChartSymbol', symbol);\r\n        // // localStorage.setItem('candlePriceShow', price);\r\n        // // localStorage.setItem('candleChangeShow', change);\r\n        // // localStorage.setItem('vwapDataChart', vwapDataChart);\r\n\r\n        // document.getElementById('showCandleChart').click();\r\n\r\n\r\n\r\n        var watchList = localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')) || [];\r\n        var isThere = watchList.filter(row => row.name === symbol);\r\n        if (isThere && isThere.length) {\r\n\r\n            let stock = isThere[0];\r\n\r\n\r\n\r\n            this.dailyBasisInfoCheck(stock.token);\r\n\r\n            const format1 = \"YYYY-MM-DD HH:mm\";\r\n\r\n\r\n            var beginningTime = moment('9:15am', 'h:mma');\r\n            var time = moment.duration(\"22:00:00\");  //22:00:00\" for last day  2hours \r\n            // var beginningTime = moment(new Date()).subtract(time);\r\n\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"symboltoken\": stock.token,\r\n                \"interval\": this.state.timeFrame,  //'FIVE_MINUTE',\r\n                \"fromdate\": moment(beginningTime).format(format1),\r\n                \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n            }\r\n\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let historyData = resolveResponse(res, 'noPop');\r\n                console.log(\"candledata\", historyData);\r\n                if (historyData && historyData.data) {\r\n\r\n                    var data = historyData.data;\r\n\r\n                    const cdata = data.map(d => {\r\n                        return { time: new Date(d[0]).getTime(), open: parseFloat(d[1]), high: parseFloat(d[2]), low: parseFloat(d[3]), close: parseFloat(d[4]) }\r\n                    });\r\n\r\n\r\n\r\n                    var candleChartData = [], vwapdata = [], closeingData = [], highData = [], lowData = [], openData = [], valumeData = [], bbdata = [], volumeSeriesData = [];\r\n                    data.forEach((element, loopindex) => {\r\n                        candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                        vwapdata.push([element[5], (element[2] + element[3] + element[4]) / 3]);\r\n                        closeingData.push(element[4]);\r\n                        highData.push(element[2]);\r\n                        lowData.push(element[3]);\r\n                        openData.push(element[3]);\r\n                        valumeData.push(element[5]);\r\n                        bbdata.push((element[2] + element[3] + element[4]) / 3);\r\n                        volumeSeriesData.push({ time: new Date(element[0]).getTime(), value: element[5], color: 'rgba(211, 211, 211, 1)' })\r\n\r\n                    });\r\n\r\n                    var input = {\r\n                        period: 20,\r\n                        values: bbdata,\r\n                        stdDev: 2\r\n                    }\r\n\r\n                    var bb = BollingerBands.calculate(input);\r\n                    console.log(stock.symbol, \"Bolinger band\", input, bb);\r\n\r\n                    var bb = BollingerBands.calculate(input);\r\n                    console.log(stock.symbol, \"Bolinger band\", input, bb);\r\n\r\n                    var inputRSI = { values: closeingData, period: 14 };\r\n                    var rsiValues = RSI.calculate(inputRSI);\r\n\r\n                    console.log(stock.symbol, \"Rsi\", inputRSI, rsiValues);\r\n                    console.log(stock.symbol, \"vwap\", vwapdata, vwap(vwapdata));\r\n\r\n\r\n                    var data = {\r\n                        \"exchange\": stock.exch_seg,\r\n                        \"tradingsymbol\": stock.symbol,\r\n                        \"symboltoken\": stock.token,\r\n                    }\r\n                    AdminService.getLTP(data).then(res => {\r\n                        let data = resolveResponse(res, 'noPop');\r\n                        var LtpData = data && data.data;\r\n\r\n                        LtpData.change = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;\r\n\r\n\r\n\r\n                        this.showCandleChart(candleChartData, stock.symbol, LtpData.ltp, LtpData.change);\r\n\r\n\r\n                        // this.setState({InstrumentLTP: LtpData , selectedSymbol : stock.symbol,  chartStaticData: candleChartData, bblastValue: bb[bb.length - 1], vwapvalue: vwap(vwapdata), rsiValues: rsiValues.slice(Math.max(valumeData.length - 19, 1)), valumeData: valumeData.slice(Math.max(valumeData.length - 5, 1)) }, function () {\r\n\r\n                        //     document.getElementById('showLightCandleChart').click();\r\n                        // });\r\n\r\n\r\n                    })\r\n\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    updateSocketWatch = () => {\r\n\r\n\r\n\r\n        var channel = [];\r\n        this.state.sectorList.forEach(element => {\r\n            if (element.percentChange >= 0.75) {\r\n                element.stockList && element.stockList.forEach(stock => {\r\n                    channel.push('nse_cm|' + stock.token);\r\n                });\r\n            }\r\n        });\r\n\r\n\r\n        if (channel && channel.length) {\r\n            var updateWatch = {\r\n                \"task\": \"mw\",\r\n                \"channel\": channel.join('&'),\r\n                \"token\": this.state.feedToken,\r\n                \"user\": this.state.clientcode,\r\n                \"acctid\": this.state.clientcode\r\n            }\r\n\r\n            console.log(\"update watch channel\", updateWatch);\r\n            wsClintSectorUpdate.send(JSON.stringify(updateWatch));\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    speckIt = (text) => {\r\n        var msg = new SpeechSynthesisUtterance();\r\n        msg.text = text.toString();\r\n        window.speechSynthesis.speak(msg);\r\n    }\r\n\r\n    getPercentageColor = (percent) => {\r\n        percent = percent * 100;\r\n        var r = percent < 50 ? 255 : Math.floor(255 - (percent * 2 - 100) * 255 / 100);\r\n        var g = percent > 50 ? 255 : Math.floor((percent * 2) * 255 / 100);\r\n        return 'rgb(' + r + ',' + g + ',0)';\r\n    }\r\n\r\n    get2DecimalNumber = (number) => {\r\n\r\n        if (number) {\r\n            return number.toFixed(2);\r\n        } else {\r\n            return number;\r\n        }\r\n    }\r\n    switchToListView = () => {\r\n        this.setState({ switchToListViewFlag: !this.state.switchToListViewFlag });\r\n    }\r\n\r\n    get5DaysMoveCount = (symbol) => {\r\n        var isThere = this.state.slowMotionStockList.filter(row => row.name === symbol);\r\n        if (isThere.length) {\r\n            return \"SM: \" + isThere[0].bigCandleCount;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    getDeliveryInfo = (symbol) => {\r\n\r\n        AdminService.getDeliveryData(symbol).then(resd => {\r\n            if (resd && resd.data && resd.data.length)\r\n                return \"D2T%: \" + resd.data[0].deliveryToTradedQuantity;\r\n        });\r\n\r\n    }\r\n    showDeliveryData=(indexName)=>{\r\n     //  window.open('#/delivery?indexName='+indexName,'_blank');\r\n       \r\n      // this.setState({clickedIndexName : indexName})\r\n       localStorage.setItem('clickedIndexName', indexName); \r\n       localStorage.setItem('clickedIndexType', \"Depth\"); \r\n       document.getElementById('fullModelId').click();\r\n    }\r\n    showAllChart =(indexName)=> {\r\n        localStorage.setItem('clickedIndexName', indexName); \r\n        localStorage.setItem('clickedIndexType', \"Charts\"); \r\n        document.getElementById('fullModelId').click();\r\n        //window.open('#/index-charts?indexName='+indexName,'_blank');\r\n    }\r\n    render() {\r\n\r\n        // this.state.sectorList && this.state.sectorList.forEach((outerEelement, index) => {\r\n        //     outerEelement.stockList && outerEelement.stockList.sort(function (a, b) {\r\n        //         return b.nc - a.nc;\r\n        //     });\r\n        // });\r\n\r\n\r\n        let sqrOffbeginningTime = moment('9:15am', 'h:mma');\r\n        let sqrOffendTime = moment('03:30pm', 'h:mma');\r\n        let sqrOffcurrentTime = moment(new Date(), \"h:mma\");\r\n        if (sqrOffcurrentTime.isBetween(sqrOffbeginningTime, sqrOffendTime)) {\r\n            this.state.sectorList && this.state.sectorList.forEach((outerEelement, index) => {\r\n                if (outerEelement.percentChange > 0.75 && outerEelement.isStocksLtpUpdted) {\r\n                    outerEelement.stockList && outerEelement.stockList.forEach((element, index2) => {\r\n                        if (index2 < 2) {\r\n                            var autoTradeTopList = localStorage.getItem('autoTradeTopList') && JSON.parse(localStorage.getItem('autoTradeTopList')) || [];\r\n                            var isThere = autoTradeTopList.filter(row => row.token === element.token);\r\n                            if (!isThere.length) {\r\n                                element.foundAt = new Date().toLocaleString();\r\n                                autoTradeTopList.push(element);\r\n                                localStorage.setItem('autoTradeTopList', JSON.stringify(autoTradeTopList));\r\n                                console.log(element.name + \" is on top  \" + (index2 + 1) + new Date().toLocaleString());\r\n                                this.speckIt(element.name + \" is on top  \" + (index2 + 1));\r\n                                //  this.historyWiseOrderPlace(element , 'BUY', \"Automatic\"); \r\n                            }\r\n                        }\r\n\r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <PostLoginNavBar />\r\n\r\n                <ChartDialog />\r\n                <FullModel indexName={this.state.clickedIndexName} />\r\n                <LightChartDialog LightChartData={{ InstrumentLTP: this.state.InstrumentLTP, DailyBulishStatus: this.state.DailyBulishStatus, todayCurrentVolume: this.state.todayCurrentVolume, selectedSymbol: this.state.selectedSymbol, chartStaticData: this.state.chartStaticData, bblastValue: this.state.bblastValue, vwapvalue: this.state.vwapvalue, rsiValues: this.state.rsiValues, valumeData: this.state.valumeData }} />\r\n\r\n                <Grid direction=\"row\" container className=\"flexGrow\" spacing={1} style={{ paddingLeft: \"5px\", paddingRight: \"5px\" }}>\r\n                    <Grid item xs={12} sm={6} >\r\n                        <Typography component=\"h3\" variant=\"h6\" color=\"primary\" >\r\n                            Sectors HitMap ({Object.keys(this.state.sluglist).length}) at {this.state.indexTimeStamp}\r\n                            &nbsp;\r\n                            <Button variant=\"contained\" onClick={() => this.loadIndexesList()}>Refresh</Button>\r\n\r\n                            &nbsp;\r\n\r\n                            {/* {this.state.refreshFlagCandle ? <Button variant=\"contained\" onClick={() => this.refreshSectorCandle()}>Refresh Candle</Button> : <> <Button> <Spinner /> &nbsp; {this.state.stockCandleUpdate}  </Button> </>}\r\n                            &nbsp; */}\r\n\r\n                            {/* <Button variant=\"contained\" onClick={() => this.makeConnection()}> WS Refresh</Button> */}\r\n\r\n\r\n\r\n                            <Button onClick={() => this.switchToListView()}>switch to list view</Button>\r\n                        </Typography>\r\n\r\n                        {/* {localStorage.getItem('autoTradeTopList')} */}\r\n\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={2} >\r\n                        <FormControl style={{ minWidth: '100%' }} >\r\n                            <InputLabel htmlFor=\"gender\">Select Time</InputLabel>\r\n                            <Select value={this.state.timeFrame} name=\"timeFrame\" onChange={this.onChange} >\r\n                                <MenuItem value={'ONE_MINUTE'}>{'1 Min'}</MenuItem>\r\n                                <MenuItem value={'FIVE_MINUTE'}>{'5 Min'}</MenuItem>\r\n                                <MenuItem value={'TEN_MINUTE'}>{'10 Min'}</MenuItem>\r\n                                <MenuItem value={'FIFTEEN_MINUTE'}>{'15 Min'}</MenuItem>\r\n                                <MenuItem value={'THIRTY_MINUTE'}>{'30 Min'}</MenuItem>\r\n                                <MenuItem value={'ONE_HOUR'}>{'1 Hour'}</MenuItem>\r\n                                <MenuItem value={'ONE_DAY'}>{'1 Day'}</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n\r\n\r\n                    {!this.state.switchToListViewFlag && this.state.sectorList ? this.state.sectorList.map((indexdata, index) => (\r\n\r\n                        //this.state.topGLCount <= 2 ? 6 : this.state.topGLCount == 3 ? 4 : 3\r\n                        indexdata.stockList ? <Grid item xs={12} sm={3}>\r\n                            <Paper style={{ padding: '10px', background: \"lightgray\", textAlign: \"center\" }}>\r\n\r\n\r\n                                {/* <Button size=\"small\" variant=\"contained\" title=\"update ltp\" onClick={() => this.updateLTPMannually(indexdata.index)}>\r\n                                <b> {index + 1}. {indexdata.index || indexdata.indexName + \" \" + indexdata.last}({indexdata.percentChange || indexdata.percChange}%)</b> &nbsp; {indexdata.time.substr(13,8)}\r\n                            </Button>\r\n                            &nbsp;\r\n\r\n                            <Button size=\"small\" variant=\"contained\" title=\"Candle refresh\" onClick={() => this.refreshSectorCandleManually(indexdata.index)}>\r\n                                <ShowChartIcon />\r\n                            </Button> */}\r\n\r\n                                <Typography variant=\"body1\" >\r\n                                    <b> {index + 1}. {indexdata.index || indexdata.indexName + \" \" + indexdata.last}({indexdata.percentChange || indexdata.percChange}%)</b> &nbsp; {indexdata.time.substr(13, 8)}\r\n                                </Typography>\r\n\r\n                                <Grid direction=\"row\" container className=\"flexGrow\" spacing={1} >\r\n\r\n                                    {indexdata.stockList && indexdata.stockList.map((sectorItem, i) => (\r\n                                        <Grid item xs={12} sm={6} >\r\n                                            <Paper style={{ textAlign: \"center\" }} >\r\n                                                {/* {sectorItem.cng} */}\r\n                                                <Typography style={{ background: this.getPercentageColor(sectorItem.iislPercChange), fontSize: '14px' }}>\r\n                                                    {i + 1}. {sectorItem.symbol} {sectorItem.ltP} ({sectorItem.iislPercChange}%)\r\n                                                </Typography>\r\n\r\n\r\n                                                {sectorItem.candleChartData ? <span style={{ cursor: 'pointer' }} onClick={() => this.showCandleChart(sectorItem.candleChartData, sectorItem.name, sectorItem.ltp, sectorItem.nc, sectorItem.vwapDataChart)} >\r\n                                                    <LineChart candleChartData={sectorItem.candleChartData} percentChange={sectorItem.nc} vwapDataChart={sectorItem.vwapDataChart} />\r\n                                                </span> : \"\"}\r\n\r\n                                                {sectorItem.vwapValue ?\r\n                                                    <Typography >\r\n                                                        {sectorItem.vwapValue ? <span style={{ background: sectorItem.ltp > sectorItem.vwapValue ? \"#00ff00\" : \"red\", fontSize: '14px' }}>VWAP:<b>{sectorItem.vwapValue && sectorItem.vwapValue.toFixed(2)}</b> </span> : \"\"}\r\n                                                        &nbsp;\r\n                                                        {sectorItem.lastRsiValue ? <span title=\"OB means 'Overbought'\" style={{ background: sectorItem.lastRsiValue >= 60 ? \"#00ff00\" : sectorItem.lastRsiValue >= 40 && sectorItem.lastRsiValue < 60 ? \"lightgray\" : \"red\", fontSize: '14px' }}>RSI:<b>{sectorItem.lastRsiValue}</b> {sectorItem.lastRsiValue > 80 ? \"OB\" : sectorItem.lastRsiValue >= 60 && sectorItem.lastRsiValue <= 80 ? \"Buy\" : sectorItem.lastRsiValue >= 40 && sectorItem.lastRsiValue < 60 ? \"NoTrade\" : \"Sell\"} </span> : \"\"}\r\n                                                    </Typography>\r\n                                                    : \"\"}\r\n\r\n                                                {/* {sectorItem.candleChartData ? <ReactApexChart\r\n                                                options={{\r\n                                                    chart: {\r\n                                                        type: 'candlestick',\r\n                                                        //  height: 40\r\n\r\n                                                    },\r\n                                                    title: {\r\n                                                        text: '',\r\n                                                        align: 'left'\r\n                                                    },\r\n                                                    xaxis: {\r\n                                                        type: 'datetime',\r\n                                                    },\r\n                                                    yaxis: {\r\n                                                        tooltip: {\r\n                                                            enabled: true\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                                series={[{\r\n                                                    data: sectorItem.candleChartData\r\n\r\n                                                }]}\r\n                                                type=\"candlestick\"\r\n                                    \r\n                                            /> : \"\"} */}\r\n\r\n\r\n                                                {/* <Grid direction=\"row\" style={{ padding: '5px' }} container className=\"flexGrow\" justify=\"space-between\" >\r\n\r\n                                                <Grid item>\r\n                                                    {!this.state['buyButtonClicked' + indexdata.index + i] ? <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={() => this.historyWiseOrderPlace(sectorItem, 'BUY', \"\", 'buyButtonClicked' + indexdata.index + i)}>Buy</Button> : <Spinner />}\r\n                                                </Grid>\r\n\r\n                                                <Grid item >\r\n                                                    {sectorItem.ltt && new Date(sectorItem.ltt).toLocaleTimeString()}\r\n                                                </Grid>\r\n\r\n                                                <Grid item >\r\n                                                    {!this.state['sellButtonClicked' + indexdata.index + i] ? <Button size=\"small\" variant=\"contained\" color=\"secondary\" onClick={() => this.historyWiseOrderPlace(sectorItem, 'SELL', \"\", 'sellButtonClicked' + indexdata.index + i)}>Sell</Button> : <Spinner />}\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            */}\r\n\r\n\r\n                                            </Paper>\r\n\r\n\r\n                                        </Grid>\r\n                                    ))\r\n                                    }\r\n                                </Grid>\r\n\r\n                            </Paper>\r\n                        </Grid> : \"\"\r\n\r\n                    )) : \"\"}\r\n\r\n\r\n                    <Table id=\"tabledata\" aria-label=\"a dense table\" stickyHeader size=\"small\" >\r\n                        <TableBody hover style={{ whiteSpace: \"nowrap\" }} >\r\n\r\n\r\n                            {this.state.switchToListViewFlag && this.state.sectorList ? this.state.sectorList.map((indexdata, index) => (\r\n\r\n                                indexdata.stockList ? <TableRow hover={true} key={index}>\r\n                                    <TableCell style={{ background: '#0068ff45' }} >\r\n                                           <Button style={{ background: this.getPercentageColor(indexdata.percChange) }} variant=\"contained\"   onClick={() => this.showAllChart(indexdata.indexName )}>\r\n                                            {indexdata.indexName + \" \" + indexdata.last}({indexdata.percChange}%)<EqualizerIcon />\r\n                                          </Button>\r\n                                          &nbsp;\r\n                                          <Button variant=\"contained\"   onClick={() => this.showDeliveryData(indexdata.indexName )}>\r\n                                            Depth\r\n                                          </Button>\r\n                                    </TableCell>\r\n\r\n                                    {indexdata.stockList && indexdata.stockList.map((sectorItem, i) => (\r\n                                        <TableCell style={{ textAlign: \"left\", }}  >\r\n                                              <Button  onClick={() => this.showCandleChartPopUp(sectorItem.symbol)}>\r\n                                                    <span style={{ background: this.getPercentageColor(sectorItem.iislPercChange) }}>  <b>{i + 1}.</b> {sectorItem.symbol} {sectorItem.ltP} ({sectorItem.iislPercChange}%) </span>\r\n                                                    <span title=\"last 5 days 5min big movement  maximum count\">&nbsp;{this.get5DaysMoveCount(sectorItem.symbol)}  </span>\r\n\r\n                                                    {/* <span title=\"Delivery Info\">&nbsp;{this.getDeliveryInfo(sectorItem.symbol)}  </span>  */}\r\n                                                    \r\n                                                </Button>\r\n\r\n\r\n                                        </TableCell>\r\n                                    ))\r\n                                    }\r\n\r\n                                </TableRow>\r\n                                    : \"\"\r\n\r\n                            )) : ''}\r\n\r\n\r\n                        </TableBody>\r\n                    </Table>\r\n\r\n\r\n                </Grid>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\n// const styles = {\r\n//     tableStyle : {\r\n//         display: 'flex',\r\n//         justifyContent: 'center'\r\n//     }, \r\n//     selectStyle:{\r\n//         marginBottom: '0px',\r\n//         minWidth: 240,\r\n//         maxWidth: 240\r\n\r\n//     }\r\n\r\n// }\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { packs: state.packs.packs.data };\r\n}\r\nexport default connect(mapStateToProps, { setPackLoaded })(MyView);\r\n","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport { resolveResponse } from \"../../utils/ResponseHandler\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport * as moment from 'moment';\r\nimport OrderBook from './Orderbook';\r\nimport TradeConfig from './TradeConfig.json';\r\nimport ChartDialog from './ChartDialog';\r\nimport ChartMultiple from './ChartMultiple';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\nimport Notify from \"../../utils/Notify\";\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport Parser from 'html-react-parser';\r\nimport Spinner from \"react-spinner-material\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { SMA, RSI, VWAP, BollingerBands } from 'technicalindicators';\r\nimport vwap from 'vwap';\r\nimport CommonOrderMethod from \"../../utils/CommonMethods\";\r\nimport LightChart from \"./LightChart\";\r\nimport LightChartCom from \"./LightChartCom\";\r\n\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            staticData: localStorage.getItem('staticData') && JSON.parse(localStorage.getItem('staticData')) || {},\r\n            totalWatchlist: localStorage.getItem('totalWatchlist') && JSON.parse(localStorage.getItem('totalWatchlist')) || [],\r\n            selectedWatchlist: \"NIFTY 50\",\r\n            totalStockToWatch: 0,\r\n            timeFrame: \"TEN_MINUTE\",\r\n            chartStaticData: [],\r\n            qtyToTake:'',\r\n            BBBlastType : \"BBBlastOnly\",\r\n            fastMovementList:  localStorage.getItem('fastMovementList') && JSON.parse(localStorage.getItem('fastMovementList')) || [],\r\n\r\n\r\n        };\r\n        this.findlast5minMovement = this.findlast5minMovement.bind(this);\r\n        this.startSearching = this.startSearching.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        window.document.title = \"Fast Movement\";\r\n\r\n        var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n        this.setState({ totalStockToWatch: watchList.length });\r\n\r\n        // this.findlast5minMovement(); //one time only\r\n        //   this.startSearching();\r\n\r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var endTime = moment('3:30pm', 'h:mma');\r\n        const friday = 5; // for friday\r\n        var currentTime = moment(new Date(), \"h:mma\");\r\n        const today = moment().isoWeekday();\r\n\r\n        var tostartInteral = setInterval(() => {\r\n            var time = new Date();\r\n            console.log(\"set interval 1sec min/10==0 \", time.toLocaleTimeString());\r\n            if (time.getMinutes() % 5 === 0) {\r\n                console.log(\"search method call in with setTimeout 70sec\", time.toLocaleTimeString());\r\n\r\n                setTimeout(() => {\r\n                    this.find10MinBBBlast();\r\n                }, 70000);\r\n                this.setState({\r\n                    stop10bbSearch:\r\n                        setInterval(() => {\r\n                            console.log(\"search method call in with setInterval in 10min\", time.toLocaleTimeString());\r\n                            if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n                                this.find10MinBBBlast();\r\n                            }\r\n                        }, 60000 * 5 + 70000)\r\n                });\r\n\r\n                clearInterval(tostartInteral);\r\n            }\r\n        }, 1000);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    stopSearching = () => {\r\n        console.log(\"stop the search\")\r\n        clearInterval(this.state.findlast5minMovementInterval);\r\n        clearInterval(this.state.stop10bbSearch);\r\n\r\n    }\r\n    onChangeQty = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n\r\n    showCandleChart = (candleData, symbol, ltp, perChange) => {\r\n        localStorage.setItem('candleChartData', JSON.stringify(candleData))\r\n        localStorage.setItem('cadleChartSymbol', symbol)\r\n        localStorage.setItem('candlePriceShow', ltp);\r\n        localStorage.setItem('candleChangeShow', perChange.toFixed(2));\r\n        document.getElementById('showCandleChart').click();\r\n    }\r\n\r\n    speckIt = (text) => {\r\n        var msg = new SpeechSynthesisUtterance();\r\n        msg.text = text.toString();\r\n        window.speechSynthesis.speak(msg);\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.findlast5minMovementInterval);\r\n        clearInterval(this.state.stop10bbSearch);\r\n        // clearInterval(this.state.scaninterval);\r\n        //  clearInterval(this.state.bankNiftyInterval); \r\n    }\r\n\r\n    onChangeWatchlist = (e) => {\r\n        clearInterval(this.state.findlast5minMovementInterval);\r\n        this.setState({ [e.target.name]: e.target.value }, function () {\r\n            // this.findlast5minMovement(); //one time only\r\n            //this.startSearching();\r\n            this.find10MinBBBlast();\r\n\r\n        });\r\n    }\r\n\r\n    startSearching = () => {\r\n\r\n        console.log(\"Starting the search\");\r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var endTime = moment('3:30pm', 'h:mma');\r\n        const friday = 5; // for friday\r\n        var currentTime = moment(new Date(), \"h:mma\");\r\n        const today = moment().isoWeekday();\r\n        //market hours\r\n\r\n        if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n            var intervaltime = 60000;\r\n            if (this.state.totalStockToWatch > 180) {\r\n                intervaltime = this.state.totalStockToWatch * 333;\r\n            }\r\n            this.setState({ findlast5minMovementInterval: setInterval(() => { this.findlast5minMovement(); }, intervaltime) });\r\n        }\r\n    }\r\n\r\n    getTimeFrameValue = (timeFrame) => {\r\n\r\n        //18 HOURS FOR BACK 1 DATE BACK MARKET OFF\r\n        \r\n\r\n        switch (timeFrame) {\r\n            case 'ONE_MINUTE':\r\n                if (new Date().toLocaleTimeString() < \"10:05:00\")\r\n                    return \"18:21:00\";\r\n                else\r\n                    return \"00:21:00\";\r\n                break;\r\n            case 'FIVE_MINUTE':\r\n                if (new Date().toLocaleTimeString() < \"11:00:00\")\r\n                    return \"19:41:00\";\r\n                else\r\n                    return \"01:41:00\";\r\n                break;\r\n            case 'TEN_MINUTE':\r\n                if (new Date().toLocaleTimeString() < \"12:35:00\")\r\n                    return \"21:21:00\";\r\n                else\r\n                    return \"03:21:00\";\r\n                break;\r\n            case 'FIFTEEN_MINUTE':\r\n                if (new Date().toLocaleTimeString() < \"14:15:00\")\r\n                    return \"23:01:00\";\r\n                else\r\n                    return \"05:01:00\";\r\n                break;\r\n            case 'THIRTY_MINUTE':\r\n                return \"84:01:00\";\r\n                break;\r\n            case 'ONE_HOUR':\r\n                return \"168:01:00\";\r\n                break;\r\n            case 'ONE_DAY':\r\n                return \"744:01:00\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    updateToLocalStorage =(row)=>{\r\n\r\n        let foundAt = new Date(row.foundAt).toLocaleString();\r\n      \r\n       var isfound = this.state.fastMovementList.filter(element => (element.token == row.token && element.foundAt == foundAt));\r\n       console.log(\"isfound\", isfound); \r\n\r\n        if(!isfound.length){\r\n\r\n            var updateData = {\r\n                token: row.token, \r\n                foundAt: foundAt, \r\n                ltp: row.ltp, \r\n                symbol: row.symbol, \r\n                nc:  row.perChange.toFixed(2),\r\n                orderType: row.orderType\r\n            }\r\n            this.state.fastMovementList.push(updateData); \r\n            //this.setState({ fastMovementList: [..., updateData] });\r\n            localStorage.setItem(\"fastMovementList\", JSON.stringify(this.state.fastMovementList)  ); \r\n        }\r\n\r\n    }\r\n\r\n    find10MinBBBlast = async () => {\r\n\r\n        this.setState({ findlast5minMovementUpdate: '', findlast5minMovement: [] });\r\n        var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n        if (this.state.selectedWatchlist == \"selectall\") {\r\n            watchList = localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList'));\r\n        }\r\n\r\n        this.setState({ totalStockToWatch: watchList.length })\r\n\r\n\r\n        var foundData = [];\r\n\r\n        for (let index = 0; index < watchList.length; index++) {\r\n\r\n            this.setState({ findlast5minMovementUpdate: index + 1 + \". \" + watchList[index].symbol + \" At \" + new Date().toLocaleTimeString() });\r\n\r\n            const format1 = \"YYYY-MM-DD HH:mm\";\r\n            var beginningTime = moment('9:15am', 'h:mma').format(format1);\r\n\r\n            let timeDuration = this.getTimeFrameValue(this.state.timeFrame);\r\n            var time = moment.duration(\"100:00:00\");  //22:00:00\" for last day  2hours  timeDuration\r\n            var startDate = moment(new Date()).subtract(time);\r\n\r\n            var data = {\r\n                \"exchange\": watchList[index].exch_seg,\r\n                \"symboltoken\": watchList[index].token,\r\n                \"interval\": this.state.timeFrame, //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                \"fromdate\": moment(startDate).format(format1),\r\n                \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n            }\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n                // console.log(\"candle history\", histdata);\r\n\r\n                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                    var candleData = histdata.data;\r\n                    var candleChartData = [],lightcandleChartData=[], vwapdata = [], closeingData = [], highData = [], lowData = [], openData = [], valumeData = [], bbdata = [];\r\n                    candleData.forEach((element, loopindex) => {\r\n                        candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n\r\n                        var time = { year: new Date(element[0]).getFullYear() ,month: new Date(element[0]).getMonth() ,day: new Date(element[0]).getDate() }\r\n                      \r\n                    //    { time: '2018-10-24', open: 178.58, high: 182.37, low: 176.31, close: 176.97 },\r\n                        lightcandleChartData.push({\r\n                            x: new Date(element[0]).getTime(),\r\n                            y:  (element[2] + element[3] + element[4]) / 3\r\n                          });\r\n                           \r\n                        vwapdata.push([element[5], (element[2] + element[3] + element[4]) / 3]);\r\n                        closeingData.push(element[4]);\r\n                        highData.push(element[2]);\r\n                        lowData.push(element[3]);\r\n                        openData.push(element[3]);\r\n                        valumeData.push(element[5]);\r\n                        bbdata.push((element[2] + element[3] + element[4]) / 3);\r\n\r\n                    });\r\n\r\n                   // { time: '2018-10-19', value: 19103293.00, color: 'rgba(0, 150, 136, 0.8)' },\r\n\r\n                    var sma = SMA.calculate({ period: 20, values: closeingData });\r\n                    console.log(watchList[index].symbol, \"SMA\", sma);\r\n\r\n\r\n                    var inputRSI = { values: closeingData, period: 14 };\r\n                    var lastRsiValue = RSI.calculate(inputRSI);\r\n\r\n                    console.log(watchList[index].symbol, \"Rsi\", inputRSI, lastRsiValue);\r\n                    console.log(watchList[index].symbol, \"vwap\", vwapdata, vwap(vwapdata));\r\n\r\n\r\n                    var inputVWAP = {\r\n                        open: openData,\r\n                        high: highData,\r\n                        low: lowData,\r\n                        close: closeingData,\r\n                        volume: valumeData\r\n                    };\r\n\r\n                    var input = {\r\n                        period: 20,\r\n                        values: bbdata,\r\n                        stdDev: 2\r\n\r\n                    }\r\n\r\n                    var bb = BollingerBands.calculate(input);\r\n                    console.log(watchList[index].symbol, \"Bolinger band\", input, bb);\r\n\r\n\r\n                    var bbvlastvalue = bb[bb.length - 1];\r\n                    if (bbvlastvalue) {\r\n                        bbvlastvalue.upper = bbvlastvalue.upper.toFixed(2);\r\n                        bbvlastvalue.middle = bbvlastvalue.middle.toFixed(2);\r\n                        bbvlastvalue.lower = bbvlastvalue.lower.toFixed(2);\r\n\r\n                    }\r\n                    var dataltp = {\r\n                        \"exchange\": \"NSE\",\r\n                        \"tradingsymbol\": watchList[index].symbol,\r\n                        \"symboltoken\": watchList[index].token,\r\n                    }\r\n\r\n                    AdminService.getLTP(dataltp).then(res => {\r\n                        let data = resolveResponse(res, 'noPop');\r\n                        var LtpData = data && data.data;\r\n                        //console.log(LtpData);\r\n                        if (LtpData && LtpData.ltp) {\r\n\r\n\r\n                            lastRsiValue = lastRsiValue.slice((lastRsiValue.length - 6), lastRsiValue.length);\r\n\r\n                            var upsidecount = 0, downsidecount = 0, startingRsiupside = lastRsiValue[2], startingRsiDownside = lastRsiValue[2];\r\n                            lastRsiValue.forEach((element, i) => {\r\n                                if (i > 2 && element >= 55 && element <= 65) {\r\n                                    if (startingRsiupside <= element) {\r\n                                        startingRsiupside = element;\r\n                                        upsidecount += 1;\r\n                                    }\r\n                                }\r\n\r\n                                if (i > 2 && element >= 35 && element <= 45) {\r\n                                    if (element <= startingRsiDownside) {\r\n                                        startingRsiDownside = element;\r\n                                        downsidecount += 1;\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n                            var volumeUpside = valumeData[2], volUpCount =0;                          \r\n                            valumeData.forEach((element, i) => {\r\n                                if (i > 2 && volumeUpside < element) {\r\n                                    volumeUpside = element;\r\n                                    volUpCount += 1;\r\n                                }\r\n                            });\r\n\r\n                            console.log(watchList[index].symbol, \"valumeData\", valumeData, );\r\n\r\n                            console.log(watchList[index].symbol, \"last continue rsi\", upsidecount);\r\n                            this.setState({ findlast5minMovementUpdate: index + 1 + \". \" + watchList[index].symbol + \" At \" + new Date().toLocaleTimeString() + \" RSI rising :\" + upsidecount });\r\n                        \r\n\r\n                            if (upsidecount >= 2 || downsidecount >= 2) {\r\n                                if (this.state.BBBlastType == 'BBBlastOnly') {\r\n                                    if (bbvlastvalue && LtpData.ltp >= bbvlastvalue.upper) {\r\n                                        var perChange = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;\r\n                                        let data = {\r\n                                            symbol: watchList[index].symbol,\r\n                                            token: watchList[index].token,\r\n                                            ltp: LtpData.ltp,\r\n                                            perChange: perChange,\r\n                                            RSIValue: lastRsiValue[lastRsiValue.length - 1],\r\n                                            RSI: lastRsiValue,\r\n                                            VWAP: vwap(vwapdata),\r\n                                            BB: bbvlastvalue,\r\n                                            candleChartData: candleChartData,\r\n                                            lightcandleChartData: lightcandleChartData,\r\n                                            foundAt : candleData && candleData[candleData.length-1][0],\r\n                                            orderType: \"BUY\",\r\n                                            name: watchList[index].name,\r\n                                        }\r\n                                        foundData.push(data)\r\n                                        this.setState({ findlast5minMovement: foundData });\r\n                                        this.updateToLocalStorage(data); \r\n\r\n                                        this.speckIt(watchList[index].symbol + ' BB  buy');\r\n                                        window.document.title = \"FM: Buy \" + watchList[index].symbol;\r\n                                    }\r\n                                    if (bbvlastvalue && LtpData.ltp <= bbvlastvalue.lower) {\r\n                                        var perChange = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;\r\n                                       let data = {\r\n                                            symbol: watchList[index].symbol,\r\n                                            token: watchList[index].token,\r\n                                            ltp: LtpData.ltp,\r\n                                            perChange: perChange,\r\n                                            RSIValue: lastRsiValue[lastRsiValue.length - 1],\r\n                                            RSI: lastRsiValue,\r\n                                            VWAP: vwap(vwapdata),\r\n                                            BB: bbvlastvalue,\r\n                                            candleChartData: candleChartData,\r\n                                            lightcandleChartData: lightcandleChartData,\r\n                                            foundAt : candleData && candleData[candleData.length-1][0],\r\n                                            orderType: \"SELL\",\r\n                                            name: watchList[index].name,\r\n                                        }\r\n                                        foundData.push(data)\r\n                                        this.setState({ findlast5minMovement: foundData });\r\n                                        this.updateToLocalStorage(data); \r\n\r\n                                        this.speckIt(watchList[index].symbol + ' BB sell');\r\n                                        window.document.title = \"FM: Sell \" + watchList[index].symbol;\r\n                                    }\r\n                                } else {\r\n\r\n                                    let timeDuration = this.getTimeFrameValue('ONE_DAY');\r\n                                    var time = moment.duration(timeDuration);  //22:00:00\" for last day  2hours \r\n                                    var startDateforDaily = moment(new Date()).subtract(time);\r\n                                    var dataDay = {\r\n                                        \"exchange\": watchList[index].exch_seg,\r\n                                        \"symboltoken\": watchList[index].token,\r\n                                        \"interval\": 'ONE_DAY',\r\n                                        \"fromdate\": moment(startDateforDaily).format(format1),\r\n                                        \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n                                    }\r\n                                    AdminService.getHistoryData(dataDay).then(resd => {\r\n                                        let histdatad = resolveResponse(resd, 'noPop');\r\n                                        var DSMA = '';\r\n                                        if (histdatad && histdatad.data && histdatad.data.length) {\r\n                                            var candleDatad = histdatad.data;\r\n                                            var closeingDatadaily = [];\r\n                                            candleDatad.forEach((element, loopindex) => {\r\n                                                closeingDatadaily.push(element[4]);\r\n                                            });\r\n\r\n                                            DSMA = SMA.calculate({ period: 20, values: closeingDatadaily });\r\n\r\n                                            var DSMALastValue = DSMA && DSMA[DSMA.length - 1];\r\n                                            console.log(watchList[index].symbol, \"DSMA\", DSMALastValue);\r\n\r\n                                            if (LtpData.ltp > DSMALastValue && bbvlastvalue && LtpData.ltp >= bbvlastvalue.upper) {\r\n                                                var perChange = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;\r\n                                                \r\n                                                let data = {\r\n                                                    symbol: watchList[index].symbol,\r\n                                                    token: watchList[index].token,\r\n                                                    ltp: LtpData.ltp,\r\n                                                    perChange: perChange,\r\n                                                    RSIValue: lastRsiValue[lastRsiValue.length - 1],\r\n                                                    RSI: lastRsiValue,\r\n                                                    VWAP: vwap(vwapdata),\r\n                                                    BB: bbvlastvalue,\r\n                                                    DSMALastValue: DSMALastValue,\r\n                                                    candleChartData: candleChartData,\r\n                                                    lightcandleChartData: lightcandleChartData,\r\n                                                    foundAt : candleData && candleData[candleData.length-1][0],\r\n                                                    orderType: \"BUY\",\r\n                                                    name: watchList[index].name,\r\n                                                    \r\n                                                }; \r\n                                                \r\n                                                foundData.push(data)\r\n                                                this.setState({ findlast5minMovement: foundData });\r\n                                                this.updateToLocalStorage(data); \r\n\r\n                                                this.speckIt(watchList[index].symbol + ' BB  buy');\r\n                                                window.document.title = \"FM: Buy \" + watchList[index].symbol;\r\n\r\n                                            }\r\n                                            if (LtpData.ltp < DSMALastValue && bbvlastvalue && LtpData.ltp <= bbvlastvalue.lower) {\r\n                                                var perChange = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;\r\n                                                let data = {\r\n                                                    symbol: watchList[index].symbol,\r\n                                                    token: watchList[index].token,\r\n                                                    ltp: LtpData.ltp,\r\n                                                    perChange: perChange,\r\n                                                    RSIValue: lastRsiValue[lastRsiValue.length - 1],\r\n                                                    RSI: lastRsiValue,\r\n                                                    VWAP: vwap(vwapdata),\r\n                                                    BB: bbvlastvalue,\r\n                                                    DSMALastValue: DSMALastValue,\r\n                                                    candleChartData: candleChartData,\r\n                                                    lightcandleChartData: lightcandleChartData,\r\n                                                    foundAt : candleData && candleData[candleData.length-1][0],\r\n                                                    orderType: \"SELL\",\r\n                                                    name: watchList[index].name,\r\n                                                }\r\n                                                foundData.push(data)\r\n                                                this.setState({ findlast5minMovement: foundData });\r\n                                                this.updateToLocalStorage(data); \r\n\r\n                                                this.speckIt(watchList[index].symbol + ' BB sell');\r\n                                                window.document.title = \"FM: Sell \" + watchList[index].symbol;\r\n                                            }\r\n                                        }\r\n\r\n\r\n                                    });\r\n\r\n                                }\r\n                            }\r\n\r\n\r\n\r\n                        }\r\n\r\n                    })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(watchList[index].symbol, \"  emply candle found\");\r\n                }\r\n            })\r\n\r\n            await new Promise(r => setTimeout(r, 600));\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    findlast5minMovement = async () => {\r\n\r\n        this.setState({ findlast5minMovementUpdate: '' });\r\n\r\n        var timediff = moment.duration(\"00:05:00\");\r\n        const format1 = \"YYYY-MM-DD HH:mm\";\r\n        var startdate = moment(new Date()).subtract(timediff);\r\n\r\n        var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n\r\n        if (this.state.selectedWatchlist == \"selectall\") {\r\n            watchList = localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList'));\r\n        }\r\n        console.log(\"watchList\", this.state.selectedWatchlist, watchList);\r\n\r\n        this.setState({ totalStockToWatch: watchList.length })\r\n\r\n\r\n        var foundData = [];\r\n\r\n        if (watchList && watchList.length) {\r\n            for (let index = 0; index < watchList.length; index++) {\r\n                const element = watchList[index];\r\n                var data = {\r\n                    \"exchange\": \"NSE\",\r\n                    \"symboltoken\": element.token,\r\n                    \"interval\": \"ONE_MINUTE\", //ONE_DAY FIVE_MINUTE    FIFTEEN_MINUTE\r\n                    \"fromdate\": moment(startdate).format(format1),\r\n                    \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n                }\r\n\r\n                var updateMsg = index + 1 + \". \" + element.symbol;\r\n                this.setState({ findlast5minMovementUpdate: updateMsg });\r\n\r\n                window.document.title = \"FM: \" + updateMsg;\r\n\r\n                AdminService.getHistoryData(data).then(res => {\r\n                    let histdata = resolveResponse(res, 'noPop');\r\n                    //console.log(\"candle history\", histdata); \r\n                    if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                        var percentChangeList = []; var foundCount = 0;\r\n                        histdata.data.forEach(element => {\r\n                            var changePer = (element[4] - element[1]) * 100 / element[1];\r\n\r\n                            if (changePer >= 0.3) {\r\n                                foundCount = foundCount + 1;\r\n                                percentChangeList.push(\"<span style='color:green'>\" + changePer.toFixed(2) + \"% At \" + new Date(element[0]).toLocaleTimeString().substr(0, 5) + \"</span>\")\r\n                            }\r\n                            if (changePer <= -0.3) {\r\n                                foundCount = foundCount + 1;\r\n                                percentChangeList.push(\"<span style='color:red'>\" + changePer.toFixed(2) + \"% At \" + new Date(element[0]).toLocaleTimeString().substr(0, 5) + \"</span>\")\r\n                            }\r\n\r\n                        });\r\n\r\n\r\n                        var ttophistCandle = [];\r\n                        histdata.data.forEach(element => {\r\n                            ttophistCandle.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                        });\r\n\r\n\r\n                        if (percentChangeList.length) {\r\n\r\n                            var data = {\r\n                                \"exchange\": \"NSE\",\r\n                                \"tradingsymbol\": watchList[index].symbol,\r\n                                \"symboltoken\": watchList[index].token,\r\n                            }\r\n                            AdminService.getLTP(data).then(res => {\r\n                                let data = resolveResponse(res, 'noPop');\r\n                                var LtpData = data && data.data;\r\n                                //console.log(LtpData);\r\n                                if (LtpData && LtpData.ltp) {\r\n\r\n                                    var perChange = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;\r\n                                    foundData.push({\r\n                                        symbol: watchList[index].symbol,\r\n                                        ltp: LtpData.ltp,\r\n                                        perChange: perChange,\r\n                                        percentChangeList: percentChangeList.join(\" | \"),\r\n                                        candleChartData: ttophistCandle,\r\n                                    })\r\n                                    console.log(\"foundData\", foundData);\r\n                                    this.setState({ findlast5minMovement: foundData })\r\n\r\n                                }\r\n\r\n                            })\r\n\r\n\r\n                        }\r\n\r\n\r\n                    } else {\r\n                        console.log(\" candle data emply\");\r\n                    }\r\n                })\r\n                await new Promise(r => setTimeout(r, 333));\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    callbackAfterOrderDone = (order) => {\r\n        // setValues({ ...values, ['buyFlag']: order.status });\r\n        // setValues({ ...values, ['sellFlag']:  order.status  });\r\n        //  this.setState({ [spineerId]: order.status}); \r\n\r\n\r\n        console.log(\"order executed\", order);\r\n\r\n    }\r\n\r\n\r\n\r\n    handleClick = (row, type, spinnerIndex) => {\r\n\r\n\r\n        console.log(row);\r\n        if (row.token && row.symbol) {\r\n            if (type == 'BUY') {\r\n                this.setState({ [spinnerIndex]: true });\r\n                var symbolInfo = {\r\n                    token: row.token,\r\n                    symbol: row.symbol,\r\n                    qtyToTake : this.state.qtyToTake\r\n                }\r\n                CommonOrderMethod.historyWiseOrderPlace(symbolInfo, 'BUY', \"no\", this.callbackAfterOrderDone);\r\n                this.setState({ [spinnerIndex]: false });\r\n\r\n            }\r\n\r\n            if (type == 'SELL') {\r\n                this.setState({ [spinnerIndex]: true });\r\n                var symbolInfo = {\r\n                    token: row.token,\r\n                    symbol: row.symbol,\r\n                    qtyToTake : this.state.qtyToTake\r\n                }\r\n                CommonOrderMethod.historyWiseOrderPlace(symbolInfo, 'SELL', \"no\", this.callbackAfterOrderDone);\r\n                this.setState({ [spinnerIndex]: false });\r\n            }\r\n        } else {\r\n            Notify.showError(\" Symbol Not found!!!\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        //var foundPatternList = localStorage.getItem('foundPatternList') && JSON.parse(localStorage.getItem('foundPatternList')).reverse(); \r\n\r\n        return (\r\n            <React.Fragment>\r\n                <PostLoginNavBar />\r\n                <br />\r\n                <ChartDialog /> <ChartMultiple />\r\n\r\n                <Grid justify=\"space-between\"\r\n                    container spacing={1}>\r\n\r\n                    <Grid item xs={12} sm={4} >\r\n                        <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n                            &nbsp;BB Blast ({this.state.findlast5minMovement && this.state.findlast5minMovement.length})\r\n                            <span id=\"stockTesting\" style={{ fontSize: \"18px\", color: 'gray' }}> {this.state.findlast5minMovementUpdate} </span>\r\n                        </Typography>\r\n\r\n                    </Grid>\r\n\r\n\r\n                    <Grid item xs={12} sm={2} >\r\n                        <FormControl style={styles.selectStyle} >\r\n                            <InputLabel htmlFor=\"gender\">Select Watchlist</InputLabel>\r\n                            <Select value={this.state.selectedWatchlist} name=\"selectedWatchlist\" onChange={this.onChangeWatchlist}>\r\n                                <MenuItem value={\"selectall\"}>{\"Select All\"}</MenuItem>\r\n                                {this.state.totalWatchlist && this.state.totalWatchlist.map(element => (\r\n                                    <MenuItem value={element}>{element}</MenuItem>\r\n                                ))\r\n                                }\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={1} >\r\n                        <FormControl style={styles.selectStyle} >\r\n                            <InputLabel htmlFor=\"gender\">Select Time</InputLabel>\r\n                            <Select value={this.state.timeFrame} name=\"timeFrame\" onChange={this.onChangeWatchlist}>\r\n                                <MenuItem value={'ONE_MINUTE'}>{'1 Min'}</MenuItem>\r\n                                <MenuItem value={'FIVE_MINUTE'}>{'5 Min'}</MenuItem>\r\n                                <MenuItem value={'TEN_MINUTE'}>{'10 Min'}</MenuItem>\r\n                                <MenuItem value={'FIFTEEN_MINUTE'}>{'15 Min'}</MenuItem>\r\n                                <MenuItem value={'THIRTY_MINUTE'}>{'30 Min'}</MenuItem>\r\n                                <MenuItem value={'ONE_HOUR'}>{'1 Hour'}</MenuItem>\r\n                                <MenuItem value={'ONE_DAY'}>{'1 Day'}</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={1} >\r\n                        <FormControl style={styles.selectStyle} >\r\n                            <InputLabel htmlFor=\"gender\">Select Time</InputLabel>\r\n                            <Select value={this.state.BBBlastType} name=\"BBBlastType\" onChange={this.onChangeWatchlist}>\r\n                                <MenuItem value={'BBBlastOnly'}>{'BB Blast'}</MenuItem>\r\n                                <MenuItem value={'BBBlastDaily'}>{'BB Blast Daily'}</MenuItem>\r\n\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={4} >\r\n                        <Button variant=\"contained\" style={{ marginRight: '20px' }} onClick={() => this.find10MinBBBlast()}>Start</Button>\r\n                        <Button variant=\"contained\" style={{ marginRight: '20px' }} onClick={() => this.stopSearching()}>Stop</Button>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n\r\n                {/* <Table  size=\"small\"   aria-label=\"sticky table\" >\r\n                    <TableHead  style={{whiteSpace: \"nowrap\", }} variant=\"head\">\r\n                        <TableRow key=\"1\"  variant=\"head\" style={{fontWeight: 'bold'}}>\r\n                            <TableCell className=\"TableHeadFormat\" align=\"left\">Symbol</TableCell>        \r\n                            <TableCell className=\"TableHeadFormat\"  align=\"left\">Time/PerChnage</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody style={{width:\"\",whiteSpace: \"nowrap\"}}>\r\n                        {this.state.findlast5minMovement ? this.state.findlast5minMovement.map(row => (\r\n                            <TableRow hover key={row.symbol}>\r\n                                <TableCell align=\"left\"> <Button  style={{ color: row.perChange > 0 ? \"green\" : \"red\" }} variant=\"contained\"  onClick={() => this.showCandleChart(row.candleChartData, row.symbol, row.ltp, row.perChange )}>{row.symbol} {row.ltp} ({row.perChange.toFixed(2)}) <EqualizerIcon /> </Button></TableCell>\r\n                                <TableCell align=\"left\">{row.percentChangeList}\r\n                            </TableCell>\r\n                            </TableRow>\r\n                        )):''}\r\n                    </TableBody>\r\n                </Table> */}\r\n                <Grid container spacing={2} >\r\n\r\n\r\n                    {this.state.findlast5minMovement ? this.state.findlast5minMovement.map((row, i) => (\r\n\r\n                        <Grid item xs={12} sm={3}>\r\n                            <Paper style={{ overflow: \"auto\", padding: '10px' }} >\r\n                                <Typography style={{ color: row.perChange > 0 ? \"green\" : \"red\" }}> {row.symbol} {row.ltp} <b>({row.perChange.toFixed(2)}%) </b></Typography>\r\n\r\n                                {/* <LightChart candleData={row.candleChartData.length} />  */}\r\n                                \r\n\r\n                                {/* {row.lightcandleChartData.length > 0 ?  <div id=\"showchart\"> \r\n                                    <LightChartCom ChartData={{lightcandleChartData: row.lightcandleChartData.slice(Math.max(row.candleChartData.length - 10, 1)), volumeData : this.state.volumeData}}/>\r\n                                </div>\r\n                                : \"\"} */}\r\n\r\n                                {row.candleChartData.length > 0 ?  <ReactApexChart\r\n                                    options={{\r\n                                        chart: {\r\n                                            type: 'candlestick',\r\n                                            height: 250\r\n                                        },\r\n                                        title: {\r\n                                            text: \"\",\r\n                                            align: 'left'\r\n                                        },\r\n                                        xaxis: {\r\n                                            type: 'datetime',\r\n                                        },\r\n                                        yaxis: {\r\n                                            tooltip: {\r\n                                                enabled: true\r\n                                            }\r\n                                        }\r\n                                    }}\r\n                                    series={[{\r\n                                        data: row.candleChartData.slice(Math.max(row.candleChartData.length - 10, 1))\r\n                                    }, \r\n                                    // {\r\n                                    //     name: 'line',\r\n                                    //     type: 'line',\r\n                                    //     data: [\r\n                                    //         row.lightcandleChartData\r\n                                    //     ]\r\n                                    //   }\r\n                                \r\n                                    ]}\r\n                                   \r\n                                    type=\"candlestick\"\r\n                                    width={350}\r\n                                    height={250}\r\n\r\n                                    \r\n\r\n                                /> : \"\"}\r\n\r\n                                {/* <div> {Parser(row.percentChangeList)}</div> */}\r\n\r\n                                <Grid direction=\"row\" style={{ padding: '5px' }} container className=\"flexGrow\" justify=\"space-between\" >\r\n\r\n\r\n\r\n                                    {row.DSMALastValue ? <Grid item xs={12} sm={12} style={{ color: row.ltp > row.DSMALastValue ? \"green\" : \"red\", fontWeight: \"bold\" }}>\r\n                                        Daily SMA: {row.DSMALastValue} {row.ltp > row.DSMALastValue ? \"BUY\" : \"SELL\"}\r\n                                    </Grid> : \"\"}\r\n                                    <Grid item xs={12} sm={12} style={{ color: row.ltp > row.VWAP ? \"green\" : \"red\", fontWeight: \"bold\" }}>\r\n                                        VWAP:  {row.VWAP}\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={12}>\r\n\r\n                                        RSI: {row.RSI.map((item, j) => (\r\n                                            item >= 60 ? <span style={{ color: 'green', fontWeight: \"bold\" }}> {item} &nbsp;</span> : <span style={{ color: item <= 40 ? 'red' : \"\", fontWeight: \"bold\" }}> {item} &nbsp;</span>\r\n                                        ))}\r\n\r\n\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={12} >\r\n                                        BB\r\n                                        &nbsp; <span style={{ color: row.ltp >= row.BB.upper ? \"green\" : \"\", fontWeight: \"bold\" }}>Upper: {row.BB.upper}</span>\r\n                                        &nbsp; Middle: {row.BB.middle}\r\n                                        &nbsp; <span style={{ color: row.ltp <= row.BB.lower ? \"red\" : \"\", fontWeight: \"bold\" }}> Lower: {row.BB.lower}</span>\r\n                                    </Grid>\r\n\r\n                                </Grid>\r\n\r\n                                <Grid direction=\"row\" style={{ padding: '5px' }} container className=\"flexGrow\" justify=\"space-between\" >\r\n                                    <Grid item>\r\n                                        {!this.state['buyButtonClicked' + row.symbol + i] ? <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={() => this.handleClick(row, 'BUY', 'buyButtonClicked' + row.symbol + i)}>BUY</Button> : <Spinner />}\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item>\r\n                                    <TextField label=\"Qty\" type=\"number\" name=\"qtyToTake\" value={this.state.qtyToTake} onChange={this.onChangeQty} />\r\n                                    </Grid>\r\n\r\n\r\n                                    <Grid item >\r\n                                        {/* onClick={() => this.historyWiseOrderPlace(row, 'SELL', \"\", 'sellButtonClicked' + row.symbol + i)} */}\r\n                                        {!this.state['sellButtonClicked' + row.symbol + i] ? <Button size=\"small\" variant=\"contained\" color=\"Secondary\" onClick={() => this.handleClick(row, 'SELL', 'sellButtonClicked' + row.symbol + i)}>SELL</Button> : <Spinner />}\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n\r\n                            </Paper>\r\n\r\n                        </Grid>\r\n\r\n                    )) : ''}\r\n                </Grid>\r\n\r\n            </React.Fragment>\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nconst styles = {\r\n    formContainer: {\r\n        display: 'flex',\r\n        flexFlow: 'row wrap'\r\n    },\r\n\r\n    textStyle: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n\r\n    },\r\n    imgStyle: {\r\n        display: 'flex'\r\n    },\r\n\r\n    selectStyle: {\r\n        minWidth: '100%',\r\n        marginBottom: '10px'\r\n    },\r\n    MuiTextField: {\r\n        overflowY: 'scroll',\r\n        fontSize: \"12px\",\r\n        maxHeight: \"50px\",\r\n\r\n    },\r\n    footerButton: {\r\n        position: 'fixed',\r\n        left: 0,\r\n        bottom: '20px',\r\n        width: '100%',\r\n        textAlign: 'right'\r\n    }\r\n\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport { resolveResponse } from \"../../utils/ResponseHandler\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport * as moment from 'moment';\r\nimport OrderBook from './Orderbook';\r\nimport TradeConfig from './TradeConfig.json';\r\nimport ChartDialog from './ChartDialog';\r\nimport ChartMultiple from './ChartMultiple';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\nimport Notify from \"../../utils/Notify\";\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport Parser from 'html-react-parser';\r\nimport Spinner from \"react-spinner-material\";\r\n\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { SMA, RSI, VWAP, BollingerBands, MACD } from 'technicalindicators';\r\nimport vwap from 'vwap';\r\nimport CommonOrderMethod from \"../../utils/CommonMethods\";\r\nimport LightChart from \"./LightChart\";\r\nimport LightChartCom from \"./LightChartCom\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            staticData: localStorage.getItem('staticData') && JSON.parse(localStorage.getItem('staticData')) || {},\r\n            totalWatchlist: localStorage.getItem('totalWatchlist') && JSON.parse(localStorage.getItem('totalWatchlist')) || [],\r\n            selectedWatchlist: \"NIFTY BANK\",\r\n            totalStockToWatch: 0,\r\n            timeFrame: \"FIFTEEN_MINUTE\",\r\n            chartStaticData: [],\r\n            BBBlastType: \"BBStrongBreakout\",\r\n            qtyToTake: '',\r\n            fastMovementList: localStorage.getItem('fastMovementList') && JSON.parse(localStorage.getItem('fastMovementList')) || [],\r\n        };\r\n        this.findlast5minMovement = this.findlast5minMovement.bind(this);\r\n        this.startSearching = this.startSearching.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        window.document.title = \"FM2\";\r\n\r\n        var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n        this.setState({ totalStockToWatch: watchList.length });\r\n\r\n        // this.findlast5minMovement(); //one time only\r\n        //   this.startSearching();\r\n\r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var endTime = moment('3:30pm', 'h:mma');\r\n        const friday = 5; // for friday\r\n        var currentTime = moment(new Date(), \"h:mma\");\r\n        const today = moment().isoWeekday();\r\n\r\n        var tostartInteral = setInterval(() => {\r\n            var time = new Date();\r\n            console.log(\"set interval 1sec min/10==0 \", time.toLocaleTimeString());\r\n            if (time.getMinutes() % 2 === 0) {\r\n                console.log(\"search method call in with setTimeout 70sec\", time.toLocaleTimeString());\r\n\r\n                setTimeout(() => {\r\n                    this.find10MinBBBlast();\r\n                }, 70000);\r\n                this.setState({\r\n                    stop10bbSearch:\r\n                        setInterval(() => {\r\n                            console.log(\"search method call in with setInterval in 10min\", time.toLocaleTimeString());\r\n                            if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n                                this.find10MinBBBlast();\r\n                            }\r\n                        }, 60000 * 2 + 70000)\r\n                });\r\n\r\n                clearInterval(tostartInteral);\r\n            }\r\n        }, 1000);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    stopSearching = () => {\r\n        console.log(\"stop the search\")\r\n        clearInterval(this.state.findlast5minMovementInterval);\r\n        clearInterval(this.state.stop10bbSearch);\r\n\r\n    }\r\n\r\n\r\n    showCandleChart = (candleData, symbol, ltp, perChange) => {\r\n        localStorage.setItem('candleChartData', JSON.stringify(candleData))\r\n        localStorage.setItem('cadleChartSymbol', symbol)\r\n        localStorage.setItem('candlePriceShow', ltp);\r\n        localStorage.setItem('candleChangeShow', perChange.toFixed(2));\r\n        document.getElementById('showCandleChart').click();\r\n    }\r\n\r\n    speckIt = (text) => {\r\n        var msg = new SpeechSynthesisUtterance();\r\n        msg.text = text.toString();\r\n        window.speechSynthesis.speak(msg);\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.findlast5minMovementInterval);\r\n        clearInterval(this.state.stop10bbSearch);\r\n        // clearInterval(this.state.scaninterval);\r\n        //  clearInterval(this.state.bankNiftyInterval); \r\n    }\r\n\r\n    onChangeWatchlist = (e) => {\r\n        clearInterval(this.state.findlast5minMovementInterval);\r\n        this.setState({ [e.target.name]: e.target.value }, function () {\r\n            // this.findlast5minMovement(); //one time only\r\n            //this.startSearching();\r\n            this.find10MinBBBlast();\r\n\r\n        });\r\n    }\r\n    onChangeQty = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    startSearching = () => {\r\n\r\n        console.log(\"Starting the search\");\r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var endTime = moment('3:30pm', 'h:mma');\r\n        const friday = 5; // for friday\r\n        var currentTime = moment(new Date(), \"h:mma\");\r\n        const today = moment().isoWeekday();\r\n        //market hours\r\n\r\n        if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n            var intervaltime = 60000;\r\n            if (this.state.totalStockToWatch > 180) {\r\n                intervaltime = this.state.totalStockToWatch * 333;\r\n            }\r\n            this.setState({ findlast5minMovementInterval: setInterval(() => { this.findlast5minMovement(); }, intervaltime) });\r\n        }\r\n    }\r\n\r\n    getTimeFrameValue = (timeFrame) => {\r\n\r\n        //18 HOURS FOR BACK 1 DATE BACK MARKET OFF\r\n\r\n\r\n        switch (timeFrame) {\r\n            case 'ONE_MINUTE':\r\n                if (new Date().toLocaleTimeString() < \"10:05:00\")\r\n                    return \"18:21:00\";\r\n                else\r\n                    return \"00:21:00\";\r\n                break;\r\n            case 'FIVE_MINUTE':\r\n                if (new Date().toLocaleTimeString() < \"11:00:00\")\r\n                    return \"19:41:00\";\r\n                else\r\n                    return \"01:41:00\";\r\n                break;\r\n            case 'TEN_MINUTE':\r\n                if (new Date().toLocaleTimeString() < \"12:35:00\")\r\n                    return \"21:21:00\";\r\n                else\r\n                    return \"03:21:00\";\r\n                break;\r\n            case 'FIFTEEN_MINUTE':\r\n                if (new Date().toLocaleTimeString() < \"14:15:00\")\r\n                    return \"23:01:00\";\r\n                else\r\n                    return \"05:01:00\";\r\n                break;\r\n            case 'THIRTY_MINUTE':\r\n                return \"84:01:00\";\r\n                break;\r\n            case 'ONE_HOUR':\r\n                return \"168:01:00\";\r\n                break;\r\n            case 'ONE_DAY':\r\n                return \"744:01:00\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    updateToLocalStorage = (row) => {\r\n\r\n        let foundAt = new Date(row.foundAt).toLocaleString();\r\n        var isfound = this.state.fastMovementList.filter(element => (element.token == row.token && element.foundAt == foundAt));\r\n        console.log(\"isfound\", isfound);\r\n        if (!isfound.length) {\r\n            var updateData = {\r\n                token: row.token,\r\n                foundAt: foundAt,\r\n                ltp: row.ltp,\r\n                symbol: row.symbol,\r\n                nc: row.perChange.toFixed(2),\r\n                orderType: row.orderType\r\n            }\r\n            this.state.fastMovementList.push(updateData);\r\n            //this.setState({ fastMovementList: [..., updateData] });\r\n            localStorage.setItem(\"fastMovementList\", JSON.stringify(this.state.fastMovementList));\r\n            return true;\r\n\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    find10MinBBBlast = async () => {\r\n\r\n        this.setState({ findlast5minMovementUpdate: '', findlast5minMovement: [] });\r\n        var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n        if (this.state.selectedWatchlist == \"selectall\") {\r\n            watchList = localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList'));\r\n        }\r\n\r\n        this.setState({ totalStockToWatch: watchList.length })\r\n\r\n\r\n        var foundData = [];\r\n\r\n        for (let index = 0; index < watchList.length; index++) {\r\n\r\n            this.setState({ findlast5minMovementUpdate: index + 1 + \". \" + watchList[index].symbol + \" At \" + new Date().toLocaleTimeString() + \" Scaning\" });\r\n\r\n            const format1 = \"YYYY-MM-DD HH:mm\";\r\n            var beginningTime = moment('9:15am', 'h:mma').format(format1);\r\n\r\n            let timeDuration = this.getTimeFrameValue(this.state.timeFrame);\r\n            var time = moment.duration(\"100:00:00\");  //22:00:00\" for last day  2hours  timeDuration\r\n            var startDate = moment(new Date()).subtract(time);\r\n\r\n            var data = {\r\n                \"exchange\": watchList[index].exch_seg,\r\n                \"symboltoken\": watchList[index].token,\r\n                \"interval\": this.state.timeFrame, //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                \"fromdate\": moment(startDate).format(format1),\r\n                \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n            }\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n                // console.log(\"candle history\", histdata);\r\n\r\n                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                    var candleData = histdata.data;\r\n                    var candleChartData = [], lightcandleChartData = [], vwapdata = [], closeingData = [], highData = [], lowData = [], openData = [], valumeData = [], bbdata = [];\r\n                    candleData.forEach((element, loopindex) => {\r\n                        candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n\r\n                        var time = { year: new Date(element[0]).getFullYear(), month: new Date(element[0]).getMonth(), day: new Date(element[0]).getDate() }\r\n\r\n                        //    { time: '2018-10-24', open: 178.58, high: 182.37, low: 176.31, close: 176.97 },\r\n                        lightcandleChartData.push({\r\n                            x: new Date(element[0]).getTime(),\r\n                            y: (element[2] + element[3] + element[4]) / 3\r\n                        });\r\n\r\n                        vwapdata.push([element[5], (element[2] + element[3] + element[4]) / 3]);\r\n                        closeingData.push(element[4]);\r\n                        highData.push(element[2]);\r\n                        lowData.push(element[3]);\r\n                        openData.push(element[3]);\r\n                        valumeData.push(element[5]);\r\n                        bbdata.push((element[2] + element[3] + element[4]) / 3);\r\n\r\n                    });\r\n\r\n                    // { time: '2018-10-19', value: 19103293.00, color: 'rgba(0, 150, 136, 0.8)' },\r\n\r\n                    var sma = SMA.calculate({ period: 20, values: closeingData });\r\n                    //   console.log(watchList[index].symbol, \"SMA\", sma);\r\n\r\n\r\n                    var inputRSI = { values: closeingData, period: 14 };\r\n                    var lastRsiValue = RSI.calculate(inputRSI);\r\n\r\n                    // console.log(watchList[index].symbol, \"Rsi\", inputRSI, lastRsiValue);\r\n                    // console.log(watchList[index].symbol, \"vwap\", vwapdata, vwap(vwapdata));\r\n\r\n\r\n                    var inputVWAP = {\r\n                        open: openData,\r\n                        high: highData,\r\n                        low: lowData,\r\n                        close: closeingData,\r\n                        volume: valumeData\r\n                    };\r\n\r\n                    var input = {\r\n                        period: 20,\r\n                        values: bbdata,\r\n                        stdDev: 2\r\n\r\n                    }\r\n\r\n                    var bb = BollingerBands.calculate(input);\r\n                    //   console.log(watchList[index].symbol, \"Bolinger band\", input, bb);\r\n\r\n\r\n                    var bbvlastvalue = bb[bb.length - 1];\r\n                    if (bbvlastvalue) {\r\n                        bbvlastvalue.upper = bbvlastvalue.upper.toFixed(2);\r\n                        bbvlastvalue.middle = bbvlastvalue.middle.toFixed(2);\r\n                        bbvlastvalue.lower = bbvlastvalue.lower.toFixed(2);\r\n\r\n                    }\r\n\r\n                    var macdInput = {\r\n                        values: closeingData,\r\n                        fastPeriod: 12,\r\n                        slowPeriod: 26,\r\n                        signalPeriod: 9,\r\n                        SimpleMAOscillator: false,\r\n                        SimpleMASignal: false\r\n                    }\r\n\r\n                    let macd = MACD.calculate(macdInput);\r\n                    let macdLastValue = macd[macd.length - 1];\r\n\r\n\r\n                    // MACD: -3.5573380320065553\r\n                    // histogram: -0.7420963576240767\r\n                    // signal: -2.8152416743824786\r\n\r\n                    if (macdLastValue && macdLastValue.MACD >= macdLastValue.signal) {\r\n                        console.log(\"macd\", watchList[index].symbol, macdLastValue);\r\n                    }\r\n\r\n                    var dataltp = {\r\n                        \"exchange\": \"NSE\",\r\n                        \"tradingsymbol\": watchList[index].symbol,\r\n                        \"symboltoken\": watchList[index].token,\r\n                    }\r\n\r\n                    AdminService.getLTP(dataltp).then(res => {\r\n                        let data = resolveResponse(res, 'noPop');\r\n                        var LtpData = data && data.data;\r\n                        //console.log(LtpData);\r\n                        if (LtpData && LtpData.ltp) {\r\n\r\n\r\n                            lastRsiValue = lastRsiValue.slice((lastRsiValue.length - 6), lastRsiValue.length);\r\n\r\n                            // var volumeUpside = valumeData[2], volUpCount =0;                          \r\n                            // valumeData.forEach((element, i) => {\r\n                            //     if (i > 2 && volumeUpside < element) {\r\n                            //         volumeUpside = element;\r\n                            //         volUpCount += 1;\r\n                            //     }\r\n                            // });\r\n\r\n                            this.setState({ findlast5minMovementUpdate: index + 1 + \". \" + watchList[index].symbol + \" At \" + new Date().toLocaleTimeString() + \" Searching\" });\r\n\r\n                            let isFound = false;\r\n\r\n                            if (this.state.BBBlastType == 'BBStrongBreakout') {\r\n                                if (bbvlastvalue && LtpData.ltp >= bbvlastvalue.upper && candleData[candleData.length - 1][2] == candleData[candleData.length - 1][4]) {\r\n                                    var perChange = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;\r\n                                    let data = {\r\n                                        symbol: watchList[index].symbol,\r\n                                        token: watchList[index].token,\r\n                                        ltp: LtpData.ltp,\r\n                                        perChange: perChange,\r\n                                        RSIValue: lastRsiValue[lastRsiValue.length - 1],\r\n                                        RSI: lastRsiValue,\r\n                                        VWAP: vwap(vwapdata),\r\n                                        BB: bbvlastvalue,\r\n                                        candleChartData: candleChartData,\r\n                                        lightcandleChartData: lightcandleChartData,\r\n                                        foundAt: candleData && candleData[candleData.length - 1][0],\r\n                                        orderType: \"BUY\",\r\n                                        name: watchList[index].name,\r\n                                    }\r\n\r\n                                    if (this.updateToLocalStorage(data)) {\r\n                                        foundData.push(data)\r\n                                        this.setState({ findlast5minMovement: foundData });\r\n                                        this.speckIt(watchList[index].symbol + ' BB  buy');\r\n                                        window.document.title = \"FM2: Buy \" + watchList[index].symbol;\r\n                                        this.setState({ findlast5minMovementUpdate: index + 1 + \". \" + watchList[index].symbol + \" At \" + new Date().toLocaleTimeString() + \" BUY Eligible\" });\r\n                                    }\r\n\r\n                                } else if (bbvlastvalue && LtpData.ltp <= bbvlastvalue.lower && candleData[candleData.length - 1][3] == candleData[candleData.length - 1][4]) {\r\n                                    var perChange = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;\r\n                                    let data = {\r\n                                        symbol: watchList[index].symbol,\r\n                                        token: watchList[index].token,\r\n                                        ltp: LtpData.ltp,\r\n                                        perChange: perChange,\r\n                                        RSIValue: lastRsiValue[lastRsiValue.length - 1],\r\n                                        RSI: lastRsiValue,\r\n                                        VWAP: vwap(vwapdata),\r\n                                        BB: bbvlastvalue,\r\n                                        candleChartData: candleChartData,\r\n                                        lightcandleChartData: lightcandleChartData,\r\n                                        foundAt: candleData && candleData[candleData.length - 1][0],\r\n                                        orderType: \"SELL\",\r\n                                        name: watchList[index].name,\r\n                                    }\r\n                                    if (this.updateToLocalStorage(data)) {\r\n                                        foundData.push(data)\r\n                                        this.setState({ findlast5minMovement: foundData });\r\n                                        this.speckIt(watchList[index].symbol + ' BB sell');\r\n                                        window.document.title = \"FM2: Sell \" + watchList[index].symbol;\r\n                                        this.setState({ findlast5minMovementUpdate: index + 1 + \". \" + watchList[index].symbol + \" At \" + new Date().toLocaleTimeString() + \" SELL Eligible\" });\r\n                                    }\r\n\r\n                                } else {\r\n                                    this.setState({ findlast5minMovementUpdate: index + 1 + \". \" + watchList[index].symbol + \" At \" + new Date().toLocaleTimeString() + \" Not Eligible\" });\r\n                                }\r\n                            }\r\n\r\n                            if(this.state.BBBlastType == 'findRange'){\r\n                                let lower=candleData[0][3], higher=candleData[0][2]; \r\n                                let rangehighlow = 0, lowdate = candleData[0][0], highdate = candleData[0][0]; \r\n\r\n                                console.log(\"candleData\", watchList[index].symbol, candleData)\r\n                                for (let indexR = 0; indexR < candleData.length-1; indexR++) {\r\n                                    const element = candleData[indexR];\r\n                                    let high = element[2]; \r\n                                    let low = element[3]; \r\n                    \r\n                                    if(rangehighlow <= 1){\r\n                                        if(low < lower) {\r\n                                            lower = low;\r\n                                            lowdate = element[0];\r\n                                        }         \r\n                                        if(higher <  high) {\r\n                                            higher = high\r\n                                            highdate = element[0];\r\n                                        } \r\n                                        rangehighlow++;        \r\n                                    }\r\n                    \r\n                                }\r\n\r\n                                if(rangehighlow == 1){\r\n                                    var nextCandles = candleData.slice(0, 25);\r\n                                    let buffer = (higher - lower) * 20 /100; \r\n                                    lower =  lower - buffer; \r\n                                    higher =  higher + buffer;\r\n                                    this.findRange(nextCandles, lower,  higher, watchList[index].symbol); \r\n                                    // console.log(\"lower\", lower,  \"lowdate\", new Date(lowdate).toLocaleString()  )\r\n                                    // console.log(\"higher\", higher, \"highdate\", new Date(highdate).toLocaleString(),  \"\\n\")\r\n                                    rangehighlow = 0; \r\n                                    lower=candleData[1][3];\r\n                                    higher=candleData[1][2]; \r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    })\r\n\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(watchList[index].symbol, \"  emply candle found\");\r\n                }\r\n            })\r\n            await new Promise(r => setTimeout(r, 600));\r\n        }\r\n    }\r\n\r\n    findRange( nextCandles, lower, higher, symbol) { \r\n        let count = 0, range = higher - lower;\r\n        // if(range >= 30 && range <= 60 ){  \r\n        // }\r\n        for (let index = 0; index < nextCandles.length; index++) {\r\n            const element = nextCandles[index];\r\n            if(element[2] <= higher && element[3] >= lower){\r\n                //console.log(element);\r\n                count++;  \r\n            }else{\r\n                break; \r\n            }\r\n        }\r\n        if(count >= 3){\r\n\r\n            console.log( count , symbol, lower, higher, range, new Date(nextCandles[0][0]).toLocaleString() );\r\n\r\n        }\r\n    }\r\n\r\n\r\n    findlast5minMovement = async () => {\r\n\r\n        this.setState({ findlast5minMovementUpdate: '' });\r\n\r\n        var timediff = moment.duration(\"00:05:00\");\r\n        const format1 = \"YYYY-MM-DD HH:mm\";\r\n        var startdate = moment(new Date()).subtract(timediff);\r\n\r\n        var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n\r\n        if (this.state.selectedWatchlist == \"selectall\") {\r\n            watchList = localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList'));\r\n        }\r\n        console.log(\"watchList\", this.state.selectedWatchlist, watchList);\r\n\r\n        this.setState({ totalStockToWatch: watchList.length })\r\n\r\n\r\n        var foundData = [];\r\n\r\n        if (watchList && watchList.length) {\r\n            for (let index = 0; index < watchList.length; index++) {\r\n                const element = watchList[index];\r\n                var data = {\r\n                    \"exchange\": \"NSE\",\r\n                    \"symboltoken\": element.token,\r\n                    \"interval\": \"ONE_MINUTE\", //ONE_DAY FIVE_MINUTE    FIFTEEN_MINUTE\r\n                    \"fromdate\": moment(startdate).format(format1),\r\n                    \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n                }\r\n\r\n                var updateMsg = index + 1 + \". \" + element.symbol;\r\n                this.setState({ findlast5minMovementUpdate: updateMsg });\r\n\r\n                window.document.title = \"FM: \" + updateMsg;\r\n\r\n                AdminService.getHistoryData(data).then(res => {\r\n                    let histdata = resolveResponse(res, 'noPop');\r\n                    //console.log(\"candle history\", histdata); \r\n                    if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                        var percentChangeList = []; var foundCount = 0;\r\n                        histdata.data.forEach(element => {\r\n                            var changePer = (element[4] - element[1]) * 100 / element[1];\r\n\r\n                            if (changePer >= 0.3) {\r\n                                foundCount = foundCount + 1;\r\n                                percentChangeList.push(\"<span style='color:green'>\" + changePer.toFixed(2) + \"% At \" + new Date(element[0]).toLocaleTimeString().substr(0, 5) + \"</span>\")\r\n                            }\r\n                            if (changePer <= -0.3) {\r\n                                foundCount = foundCount + 1;\r\n                                percentChangeList.push(\"<span style='color:red'>\" + changePer.toFixed(2) + \"% At \" + new Date(element[0]).toLocaleTimeString().substr(0, 5) + \"</span>\")\r\n                            }\r\n\r\n                        });\r\n\r\n\r\n                        var ttophistCandle = [];\r\n                        histdata.data.forEach(element => {\r\n                            ttophistCandle.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                        });\r\n\r\n\r\n                        if (percentChangeList.length) {\r\n\r\n                            var data = {\r\n                                \"exchange\": \"NSE\",\r\n                                \"tradingsymbol\": watchList[index].symbol,\r\n                                \"symboltoken\": watchList[index].token,\r\n                            }\r\n                            AdminService.getLTP(data).then(res => {\r\n                                let data = resolveResponse(res, 'noPop');\r\n                                var LtpData = data && data.data;\r\n                                //console.log(LtpData);\r\n                                if (LtpData && LtpData.ltp) {\r\n\r\n                                    var perChange = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;\r\n                                    foundData.push({\r\n                                        symbol: watchList[index].symbol,\r\n                                        ltp: LtpData.ltp,\r\n                                        perChange: perChange,\r\n                                        percentChangeList: percentChangeList.join(\" | \"),\r\n                                        candleChartData: ttophistCandle,\r\n                                    })\r\n                                    console.log(\"foundData\", foundData);\r\n                                    this.setState({ findlast5minMovement: foundData })\r\n\r\n                                }\r\n\r\n                            })\r\n\r\n\r\n                        }\r\n\r\n\r\n                    } else {\r\n                        console.log(\" candle data emply\");\r\n                    }\r\n                })\r\n                await new Promise(r => setTimeout(r, 333));\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    callbackAfterOrderDone = (order) => {\r\n        // setValues({ ...values, ['buyFlag']: order.status });\r\n        // setValues({ ...values, ['sellFlag']:  order.status  });\r\n        //  this.setState({ [spineerId]: order.status}); \r\n\r\n\r\n        console.log(\"order executed\", order);\r\n\r\n    }\r\n\r\n\r\n\r\n    handleClick = (row, type, spinnerIndex) => {\r\n\r\n\r\n        console.log(row);\r\n        if (row.token && row.symbol) {\r\n            if (type == 'BUY') {\r\n                this.setState({ [spinnerIndex]: true });\r\n                var symbolInfo = {\r\n                    token: row.token,\r\n                    symbol: row.symbol,\r\n                    qtyToTake: this.state.qtyToTake,\r\n                    producttype: 'DELIVERY'\r\n                }\r\n                console.log(symbolInfo);\r\n                CommonOrderMethod.historyWiseOrderPlace(symbolInfo, 'BUY', \"no\", this.callbackAfterOrderDone);\r\n                this.setState({ [spinnerIndex]: false });\r\n\r\n            }\r\n\r\n            if (type == 'SELL') {\r\n                this.setState({ [spinnerIndex]: true });\r\n                var symbolInfo = {\r\n                    token: row.token,\r\n                    symbol: row.symbol,\r\n                    qtyToTake: this.state.qtyToTake,\r\n                    producttype: 'DELIVERY'\r\n                }\r\n                console.log(symbolInfo);\r\n                CommonOrderMethod.historyWiseOrderPlace(symbolInfo, 'SELL', \"no\", this.callbackAfterOrderDone);\r\n                this.setState({ [spinnerIndex]: false });\r\n            }\r\n        } else {\r\n            Notify.showError(\" Symbol Not found!!!\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        //var foundPatternList = localStorage.getItem('foundPatternList') && JSON.parse(localStorage.getItem('foundPatternList')).reverse(); \r\n\r\n        return (\r\n            <React.Fragment>\r\n                <PostLoginNavBar />\r\n                <br />\r\n                <ChartDialog /> <ChartMultiple />\r\n\r\n                <Grid justify=\"space-between\"\r\n                    container spacing={1}>\r\n\r\n                    <Grid item xs={12} sm={4} >\r\n                        <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n                            &nbsp;BB Blast ({this.state.findlast5minMovement && this.state.findlast5minMovement.length})\r\n                            <span id=\"stockTesting\" style={{ fontSize: \"18px\", color: 'gray' }}> {this.state.findlast5minMovementUpdate} </span>\r\n                        </Typography>\r\n\r\n                    </Grid>\r\n\r\n\r\n                    <Grid item xs={12} sm={2} >\r\n                        <FormControl style={styles.selectStyle} >\r\n                            <InputLabel htmlFor=\"gender\">Select Watchlist</InputLabel>\r\n                            <Select value={this.state.selectedWatchlist} name=\"selectedWatchlist\" onChange={this.onChangeWatchlist}>\r\n                                <MenuItem value={\"selectall\"}>{\"Select All\"}</MenuItem>\r\n                                {this.state.totalWatchlist && this.state.totalWatchlist.map(element => (\r\n                                    <MenuItem value={element}>{element}</MenuItem>\r\n                                ))\r\n                                }\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={1} >\r\n                        <FormControl style={styles.selectStyle} >\r\n                            <InputLabel htmlFor=\"gender\">Select Time</InputLabel>\r\n                            <Select value={this.state.timeFrame} name=\"timeFrame\" onChange={this.onChangeWatchlist}>\r\n                                <MenuItem value={'ONE_MINUTE'}>{'1 Min'}</MenuItem>\r\n                                <MenuItem value={'FIVE_MINUTE'}>{'5 Min'}</MenuItem>\r\n                                <MenuItem value={'TEN_MINUTE'}>{'10 Min'}</MenuItem>\r\n                                <MenuItem value={'FIFTEEN_MINUTE'}>{'15 Min'}</MenuItem>\r\n                                <MenuItem value={'THIRTY_MINUTE'}>{'30 Min'}</MenuItem>\r\n                                <MenuItem value={'ONE_HOUR'}>{'1 Hour'}</MenuItem>\r\n                                <MenuItem value={'ONE_DAY'}>{'1 Day'}</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={1} >\r\n                        <FormControl style={styles.selectStyle} >\r\n                            <InputLabel htmlFor=\"gender\">Select Time</InputLabel>\r\n                            <Select value={this.state.BBBlastType} name=\"BBBlastType\" onChange={this.onChangeWatchlist}>\r\n                                <MenuItem value={'BBBlastOnly'}>{'BB Blast'}</MenuItem>\r\n                                <MenuItem value={'BBBlastDaily'}>{'BB Blast Daily'}</MenuItem>\r\n                                <MenuItem value={'BBStrongBreakout'}>{'BB Strong Breakout'}</MenuItem>\r\n                                <MenuItem value={'findRange'}>{'Find Range'}</MenuItem>\r\n\r\n\r\n\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={4} >\r\n                        <Button variant=\"contained\" style={{ marginRight: '20px' }} onClick={() => this.find10MinBBBlast()}>Start</Button>\r\n                        <Button variant=\"contained\" style={{ marginRight: '20px' }} onClick={() => this.stopSearching()}>Stop</Button>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n\r\n                {/* <Table  size=\"small\"   aria-label=\"sticky table\" >\r\n                    <TableHead  style={{whiteSpace: \"nowrap\", }} variant=\"head\">\r\n                        <TableRow key=\"1\"  variant=\"head\" style={{fontWeight: 'bold'}}>\r\n                            <TableCell className=\"TableHeadFormat\" align=\"left\">Symbol</TableCell>        \r\n                            <TableCell className=\"TableHeadFormat\"  align=\"left\">Time/PerChnage</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody style={{width:\"\",whiteSpace: \"nowrap\"}}>\r\n                        {this.state.findlast5minMovement ? this.state.findlast5minMovement.map(row => (\r\n                            <TableRow hover key={row.symbol}>\r\n                                <TableCell align=\"left\"> <Button  style={{ color: row.perChange > 0 ? \"green\" : \"red\" }} variant=\"contained\"  onClick={() => this.showCandleChart(row.candleChartData, row.symbol, row.ltp, row.perChange )}>{row.symbol} {row.ltp} ({row.perChange.toFixed(2)}) <EqualizerIcon /> </Button></TableCell>\r\n                                <TableCell align=\"left\">{row.percentChangeList}\r\n                            </TableCell>\r\n                            </TableRow>\r\n                        )):''}\r\n                    </TableBody>\r\n                </Table> */}\r\n                <Grid container spacing={2} >\r\n\r\n\r\n                    {this.state.findlast5minMovement ? this.state.findlast5minMovement.map((row, i) => (\r\n\r\n                        <Grid item xs={12} sm={3}>\r\n                            <Paper style={{ overflow: \"auto\", padding: '10px' }} >\r\n                                <Typography style={{ color: row.perChange > 0 ? \"green\" : \"red\" }}> {row.symbol} {row.ltp} <b>({row.perChange.toFixed(2)}%) </b></Typography>\r\n\r\n                                {/* <LightChart candleData={row.candleChartData.length} />  */}\r\n\r\n\r\n                                {/* {row.lightcandleChartData.length > 0 ?  <div id=\"showchart\"> \r\n                                    <LightChartCom ChartData={{lightcandleChartData: row.lightcandleChartData.slice(Math.max(row.candleChartData.length - 10, 1)), volumeData : this.state.volumeData}}/>\r\n                                </div>\r\n                                : \"\"} */}\r\n\r\n                                {row.candleChartData.length > 0 ? <ReactApexChart\r\n                                    options={{\r\n                                        chart: {\r\n                                            type: 'candlestick',\r\n                                            height: 250\r\n                                        },\r\n                                        title: {\r\n                                            text: \"\",\r\n                                            align: 'left'\r\n                                        },\r\n                                        xaxis: {\r\n                                            type: 'datetime',\r\n                                        },\r\n                                        yaxis: {\r\n                                            tooltip: {\r\n                                                enabled: true\r\n                                            }\r\n                                        }\r\n                                    }}\r\n                                    series={[{\r\n                                        data: row.candleChartData.slice(Math.max(row.candleChartData.length - 10, 1))\r\n                                    },\r\n                                        // {\r\n                                        //     name: 'line',\r\n                                        //     type: 'line',\r\n                                        //     data: [\r\n                                        //         row.lightcandleChartData\r\n                                        //     ]\r\n                                        //   }\r\n\r\n                                    ]}\r\n\r\n                                    type=\"candlestick\"\r\n                                    width={350}\r\n                                    height={250}\r\n\r\n\r\n\r\n                                /> : \"\"}\r\n\r\n                                {/* <div> {Parser(row.percentChangeList)}</div> */}\r\n\r\n                                <Grid direction=\"row\" style={{ padding: '5px' }} container className=\"flexGrow\" justify=\"space-between\" >\r\n\r\n\r\n\r\n                                    {row.DSMALastValue ? <Grid item xs={12} sm={12} style={{ color: row.ltp > row.DSMALastValue ? \"green\" : \"red\", fontWeight: \"bold\" }}>\r\n                                        Daily SMA: {row.DSMALastValue} {row.ltp > row.DSMALastValue ? \"BUY\" : \"SELL\"}\r\n                                    </Grid> : \"\"}\r\n                                    <Grid item xs={12} sm={12} style={{ color: row.ltp > row.VWAP ? \"green\" : \"red\", fontWeight: \"bold\" }}>\r\n                                        VWAP:  {row.VWAP}\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={12}>\r\n\r\n                                        RSI: {row.RSI.map((item, j) => (\r\n                                            item >= 60 ? <span style={{ color: 'green', fontWeight: \"bold\" }}> {item} &nbsp;</span> : <span style={{ color: item <= 40 ? 'red' : \"\", fontWeight: \"bold\" }}> {item} &nbsp;</span>\r\n                                        ))}\r\n\r\n\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={12} >\r\n                                        BB\r\n                                        &nbsp; <span style={{ color: row.ltp >= row.BB.upper ? \"green\" : \"\", fontWeight: \"bold\" }}>Upper: {row.BB.upper}</span>\r\n                                        &nbsp; Middle: {row.BB.middle}\r\n                                        &nbsp; <span style={{ color: row.ltp <= row.BB.lower ? \"red\" : \"\", fontWeight: \"bold\" }}> Lower: {row.BB.lower}</span>\r\n                                    </Grid>\r\n\r\n                                </Grid>\r\n\r\n                                <Grid direction=\"row\" style={{ padding: '5px' }} container className=\"flexGrow\" justify=\"space-between\" >\r\n                                    <Grid item>\r\n                                        {!this.state['buyButtonClicked' + row.symbol + i] ? <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={() => this.handleClick(row, 'BUY', 'buyButtonClicked' + row.symbol + i)}>BUY</Button> : <Spinner />}\r\n                                    </Grid>\r\n\r\n                                    <Grid item>\r\n                                        <TextField label=\"Qty\" type=\"number\" name=\"qtyToTake\" value={this.state.qtyToTake} onChange={this.onChangeQty} />\r\n                                    </Grid>\r\n\r\n                                    <Grid item >\r\n                                        {/* onClick={() => this.historyWiseOrderPlace(row, 'SELL', \"\", 'sellButtonClicked' + row.symbol + i)} */}\r\n                                        {!this.state['sellButtonClicked' + row.symbol + i] ? <Button size=\"small\" variant=\"contained\" color=\"Secondary\" onClick={() => this.handleClick(row, 'SELL', 'sellButtonClicked' + row.symbol + i)}>SELL</Button> : <Spinner />}\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n\r\n                            </Paper>\r\n\r\n                        </Grid>\r\n\r\n                    )) : ''}\r\n                </Grid>\r\n\r\n            </React.Fragment>\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nconst styles = {\r\n    formContainer: {\r\n        display: 'flex',\r\n        flexFlow: 'row wrap'\r\n    },\r\n\r\n    textStyle: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n\r\n    },\r\n    imgStyle: {\r\n        display: 'flex'\r\n    },\r\n\r\n    selectStyle: {\r\n        minWidth: '100%',\r\n        marginBottom: '10px'\r\n    },\r\n    MuiTextField: {\r\n        overflowY: 'scroll',\r\n        fontSize: \"12px\",\r\n        maxHeight: \"50px\",\r\n\r\n    },\r\n    footerButton: {\r\n        position: 'fixed',\r\n        left: 0,\r\n        bottom: '20px',\r\n        width: '100%',\r\n        textAlign: 'right'\r\n    }\r\n\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport { resolveResponse } from \"../../utils/ResponseHandler\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport * as moment from 'moment';\r\nimport OrderBook from './Orderbook';\r\nimport TradeConfig from './TradeConfig.json';\r\nimport ChartDialog from './ChartDialog';\r\nimport ChartMultiple from './ChartMultiple';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\nimport Notify from \"../../utils/Notify\";\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport Parser from 'html-react-parser';\r\nimport Spinner from \"react-spinner-material\";\r\n\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { SMA, RSI, VWAP, BollingerBands, MACD } from 'technicalindicators';\r\nimport vwap from 'vwap';\r\nimport CommonOrderMethod from \"../../utils/CommonMethods\";\r\nimport LightChart from \"./LightChart\";\r\nimport LightChartCom from \"./LightChartCom\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n    super(props);\r\n        this.state = {\r\n            staticData: localStorage.getItem('staticData') && JSON.parse(localStorage.getItem('staticData')) || {},\r\n            totalWatchlist: localStorage.getItem('totalWatchlist') && JSON.parse(localStorage.getItem('totalWatchlist')) || [],\r\n            selectedWatchlist: \"NIFTY 50\",\r\n            totalStockToWatch: 0,\r\n            timeFrame: \"FIFTEEN_MINUTE\",\r\n            chartStaticData: [],\r\n            BBBlastType: \"selectAll\",\r\n            qtyToTake: '',\r\n            fastMovementList: localStorage.getItem('fastMovementList') && JSON.parse(localStorage.getItem('fastMovementList')) || [],\r\n\r\n\r\n        };\r\n        this.findlast5minMovement = this.findlast5minMovement.bind(this);\r\n        this.startSearching = this.startSearching.bind(this);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        window.document.title = \"FM2\";\r\n\r\n        var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n        this.setState({ totalStockToWatch: watchList.length });\r\n\r\n        // this.findlast5minMovement(); //one time only\r\n        //   this.startSearching();\r\n\r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var endTime = moment('3:30pm', 'h:mma');\r\n        const friday = 5; // for friday\r\n        var currentTime = moment(new Date(), \"h:mma\");\r\n        const today = moment().isoWeekday();\r\n\r\n        var tostartInteral = setInterval(() => {\r\n            var time = new Date();\r\n            console.log(\"set interval 1sec min/10==0 \", time.toLocaleTimeString());\r\n            if (time.getMinutes() % 2 === 0) {\r\n                console.log(\"search method call in with setTimeout 70sec\", time.toLocaleTimeString());\r\n\r\n                setTimeout(() => {\r\n                    this.find10MinBBBlast();\r\n                }, 70000);\r\n                this.setState({\r\n                    stop10bbSearch:\r\n                        setInterval(() => {\r\n                            console.log(\"search method call in with setInterval in 10min\", time.toLocaleTimeString());\r\n                            if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n                                this.find10MinBBBlast();\r\n                            }\r\n                        }, 60000 * 2 + 70000)\r\n                });\r\n\r\n                clearInterval(tostartInteral);\r\n            }\r\n        }, 1000);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    stopSearching = () => {\r\n        console.log(\"stop the search\")\r\n        clearInterval(this.state.findlast5minMovementInterval);\r\n        clearInterval(this.state.stop10bbSearch);\r\n\r\n    }\r\n\r\n\r\n    showCandleChart = (candleData, symbol, ltp, perChange) => {\r\n        localStorage.setItem('candleChartData', JSON.stringify(candleData))\r\n        localStorage.setItem('cadleChartSymbol', symbol)\r\n        localStorage.setItem('candlePriceShow', ltp);\r\n        localStorage.setItem('candleChangeShow', perChange.toFixed(2));\r\n        document.getElementById('showCandleChart').click();\r\n    }\r\n\r\n    speckIt = (text) => {\r\n        var msg = new SpeechSynthesisUtterance();\r\n        msg.text = text.toString();\r\n        window.speechSynthesis.speak(msg);\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.findlast5minMovementInterval);\r\n        clearInterval(this.state.stop10bbSearch);\r\n        // clearInterval(this.state.scaninterval);\r\n        //  clearInterval(this.state.bankNiftyInterval); \r\n    }\r\n\r\n    onChangeWatchlist = (e) => {\r\n        clearInterval(this.state.findlast5minMovementInterval);\r\n        this.setState({ [e.target.name]: e.target.value }, function () {\r\n            // this.findlast5minMovement(); //one time only\r\n            //this.startSearching();\r\n            this.find10MinBBBlast();\r\n\r\n        });\r\n    }\r\n    onChangeQty = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    startSearching = () => {\r\n\r\n        console.log(\"Starting the search\");\r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var endTime = moment('3:30pm', 'h:mma');\r\n        const friday = 5; // for friday\r\n        var currentTime = moment(new Date(), \"h:mma\");\r\n        const today = moment().isoWeekday();\r\n        //market hours\r\n\r\n        if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n            var intervaltime = 60000;\r\n            if (this.state.totalStockToWatch > 180) {\r\n                intervaltime = this.state.totalStockToWatch * 333;\r\n            }\r\n            this.setState({ findlast5minMovementInterval: setInterval(() => { this.findlast5minMovement(); }, intervaltime) });\r\n        }\r\n    }\r\n\r\n    getTimeFrameValue = (timeFrame) => {\r\n\r\n        //18 HOURS FOR BACK 1 DATE BACK MARKET OFF\r\n\r\n\r\n        switch (timeFrame) {\r\n            case 'ONE_MINUTE':\r\n                if (new Date().toLocaleTimeString() < \"10:05:00\")\r\n                    return \"18:21:00\";\r\n                else\r\n                    return \"00:21:00\";\r\n                break;\r\n            case 'FIVE_MINUTE':\r\n                if (new Date().toLocaleTimeString() < \"11:00:00\")\r\n                    return \"19:41:00\";\r\n                else\r\n                    return \"01:41:00\";\r\n                break;\r\n            case 'TEN_MINUTE':\r\n                if (new Date().toLocaleTimeString() < \"12:35:00\")\r\n                    return \"21:21:00\";\r\n                else\r\n                    return \"03:21:00\";\r\n                break;\r\n            case 'FIFTEEN_MINUTE':\r\n                if (new Date().toLocaleTimeString() < \"14:15:00\")\r\n                    return \"23:01:00\";\r\n                else\r\n                    return \"05:01:00\";\r\n                break;\r\n            case 'THIRTY_MINUTE':\r\n                return \"84:01:00\";\r\n                break;\r\n            case 'ONE_HOUR':\r\n                return \"168:01:00\";\r\n                break;\r\n            case 'ONE_DAY':\r\n                return \"744:01:00\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    updateToLocalStorage = (row) => {\r\n\r\n        let foundAt = new Date(row.foundAt).toLocaleString();\r\n        var isfound = this.state.fastMovementList.filter(element => (element.token == row.token && element.foundAt == foundAt));\r\n        console.log(\"isfound\", isfound);\r\n        if (!isfound.length) {\r\n            var updateData = {\r\n                token: row.token,\r\n                foundAt: foundAt,\r\n                ltp: row.ltp,\r\n                symbol: row.symbol,\r\n                nc: row.perChange.toFixed(2),\r\n                orderType: row.orderType\r\n            }\r\n            this.state.fastMovementList.push(updateData);\r\n            //this.setState({ fastMovementList: [..., updateData] });\r\n            localStorage.setItem(\"fastMovementList\", JSON.stringify(this.state.fastMovementList));\r\n            return true;\r\n\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    find10MinBBBlast = async () => {\r\n\r\n        this.setState({ findlast5minMovementUpdate: '', findlast5minMovement: [] });\r\n        var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n        if (this.state.selectedWatchlist == \"selectall\") {\r\n            watchList = localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList'));\r\n        }\r\n\r\n        this.setState({ totalStockToWatch: watchList.length })\r\n\r\n\r\n        var foundData = [];\r\n\r\n        for (let index = 0; index < watchList.length; index++) {\r\n\r\n            this.setState({ findlast5minMovementUpdate: index + 1 + \". \" + watchList[index].symbol + \" At \" + new Date().toLocaleTimeString() + \" Scaning\" });\r\n\r\n            const format1 = \"YYYY-MM-DD HH:mm\";\r\n            var beginningTime = moment('9:15am', 'h:mma').format(format1);\r\n\r\n            let timeDuration = this.getTimeFrameValue(this.state.timeFrame);\r\n            var time = moment.duration(\"100:00:00\");  //22:00:00\" for last day  2hours  timeDuration\r\n            var startDate = moment(new Date()).subtract(time);\r\n\r\n            var data = {\r\n                \"exchange\": watchList[index].exch_seg,\r\n                \"symboltoken\": watchList[index].token,\r\n                \"interval\": this.state.timeFrame, //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                \"fromdate\": moment(startDate).format(format1),\r\n                \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n            }\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n                // console.log(\"candle history\", histdata);\r\n\r\n                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                    var candleData = histdata.data;\r\n                    var candleChartData = [], lightcandleChartData = [], vwapdata = [], closeingData = [], highData = [], lowData = [], openData = [], valumeData = [], bbdata = [];\r\n                    candleData.forEach((element, loopindex) => {\r\n                        candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n\r\n                        var time = { year: new Date(element[0]).getFullYear(), month: new Date(element[0]).getMonth(), day: new Date(element[0]).getDate() }\r\n\r\n                        //    { time: '2018-10-24', open: 178.58, high: 182.37, low: 176.31, close: 176.97 },\r\n                        lightcandleChartData.push({\r\n                            x: new Date(element[0]).getTime(),\r\n                            y: (element[2] + element[3] + element[4]) / 3\r\n                        });\r\n\r\n                        vwapdata.push([element[5], (element[2] + element[3] + element[4]) / 3]);\r\n                        closeingData.push(element[4]);\r\n                        highData.push(element[2]);\r\n                        lowData.push(element[3]);\r\n                        openData.push(element[3]);\r\n                        valumeData.push(element[5]);\r\n                        bbdata.push((element[2] + element[3] + element[4]) / 3);\r\n\r\n                    });\r\n\r\n                    // { time: '2018-10-19', value: 19103293.00, color: 'rgba(0, 150, 136, 0.8)' },\r\n\r\n                    var sma = SMA.calculate({ period: 20, values: closeingData });\r\n                    //   console.log(watchList[index].symbol, \"SMA\", sma);\r\n\r\n\r\n                    var inputRSI = { values: closeingData, period: 14 };\r\n                    var lastRsiValue = RSI.calculate(inputRSI);\r\n\r\n                    // console.log(watchList[index].symbol, \"Rsi\", inputRSI, lastRsiValue);\r\n                    // console.log(watchList[index].symbol, \"vwap\", vwapdata, vwap(vwapdata));\r\n\r\n\r\n                    var inputVWAP = {\r\n                        open: openData,\r\n                        high: highData,\r\n                        low: lowData,\r\n                        close: closeingData,\r\n                        volume: valumeData\r\n                    };\r\n\r\n                    var input = {\r\n                        period: 20,\r\n                        values: bbdata,\r\n                        stdDev: 2\r\n\r\n                    }\r\n\r\n                    var bb = BollingerBands.calculate(input);\r\n                    //   console.log(watchList[index].symbol, \"Bolinger band\", input, bb);\r\n\r\n\r\n                    var bbvlastvalue = bb[bb.length - 1];\r\n                    if (bbvlastvalue) {\r\n                        bbvlastvalue.upper = bbvlastvalue.upper.toFixed(2);\r\n                        bbvlastvalue.middle = bbvlastvalue.middle.toFixed(2);\r\n                        bbvlastvalue.lower = bbvlastvalue.lower.toFixed(2);\r\n\r\n                    }\r\n\r\n                    var macdInput = {\r\n                        values: closeingData,\r\n                        fastPeriod: 12,\r\n                        slowPeriod: 26,\r\n                        signalPeriod: 9,\r\n                        SimpleMAOscillator: false,\r\n                        SimpleMASignal: false\r\n                    }\r\n\r\n                    let macd = MACD.calculate(macdInput);\r\n                    let macdLastValue = macd[macd.length - 1];\r\n\r\n\r\n                    // MACD: -3.5573380320065553\r\n                    // histogram: -0.7420963576240767\r\n                    // signal: -2.8152416743824786\r\n\r\n                    if (macdLastValue && macdLastValue.MACD >= macdLastValue.signal) {\r\n                        console.log(\"macd\", watchList[index].symbol, macdLastValue);\r\n                    }\r\n\r\n                    var dataltp = {\r\n                        \"exchange\": \"NSE\",\r\n                        \"tradingsymbol\": watchList[index].symbol,\r\n                        \"symboltoken\": watchList[index].token,\r\n                    }\r\n\r\n                    AdminService.getLTP(dataltp).then(res => {\r\n                        let data = resolveResponse(res, 'noPop');\r\n                        var LtpData = data && data.data;\r\n                        //console.log(LtpData);\r\n                        if (LtpData && LtpData.ltp) {\r\n\r\n\r\n                            lastRsiValue = lastRsiValue.slice((lastRsiValue.length - 6), lastRsiValue.length);\r\n\r\n                            // var volumeUpside = valumeData[2], volUpCount =0;                          \r\n                            // valumeData.forEach((element, i) => {\r\n                            //     if (i > 2 && volumeUpside < element) {\r\n                            //         volumeUpside = element;\r\n                            //         volUpCount += 1;\r\n                            //     }\r\n                            // });\r\n\r\n                            this.setState({ findlast5minMovementUpdate: index + 1 + \". \" + watchList[index].symbol + \" At \" + new Date().toLocaleTimeString() + \" Searching\" });\r\n\r\n                            let isFound = false;\r\n\r\n                            if (this.state.BBBlastType == 'selectAll'  || this.state.BBBlastType == 'macdCrossOver') {\r\n\r\n                                if (macdLastValue && macdLastValue.MACD >= macdLastValue.signal) {\r\n                                    var perChange = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;\r\n                                    let data = {\r\n                                        symbol: watchList[index].symbol,\r\n                                        token: watchList[index].token,\r\n                                        ltp: LtpData.ltp,\r\n                                        perChange: perChange,\r\n                                        RSIValue: lastRsiValue[lastRsiValue.length - 1],\r\n                                        RSI: lastRsiValue,\r\n                                        VWAP: vwap(vwapdata),\r\n                                        BB: bbvlastvalue,\r\n                                        candleChartData: candleChartData,\r\n                                        lightcandleChartData: lightcandleChartData,\r\n                                        foundAt: candleData && candleData[candleData.length - 1][0],\r\n                                        orderType: \"BUY\",\r\n                                        name: watchList[index].name,\r\n                                        macdData : macd.slice(Math.max(macd.length - 6, 1)), \r\n                                        patternName: \"MACD Cossed Up\"\r\n                                    }\r\n\r\n                                    if (this.updateToLocalStorage(data)) {\r\n                                        foundData.push(data)\r\n                                        this.setState({ findlast5minMovement: foundData });\r\n                                        this.speckIt(watchList[index].symbol + ' macd  buy');\r\n                                        window.document.title = \"macd: Buy \" + watchList[index].symbol;\r\n                                        this.setState({ findlast5minMovementUpdate: index + 1 + \". \" + watchList[index].symbol + \" At \" + new Date().toLocaleTimeString() + \" BUY Eligible\" });\r\n                                    }\r\n\r\n                                } else if (macdLastValue && macdLastValue.MACD <= macdLastValue.signal) {\r\n                                    var perChange = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;\r\n                                    let data = {\r\n                                        symbol: watchList[index].symbol,\r\n                                        token: watchList[index].token,\r\n                                        ltp: LtpData.ltp,\r\n                                        perChange: perChange,\r\n                                        RSIValue: lastRsiValue[lastRsiValue.length - 1],\r\n                                        RSI: lastRsiValue,\r\n                                        VWAP: vwap(vwapdata),\r\n                                        BB: bbvlastvalue,\r\n                                        candleChartData: candleChartData,\r\n                                        lightcandleChartData: lightcandleChartData,\r\n                                        foundAt: candleData && candleData[candleData.length - 1][0],\r\n                                        orderType: \"SELL\",\r\n                                        name: watchList[index].name,\r\n                                        macdData : macd.slice(Math.max(macd.length - 6, 1)),\r\n                                        patternName: \"MACD Cossed Down\"\r\n\r\n                                    }\r\n                                    if (this.updateToLocalStorage(data)) {\r\n                                        foundData.push(data)\r\n                                        this.setState({ findlast5minMovement: foundData });\r\n                                        this.speckIt(watchList[index].symbol + ' macd sell');\r\n                                        window.document.title = \"macd: Sell \" + watchList[index].symbol;\r\n                                        this.setState({ findlast5minMovementUpdate: index + 1 + \". \" + watchList[index].symbol + \" At \" + new Date().toLocaleTimeString() + \" SELL Eligible\" });\r\n                                    }\r\n\r\n                                } else {\r\n                                    this.setState({ findlast5minMovementUpdate: index + 1 + \". \" + watchList[index].symbol + \" At \" + new Date().toLocaleTimeString() + \" Not Eligible\" });\r\n                                }\r\n                            }\r\n\r\n                            if (this.state.BBBlastType == 'selectAll'  || this.state.BBBlastType == 'BBStrongBreakout') {\r\n                                if (bbvlastvalue && LtpData.ltp >= bbvlastvalue.upper && candleData[candleData.length - 1][2] == candleData[candleData.length - 1][4]) {\r\n                                    var perChange = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;\r\n                                    let data = {\r\n                                        symbol: watchList[index].symbol,\r\n                                        token: watchList[index].token,\r\n                                        ltp: LtpData.ltp,\r\n                                        perChange: perChange,\r\n                                        RSIValue: lastRsiValue[lastRsiValue.length - 1],\r\n                                        RSI: lastRsiValue,\r\n                                        VWAP: vwap(vwapdata),\r\n                                        BB: bbvlastvalue,\r\n                                        candleChartData: candleChartData,\r\n                                        lightcandleChartData: lightcandleChartData,\r\n                                        foundAt: candleData && candleData[candleData.length - 1][0],\r\n                                        orderType: \"BUY\",\r\n                                        name: watchList[index].name,\r\n                                        patternName: \"BB Strong Buy\"\r\n\r\n                                    }\r\n\r\n                                    if (this.updateToLocalStorage(data)) {\r\n                                        foundData.push(data)\r\n                                        this.setState({ findlast5minMovement: foundData });\r\n                                        this.speckIt(watchList[index].symbol + ' BB  buy');\r\n                                        window.document.title = \"FM2: Buy \" + watchList[index].symbol;\r\n                                        this.setState({ findlast5minMovementUpdate: index + 1 + \". \" + watchList[index].symbol + \" At \" + new Date().toLocaleTimeString() + \" BUY Eligible\" });\r\n                                    }\r\n\r\n                                } else if (bbvlastvalue && LtpData.ltp <= bbvlastvalue.lower && candleData[candleData.length - 1][3] == candleData[candleData.length - 1][4]) {\r\n                                    var perChange = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;\r\n                                    let data = {\r\n                                        symbol: watchList[index].symbol,\r\n                                        token: watchList[index].token,\r\n                                        ltp: LtpData.ltp,\r\n                                        perChange: perChange,\r\n                                        RSIValue: lastRsiValue[lastRsiValue.length - 1],\r\n                                        RSI: lastRsiValue,\r\n                                        VWAP: vwap(vwapdata),\r\n                                        BB: bbvlastvalue,\r\n                                        candleChartData: candleChartData,\r\n                                        lightcandleChartData: lightcandleChartData,\r\n                                        foundAt: candleData && candleData[candleData.length - 1][0],\r\n                                        orderType: \"SELL\",\r\n                                        name: watchList[index].name,\r\n                                        patternName: \"BB Strong Sell\"\r\n\r\n                                    }\r\n                                    if (this.updateToLocalStorage(data)) {\r\n                                        foundData.push(data)\r\n                                        this.setState({ findlast5minMovement: foundData });\r\n                                        this.speckIt(watchList[index].symbol + ' BB sell');\r\n                                        window.document.title = \"FM2: Sell \" + watchList[index].symbol;\r\n                                        this.setState({ findlast5minMovementUpdate: index + 1 + \". \" + watchList[index].symbol + \" At \" + new Date().toLocaleTimeString() + \" SELL Eligible\" });\r\n                                    }\r\n\r\n                                } else {\r\n                                    this.setState({ findlast5minMovementUpdate: index + 1 + \". \" + watchList[index].symbol + \" At \" + new Date().toLocaleTimeString() + \" Not Eligible\" });\r\n                                }\r\n                            }\r\n\r\n                        }\r\n\r\n                    })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(watchList[index].symbol, \"  emply candle found\");\r\n                }\r\n            })\r\n\r\n            await new Promise(r => setTimeout(r, 600));\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    findlast5minMovement = async () => {\r\n\r\n        this.setState({ findlast5minMovementUpdate: '' });\r\n\r\n        var timediff = moment.duration(\"00:05:00\");\r\n        const format1 = \"YYYY-MM-DD HH:mm\";\r\n        var startdate = moment(new Date()).subtract(timediff);\r\n\r\n        var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n\r\n        if (this.state.selectedWatchlist == \"selectall\") {\r\n            watchList = localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList'));\r\n        }\r\n        console.log(\"watchList\", this.state.selectedWatchlist, watchList);\r\n\r\n        this.setState({ totalStockToWatch: watchList.length })\r\n\r\n\r\n        var foundData = [];\r\n\r\n        if (watchList && watchList.length) {\r\n            for (let index = 0; index < watchList.length; index++) {\r\n                const element = watchList[index];\r\n                var data = {\r\n                    \"exchange\": \"NSE\",\r\n                    \"symboltoken\": element.token,\r\n                    \"interval\": \"ONE_MINUTE\", //ONE_DAY FIVE_MINUTE    FIFTEEN_MINUTE\r\n                    \"fromdate\": moment(startdate).format(format1),\r\n                    \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n                }\r\n\r\n                var updateMsg = index + 1 + \". \" + element.symbol;\r\n                this.setState({ findlast5minMovementUpdate: updateMsg });\r\n\r\n                window.document.title = \"FM: \" + updateMsg;\r\n\r\n                AdminService.getHistoryData(data).then(res => {\r\n                    let histdata = resolveResponse(res, 'noPop');\r\n                    //console.log(\"candle history\", histdata); \r\n                    if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                        var percentChangeList = []; var foundCount = 0;\r\n                        histdata.data.forEach(element => {\r\n                            var changePer = (element[4] - element[1]) * 100 / element[1];\r\n\r\n                            if (changePer >= 0.3) {\r\n                                foundCount = foundCount + 1;\r\n                                percentChangeList.push(\"<span style='color:green'>\" + changePer.toFixed(2) + \"% At \" + new Date(element[0]).toLocaleTimeString().substr(0, 5) + \"</span>\")\r\n                            }\r\n                            if (changePer <= -0.3) {\r\n                                foundCount = foundCount + 1;\r\n                                percentChangeList.push(\"<span style='color:red'>\" + changePer.toFixed(2) + \"% At \" + new Date(element[0]).toLocaleTimeString().substr(0, 5) + \"</span>\")\r\n                            }\r\n\r\n                        });\r\n\r\n\r\n                        var ttophistCandle = [];\r\n                        histdata.data.forEach(element => {\r\n                            ttophistCandle.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                        });\r\n\r\n\r\n                        if (percentChangeList.length) {\r\n\r\n                            var data = {\r\n                                \"exchange\": \"NSE\",\r\n                                \"tradingsymbol\": watchList[index].symbol,\r\n                                \"symboltoken\": watchList[index].token,\r\n                            }\r\n                            AdminService.getLTP(data).then(res => {\r\n                                let data = resolveResponse(res, 'noPop');\r\n                                var LtpData = data && data.data;\r\n                                //console.log(LtpData);\r\n                                if (LtpData && LtpData.ltp) {\r\n\r\n                                    var perChange = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;\r\n                                    foundData.push({\r\n                                        symbol: watchList[index].symbol,\r\n                                        ltp: LtpData.ltp,\r\n                                        perChange: perChange,\r\n                                        percentChangeList: percentChangeList.join(\" | \"),\r\n                                        candleChartData: ttophistCandle,\r\n                                    })\r\n                                    console.log(\"foundData\", foundData);\r\n                                    this.setState({ findlast5minMovement: foundData })\r\n\r\n                                }\r\n\r\n                            })\r\n\r\n\r\n                        }\r\n\r\n\r\n                    } else {\r\n                        console.log(\" candle data emply\");\r\n                    }\r\n                })\r\n                await new Promise(r => setTimeout(r, 333));\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    callbackAfterOrderDone = (order) => {\r\n        // setValues({ ...values, ['buyFlag']: order.status });\r\n        // setValues({ ...values, ['sellFlag']:  order.status  });\r\n        //  this.setState({ [spineerId]: order.status}); \r\n\r\n\r\n        console.log(\"order executed\", order);\r\n\r\n    }\r\n\r\n\r\n\r\n    handleClick = (row, type, spinnerIndex) => {\r\n\r\n\r\n        console.log(row);\r\n        if (row.token && row.symbol) {\r\n            if (type == 'BUY') {\r\n                this.setState({ [spinnerIndex]: true });\r\n                var symbolInfo = {\r\n                    token: row.token,\r\n                    symbol: row.symbol,\r\n                    qtyToTake: this.state.qtyToTake\r\n                }\r\n                console.log(symbolInfo);\r\n                CommonOrderMethod.historyWiseOrderPlace(symbolInfo, 'BUY', \"no\", this.callbackAfterOrderDone);\r\n                this.setState({ [spinnerIndex]: false });\r\n\r\n            }\r\n\r\n            if (type == 'SELL') {\r\n                this.setState({ [spinnerIndex]: true });\r\n                var symbolInfo = {\r\n                    token: row.token,\r\n                    symbol: row.symbol,\r\n                    qtyToTake: this.state.qtyToTake\r\n                }\r\n                console.log(symbolInfo);\r\n                CommonOrderMethod.historyWiseOrderPlace(symbolInfo, 'SELL', \"no\", this.callbackAfterOrderDone);\r\n                this.setState({ [spinnerIndex]: false });\r\n            }\r\n        } else {\r\n            Notify.showError(\" Symbol Not found!!!\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        //var foundPatternList = localStorage.getItem('foundPatternList') && JSON.parse(localStorage.getItem('foundPatternList')).reverse(); \r\n\r\n        return (\r\n            <React.Fragment>\r\n                <PostLoginNavBar />\r\n                <br />\r\n                <ChartDialog /> <ChartMultiple />\r\n\r\n                <Grid justify=\"space-between\"\r\n                    container spacing={1}>\r\n\r\n                    <Grid item xs={12} sm={4} >\r\n                        <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n                            &nbsp;BB Blast ({this.state.findlast5minMovement && this.state.findlast5minMovement.length})\r\n                            <span id=\"stockTesting\" style={{ fontSize: \"18px\", color: 'gray' }}> {this.state.findlast5minMovementUpdate} </span>\r\n                        </Typography>\r\n\r\n                    </Grid>\r\n\r\n\r\n                    <Grid item xs={12} sm={2} >\r\n                        <FormControl style={styles.selectStyle} >\r\n                            <InputLabel htmlFor=\"gender\">Select Watchlist</InputLabel>\r\n                            <Select value={this.state.selectedWatchlist} name=\"selectedWatchlist\" onChange={this.onChangeWatchlist}>\r\n                                <MenuItem value={\"selectall\"}>{\"Select All\"}</MenuItem>\r\n                                {this.state.totalWatchlist && this.state.totalWatchlist.map(element => (\r\n                                    <MenuItem value={element}>{element}</MenuItem>\r\n                                ))\r\n                                }\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={1} >\r\n                        <FormControl style={styles.selectStyle} >\r\n                            <InputLabel htmlFor=\"gender\">Select Time</InputLabel>\r\n                            <Select value={this.state.timeFrame} name=\"timeFrame\" onChange={this.onChangeWatchlist}>\r\n                                <MenuItem value={'ONE_MINUTE'}>{'1 Min'}</MenuItem>\r\n                                <MenuItem value={'FIVE_MINUTE'}>{'5 Min'}</MenuItem>\r\n                                <MenuItem value={'TEN_MINUTE'}>{'10 Min'}</MenuItem>\r\n                                <MenuItem value={'FIFTEEN_MINUTE'}>{'15 Min'}</MenuItem>\r\n                                <MenuItem value={'THIRTY_MINUTE'}>{'30 Min'}</MenuItem>\r\n                                <MenuItem value={'ONE_HOUR'}>{'1 Hour'}</MenuItem>\r\n                                <MenuItem value={'ONE_DAY'}>{'1 Day'}</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={1} >\r\n                        <FormControl style={styles.selectStyle} >\r\n                            <InputLabel htmlFor=\"gender\">Select Time</InputLabel>\r\n                            <Select value={this.state.BBBlastType} name=\"BBBlastType\" onChange={this.onChangeWatchlist}>\r\n                                {/* <MenuItem value={'BBBlastOnly'}>{'BB Blast'}</MenuItem>\r\n                                <MenuItem value={'BBBlastDaily'}>{'BB Blast Daily'}</MenuItem> */}\r\n                                <MenuItem value={'selectAll'}>{'Select All'}</MenuItem>\r\n\r\n                                <MenuItem value={'BBStrongBreakout'}>{'BB Strong Breakout'}</MenuItem>\r\n                                <MenuItem value={'macdCrossOver'}>{'Macd Cross Over'}</MenuItem>\r\n\r\n\r\n\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={4} >\r\n                        <Button variant=\"contained\" style={{ marginRight: '20px' }} onClick={() => this.find10MinBBBlast()}>Start</Button>\r\n                        <Button variant=\"contained\" style={{ marginRight: '20px' }} onClick={() => this.stopSearching()}>Stop</Button>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n\r\n                {/* <Table  size=\"small\"   aria-label=\"sticky table\" >\r\n                    <TableHead  style={{whiteSpace: \"nowrap\", }} variant=\"head\">\r\n                        <TableRow key=\"1\"  variant=\"head\" style={{fontWeight: 'bold'}}>\r\n                            <TableCell className=\"TableHeadFormat\" align=\"left\">Symbol</TableCell>        \r\n                            <TableCell className=\"TableHeadFormat\"  align=\"left\">Time/PerChnage</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody style={{width:\"\",whiteSpace: \"nowrap\"}}>\r\n                        {this.state.findlast5minMovement ? this.state.findlast5minMovement.map(row => (\r\n                            <TableRow hover key={row.symbol}>\r\n                                <TableCell align=\"left\"> <Button  style={{ color: row.perChange > 0 ? \"green\" : \"red\" }} variant=\"contained\"  onClick={() => this.showCandleChart(row.candleChartData, row.symbol, row.ltp, row.perChange )}>{row.symbol} {row.ltp} ({row.perChange.toFixed(2)}) <EqualizerIcon /> </Button></TableCell>\r\n                                <TableCell align=\"left\">{row.percentChangeList}\r\n                            </TableCell>\r\n                            </TableRow>\r\n                        )):''}\r\n                    </TableBody>\r\n                </Table> */}\r\n                <Grid container spacing={2} >\r\n\r\n\r\n                    {this.state.findlast5minMovement ? this.state.findlast5minMovement.map((row, i) => (\r\n\r\n                        <Grid item xs={12} sm={3}>\r\n                            <Paper style={{ overflow: \"auto\", padding: '10px' }} >\r\n                                <Typography style={{ color: row.perChange > 0 ? \"green\" : \"red\" }}> {row.symbol} {row.ltp} <b>({row.perChange.toFixed(2)}%) </b> &nbsp;&nbsp; {row.patternName}</Typography>\r\n\r\n                                {/* <LightChart candleData={row.candleChartData.length} />  */}\r\n\r\n\r\n                                {/* {row.lightcandleChartData.length > 0 ?  <div id=\"showchart\"> \r\n                                    <LightChartCom ChartData={{lightcandleChartData: row.lightcandleChartData.slice(Math.max(row.candleChartData.length - 10, 1)), volumeData : this.state.volumeData}}/>\r\n                                </div>\r\n                                : \"\"} */}\r\n\r\n                                {row.candleChartData.length > 0 ? <ReactApexChart\r\n                                    options={{\r\n                                        chart: {\r\n                                            type: 'candlestick',\r\n                                            height: 250\r\n                                        },\r\n                                        title: {\r\n                                            text: \"\",\r\n                                            align: 'left'\r\n                                        },\r\n                                        xaxis: {\r\n                                            type: 'datetime',\r\n                                        },\r\n                                        yaxis: {\r\n                                            tooltip: {\r\n                                                enabled: true\r\n                                            }\r\n                                        }\r\n                                    }}\r\n                                    series={[{\r\n                                        data: row.candleChartData.slice(Math.max(row.candleChartData.length - 10, 1))\r\n                                    },\r\n                                        // {\r\n                                        //     name: 'line',\r\n                                        //     type: 'line',\r\n                                        //     data: [\r\n                                        //         row.lightcandleChartData\r\n                                        //     ]\r\n                                        //   }\r\n\r\n                                    ]}\r\n\r\n                                    type=\"candlestick\"\r\n                                    width={350}\r\n                                    height={250}\r\n\r\n\r\n\r\n                                /> : \"\"}\r\n\r\n                                {/* <div> {Parser(row.percentChangeList)}</div> */}\r\n\r\n                                <Grid direction=\"row\" style={{ padding: '5px' }} container className=\"flexGrow\" justify=\"space-between\" >\r\n\r\n\r\n\r\n                                    {row.DSMALastValue ? <Grid item xs={12} sm={12} style={{ color: row.ltp > row.DSMALastValue ? \"green\" : \"red\", fontWeight: \"bold\" }}>\r\n                                        Daily SMA: {row.DSMALastValue} {row.ltp > row.DSMALastValue ? \"BUY\" : \"SELL\"}\r\n                                    </Grid> : \"\"}\r\n                                    <Grid item xs={12} sm={12} style={{ color: row.ltp > row.VWAP ? \"green\" : \"red\", fontWeight: \"bold\" }}>\r\n                                        VWAP:  {row.VWAP}\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={12}>\r\n                                        RSI: {row.RSI.map((item, j) => (\r\n                                            item >= 60 ? <span style={{ color: 'green', fontWeight: \"bold\" }}> {item} &nbsp;</span> : <span style={{ color: item <= 40 ? 'red' : \"\", fontWeight: \"bold\" }}> {item} &nbsp;</span>\r\n                                        ))}\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={12} >\r\n                                        BB\r\n                                        &nbsp; <span style={{ color: row.ltp >= row.BB.upper ? \"green\" : \"\", fontWeight: \"bold\" }}>Upper: {row.BB.upper}</span>\r\n                                        &nbsp; Middle: {row.BB.middle}\r\n                                        &nbsp; <span style={{ color: row.ltp <= row.BB.lower ? \"red\" : \"\", fontWeight: \"bold\" }}> Lower: {row.BB.lower}</span>\r\n                                    </Grid>\r\n                                    <Grid item xs={12} sm={12}>\r\n                                        MACD: {row.macdData.map((item, j) => (\r\n                                            <span> {item.MACD && item.MACD.toFixed(2)} &nbsp;</span>\r\n                                        ))}\r\n                                        <br />\r\n                                        MACD Signal: {row.macdData.map((item, j) => (\r\n                                            <span> {item.signal && item.signal.toFixed(2)} &nbsp;</span>\r\n                                        ))}\r\n                                        <br />\r\n                                        MACD histogram: {row.macdData.map((item, j) => (\r\n                                            <span> {item.histogram && item.histogram.toFixed(2)} &nbsp;</span>\r\n                                        ))}\r\n                                    </Grid>\r\n\r\n                                </Grid>\r\n\r\n                                <Grid direction=\"row\" style={{ padding: '5px' }} container className=\"flexGrow\" justify=\"space-between\" >\r\n                                    <Grid item>\r\n                                        {!this.state['buyButtonClicked' + row.symbol + i] ? <Button size=\"small\" variant=\"contained\" color=\"primary\" onClick={() => this.handleClick(row, 'BUY', 'buyButtonClicked' + row.symbol + i)}>BUY</Button> : <Spinner />}\r\n                                    </Grid>\r\n\r\n                                    <Grid item>\r\n                                        <TextField label=\"Qty\" type=\"number\" name=\"qtyToTake\" value={this.state.qtyToTake} onChange={this.onChangeQty} />\r\n                                    </Grid>\r\n\r\n                                    <Grid item >\r\n                                        {/* onClick={() => this.historyWiseOrderPlace(row, 'SELL', \"\", 'sellButtonClicked' + row.symbol + i)} */}\r\n                                        {!this.state['sellButtonClicked' + row.symbol + i] ? <Button size=\"small\" variant=\"contained\" color=\"Secondary\" onClick={() => this.handleClick(row, 'SELL', 'sellButtonClicked' + row.symbol + i)}>SELL</Button> : <Spinner />}\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n\r\n                            </Paper>\r\n\r\n                        </Grid>\r\n\r\n                    )) : ''}\r\n                </Grid>\r\n\r\n            </React.Fragment>\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nconst styles = {\r\n    formContainer: {\r\n        display: 'flex',\r\n        flexFlow: 'row wrap'\r\n    },\r\n\r\n    textStyle: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n\r\n    },\r\n    imgStyle: {\r\n        display: 'flex'\r\n    },\r\n\r\n    selectStyle: {\r\n        minWidth: '100%',\r\n        marginBottom: '10px'\r\n    },\r\n    MuiTextField: {\r\n        overflowY: 'scroll',\r\n        fontSize: \"12px\",\r\n        maxHeight: \"50px\",\r\n\r\n    },\r\n    footerButton: {\r\n        position: 'fixed',\r\n        left: 0,\r\n        bottom: '20px',\r\n        width: '100%',\r\n        textAlign: 'right'\r\n    }\r\n\r\n};\r\n\r\nexport default Home;","import React, {useEffect} from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport { data } from 'jquery';\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport LineChart from \"./LineChart\";\r\nimport LightChartCom from \"./LightChartCom\";\r\n\r\n\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(2),\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, onClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {onClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nexport default function CustomizedDialogs(props) {\r\n\r\n  var lightChartData = props.chartData.chartStaticData; //localStorage.getItem('lightChartData') && JSON.parse(localStorage.getItem('lightChartData'));\r\n \r\n  console.log('lightChartData', lightChartData); \r\n\r\n  const [open, setOpen] = React.useState(false);\r\n \r\n  var [values, setValues] = React.useState({\r\n    data : [],\r\n    candledata: {},\r\n    timeFrame: \"FIVE_MINUTE\"\r\n})\r\n\r\n\r\n  const handleTimeFrame = (e) => {\r\n    console.log(e.target.value);\r\n    props.chartData.updateTimeFrameChart(lightChartData.token,e.target.value );\r\n\r\n    setValues({timeFrame: e.target.value}); \r\n  };\r\n \r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" id=\"showLightChart\" color=\"primary\" style={{display:\"none\"}} onClick={handleClickOpen}>\r\n        Chart \r\n      </Button>\r\n      <Dialog maxWidth={'lg'} onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n        <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n      \r\n\r\n{/* \r\n        <FormControl style={{minWidth: '10%', }} >\r\n            <Select value={values.timeFrame} name=\"timeFrame\" onChange={handleTimeFrame}>\r\n                <MenuItem value={'ONE_MINUTE'}>{'1M'}</MenuItem>\r\n                <MenuItem value={'FIVE_MINUTE'}>{'5M'}</MenuItem>\r\n                <MenuItem value={'TEN_MINUTE'}>{'10M'}</MenuItem>\r\n                <MenuItem value={'FIFTEEN_MINUTE'}>{'15M'}</MenuItem>\r\n                <MenuItem value={'THIRTY_MINUTE'}>{'30M'}</MenuItem>\r\n                <MenuItem value={'ONE_HOUR'}>{'1H'}</MenuItem>\r\n                <MenuItem value={'ONE_DAY'}>{'1D'}</MenuItem>\r\n            </Select>\r\n        </FormControl> */}\r\n\r\n        &nbsp;\r\n         \r\n        {lightChartData.name}   {lightChartData.ltp}  ({lightChartData.change}%)\r\n\r\n        \r\n        </DialogTitle>\r\n        <DialogContent dividers id=\"chart\">\r\n\r\n        \r\n        <LightChartCom chartData={{candleSeries:lightChartData.lightChartData, volumeSeries: lightChartData.volumeSeriesData}}/>\r\n       \r\n\r\n\r\n        </DialogContent>\r\n        <DialogActions>\r\n\r\n\r\n       \r\n\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport { resolveResponse } from \"../../utils/ResponseHandler\";\r\nimport Spinner from \"react-spinner-material\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport * as moment from 'moment';\r\nimport ReactApexChart from \"react-apexcharts\";\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { SMA, RSI, VWAP, BollingerBands } from 'technicalindicators';\r\nimport vwap from 'vwap';\r\nimport CommonMethods from \"../../utils/CommonMethods\";\r\nimport LightChart from \"./LightChart\";\r\nimport LightChartCom from \"./LightChartCom\";\r\nimport Parser from 'html-react-parser';\r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\n\r\nimport ChartDialog from './ChartDialog';\r\nimport LightChartModel from './LightChartModel';\r\n\r\n\r\n\r\nclass OrderBook extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            oderbookData: [],\r\n            listofzones: [],\r\n            selectedZone: [],\r\n            zone: '',\r\n            selectAllzone: 'Select All',\r\n            triggerprice: 0,\r\n            price: 0,\r\n            lotsize: 0,\r\n            firstTimeFlag: true,\r\n            staticData: localStorage.getItem('staticData') && JSON.parse(localStorage.getItem('staticData')) || {},\r\n            totalWatchlist: localStorage.getItem('totalWatchlist') && JSON.parse(localStorage.getItem('totalWatchlist')) || [],\r\n            selectedWatchlist: \"NIFTY BANK\",\r\n            totalStockToWatch: 0,\r\n            timeFrame: \"TEN_MINUTE\",\r\n            qtyToTake: '',\r\n            BBBlastType: \"BBBlastOnly\",\r\n            fastMovementList: localStorage.getItem('fastMovementList') && JSON.parse(localStorage.getItem('fastMovementList')) || [],\r\n            sortedType: \"isActivated\",\r\n            slowMotionStockList: localStorage.getItem('slowMotionStockList') && JSON.parse(localStorage.getItem('slowMotionStockList')) || []\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var endTime = moment('3:30pm', 'h:mma');\r\n        const friday = 5; // for friday\r\n        var currentTime = moment(new Date(), \"h:mma\");\r\n        const today = moment().isoWeekday();\r\n        //market hours\r\n        if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n\r\n            var tostartInteral = setInterval(() => {\r\n                var time = new Date();\r\n                if (time.getMinutes() % 5 === 0) {\r\n                    setTimeout(() => {\r\n                        this.checkSlowMotionCheckLive();\r\n                    }, 70000);\r\n                    setInterval(() => {\r\n                        this.checkSlowMotionCheckLive();\r\n                        this.activationToLtpChange();\r\n                    }, 60000 * 5 + 70000);\r\n                    clearInterval(tostartInteral);\r\n                }\r\n            }, 1000);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    onChangeWatchlist = (e) => {\r\n\r\n        this.setState({ [e.target.name]: e.target.value }, function () {\r\n            // this.findlast5minMovement(); //one time only\r\n            //this.startSearching();\r\n            this.checkSlowMotion();\r\n\r\n        });\r\n    }\r\n\r\n\r\n    checkSlowMotion = async () => {\r\n        var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n\r\n        if (this.state.selectedWatchlist == \"selectall\") {\r\n            watchList = localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList'));\r\n        }\r\n\r\n\r\n\r\n        this.setState({ scanUpdate: \"\" });\r\n        for (let index = 0; index < watchList.length; index++) {\r\n            const row = watchList[index];\r\n\r\n            var isfound = this.state.slowMotionStockList.filter(item => item.token == row.token);\r\n            if (!isfound.length) {\r\n                this.checkSlowMotionStock(row.token, row, index + 1);\r\n                await new Promise(r => setTimeout(r, 310));\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n    getTimeFrameValue = (timeFrame) => {\r\n        //18 HOURS FOR BACK 1 DATE BACK MARKET OFF\r\n\r\n        switch (timeFrame) {\r\n            case 'ONE_MINUTE':\r\n                return \"720:00:00\";\r\n                break;\r\n            case 'FIVE_MINUTE':\r\n                    return \"2160:00:00\";\r\n                break;\r\n            case 'TEN_MINUTE':\r\n                    return \"2160:00:00\";\r\n                break;\r\n            case 'FIFTEEN_MINUTE':\r\n                return \"2160:00:00\";\r\n                break;\r\n            case 'THIRTY_MINUTE':\r\n                return \"4320:00:00\";\r\n                break;\r\n            case 'ONE_HOUR':\r\n                return \"4320:00:00\";\r\n                break;\r\n            case 'ONE_DAY':\r\n                return \"8760:00:00\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    updateTimeFrameChart=(token, timeFrame)=>{\r\n\r\n        console.log( token,timeFrame );\r\n\r\n        let time = this.getTimeFrameValue(timeFrame);\r\n        const format1 = \"YYYY-MM-DD HH:mm\";\r\n\r\n        var startDate = moment(new Date()).subtract(time);\r\n        var dataDay = {\r\n            \"exchange\": 'NSE',\r\n            \"symboltoken\": token,\r\n            \"interval\": timeFrame,\r\n            \"fromdate\": moment(startDate).format(format1),\r\n            \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n        }\r\n        AdminService.getHistoryData(dataDay).then(resd => {\r\n            let histdatad = resolveResponse(resd, 'noPop');\r\n            var DSMA = '';\r\n            if (histdatad && histdatad.data && histdatad.data.length) {\r\n                var candleDatad = histdatad.data;\r\n                var closeingDatadaily = [], valumeSum = 0, volumeSeriesData=[];\r\n\r\n                for (let index = 0; index < candleDatad.length; index++) {\r\n                    const element = candleDatad[index];\r\n                    volumeSeriesData.push({ time: new Date(element[0]).getTime(), value: element[5], color: 'rgba(211, 211, 211, 1)' })\r\n                }\r\n\r\n                const lightChartData = candleDatad.map(d => {\r\n                    return { time: new Date(d[0]).getTime(), open: parseFloat(d[1]), high: parseFloat(d[2]), low: parseFloat(d[3]), close: parseFloat(d[4]) }\r\n                });\r\n   \r\n\r\n                var lightChartinfo = localStorage.getItem('lightChartData') && JSON.parse(localStorage.getItem('lightChartData'));\r\n\r\n                lightChartinfo.lightChartData = lightChartData; \r\n                lightChartinfo.volumeSeriesData = volumeSeriesData; \r\n               // localStorage.setItem('lightChartData', JSON.stringify(lightChartinfo)); \r\n\r\n                this.setState({chartStaticData: lightChartinfo});\r\n            }\r\n\r\n     \r\n        });\r\n  }\r\n\r\n\r\n\r\n    checkSlowMotionStock = (token, stock, stockindex) => {\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        const format1 = \"YYYY-MM-DD HH:mm\";\r\n        var time = moment.duration(\"240:00:00\");  //22:00:00\" for last day  2hours \r\n        var startDate = moment(new Date()).subtract(time);\r\n        var dataDay = {\r\n            \"exchange\": 'NSE',\r\n            \"symboltoken\": token,\r\n            \"interval\": 'FIVE_MINUTE',\r\n            \"fromdate\": moment(startDate).format(format1),\r\n            \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n        }\r\n        AdminService.getHistoryData(dataDay).then(resd => {\r\n            let histdatad = resolveResponse(resd, 'noPop');\r\n            var DSMA = '';\r\n            if (histdatad && histdatad.data && histdatad.data.length) {\r\n                var candleDatad = histdatad.data;\r\n                var closeingDatadaily = [], valumeSum = 0, volumeSeriesData=[];\r\n\r\n                var bigCandleCount = 0;\r\n\r\n                for (let index = candleDatad.length - 375; index < candleDatad.length; index++) {\r\n                    const element = candleDatad[index];\r\n\r\n                    if (element) {\r\n                        var per = (element[4] - element[1]) * 100 / element[1];\r\n\r\n                        if (per >= 0.4) {\r\n                            bigCandleCount += 1;\r\n\r\n                        }\r\n                        if (per <= -0.4) {\r\n                            bigCandleCount += 1;\r\n\r\n                        }\r\n                    }\r\n                    volumeSeriesData.push({ time: new Date(element[0]).getTime(), value: element[5], color: 'rgba(211, 211, 211, 1)' })\r\n\r\n                }\r\n\r\n\r\n                console.log(\"Totalcount\", stock.name, bigCandleCount, volumeSeriesData);\r\n\r\n                this.setState({ scanUpdate: \"Scan: \" + stockindex + \". \" + stock.name + \" maxCount: \" + bigCandleCount })\r\n\r\n                if (bigCandleCount <= 15) {\r\n\r\n                    var isfound = this.state.slowMotionStockList.filter(item => item.token == token);\r\n                    if (!isfound.length) {\r\n                        stock.bigCandleCount = bigCandleCount;\r\n                        stock.sectorName = this.state.selectedWatchlist;\r\n\r\n                        var candleChartData = []; \r\n                        candleDatad.forEach(element => {\r\n                            candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                        });\r\n\r\n\r\n                        const lightChartData = candleDatad.map(d => {\r\n                            return { time: new Date(d[0]).getTime(), open: parseFloat(d[1]), high: parseFloat(d[2]), low: parseFloat(d[3]), close: parseFloat(d[4]) }\r\n                        });\r\n        \r\n\r\n\r\n                       // stock.candleChartData = candleChartData.slice(Math.max(candleChartData.length - 10, 1));  \r\n                        stock.candleChartData = candleChartData;  \r\n                        stock.lightChartData =  lightChartData; \r\n                        stock.volumeSeriesData =  volumeSeriesData;\r\n\r\n                        this.setState({ slowMotionStockList: [...this.state.slowMotionStockList, stock] }, function () {\r\n                         //   localStorage.setItem(\"slowMotionStockList\", JSON.stringify(this.state.slowMotionStockList));\r\n                        });\r\n                    }\r\n        \r\n\r\n                   \r\n                }\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    checkSlowMotionCheckLive = async () => {\r\n\r\n        for (let index = 0; index < this.state.slowMotionStockList.length; index++) {\r\n            const row = this.state.slowMotionStockList[index];\r\n\r\n            if (!row.isActivated) {\r\n                const format1 = \"YYYY-MM-DD HH:mm\";\r\n                var time = moment.duration(\"50:00:00\");  //22:00:00\" for last day  2hours \r\n                var startDate = moment(new Date()).subtract(time);\r\n                var beginningTime = moment('9:15am', 'h:mma');\r\n\r\n                var dataDay = {\r\n                    \"exchange\": 'NSE',\r\n                    \"symboltoken\": row.token,\r\n                    \"interval\": 'FIVE_MINUTE',\r\n                    \"fromdate\": moment(startDate).format(format1),\r\n                    \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n                }\r\n                AdminService.getHistoryData(dataDay).then(resd => {\r\n                    let histdatad = resolveResponse(resd, 'noPop');\r\n                    var DSMA = '';\r\n                    if (histdatad && histdatad.data && histdatad.data.length) {\r\n                        var candleDatad = histdatad.data;\r\n                        var closeingDatadaily = [], valumeSum = 0;\r\n\r\n                        var bigCandleCount = 0, midBullishCount = 0, bullishCount = 0, activationTime = \"\", activationPrice = 0;\r\n\r\n                        for (let index = candleDatad.length - 3; index < candleDatad.length; index++) {\r\n                            const element = candleDatad[index];\r\n\r\n                            if (element) {\r\n                                var per = (element[4] - element[1]) * 100 / element[1];\r\n                                if (per >= 1) {\r\n                                    bigCandleCount += 1;\r\n                                    activationPrice = element[2];\r\n                                    activationTime = new Date(element[0]).toLocaleString();\r\n                                }\r\n                                if (per >= 0.5) {\r\n                                    midBullishCount += 1;\r\n                                    activationPrice = element[2];\r\n                                    activationTime = new Date(element[0]).toLocaleString();\r\n                                }\r\n                                if (per >= 0) {\r\n                                    bullishCount += 1;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        var candleChartData = [];\r\n                        candleDatad.forEach(element => {\r\n                            candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                        });\r\n\r\n                        //row.candleChartData = candleChartData.slice(Math.max(candleChartData.length - 10, 1)); \r\n                        row.candleChartData = candleChartData; \r\n                        \r\n                        \r\n                        let update = Parser(\"Update: \" + (index + 1) + \".\" + row.name + \" large(1%): <b>\" + bigCandleCount +\"</b> &nbsp;mid(0.5%): <b>\"+ midBullishCount+\"</b> &nbsp;small(>0%): <b>\"+ bullishCount+\"</b>\" ); \r\n                \r\n                        this.setState({ scanUpdate:  update})\r\n                        console.log(row.symbol, bigCandleCount, midBullishCount, bullishCount);\r\n\r\n                        let updatetopage = \"large(1%): <b>\" + bigCandleCount +\"</b> &nbsp;mid(0.5%): <b>\"+ midBullishCount+\"</b> &nbsp;small(>0%): <b>\"+ bullishCount+\"</b> at \" + new Date(candleDatad[candleDatad.length-1][0]).toLocaleTimeString(); \r\n\r\n                        row.update = updatetopage; \r\n\r\n                        if (bigCandleCount >= 1 || (midBullishCount >= 1 && bullishCount >= 2)) {\r\n\r\n                            row.isActivated = true;\r\n                            row.activationTime = activationTime;\r\n                            row.activationPrice = activationPrice;\r\n\r\n                            window.document.title = \"SM: \" + row.symbol;\r\n                            console.log('hey, slow motion stock' + row.symbol + \" broken\");\r\n\r\n                            this.speckIt('hey, slow motion stock' + row.symbol + \" broken\");\r\n                            this.setState({ slowMotionStockList: this.state.slowMotionStockList }, function () {\r\n                                this.sortByColumn(\"isActivated\");\r\n                                //localStorage.setItem(\"slowMotionStockList\", JSON.stringify(this.state.slowMotionStockList));\r\n                            })\r\n                            \r\n                        }\r\n\r\n                       \r\n\r\n                    }\r\n\r\n                });\r\n                await new Promise(r => setTimeout(r, 310));\r\n            }\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    activationToLtpChange = async() => {\r\n\r\n        for (let index = 0; index < this.state.slowMotionStockList.length; index++) {\r\n            const row = this.state.slowMotionStockList[index];\r\n\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"tradingsymbol\": row.symbol,\r\n                \"symboltoken\": row.token,\r\n            }\r\n            AdminService.getLTP(data).then(res => {\r\n                let data = resolveResponse(res, 'noPop');\r\n                var LtpData = data && data.data;\r\n                //console.log(LtpData);\r\n                if (LtpData && LtpData.ltp) {\r\n                   row.ltp = LtpData.ltp;\r\n                   row.change = ((LtpData.ltp -  LtpData.close)*100/LtpData.close).toFixed(2);\r\n\r\n                   if(row.activationPrice){\r\n                    row.AtoltpChng = ((LtpData.ltp-row.activationPrice)*100/row.activationPrice).toFixed(2); \r\n                   }\r\n              \r\n                   this.setState({ slowMotionStockList: this.state.slowMotionStockList }, function () {\r\n                        localStorage.setItem(\"slowMotionStockList\", JSON.stringify(this.state.slowMotionStockList));\r\n                    })\r\n                }\r\n\r\n            })\r\n\r\n            await new Promise(r => setTimeout(r, 125));\r\n        }\r\n    }\r\n\r\n\r\n    showLightChart = (row) => {\r\n\r\n\r\n        console.log(\"row\",row)\r\n        \r\n        if(row.lightChartData.length>0){\r\n            localStorage.setItem('lightChartData', JSON.stringify(row));\r\n            this.setState({chartStaticData: row}, function(){\r\n                document.getElementById('showLightChart').click();\r\n            });\r\n        }\r\n       \r\n    }\r\n\r\n    \r\n\r\n\r\n    deleteAllScan = () => {\r\n\r\n        if(window.confirm(\"Are you sure to delete all scan stocks?\")){\r\n            this.setState({ slowMotionStockList: []})\r\n            localStorage.setItem(\"slowMotionStockList\",[]);\r\n        }\r\n     \r\n    }\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value.trim() });\r\n    }\r\n\r\n\r\n    convertToFloat = (str) => {\r\n        if (!isNaN(str)) {\r\n            return \"(\" + (str / 100000).toFixed(2) + \"L)\";\r\n        }\r\n\r\n\r\n    }\r\n\r\n    speckIt = (text) => {\r\n        var msg = new SpeechSynthesisUtterance();\r\n        msg.text = text.toString();\r\n        window.speechSynthesis.speak(msg);\r\n    }\r\n\r\n    getPercentageColor = (percent) => {\r\n        percent = percent * 100;\r\n        var r = percent < 50 ? 255 : Math.floor(255 - (percent * 2 - 100) * 255 / 100);\r\n        var g = percent > 50 ? 255 : Math.floor((percent * 2) * 255 / 100);\r\n        return 'rgb(' + r + ',' + g + ',0)';\r\n    }\r\n    sortByColumn = (type) => {\r\n\r\n        this.state.slowMotionStockList.sort(function (a, b) {\r\n            if (type == \"isActivated\" && a.isActivated) {\r\n                return (a.isActivated === b.isActivated) ? 0 : a ? -1 : 1;\r\n            } else {\r\n                return b[type] - a[type];\r\n            }\r\n        });\r\n\r\n        this.setState({ slowMotionStockList: this.state.slowMotionStockList, sortedType: type });\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <React.Fragment>\r\n\r\n\r\n                {window.location.hash !== \"#/position\" ? <PostLoginNavBar /> : \"\"}\r\n\r\n\r\n                <ChartDialog />\r\n\r\n                {this.state.chartStaticData ? \r\n                <LightChartModel chartData={{updateTimeFrameChart : this.updateTimeFrameChart, chartStaticData : this.state.chartStaticData}} /> \r\n                : \"\"}\r\n                <Grid direction=\"row\" alignItems=\"center\" container>\r\n                    <Grid item xs={12} sm={12} >\r\n\r\n                        <Paper style={{ padding: \"10px\" }} >\r\n\r\n                            <Grid justify=\"space-between\"\r\n                                container spacing={1}>\r\n\r\n                                <Grid item xs={12} sm={4} >\r\n                                    <Typography component=\"h2\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n                                      Slow Motion ({this.state.slowMotionStockList.length})  <DeleteIcon  onClick={() => this.deleteAllScan()}/>  found at {new Date().toLocaleString()}\r\n                                    </Typography>\r\n                                    {this.state.sortedType ? <> <b> Sorted By: </b> {this.state.sortedType}  </> : \"\"}\r\n\r\n                                </Grid>\r\n\r\n\r\n                                <Grid item xs={12} sm={2} >\r\n                                    <FormControl style={styles.selectStyle} >\r\n                                        <InputLabel htmlFor=\"gender\">Select Watchlist</InputLabel>\r\n                                        <Select value={this.state.selectedWatchlist} name=\"selectedWatchlist\" onChange={this.onChangeWatchlist}>\r\n                                            <MenuItem value={\"selectall\"}>{\"Select All\"}</MenuItem>\r\n                                            {this.state.totalWatchlist && this.state.totalWatchlist.map(element => (\r\n                                                <MenuItem value={element}>{element}</MenuItem>\r\n                                            ))\r\n                                            }\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n\r\n\r\n\r\n                                <Grid item xs={12} sm={4} >\r\n                                    <Button variant=\"contained\" style={{ marginRight: '20px' }} onClick={() => this.checkSlowMotion()}>Scan</Button>\r\n                            \r\n                                    {this.state.scanUpdate ? <>{this.state.scanUpdate}  </> : \"\"}\r\n                                    </Grid>\r\n\r\n                                <Grid item xs={12} sm={2} >\r\n                                    <Button variant=\"contained\" style={{ marginRight: '20px' }} onClick={() => this.checkSlowMotionCheckLive()}>Refresh</Button>\r\n                                </Grid>\r\n\r\n                                \r\n\r\n                            </Grid>\r\n\r\n\r\n                            <Table size=\"small\" style={{ width: \"100%\" }} aria-label=\"sticky table\" >\r\n\r\n                                <TableHead style={{ whiteSpace: \"nowrap\" }} variant=\"head\">\r\n                                    <TableRow variant=\"head\">\r\n                                        <TableCell align=\"left\">Sr.</TableCell>\r\n\r\n                                        <TableCell align=\"left\"><Button onClick={() => this.sortByColumn(\"pchange\")}>Symbol</Button> </TableCell>\r\n                                        <TableCell align=\"center\">Sector</TableCell>\r\n\r\n                                        <TableCell align=\"center\">Max Count</TableCell>\r\n\r\n\r\n\r\n                                        <TableCell align=\"center\"><Button onClick={() => this.sortByColumn(\"isActivated\")}>Is Activated</Button></TableCell>\r\n                                        <TableCell align=\"center\">Activate Time</TableCell>\r\n                                        <TableCell align=\"center\">Activation Price</TableCell>\r\n                                        <TableCell align=\"center\">Last Update</TableCell>\r\n                                        <TableCell align=\"center\"><Button onClick={() => this.activationToLtpChange()}>A.toLtpChng</Button></TableCell>\r\n\r\n\r\n\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n\r\n\r\n\r\n                                    {this.state.slowMotionStockList ? this.state.slowMotionStockList.map((row, i) => (\r\n                                        <TableRow hover key={i} style={{ background: row.isActivated ? \"lightgray\" : \"\" }}>\r\n                                            <TableCell align=\"left\">{i + 1}</TableCell>\r\n\r\n                                            <TableCell align=\"left\"> <Button size=\"small\" variant=\"contained\" style={{ color: !row.change ? '' : row.change > 0 ? 'green' : 'red' }} onClick={() => this.showLightChart(row)}> {row.name} {row.ltp}  {row.change ? \"(\" + row.change+ \"%)\" : \"\" }  <EqualizerIcon /> </Button></TableCell>\r\n\r\n\r\n                                            \r\n                                            <TableCell align=\"center\">{row.sectorName}</TableCell>\r\n                                            <TableCell align=\"center\">{row.bigCandleCount}</TableCell>\r\n\r\n                                            <TableCell align=\"center\">{row.isActivated ? \"Yes\" : \"No\"}</TableCell>\r\n                                            <TableCell align=\"center\">{row.activationTime}</TableCell>\r\n                                            <TableCell align=\"center\">{row.activationPrice}</TableCell>\r\n                                            <TableCell align=\"center\">{row.update ? Parser(row.update): \"\"}</TableCell>\r\n                                            <TableCell align=\"center\">{row.ltp} {row.AtoltpChng ? \"(\" + row.AtoltpChng+ \"%)\" : \"\" }</TableCell>\r\n\r\n                                        </TableRow> \r\n                                    )) : <Spinner />}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst styles = {\r\n    formContainer: {\r\n        display: 'flex',\r\n        flexFlow: 'row wrap'\r\n    },\r\n\r\n    textStyle: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n\r\n    },\r\n    imgStyle: {\r\n        display: 'flex'\r\n    },\r\n\r\n    selectStyle: {\r\n        minWidth: '100%',\r\n        marginBottom: '10px'\r\n    },\r\n    MuiTextField: {\r\n        overflowY: 'scroll',\r\n        fontSize: \"12px\",\r\n        maxHeight: \"50px\",\r\n\r\n    },\r\n    footerButton: {\r\n        position: 'fixed',\r\n        left: 0,\r\n        bottom: '20px',\r\n        width: '100%',\r\n        textAlign: 'right'\r\n    }\r\n\r\n};\r\n\r\n// const mapStateToProps=(state)=>{\r\n//     return {packs:state.packs.packs.data};\r\n// }\r\n\r\n//export default connect(mapStateToProps,{setPackLoaded})(OrderBook);\r\nexport default OrderBook;","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Spinner from \"react-spinner-material\";\r\nimport { w3cwebsocket } from 'websocket';\r\n//import ChartDialog from './ChartDialog';\r\nimport pako from 'pako';\r\nimport AdminService from \"../service/AdminService\";\r\nimport Notify from \"../../utils/Notify\";\r\nimport { createChart } from 'lightweight-charts';\r\nimport * as moment from 'moment';\r\nimport { resolveResponse } from \"../../utils/ResponseHandler\";\r\nimport { SMA, RSI, VWAP, BollingerBands } from 'technicalindicators';\r\nimport vwap from 'vwap';\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\n\r\n// import vwap from 'vwap';\r\n// import { SMA, RSI, VWAP, BollingerBands } from 'technicalindicators';\r\n// import SimpleExpansionPanel from \"./SimpleExpansionPanel\";\r\n// import SimpleExpansionFastMovement from \"./SimpleExpansionFastMovement\";\r\n// import LiveBidsExpantion from \"./LiveBidsExpantion\";\r\n// import WatchListTab from \"./WatchListTab\"; \r\n// import OrderWatchlist from './OrderWatchlist';\r\n\r\n\r\nclass LiveBid extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            totalWatchlist: localStorage.getItem('totalWatchlist') && JSON.parse(localStorage.getItem('totalWatchlist')) || [],\r\n            staticData: localStorage.getItem('staticData') && JSON.parse(localStorage.getItem('staticData')) || {},\r\n            selectedWatchlist: 'NIFTY BANK', //'Securities in F&O',\r\n            symbolList :  [],\r\n            actionList : localStorage.getItem('actionList') && JSON.parse(localStorage.getItem('actionList')) || [],\r\n            timeFrame: \"FIFTEEN_MINUTE\",\r\n            softedIndexList:[],\r\n            cursor: '',\r\n            isSpeek: localStorage.getItem('isSpeek') === 'true' ? true : false, \r\n            sortedType: \"pChange\", \r\n            sluglist: {\r\n                'NIFTY 50': 'nifty',\r\n                'NIFTY AUTO': 'cnxAuto',\r\n                'NIFTY BANK': 'bankNifty',\r\n                'NIFTY ENERGY': 'cnxEnergy',\r\n                'NIFTY FIN SERVICE': 'cnxFinance',\r\n                'NIFTY FMCG': 'cnxFMCG',\r\n                'NIFTY IT': 'cnxit',\r\n                'NIFTY MEDIA': 'cnxMedia',\r\n                'NIFTY METAL': 'cnxMetal',\r\n                'NIFTY PHARMA': 'cnxPharma',\r\n                'NIFTY PSU BANK': 'cnxPSU',\r\n                'NIFTY REALTY': 'cnxRealty',\r\n                'NIFTY PVT BANK': 'niftyPvtBank',\r\n                'NIFTY CONSUMPTION': 'cnxConsumption',\r\n                'NIFTY CPSE': 'cpse',\r\n                'NIFTY INFRA': 'cnxInfra',\r\n                'NIFTY MNC': 'cnxMNC',\r\n                'NIFTY PSE': 'cnxPSE',\r\n\r\n                //  \"NIFTY HEALTHCARE\": \"niftyHealthcare\"\r\n                //'NIFTY CONSR DURBL':  \"niftyConsrDurbl\"\r\n                // 'NIFTY GROWSECT 15': 'ni15',H\r\n                // 'NIFTY COMMODITIES': 'cnxCommodities',\r\n                // 'NIFTY SERV SECTOR': 'cnxService',\r\n                // 'NIFTY100 LIQ 15': 'nseliquid',\r\n                // 'NIFTY MID LIQ 15': 'niftyMidcapLiq15',\r\n                // 'NIFTY DIV OPPS 50': 'cnxDividendOppt',\r\n                // 'NIFTY50 VALUE 20': 'nv20',\r\n                // 'NIFTY QUALITY 30': 'niftyQuality30',\r\n                // 'NIFTY50 EQL WGT': 'nifty50EqualWeight',\r\n                // 'NIFTY100 EQL WGT': 'nifty100EqualWeight',\r\n                // 'NIFTY ALPHA 50': 'niftyAlpha50',\r\n                 'NIFTY NEXT 50': 'juniorNifty',\r\n                 'NIFTY MIDCAP 50': 'niftyMidcap50',\r\n                 'NIFTY HEALTHCARE': \"notfound\",\r\n                 'NIFTY OIL AND GAS':\"notfound\",\r\n                 'NIFTY 100':\"notfound\", \r\n                 'NIFTY CONSR DURBL':'notfond'\r\n            },\r\n        };\r\n        this.updateSocketWatch = this.updateSocketWatch.bind(this);\r\n\r\n    }\r\n    makeConnection = (wsClint) => {\r\n        var firstTime_req = '{\"task\":\"cn\",\"channel\":\"NONLM\",\"token\":\"' + this.state.feedToken + '\",\"user\": \"' + this.state.clientcode + '\",\"acctid\":\"' + this.state.clientcode + '\"}';\r\n        wsClint.send(firstTime_req);\r\n        this.updateSocketWatch(wsClint);\r\n    }\r\n    decodeWebsocketData = (array) => {\r\n        var newarray = [];\r\n        try {\r\n            for (var i = 0; i < array.length; i++) {\r\n                newarray.push(String.fromCharCode(array[i]));\r\n            }\r\n        } catch (e) { }\r\n      //  console.log(newarray.join(''))\r\n        return newarray.join('');\r\n    }\r\n\r\n   \r\n\r\n    updateSocketWatch = (wsClint) => {\r\n        var channel = this.state.symbolList.map(element => {\r\n            return 'nse_cm|' + element.token;\r\n        });\r\n        channel = channel.join('&');\r\n        var updateSocket = {\r\n            \"task\": \"mw\",\r\n            \"channel\": channel,\r\n            \"token\": this.state.feedToken,\r\n            \"user\": this.state.clientcode,\r\n            \"acctid\": this.state.clientcode\r\n        }\r\n    \r\n        wsClint.send(JSON.stringify(updateSocket));\r\n    }\r\n\r\n    takeAction =(symbol,   action )=>{\r\n        let isfound =  this.state.actionList.length && this.state.actionList.filter(item => item.symbol === symbol); \r\n        if(!isfound.length){\r\n            let data = {symbol:symbol, action:action, updateTime: new Date().toLocaleTimeString() }; \r\n            this.setState({actionList: [...this.state.actionList , data]}, function(){\r\n                localStorage.setItem('actionList', JSON.stringify(this.state.actionList) ); \r\n                this.speckIt(symbol +\" \" + action); \r\n\r\n                console.log(data.symbol +\" \" + data.action + \" \"+data.updateTime); \r\n                this.setState({lastUpdateAction: data.symbol +\" \" + data.action + \" \"+data.updateTime }); \r\n            }); \r\n        }\r\n    }\r\n    updateSocketDetails = (wsClint) => {\r\n        wsClint.onopen = (res) => {\r\n            this.makeConnection(wsClint);\r\n            this.updateSocketWatch(wsClint);\r\n        }\r\n        wsClint.onmessage = (message) => {\r\n            var decoded = window.atob(message.data);\r\n            var data = this.decodeWebsocketData(pako.inflate(decoded));\r\n            var liveData = JSON.parse(data);\r\n        \r\n            var symbolListArray = this.state.symbolList;\r\n            this.state.symbolList && this.state.symbolList.forEach((element, index) => {\r\n                var foundLive = liveData.filter(row => row.tk == element.token);\r\n                if (foundLive.length > 0 && foundLive[0].ltp && foundLive[0].nc) {\r\n\r\n                    console.log(foundLive[0]); \r\n\r\n                    symbolListArray[index].ltp = foundLive[0].ltp;\r\n                    symbolListArray[index].pChange = foundLive[0].nc;\r\n                    symbolListArray[index].totalBuyQuantity = foundLive[0].tbq;\r\n                    symbolListArray[index].totalSellQuantity = foundLive[0].tsq;\r\n                    symbolListArray[index].totalTradedVolume = foundLive[0].v;\r\n                    symbolListArray[index].averagePrice = foundLive[0].ap;\r\n                    symbolListArray[index].lowPrice = foundLive[0].lo;\r\n                    symbolListArray[index].highPrice = foundLive[0].h;\r\n                    symbolListArray[index].openPrice = foundLive[0].op;\r\n\r\n                    symbolListArray[index].bestbuyquantity = foundLive[0].bq;\r\n                    symbolListArray[index].bestbuyprice = foundLive[0].bp;\r\n                    symbolListArray[index].bestsellquantity = foundLive[0].bs;\r\n                    symbolListArray[index].bestsellprice = foundLive[0].sp;\r\n                   \r\n                    // symbolListArray[index].upperCircuitLimit = foundLive[0].ucl;\r\n                    // symbolListArray[index].lowerCircuitLimit = foundLive[0].lcl;\r\n\r\n                    symbolListArray[index].buytosellTime = (foundLive[0].tbq / foundLive[0].tsq).toFixed(2);\r\n                    symbolListArray[index].selltobuyTime =  (foundLive[0].tsq / foundLive[0].tbq).toFixed(2); \r\n                    \r\n                    if (foundLive[0].tbq / foundLive[0].tsq > 2) {\r\n                        symbolListArray[index].highlightbuy = true;\r\n                        this.takeAction(element.symbol, ' buying') \r\n                    }else{\r\n                        symbolListArray[index].highlightbuy = false;\r\n                    }\r\n\r\n                    if (foundLive[0].tsq / foundLive[0].tbq > 2) {\r\n                        symbolListArray[index].highlightsell = true;\r\n                        this.takeAction(element.symbol, ' selling')\r\n\r\n                    }else{\r\n                        symbolListArray[index].highlightsell = false;\r\n                    }\r\n\r\n                    //console.log(\"ws onmessage: \", foundLive);\r\n                }\r\n            });\r\n\r\n           \r\n            let shortBy = this.state.sortedType; \r\n            symbolListArray && symbolListArray.sort(function (a, b) {\r\n                return b[shortBy] - a[shortBy] ;\r\n            });\r\n            this.setState({ symbolList: symbolListArray });\r\n        }\r\n\r\n        wsClint.onerror = (e) => {\r\n            console.log(\"socket error\", e);\r\n        }\r\n\r\n        setInterval(() => {\r\n            //  this.makeConnection();\r\n            var _req = '{\"task\":\"hb\",\"channel\":\"\",\"token\":\"' + this.state.feedToken + '\",\"user\": \"' + this.state.clientcode + '\",\"acctid\":\"' + this.state.clientcode + '\"}';\r\n             console.log(\"Request :- \" + _req);\r\n            wsClint.send(_req);\r\n        }, 59000);\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        window.document.title = \"WS Bid Live\";\r\n        this.setState({ symbolList: this.state.staticData[this.state.selectedWatchlist] });\r\n\r\n        var tokens = JSON.parse(localStorage.getItem(\"userTokens\"));\r\n        var feedToken = tokens && tokens.feedToken;\r\n        var userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\r\n        var clientcode = userProfile && userProfile.clientcode;\r\n        this.setState({ feedToken: feedToken, clientcode: clientcode }, function(){\r\n            this.wsClint = new w3cwebsocket('wss://omnefeeds.angelbroking.com/NestHtml5Mobile/socket/stream');\r\n            this.updateSocketDetails(this.wsClint);  \r\n        });\r\n\r\n        const domElement = document.getElementById('tvchart');\r\n        document.getElementById('tvchart').innerHTML = '';\r\n        let heigh =  window.innerWidth;    \r\n        \r\n        const chart = createChart(domElement, { width: heigh/2, height: 400, timeVisible: true, secondsVisible: true, });\r\n        const candleSeries = chart.addCandlestickSeries();\r\n        var smaLineSeries = chart.addLineSeries({\r\n            color: 'rgba(4, 111, 232, 1)',\r\n            lineWidth: 2,\r\n        });\r\n        var volumeSeries = chart.addHistogramSeries({\r\n            color: '#26a69a',\r\n            priceFormat: {\r\n                type: 'volume',\r\n            },\r\n            priceScaleId: '',\r\n            scaleMargins: {\r\n                top: 0.8,\r\n                bottom: 0,\r\n            },\r\n        });\r\n        this.setState({ chart: chart, candleSeries: candleSeries, smaLineSeries: smaLineSeries, volumeSeries: volumeSeries });\r\n\r\n        this.getUpdateIndexData()\r\n\r\n        setInterval(() => {\r\n            if(this.state.token){\r\n                this.showStaticChart();\r\n            }\r\n        }, 1000);\r\n       \r\n    }\r\n\r\n    getUpdateIndexData=()=>{\r\n        this.setState({softedIndexList : []})\r\n        AdminService.allIndicesDirectJSON()\r\n        .then((res) => {\r\n\r\n            if (res.data) {\r\n\r\n                var softedData = res.data && res.data.data;\r\n                softedData.sort(function (a, b) {\r\n                    return b.percChange - a.percChange;\r\n                });\r\n\r\n                for (let index = 0; index < softedData.length; index++) {\r\n                    const element = softedData[index];\r\n                    var slugName = this.state.sluglist[element.indexName];\r\n                    if (slugName) {\r\n                        this.setState({ softedIndexList: [...this.state.softedIndexList ,element] });\r\n                    }\r\n                }\r\n              \r\n                this.makeConnection(this.wsClint)\r\n              //  this.updateSocketWatch(this.wsClint);\r\n            }\r\n        })\r\n        .catch((reject) => {\r\n         // Notify.showError(\"All Indices API Failed\");\r\n        }).finally((ok) => {\r\n        })\r\n    }\r\n\r\n    speckIt = (text) => {\r\n        if(this.state.isSpeek){\r\n            var msg = new SpeechSynthesisUtterance();\r\n            msg.text = text.toString();\r\n            window.speechSynthesis.speak(msg);\r\n        }\r\n    }\r\n\r\n    getPercentageColor = (percent) => {\r\n        percent = percent * 100;\r\n        var r = percent < 50 ? 255 : Math.floor(255 - (percent * 2 - 100) * 255 / 100);\r\n        var g = percent > 50 ? 255 : Math.floor((percent * 2) * 255 / 100);\r\n        return 'rgb(' + r + ',' + g + ',0)';\r\n    }\r\n\r\n    onChangeWatchlist = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value }, function () {\r\n            var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n            this.setState({ symbolList: watchList},()=> this.updateSocketWatch(this.wsClint));\r\n        });\r\n    }\r\n    sortByColumn = (type) => {\r\n        this.state.symbolList.sort(function (a, b) {\r\n            return b[type] - a[type];\r\n        });\r\n        this.setState({ symbolList: this.state.symbolList, sortedType: type });\r\n    }\r\n\r\n    // checkLiveBids = async () => {\r\n    //     var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n    //     this.setState({ symbolList: watchList});\r\n    // }\r\n    // getLTP = (symbol, token) => {\r\n    //     var data = {\r\n    //         \"exchange\": \"NSE\",\r\n    //         \"tradingsymbol\": symbol,\r\n    //         \"symboltoken\": token,\r\n    //     }\r\n    //     AdminService.getLTP(data).then(res => {\r\n    //         let data = resolveResponse(res, 'noPop');\r\n    //         var LtpData = data && data.data;\r\n\r\n    //         if (LtpData && LtpData.ltp)\r\n    //             this.setState({ InstrumentPerChange: ((LtpData.ltp - LtpData.close) * 100 / LtpData.close) });\r\n    //     })\r\n    // } \r\n    \r\n    convertToDecimal=(num)=>{\r\n        if (!isNaN(num)) {\r\n            \r\n            return num.toFixed(2);\r\n        }else{\r\n            return num; \r\n        }\r\n    }\r\n\r\n\r\n    convertToFloat = (str) => {\r\n        if (!isNaN(str)) {\r\n            return \"(\" + ((str / 100000).toFixed(2)) + \"L)\";\r\n        }\r\n    }\r\n    onInputChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value }, function () {\r\n            //    console.log(\"time\", this.state.timeFrame);\r\n            this.showStaticChart();\r\n        });\r\n    }\r\n    handleKeyDown = (e, token) => {\r\n\r\n        console.log(\"key\", e, token);\r\n        //38 for down and 40 for up key\r\n        if (e.keyCode === 38 && this.state.cursor > 0) {\r\n            this.setState(prevState => ({ cursor: prevState.cursor - 1 }));\r\n        } else if (e.keyCode === 40 && this.state.cursor < this.state.symbolList.length - 1) {\r\n            this.setState(prevState => ({ cursor: prevState.cursor + 1 }))\r\n        }  \r\n\r\n        setTimeout(() => {\r\n            this.showStaticChart();\r\n        }, 100);\r\n\r\n    }\r\n    handleChange = (event) => {\r\n\r\n        localStorage.setItem('isSpeek', event.target.checked);\r\n        this.setState({isSpeek :  event.target.checked},()=>{\r\n            console.log(\"isSpeek\", this.state.isSpeek, event.target.checked);\r\n        })\r\n      \r\n      };\r\n    calculateSMA = (data, count) => {\r\n\r\n        //  console.log(\"smarowdata\", data, count);\r\n\r\n        var avg = function (data) {\r\n            var sum = 0;\r\n            for (var i = 0; i < data.length; i++) {\r\n                sum += data[i].close;\r\n            }\r\n            return sum / data.length;\r\n        };\r\n        var result = [];\r\n        for (var i = count - 1, len = data.length; i < len; i++) {\r\n            var val = avg(data.slice(i - count + 1, i));\r\n            result.push({ time: data[i].time, value: val });\r\n        }\r\n        return result;\r\n    }\r\n    showStaticChart = (token, symbol) => {\r\n\r\n        //console.log('token, symbol', token, symbol)\r\n\r\n        if(token)\r\n        this.setState({ chartStaticData: '' , lightChartSymbol :symbol, token : token }, function () {\r\n            console.log('reset done', token);\r\n        });\r\n        \r\n        const format1 = \"YYYY-MM-DD HH:mm\";\r\n        let beginningTime = moment('9:15am', 'h:mma');    \r\n\r\n        if(this.state.timeFrame == 'ONE_MINUTE'){\r\n              var time = moment.duration(\"00:60:00\");\r\n              beginningTime = moment(new Date()).subtract(time);\r\n        }\r\n\r\n        var data = {\r\n            \"exchange\": \"NSE\",\r\n            \"symboltoken\": token || this.state.token,\r\n            \"interval\": this.state.timeFrame, //ONE_DAY FIVE_MINUTE \r\n            \"fromdate\": moment(beginningTime).format(format1),\r\n            \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n        }\r\n   \r\n\r\n        AdminService.getHistoryData(data).then(res => {\r\n            let historyData = resolveResponse(res, 'noPop');\r\n            //    console.log(data); \r\n            if (historyData && historyData.data) {\r\n\r\n                var data = historyData.data;\r\n\r\n                const cdata = data.map(d => {\r\n                    return { time: new Date(d[0]).getTime(), open: parseFloat(d[1]), high: parseFloat(d[2]), low: parseFloat(d[3]), close: parseFloat(d[4]) }\r\n                });\r\n\r\n                var candleChartData = [], vwapdata = [], closeingData = [], highData = [], lowData = [], openData = [], valumeData = [], bbdata = [], volumeSeriesData = [];\r\n                data.forEach((element, loopindex) => {\r\n                    candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                    vwapdata.push([element[5], (element[2] + element[3] + element[4]) / 3]);\r\n                    closeingData.push(element[4]);\r\n                    highData.push(element[2]);\r\n                    lowData.push(element[3]);\r\n                    openData.push(element[3]);\r\n                    valumeData.push(element[5]);\r\n                    bbdata.push((element[2] + element[3] + element[4]) / 3);\r\n                    volumeSeriesData.push({ time: new Date(element[0]).getTime(), value: element[5], color: 'rgba(211, 211, 211, 1)' })\r\n\r\n                });\r\n\r\n                var input = {\r\n                    period: 20,\r\n                    values: bbdata,\r\n                    stdDev: 2\r\n                }\r\n\r\n                var bb = BollingerBands.calculate(input);\r\n             //   console.log(token, \"Bolinger band\", input, bb);\r\n\r\n                var bb = BollingerBands.calculate(input);\r\n              //  console.log(token, \"Bolinger band\", input, bb);\r\n\r\n                var inputRSI = { values: closeingData, period: 14 };\r\n                var rsiValues = RSI.calculate(inputRSI);\r\n\r\n                // console.log(token, \"Rsi\", inputRSI, rsiValues);\r\n                // console.log(token, \"vwap\", vwapdata, vwap(vwapdata));\r\n\r\n\r\n                this.setState({ chartStaticData: cdata, bblastValue: bb[bb.length - 1], vwapvalue: vwap(vwapdata), rsiValues: rsiValues.slice(Math.max(valumeData.length - 19, 1)), valumeData: valumeData.slice(Math.max(valumeData.length - 5, 1)) }, function () {\r\n                    // candleSeries.setData(this.state.chartStaticData); \r\n                    this.state.candleSeries.setData(this.state.chartStaticData);\r\n\r\n                    this.state.volumeSeries.setData(volumeSeriesData);\r\n\r\n                    var smaData = this.calculateSMA(this.state.chartStaticData, 20);\r\n\r\n                    this.state.smaLineSeries.setData(smaData);\r\n\r\n\r\n                    this.state.chart.subscribeCrosshairMove((param) => {\r\n\r\n                        var getit = param.seriesPrices[Symbol.iterator]();\r\n\r\n                        var string = \"\";\r\n                        var change = \"\";\r\n\r\n                        for (var elem of getit) {\r\n\r\n                            if (typeof elem[1] == 'object') {\r\n                                string += \" Open: <b>\" + elem[1].open + \"</b>\";\r\n                                string += \" High: <b>\" + elem[1].high + \"</b>\";\r\n                                string += \" Low: <b>\" + elem[1].low + \"</b>\";\r\n                                string += \" Close: <b>\" + elem[1].close + \"</b>\";\r\n                                change = (elem[1].close - elem[1].open) * 100 / elem[1].open;\r\n                                string += \" Chng: <b>\" + change.toFixed(2) + '%</b>';\r\n                            } else {\r\n                                string += \" &nbsp; \" + elem[1].toFixed(2) + \" \";\r\n                            }\r\n                        }\r\n\r\n                        if (param.time)\r\n                            string += \" Time: <b>\" + new Date(param.time).toLocaleString() + \"</b>\";\r\n                        else\r\n                            string += \" <b>Time: </b>\";\r\n\r\n\r\n                        const domElement = document.getElementById('showChartTitle');\r\n\r\n\r\n                        var str = \"<span style=color:green>\" + string + \"</span> \";\r\n                        if (change < 0)\r\n                            str = \"<span style=color:red>\" + string + \"</span> \";\r\n\r\n                        domElement.innerHTML = str;\r\n                    });\r\n\r\n\r\n                });\r\n\r\n                data && data.sort(function (a, b) {\r\n                    return new Date(b[0]) - new Date(a[0]);\r\n                });\r\n                if (data.length > 0) {\r\n                    localStorage.setItem('InstrumentHistroy', JSON.stringify(data));\r\n                    this.setState({ InstrumentHistroy: data });\r\n\r\n\r\n                    var upsideMoveCount = 0, downMoveCount = 0, totalSum = 0;\r\n                    data.forEach(element => {\r\n\r\n                        var per = (element[4] - element[1]) * 100 / element[1];\r\n                        if (per >= 0.3) {\r\n                            upsideMoveCount += 1;\r\n                        }\r\n                        if (per <= -0.3) {\r\n                            downMoveCount += 1;\r\n                        }\r\n\r\n                        totalSum += per;\r\n\r\n                    });\r\n                    this.setState({ downMoveCount: downMoveCount, upsideMoveCount: upsideMoveCount });\r\n                }\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        // if(this.state.softedIndexList.length == 0)  {\r\n        //     this.setState({softedIndexList  : this.state.totalWatchlist})\r\n        // }\r\n        //console.log(\"symbolList\",this.state.symbolList)\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <PostLoginNavBar LoadSymbolDetails ={this.LoadSymbolDetails} />\r\n                {/* <ChartDialog /> */}\r\n                \r\n                \r\n                <Grid direction=\"row\"  container>\r\n                     <Grid item xs={6} sm={6} >\r\n\r\n                        <Paper style={{ padding: \"10px\" }} >\r\n\r\n                            <Grid justify=\"space-between\"\r\n                                container spacing={1}>\r\n\r\n                                <Grid item xs={12} sm={4} >\r\n                                    {/* <Typography color=\"primary\" gutterBottom>\r\n                                      {this.state.selectedWatchlist} ({this.state.symbolList.length})  \r\n                                      \r\n                                      \r\n                                    </Typography> */}\r\n\r\n                                    <span>Sorted By:  {this.state.sortedType} </span> <br />\r\n                                    <span>Update: {this.state.lastUpdateAction} </span> \r\n\r\n                                   \r\n                                    \r\n                                    {/* <input onKeyDown={this.handleKeyDown} /> */}\r\n                                </Grid>\r\n\r\n\r\n                                <Grid item xs={12} sm={2} >\r\n                                    <FormControl style={styles.selectStyle} >\r\n                                        <InputLabel htmlFor=\"gender\">Select Watchlist</InputLabel>\r\n                                        <Select value={this.state.selectedWatchlist} name=\"selectedWatchlist\" onChange={this.onChangeWatchlist}>\r\n                                            {/* <MenuItem value={\"selectall\"}>{\"Select All\"}</MenuItem> */}\r\n\r\n                                            {this.state.softedIndexList && this.state.softedIndexList.map(element => (\r\n                                                <MenuItem style={{color: element.percChange>0 ? \"green\": \"red\"}} value={element.indexName}>{element.indexName} ({element.percChange}%)</MenuItem>\r\n                                            )) \r\n                                            }\r\n                                            {this.state.totalWatchlist && this.state.totalWatchlist.map(element => (\r\n                                                <MenuItem value={element}>{element}</MenuItem>\r\n                                            )) \r\n                                            }π\r\n                                            <MenuItem value={\"Securities in F&O\"}>{\"Securities in F&O\"}</MenuItem>\r\n                                     \r\n\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n\r\n                                {/* <Grid item xs={12} sm={3} >\r\n                                    <Button variant=\"contained\" style={{ marginRight: '20px' }} onClick={() => this.getUpdateIndexData()}>Refresh</Button>\r\n                                    \r\n                                       <FormGroup>\r\n                                        <FormControlLabel\r\n                                        control={<Switch checked={this.state.isSpeek} onChange={this.handleChange} aria-label=\"Speek ON/OFF\" />}\r\n                                        label={this.state.isSpeek ? 'Speak Yes'  : 'Speak No'}\r\n                                        />\r\n                                    </FormGroup>\r\n                                </Grid> */}\r\n\r\n                                {/* <Grid item xs={12} sm={1} >\r\n                                    <Button variant=\"contained\" style={{ marginRight: '20px' }} onClick={() => this.backupData()}>BackUp</Button>\r\n                                </Grid>\r\n\r\n\r\n                                <Grid item xs={12} sm={1} >\r\n                                    <FormControl style={styles.selectStyle} >\r\n                                        <InputLabel htmlFor=\"gender\">Select Back Date</InputLabel>\r\n                                        <Select value={this.state.backDate} name=\"backDate\" onChange={this.onChangeBackDate}>\r\n                                            <MenuItem value={\"\"}>{\"Select Date\"}</MenuItem>\r\n                                            {this.state.backupDateList && this.state.backupDateList.map(element => (\r\n                                                <MenuItem value={element}>{element}</MenuItem>\r\n                                            ))\r\n                                            }\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid> */}\r\n\r\n\r\n\r\n                            </Grid>\r\n\r\n\r\n                            <Table size=\"small\" style={{ width: \"100%\" }} aria-label=\"sticky table\" >\r\n\r\n                                <TableHead style={{ whiteSpace: \"nowrap\" }} variant=\"head\">\r\n                                    <TableRow variant=\"head\" >\r\n\r\n                                        {/* <TableCell >US Limit</TableCell>\r\n                                        <TableCell >LS Limit</TableCell> */}\r\n\r\n                                        {/* <TableCell  ><Button onClick={() => this.sortByColumn(\"buytosellTime\")}>buyTosell(x)</Button>  </TableCell>\r\n                                        <TableCell  ><Button onClick={() => this.sortByColumn(\"selltobuyTime\")}>sellTobuy(x)</Button>  </TableCell> */}\r\n\r\n                                        <TableCell  ><Button onClick={() => this.sortByColumn(\"buytosellTime\")}> T B Q</Button>  </TableCell>\r\n                                        <TableCell align=\"left\"><Button onClick={() => this.sortByColumn(\"pChange\")}> Symbol</Button> </TableCell>\r\n                                        {/* <TableCell >VWAP Price</TableCell> */}\r\n\r\n                                        <TableCell ><Button onClick={() => this.sortByColumn(\"selltobuyTime\")}> T S Q</Button>  </TableCell>\r\n                                        {/* <TableCell >Other Details </TableCell>\r\n                                        <TableCell >High Price</TableCell>\r\n                                        <TableCell >Low Price</TableCell> */}\r\n\r\n                                        {/* <TableCell ><Button onClick={() => this.sortByColumn(\"quantityTraded\")}> Quantity Traded</Button>  </TableCell> */}\r\n                                        {/* <TableCell  ><Button onClick={() => this.sortByColumn(\"deliveryQuantity\")}> Delivery Quantity</Button>  </TableCell>\r\n                                        <TableCell  ><Button title={\"Delivery To Traded Quantity\"} onClick={() => this.sortByColumn(\"deliveryToTradedQuantity\")}> Del To Traded Qty%</Button>  </TableCell> */}\r\n\r\n                                        {/* <TableCell  ><Button onClick={() => this.sortByColumn(\"totalTradedVolume\")}> Total Traded Volume</Button>  </TableCell> */}\r\n                                        {/* <TableCell  ><Button onClick={() => this.sortByColumn(\"totalTradedValue\")}> Total Traded Value(L)</Button>  </TableCell> */}\r\n\r\n                                        {/* <TableCell  >Day Open</TableCell>\r\n                                        <TableCell  >Day High</TableCell>\r\n                                        <TableCell  >Day Low</TableCell>\r\n                                        <TableCell  >Previous Close</TableCell> */}\r\n\r\n\r\n                                        {/* <TableCell  ><Button onClick={() => this.getDeliveryHistory()}>Delivery History</Button>  </TableCell> */}\r\n\r\n{/* \r\n                                        <TableCell >Best Buy Qty</TableCell>\r\n                                        <TableCell >Best Buy Price</TableCell>\r\n                                        <TableCell >Best Sell Qty</TableCell>\r\n                                        <TableCell >Best Sell Price</TableCell> */}\r\n\r\n\r\n                                    </TableRow>\r\n                                </TableHead>\r\n\r\n                                </Table>\r\n                                <div style={{overflow:\"auto\", maxHeight:\"720px\"}}> \r\n                                <Table size=\"small\" style={{ width: \"100%\" }} aria-label=\"sticky table\" >\r\n                                <TableBody>\r\n                                \r\n\r\n                               \r\n\r\n\r\n                                    {this.state.symbolList ? this.state.symbolList.map((row, i) => (\r\n                                        <TableRow selected={this.state.cursor === i ? 'active' : null} \r\n                                            // onKeyDown={(e) => this.handleKeyDown(e)}\r\n                                         style={{cursor:\"pointer\"}} hover key={i} onClick={() => this.showStaticChart(row.token, row.symbol)}>\r\n\r\n                                            {/* <TableCell >{row.upperCircuitLimit}</TableCell>\r\n                                            <TableCell >{row.lowerCircuitLimit}</TableCell> */}\r\n\r\n                                            {/* <TableCell style={{ background: row.highlightbuy ? \"lightgray\" : \"\" }} >\r\n                                                {row.buytosellTime ? row.buytosellTime +\" time buy\" : \"\"}\r\n                                            </TableCell>\r\n                                            <TableCell style={{ background: row.highlightsell ? \"lightgray\" : \"\" }} >\r\n                                                {row.selltobuyTime ? row.selltobuyTime+\" time sell\" : \"\"} \r\n                                            </TableCell> */}\r\n\r\n                                            <TableCell title=\"total buying bids qty\"  style={{ background: row.highlightbuy ? \"#FFFF00\" : \"\" }}  >\r\n                                                    {/* {row.buybidHistory &&  row.buybidHistory.map(item => (\r\n                                                        <span style={{color: item>0 ? \"green\" : \"red\"}}> {item}% </span>\r\n                                                    ))} */}\r\n                                                {row.buytosellTime ? `B: ${row.buytosellTime}` : \"\"}\r\n\r\n                                                {/* &nbsp; {row.totalBuyQuantity}  */}\r\n                                                {this.convertToFloat(row.totalBuyQuantity)}\r\n\r\n                                            </TableCell>\r\n                                            <TableCell align=\"left\" style={{ background: this.getPercentageColor(row.pChange)  }} >    {row.name} {row.ltp} {row.pChange ? `(${row.pChange}%)` : \"\"} </TableCell>\r\n                                            <TableCell title=\"Average Price\" style={{height:'25px', background: row.ltp ? row.ltp >= row.averagePrice ? \"green\" : \"red\" : \"white\"}}>AP:{row.averagePrice}</TableCell>\r\n\r\n\r\n                                            <TableCell title=\"total selling bid qty\" style={{ background: row.highlightsell ? \"#FFFF00\" : \"\" }}>\r\n                                                    {/* {row.sellbidHistory &&  row.sellbidHistory.map(item => (\r\n                                                        <span style={{color: item>0 ? \"green\" : \"red\"}}> {item}% </span>\r\n                                                    ))} */}\r\n                                            {row.selltobuyTime ? `S: ${row.selltobuyTime}` : \"\"} \r\n\r\n                                            {/* &nbsp; {row.totalSellQuantity}  */}\r\n                                            {this.convertToFloat(row.totalSellQuantity)}\r\n                                  \r\n                                            </TableCell>\r\n                                            <TableCell  title=\"Open Price\">O:{row.openPrice}</TableCell>\r\n                                            <TableCell  title=\"High Price\">H:{row.highPrice}</TableCell>\r\n                                            <TableCell title=\"Low Price\" >L:{row.lowPrice}</TableCell>\r\n\r\n                                            {/* <TableCell >{row.quantityTraded} {this.convertToFloat(row.quantityTraded)}</TableCell> */}\r\n                                            {/* <TableCell >{row.deliveryQuantity} {this.convertToFloat(row.deliveryQuantity)}</TableCell>\r\n                                            <TableCell >{row.deliveryToTradedQuantity}%</TableCell> */}\r\n\r\n                                            {/* <TableCell >{row.totalTradedVolume} {this.convertToFloat(row.totalTradedVolume)}</TableCell> */}\r\n                                            {/* <TableCell >{row.totalTradedValue}L</TableCell> */}\r\n\r\n                                            {/* <TableCell  >{row.open}</TableCell>\r\n                                                <TableCell  >{row.dayHigh}</TableCell>\r\n                                                <TableCell  >{row.dayLow}</TableCell>\r\n                                                <TableCell  >{row.previousClose}</TableCell> */}\r\n\r\n                                            {/* <TableCell style={{ background: \"#eceff1\" }} >\r\n\r\n                                                {row.delHistory && row.delHistory.map(item => (\r\n                                                    <span> {new Date(item.datetime).toLocaleDateString()}  &nbsp;\r\n                                                        <span title={\"quantityTraded \" + item.quantityTraded}> {(item.quantityTraded / 100000)}L  </span>  &nbsp;\r\n                                                        <span title={\"deliveryToTradedQuantity\"}> {item.deliveryToTradedQuantity}%  </span>  &nbsp;\r\n                                                        <span title={\"deliveryQuantity \" + item.deliveryQuantity}> {(item.deliveryQuantity / 100000)}L  </span>  &nbsp;\r\n                                                        <span style={{ color: item.todayChange > 0 ? \"green\" : \"red\" }}> ({item.todayChange}%)   </span>\r\n                                                        &nbsp;  <br /></span>\r\n                                                ))}\r\n\r\n                                            </TableCell> */}\r\n\r\n                                            {/* <TableCell >{row.bestbuyquantity}</TableCell>\r\n                                            <TableCell >{row.bestbuyprice}</TableCell>\r\n                                            <TableCell >{row.bestsellquantity}</TableCell>\r\n                                            <TableCell >{row.bestsellprice}</TableCell> */}\r\n\r\n                                               \r\n\r\n                                        </TableRow>\r\n                                    )) : <Spinner />}\r\n                                 \r\n                                    </TableBody>\r\n\r\n                             \r\n                            </Table>\r\n                            </div>\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid item xs={6} sm={6}>\r\n\r\n                        <Paper style={{ padding: \"10px\" }}>\r\n\r\n                            <Grid style={{ display: \"visible\" }} spacing={1} direction=\"row\" alignItems=\"center\" container>\r\n\r\n                                \r\n                                <Grid item xs={12} sm={12}  >\r\n\r\n                                    <Grid  spacing={1} direction=\"row\" alignItems=\"center\" container>\r\n                                        <Grid item xs={12} sm={10} > \r\n                                         <Typography><b> {this.state.lightChartSymbol} </b></Typography>\r\n\r\n                                         </Grid>\r\n                                        \r\n\r\n                                        <Grid item xs={12} sm={2} > \r\n                                         <FormControl style={styles.selectStyle} style={{ marginTop: '10px' }} >\r\n                                        <Select value={this.state.timeFrame} name=\"timeFrame\" onChange={this.onInputChange}>\r\n                                            <MenuItem value={'ONE_MINUTE'}>{'1M'}</MenuItem>\r\n                                            <MenuItem value={'FIVE_MINUTE'}>{'5M'}</MenuItem>\r\n                                            <MenuItem value={'TEN_MINUTE'}>{'10M'}</MenuItem>\r\n                                            <MenuItem value={'FIFTEEN_MINUTE'}>{'15M'}</MenuItem>\r\n                                            <MenuItem value={'THIRTY_MINUTE'}>{'30M'}</MenuItem>\r\n                                            <MenuItem value={'ONE_HOUR'}>{'1H'}</MenuItem>\r\n                                            <MenuItem value={'ONE_DAY'}>{'1D'}</MenuItem>\r\n                                        </Select>\r\n                                        </FormControl>\r\n                                    \r\n\r\n                                         </Grid>\r\n                                       \r\n                                    </Grid>\r\n                                    \r\n\r\n                                        \r\n\r\n                                    <div id=\"showChartTitle\"></div>\r\n                                    <div id=\"tvchart\"></div>\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} sm={12} style={{ overflowY: 'scroll', height: \"40vh\" }} >\r\n                                <Typography> <b> {this.state.lightChartSymbol} </b> </Typography>\r\n\r\n\r\n                                    <Table size=\"small\" aria-label=\"sticky table\" >\r\n                                        <TableHead style={{ width: \"\", whiteSpace: \"nowrap\" }} variant=\"head\">\r\n                                            <TableRow variant=\"head\" style={{ fontWeight: 'bold' }} >\r\n\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"center\">Symbol<b style={{ color: '#20d020' }}> UP({this.state.upsideMoveCount})</b> | <b style={{ color: 'red' }}> Down({this.state.downMoveCount})</b> </TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"center\">Timestamp</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"center\">Chng% </TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"center\">Open</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"center\">High</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"center\">Low</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"center\">Close </TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"center\">Volume</TableCell>\r\n\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n                                            {this.state.InstrumentHistroy && this.state.InstrumentHistroy ? this.state.InstrumentHistroy.map((row, i) => (\r\n                                                <TableRow key={i} style={{ background: (row[4] - row[1]) * 100 / row[1] >= 0.3 ? \"#20d020\" : (row[4] - row[1]) * 100 / row[1] <= -0.3 ? \"#e66e6e\" : \"none\" }} >\r\n\r\n                                                    <TableCell align=\"center\">{this.state.tradingsymbol}</TableCell>\r\n                                                    <TableCell align=\"center\">{new Date(row[0]).toLocaleString()}</TableCell>\r\n                                                    <TableCell align=\"center\"> <b>{(row[4] - row[1]) * 100 / row[1] && ((row[4] - row[1]) * 100 / row[1]).toFixed(2)}%</b></TableCell>\r\n                                                    <TableCell align=\"center\">{row[1]}</TableCell>\r\n                                                    <TableCell align=\"center\">{row[2]}</TableCell>\r\n                                                    <TableCell align=\"center\">{row[3]}</TableCell>\r\n                                                    <TableCell align=\"center\">{row[4]}</TableCell>\r\n                                                    <TableCell align=\"center\">{row[5]}</TableCell>\r\n\r\n                                                </TableRow>\r\n                                            )) : ''}\r\n\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </Grid>\r\n\r\n\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n                    \r\n                </Grid>\r\n            </React.Fragment>\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst styles = {\r\n    selectStyle: {\r\n        minWidth: '100%',\r\n        marginBottom: '10px'\r\n    }\r\n};\r\n\r\nexport default LiveBid;\r\n\r\n","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Spinner from \"react-spinner-material\";\r\nimport { w3cwebsocket } from 'websocket';\r\n//import ChartDialog from './ChartDialog';\r\nimport pako from 'pako';\r\nimport AdminService from \"../service/AdminService\";\r\nimport Notify from \"../../utils/Notify\";\r\nimport { createChart } from 'lightweight-charts';\r\nimport * as moment from 'moment';\r\nimport { resolveResponse } from \"../../utils/ResponseHandler\";\r\nimport { SMA, RSI, VWAP, BollingerBands, rsi } from 'technicalindicators';\r\nimport vwap from 'vwap';\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport \"./ViewStyle.css\";\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport CommonOrderMethod from \"../../utils/CommonMethods\";\r\n\r\n// import vwap from 'vwap';\r\n// import { SMA, RSI, VWAP, BollingerBands } from 'technicalindicators';\r\n// import SimpleExpansionPanel from \"./SimpleExpansionPanel\";\r\n// import SimpleExpansionFastMovement from \"./SimpleExpansionFastMovement\";\r\n// import LiveBidsExpantion from \"./LiveBidsExpantion\";\r\n// import WatchListTab from \"./WatchListTab\"; \r\n// import OrderWatchlist from './OrderWatchlist';\r\n\r\n\r\nclass LiveBid extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            totalWatchlist: localStorage.getItem('totalWatchlist') && JSON.parse(localStorage.getItem('totalWatchlist')) || [],\r\n            staticData: localStorage.getItem('staticData') && JSON.parse(localStorage.getItem('staticData')) || {},\r\n            selectedWatchlist: 'NIFTY BANK', //'Securities in F&O', 'NIFTY BANK'\r\n            symbolList: [],\r\n            dayhighLow: [],\r\n            actionList: localStorage.getItem('actionList') && JSON.parse(localStorage.getItem('actionList')) || [],\r\n            timeFrame: \"FIFTEEN_MINUTE\",\r\n            softedIndexList: [],\r\n            listofHighLow: localStorage.getItem('listofHighLow') && JSON.parse(localStorage.getItem('listofHighLow')) || [], \r\n            gainerList: localStorage.getItem('gainerList') && JSON.parse(localStorage.getItem('gainerList')) || [],\r\n            looserList: localStorage.getItem('looserList') && JSON.parse(localStorage.getItem('looserList')) || [],\r\n            liveCandleHistory: localStorage.getItem('liveCandleHistory') && JSON.parse(localStorage.getItem('liveCandleHistory')) || [],\r\n            cursor: 0,\r\n            volumePriceBONames:'', \r\n            candleHistoryFlag: false,\r\n            lightChartSymbol: \"Select Symbol for Chart\",\r\n            isSpeek: localStorage.getItem('isSpeek') === 'true' ? true : false,\r\n            sortedType: \"pChange\",\r\n            sluglist: {\r\n                'NIFTY 50': 'nifty',\r\n                'NIFTY AUTO': 'cnxAuto',\r\n                'NIFTY BANK': 'bankNifty',\r\n                'NIFTY ENERGY': 'cnxEnergy',\r\n                'NIFTY FIN SERVICE': 'cnxFinance',\r\n                'NIFTY FMCG': 'cnxFMCG',\r\n                'NIFTY IT': 'cnxit',\r\n                'NIFTY MEDIA': 'cnxMedia',\r\n                'NIFTY METAL': 'cnxMetal',\r\n                'NIFTY PHARMA': 'cnxPharma',\r\n                'NIFTY PSU BANK': 'cnxPSU',\r\n                'NIFTY REALTY': 'cnxRealty',\r\n                'NIFTY PVT BANK': 'niftyPvtBank',\r\n                'NIFTY CONSUMPTION': 'cnxConsumption',\r\n                'NIFTY CPSE': 'cpse',\r\n                'NIFTY INFRA': 'cnxInfra',\r\n                'NIFTY MNC': 'cnxMNC',\r\n                'NIFTY PSE': 'cnxPSE',\r\n\r\n                //  \"NIFTY HEALTHCARE\": \"niftyHealthcare\"\r\n                //'NIFTY CONSR DURBL':  \"niftyConsrDurbl\"\r\n                // 'NIFTY GROWSECT 15': 'ni15',H\r\n                // 'NIFTY COMMODITIES': 'cnxCommodities',\r\n                // 'NIFTY SERV SECTOR': 'cnxService',\r\n                // 'NIFTY100 LIQ 15': 'nseliquid',\r\n                // 'NIFTY MID LIQ 15': 'niftyMidcapLiq15',\r\n                // 'NIFTY DIV OPPS 50': 'cnxDividendOppt',\r\n                // 'NIFTY50 VALUE 20': 'nv20',\r\n                // 'NIFTY QUALITY 30': 'niftyQuality30',\r\n                // 'NIFTY50 EQL WGT': 'nifty50EqualWeight',\r\n                // 'NIFTY100 EQL WGT': 'nifty100EqualWeight',\r\n                // 'NIFTY ALPHA 50': 'niftyAlpha50',\r\n                'NIFTY NEXT 50': 'juniorNifty',\r\n                'NIFTY MIDCAP 50': 'niftyMidcap50',\r\n                'NIFTY HEALTHCARE': \"notfound\",\r\n                'NIFTY OIL AND GAS': \"notfound\",\r\n                'NIFTY 100': \"notfound\",\r\n                'HIGH BETA STOCK': \"notfound\",\r\n\r\n                'NIFTY CONSR DURBL': 'notfond'\r\n            },\r\n        };\r\n        this.updateSocketWatch = this.updateSocketWatch.bind(this);\r\n        this.nameInput = React.createRef();\r\n\r\n    }\r\n    makeConnection = (wsClint) => {\r\n        var firstTime_req = '{\"task\":\"cn\",\"channel\":\"NONLM\",\"token\":\"' + this.state.feedToken + '\",\"user\": \"' + this.state.clientcode + '\",\"acctid\":\"' + this.state.clientcode + '\"}';\r\n        wsClint.send(firstTime_req);\r\n        this.updateSocketWatch(wsClint);\r\n    }\r\n    decodeWebsocketData = (array) => {\r\n        var newarray = [];\r\n        try {\r\n            for (var i = 0; i < array.length; i++) {\r\n                newarray.push(String.fromCharCode(array[i]));\r\n            }\r\n        } catch (e) { }\r\n        //  console.log(newarray.join(''))\r\n        return newarray.join('');\r\n    }\r\n\r\n\r\n\r\n    updateSocketWatch = (wsClint) => {\r\n\r\n        var channel = this.state.symbolList.map(element => {\r\n            return 'nse_cm|' + element.token;\r\n        });\r\n        channel = channel.join('&');\r\n        var updateSocket = {\r\n            \"task\": \"mw\",\r\n            \"channel\": channel,\r\n            \"token\": this.state.feedToken,\r\n            \"user\": this.state.clientcode,\r\n            \"acctid\": this.state.clientcode\r\n        }\r\n      //  console.log(\"wsClint\", wsClint)\r\n\r\n        wsClint.send(JSON.stringify(updateSocket));\r\n    }\r\n    componentDidMount() {\r\n\r\n        window.document.title = \"WS Bid Live\";\r\n        this.setState({ symbolList: this.state.staticData[this.state.selectedWatchlist],  originalList: this.state.staticData[this.state.selectedWatchlist] }, ()=> {\r\n          \r\n\r\n           const FIVE_MIN = (1000 * 60 * 15);\r\n        //   this.waitAndDoSomething(FIVE_MIN); \r\n        this.calculateCandleVolume(); \r\n            var msToNextRounded5Min = FIVE_MIN - (Date.now() % FIVE_MIN);\r\n             msToNextRounded5Min = msToNextRounded5Min - 1000 ;\r\n\r\n             let interval = 5; \r\n             if(this.state.timeFrame == 'FIFTEEN_MINUTE')\r\n             interval = 15; \r\n             if(this.state.timeFrame == 'TEN_MINUTE')\r\n             interval = 10; \r\n             else if(this.state.timeFrame == 'FIVE_MINUTE') \r\n             interval = 5; \r\n             else if(this.state.timeFrame == 'ONE_MINUTE') \r\n             interval = 1; \r\n\r\n            var date = new Date();\r\n            let nextExec = (59 - date.getSeconds()) * 1000; \r\n            console.log(\"next59Exec\", nextExec, 'msToNextRounded5Min', msToNextRounded5Min,  new Date().toLocaleTimeString()); \r\n            setTimeout(() => {\r\n                setInterval(this.calculateCandleVolume, 60000 * interval);\r\n                console.log(\"nextExeced\",new Date().toLocaleTimeString() ); \r\n\r\n                this.calculateCandleVolume(); \r\n\r\n            }, msToNextRounded5Min);\r\n\r\n        });\r\n\r\n        var tokens = JSON.parse(localStorage.getItem(\"userTokens\"));\r\n        var feedToken = tokens && tokens.feedToken;\r\n        var userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\r\n        var clientcode = userProfile && userProfile.clientcode;\r\n        this.setState({ feedToken: feedToken, clientcode: clientcode }, function () {\r\n            this.wsClint = new w3cwebsocket('wss://omnefeeds.angelbroking.com/NestHtml5Mobile/socket/stream');\r\n            this.updateSocketDetails(this.wsClint);\r\n        });\r\n\r\n        const domElement = document.getElementById('tvchart');\r\n        document.getElementById('tvchart').innerHTML = '';\r\n\r\n        let width = window.screen.width / 3.1, height = window.screen.height / 2;\r\n        if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {\r\n            width = window.screen.width ;\r\n        }\r\n\r\n\r\n        const chart = createChart(domElement, { width: width, height: height, timeVisible: true, secondsVisible: true, });\r\n        const candleSeries = chart.addCandlestickSeries();\r\n        var smaLineSeries = chart.addLineSeries({\r\n            color: 'rgba(4, 111, 232, 1)',\r\n            lineWidth: 2,\r\n        });\r\n        var volumeSeries = chart.addHistogramSeries({\r\n            color: '#26a69a',\r\n            priceFormat: {\r\n                type: 'volume',\r\n            },\r\n            priceScaleId: '',\r\n            scaleMargins: {\r\n                top: 0.8,\r\n                bottom: 0,\r\n            },\r\n        });\r\n        this.setState({ chart: chart, candleSeries: candleSeries, smaLineSeries: smaLineSeries, volumeSeries: volumeSeries });\r\n\r\n        this.getUpdateIndexData()\r\n\r\n        var beginningTime = moment('9:15am', 'h:mma');\r\n        var endTime = moment('3:30pm', 'h:mma');\r\n        const friday = 5; // for friday\r\n        var currentTime = moment(new Date(), \"h:mma\");\r\n        const today = moment().isoWeekday();\r\n        //market hours\r\n        if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n            setInterval(() => {\r\n                if (this.state.token) {\r\n                    this.showStaticChart(this.state.token, this.state.lightChartSymbol,0);\r\n                }\r\n            }, 5000);\r\n        }\r\n\r\n        this.updatePreviousVolume(); \r\n        // setTimeout(() => {\r\n    \r\n        //     this.storeChartData();\r\n\r\n        // },1000);\r\n\r\n       // this.updateDayChartHighLow(); \r\n       \r\n    }\r\n    \r\n\r\n    takeAction = (symbol, action) => {\r\n        let isfound = this.state.actionList.length && this.state.actionList.filter(item => item.symbol === symbol);\r\n        if (!isfound.length) {\r\n            let data = { symbol: symbol, action: action, updateTime: new Date().toLocaleTimeString() };\r\n            this.setState({ actionList: [...this.state.actionList, data] }, function () {\r\n                localStorage.setItem('actionList', JSON.stringify(this.state.actionList));\r\n            //    this.speckIt(symbol + \" \" + action);\r\n\r\n                console.log(data.symbol + \" \" + data.action + \" \" + data.updateTime);\r\n                this.setState({ lastUpdateAction: data.symbol + \" \" + data.action + \" \" + data.updateTime });\r\n\r\n                window.document.title = data.symbol + \" \" + data.action + \" \" + data.updateTime;\r\n            });\r\n        }\r\n    }\r\n    updateSocketDetails = (wsClint) => {\r\n        wsClint.onopen = (res) => {\r\n            this.makeConnection(wsClint);\r\n            this.updateSocketWatch(wsClint);\r\n        }\r\n        wsClint.onmessage = (message) => {\r\n            var decoded = window.atob(message.data);\r\n            var data = this.decodeWebsocketData(pako.inflate(decoded));\r\n            var liveData = JSON.parse(data);\r\n\r\n            var symbolListArray = this.state.symbolList;\r\n            this.state.symbolList && this.state.symbolList.forEach((element, index) => {\r\n                var foundLive = liveData.filter(row => row.tk == element.token);\r\n                if (foundLive.length > 0 && foundLive[0].ltp && foundLive[0].nc) {\r\n\r\n                    symbolListArray[index].ltp = foundLive[0].ltp;\r\n                    symbolListArray[index].pChange = foundLive[0].nc;\r\n                    symbolListArray[index].totalBuyQuantity = foundLive[0].tbq;\r\n                    symbolListArray[index].totalSellQuantity = foundLive[0].tsq;\r\n                    symbolListArray[index].totalTradedVolume = foundLive[0].v;\r\n                    symbolListArray[index].averagePrice = foundLive[0].ap;\r\n                    symbolListArray[index].lowPrice = foundLive[0].lo;\r\n                    symbolListArray[index].highPrice = foundLive[0].h;\r\n                    symbolListArray[index].openPrice = foundLive[0].op;\r\n                    symbolListArray[index].volume = foundLive[0].v;\r\n\r\n                    symbolListArray[index].bestbuyquantity = foundLive[0].bq;\r\n                    symbolListArray[index].bestbuyprice = foundLive[0].bp;\r\n                    symbolListArray[index].bestsellquantity = foundLive[0].bs;\r\n                    symbolListArray[index].bestsellprice = foundLive[0].sp;\r\n                    symbolListArray[index].ltt = moment(foundLive[0].ltt,'YYYY-MM-DD HH:mm:ss').toString();\r\n\r\n                    // symbolListArray[index].upperCircuitLimit = foundLive[0].ucl;\r\n                    // symbolListArray[index].lowerCircuitLimit = foundLive[0].lcl;\r\n\r\n                    symbolListArray[index].buytosellTime = (foundLive[0].tbq / foundLive[0].tsq).toFixed(2);\r\n                    symbolListArray[index].selltobuyTime = (foundLive[0].tsq / foundLive[0].tbq).toFixed(2);\r\n\r\n                    let voldata = this.comparePreviousVolume(element.symbol, foundLive[0].v, foundLive[0].ltp, element.token,element.name ); \r\n\r\n                    let highlow =  this.updateHighLow(element.name, foundLive[0].ltp, foundLive[0].v, element.token); \r\n                    symbolListArray[index].high = highlow &&  highlow.high; \r\n                    symbolListArray[index].low = highlow &&  highlow.low; \r\n\r\n                    symbolListArray[index].highupdated = highlow &&  highlow.highupdated; \r\n                    symbolListArray[index].lowupdated = highlow &&  highlow.lowupdated; \r\n\r\n                    symbolListArray[index].volBreakoutCount = voldata.brokenCount; \r\n                    symbolListArray[index].priceVolBreakout = voldata.priceVolBreakout; \r\n                    symbolListArray[index].rsi = voldata.rsi; \r\n\r\n                    console.log('high', element.high20Candle, 'ltp', foundLive[0].ltp, new Date().toLocaleTimeString());\r\n\r\n                   if(foundLive[0].ltp >  element.high20Candle){\r\n                    element.high20Candle = foundLive[0].ltp; \r\n                    element.high20CandleFlag = true;  \r\n                    this.speckIt(element.symbol + ' higher '); \r\n                    document.title = element.symbol + ' higher ';\r\n                   }else{\r\n                    element.high20CandleFlag = false;\r\n                   }\r\n\r\n                    if (foundLive[0].tbq / foundLive[0].tsq > 2) {\r\n                        symbolListArray[index].highlightbuy = true;\r\n                        this.takeAction(element.symbol, ' buying')\r\n                    } else {\r\n                        symbolListArray[index].highlightbuy = false;\r\n                    }\r\n\r\n                    if (foundLive[0].tsq / foundLive[0].tbq > 2) {\r\n                        symbolListArray[index].highlightsell = true;\r\n                        this.takeAction(element.symbol, ' selling')\r\n\r\n                    } else {\r\n                        symbolListArray[index].highlightsell = false;\r\n                    }\r\n\r\n                    if (this.state.token == element.token) {\r\n                        this.setState({ livePrice: foundLive[0].ltp, livePChange: foundLive[0].nc })\r\n                    }\r\n\r\n                    \r\n                    // let found = []; //this.state.listofHighLow.filter(item => item.symbol == element.symbol); \r\n                    // if(found.length > 0 && foundLive[0].ltp >= 200 && foundLive[0].ltp <= 10000 && new Date().getHours() < 9 && new Date().getMinutes() <= 30){\r\n                    //     if(!localStorage.getItem(symbolListArray[index].symbol)){\r\n                    //         if(symbolListArray[index].symbol == found[0].symbol && foundLive[0].ltp > found[0].high){\r\n                    //             localStorage.setItem(symbolListArray[index].symbol, \"ok\")\r\n                    //             this.speckIt((symbolListArray[index].symbol +' previous day high broken ').toLocaleLowerCase())\r\n                    //             console.log(symbolListArray[index].name, foundLive[0].ltp, \"previous day high broken BUY\")\r\n                    //             var symbolInfo = {\r\n                    //                 token: symbolListArray[index].token,\r\n                    //                 symbol: symbolListArray[index].symbol,\r\n                    //                 qtyToTake: 1,\r\n                    //                 producttype: 'INTRADAY'\r\n                    //             }\r\n                    //             CommonOrderMethod.historyWiseOrderPlace(symbolInfo, 'BUY', \"no\", this.callbackAfterOrderDone);\r\n                    //         }\r\n                    //         if(symbolListArray[index].symbol == found[0].symbol && foundLive[0].ltp < found[0].low){\r\n                    //             localStorage.setItem(symbolListArray[index].symbol, \"ok\")\r\n                    //             this.speckIt((symbolListArray[index].symbol +' previous day low broken ').toLocaleLowerCase())\r\n                    //             console.log(symbolListArray[index].name, foundLive[0].ltp, \"previous day high broken SELL\")\r\n                    //             var symbolInfo = {\r\n                    //                 token: symbolListArray[index].token,\r\n                    //                 symbol: symbolListArray[index].symbol,\r\n                    //                 qtyToTake: 1,\r\n                    //                 producttype: 'INTRADAY'\r\n                    //             }\r\n                    //             CommonOrderMethod.historyWiseOrderPlace(symbolInfo, 'SELL', \"no\", this.callbackAfterOrderDone);\r\n                    //         }\r\n                    //     }\r\n                    // } \r\n\r\n                    if(voldata.priceVolBreakout && foundLive[0].ltp >= 200 && foundLive[0].ltp <= 10000 && new Date().getHours() > 10 && new Date().getHours() < 15){\r\n                        if(!localStorage.getItem(symbolListArray[index].symbol)){\r\n                            localStorage.setItem(symbolListArray[index].symbol, \"found at \" + new Date().toLocaleTimeString())\r\n                            this.speckIt((symbolListArray[index].symbol +' price volume Breakout ').toLocaleLowerCase())\r\n                            console.log(symbolListArray[index].name, foundLive[0].ltp,\" price volume Breakout\")\r\n                            var symbolInfo = {\r\n                                token: symbolListArray[index].token,\r\n                                symbol: symbolListArray[index].symbol,\r\n                                qtyToTake: 1,\r\n                                producttype: 'INTRADAY'\r\n                            }\r\n                            CommonOrderMethod.historyWiseOrderPlace(symbolInfo, 'BUY', \"no\", this.callbackAfterOrderDone);\r\n                            // if(symbolListArray[index].symbol == found[0].symbol && foundLive[0].ltp < found[0].low){\r\n                            //     localStorage.setItem(symbolListArray[index].symbol, \"ok\")\r\n                            //     this.speckIt((symbolListArray[index].symbol +' previous day low broken ').toLocaleLowerCase())\r\n                            //     console.log(symbolListArray[index].name, foundLive[0].ltp, \"previous day high broken SELL\")\r\n                            //     var symbolInfo = {\r\n                            //         token: symbolListArray[index].token,\r\n                            //         symbol: symbolListArray[index].symbol,\r\n                            //         qtyToTake: 1,\r\n                            //         producttype: 'INTRADAY'\r\n                            //     }\r\n                            //     CommonOrderMethod.historyWiseOrderPlace(symbolInfo, 'SELL', \"no\", this.callbackAfterOrderDone);\r\n                            // }\r\n                        }\r\n                    }\r\n                    localStorage.setItem(symbolListArray[index].symbol, \"ok\") \r\n               //     console.log(\"ws onmessage: \", foundLive[0]);\r\n\r\n                  \r\n\r\n\r\n                }\r\n            });\r\n\r\n\r\n            let shortBy = this.state.sortedType;\r\n            symbolListArray && symbolListArray.sort(function (a, b) {\r\n                return b[shortBy] - a[shortBy];\r\n            });\r\n            this.setState({ symbolList: symbolListArray }, ()=> {\r\n              //  console.log('updated',  this.state.symbolList )\r\n            });\r\n        }\r\n\r\n        wsClint.onerror = (e) => {\r\n            console.log(\"socket error\", e);\r\n            this.makeConnection(this.wsClint);\r\n        }\r\n\r\n        setInterval(() => {\r\n            console.log(\"this.wsClint\", this.wsClint)\r\n\r\n            if(this.wsClint.readyState != 1){\r\n                this.makeConnection(this.wsClint);\r\n            }\r\n\r\n            var _req = '{\"task\":\"hb\",\"channel\":\"\",\"token\":\"' + this.state.feedToken + '\",\"user\": \"' + this.state.clientcode + '\",\"acctid\":\"' + this.state.clientcode + '\"}';\r\n            console.log(\"Request :- \" + _req);\r\n            wsClint.send(_req);\r\n        }, 59000);\r\n    }\r\n\r\n    calculateRSI = (candles) => {\r\n\r\n        let closePrice = []; \r\n        candles.forEach(element => {\r\n            closePrice.push(element.p); \r\n        });\r\n\r\n    //    closePrice.slice(Math.max(closePrice.length - 14, closePrice.length))\r\n\r\n        var inputRSI = { values: closePrice, period: 14 };\r\n        var rsiValues = RSI.calculate(inputRSI);\r\n\r\n      //  console.log('calculateRSI',  candles[candles.length-1], rsiValues)\r\n\r\n        return rsiValues;  \r\n        \r\n    }\r\n\r\n    comparePreviousVolume = (symbol, volume, ltp, token, name) => {   \r\n         let liveCandleHistory = localStorage.getItem('liveCandleHistory') && JSON.parse(localStorage.getItem('liveCandleHistory')) || [];\r\n        let candle =  liveCandleHistory.filter((item) => item.s == symbol); \r\n        if(candle.length>0){\r\n            let currentCandleVol = volume - candle[candle.length-1].v;  let brokenCount=0, priceVolBreakout = 0, dayPriceVolBreakout = 0, rsi=0;\r\n            rsi = this.calculateRSI(candle); \r\n\r\n            if(currentCandleVol > candle[candle.length-1].cv){\r\n                for (let index = candle.length-1; index > 0; index--) {\r\n                    if(currentCandleVol > candle[index].cv){\r\n                        brokenCount++;\r\n                    }else{\r\n                        break; \r\n                    }\r\n                }\r\n                let lastCandleChange = (ltp - candle[candle.length-1].p) * 100/candle[candle.length-1].p; \r\n                let log = symbol + ' '+ brokenCount +\" candles volume broken with \" + lastCandleChange.toFixed(2) +'%'; \r\n               // console.log(log, candle[candle.length-1],  currentCandleVol, new Date().toLocaleTimeString() );\r\n              //  this.speckIt(log);\r\n                if(brokenCount >= 5 && (lastCandleChange >= 0.45)){ // || lastCandleChange <= -0.5\r\n                  \r\n                    if(!localStorage.getItem(symbol)){\r\n                        this.speckIt(log);\r\n                        let log = \"price and volume breakout in \" + symbol + ' with '+ brokenCount +\" candles with \" + lastCandleChange.toFixed(2) +'%'; \r\n                        console.log(log, candle[candle.length-1],  currentCandleVol, new Date().toLocaleTimeString() );\r\n                        this.setState({ volumePriceBONames : this.state.volumePriceBONames+ \" VP Buy\"+name + \"at\" + new Date().toLocaleTimeString() + '\\n' });\r\n                        this.showStaticChart(token, name, 0);\r\n                    }\r\n                    priceVolBreakout = 1;   \r\n                }\r\n                \r\n                // if( brokenCount == candle.length-1 && (lastCandleChange >= 0.5 || lastCandleChange <= -0.5)){\r\n                //     dayPriceVolBreakout = 1; \r\n                //     let log = \"Day price and volume breakout in \" + symbol + ' with '+ brokenCount +\" candles with \" + lastCandleChange.toFixed(2) +'%'; \r\n                //     console.log(log, candle[candle.length-1],  currentCandleVol, new Date().toLocaleTimeString() );\r\n                // //    this.speckIt(log);\r\n                // }\r\n            }\r\n            return {cv : currentCandleVol,  brokenCount:  brokenCount,  priceVolBreakout: priceVolBreakout, dayPriceVolBreakout: dayPriceVolBreakout,  rsi: rsi[rsi.length-1]}; \r\n        }else{\r\n            return {cv : volume,  brokenCount:  0, priceVolBreakout: 0,  dayPriceVolBreakout: 0, rsi:0}; \r\n        }\r\n    }\r\n\r\n    updateHighLow =(name, ltp, volume, token)=> {\r\n\r\n        let OriginalHist = localStorage.getItem('OriginalHist') && JSON.parse(localStorage.getItem('OriginalHist')) || [];\r\n        let stockcandle =  OriginalHist.filter((item) => item.s == name); \r\n\r\n        let candle = stockcandle.length ? stockcandle[0].d : []; \r\n\r\n        let lastCandleInfo = candle[candle.length-1]; \r\n         \r\n      //  console.log(\"previous candle before\", name, lastCandleInfo)\r\n\r\n        //['2022-03-14T12:45:00+05:30', 41.65, 41.7, 41.55, 41.7, 213369]\r\n        const timeFrameMs = (1000 * 60 * 15);\r\n        var roundOffMin = (timeFrameMs - (Date.now() % timeFrameMs))-1000;\r\n    //    console.log(\"roundOffMin\", name, roundOffMin)\r\n        \r\n\r\n        let highupdated = false, lowupdated = false; \r\n        if(roundOffMin == 0){\r\n            candle.push([moment(new Date()).format('YYYY-MM-DDTHH:mm:ss+05:30'), ltp, ltp, ltp, ltp, 0])\r\n        }else{\r\n\r\n            if(lastCandleInfo){\r\n                if(ltp > lastCandleInfo[2]){\r\n                    lastCandleInfo[2] = ltp; \r\n                }\r\n                \r\n                if(ltp < lastCandleInfo[3]){\r\n                    lastCandleInfo[3] = ltp; \r\n                }\r\n    \r\n                let intradayVol = 0, higerhigh=0, lowerlow=candle[0][3]; \r\n                for (let index = 0; index < candle.length; index++) {\r\n                    const histElement = candle[index];\r\n                    if(new Date(histElement[0]).getDate() == new Date().getDate()){\r\n                        intradayVol += histElement[5]; \r\n\r\n                        if(histElement[2] > higerhigh){\r\n                            higerhigh = histElement[2]; \r\n                        }\r\n\r\n                        if(histElement[3] < lowerlow){\r\n                            lowerlow = histElement[3]; \r\n                        }\r\n                    }\r\n                }\r\n\r\n                if(ltp > higerhigh){\r\n                    highupdated = true;\r\n                    console.log(\"higher high updated\", name, ltp, higerhigh);\r\n                    this.setState({ dayhighLow: [...this.state.dayhighLow, {name : name,token:token, type:\"dayhigh\", time: new Date().toLocaleTimeString()}]})\r\n                    this.showStaticChart(token, name, 0);\r\n                    this.speckIt(name + ' at day high'); \r\n                }\r\n                if(ltp < lowerlow){\r\n                    lowupdated = true;\r\n                    this.setState({ dayhighLow: [...this.state.dayhighLow, {name : name,token:token, type:\"daylow\", time: new Date().toLocaleTimeString()}]})\r\n                    console.log(\"lower low updated\", name, ltp, lowerlow);\r\n                    this.showStaticChart(token, name, 0);\r\n                    this.speckIt(name + ' at day low'); \r\n                }\r\n\r\n\r\n                lastCandleInfo[5] = volume -  intradayVol; \r\n            }\r\n\r\n            localStorage.setItem('OriginalHist', JSON.stringify(OriginalHist) );\r\n            return { high: lastCandleInfo && lastCandleInfo[2], low: lastCandleInfo && lastCandleInfo[3],  lowupdated: lowupdated, highupdated: highupdated };\r\n        }\r\n\r\n      //  console.log(\"previous candle after\", name, lastCandleInfo)\r\n\r\n    }\r\n\r\n    \r\n\r\n\r\n    calculateCandleVolume = (noSyncVol) => {\r\n\r\n        this.state.symbolList.forEach(element => {\r\n\r\n            let voldata = this.comparePreviousVolume(element.symbol, element.volume,element.ltp, element.token, element.name); \r\n            var data = {\r\n                s: element.symbol, \r\n                t: new Date(),     //new Date().toLocaleTimeString(\"en-GB\", { hour: \"2-digit\",minute: \"2-digit\"}), \r\n                v: element.volume, \r\n                cv: voldata.cv, \r\n                p: element.ltp, \r\n                ch:element.pChange \r\n            }\r\n            element.volBreakoutCount = voldata.brokenCount; \r\n            element.priceVolBreakout = voldata.priceVolBreakout; \r\n            element.rsi = voldata.rsi; \r\n            console.log(element.symbol , \" RSI \", voldata.rsi, new Date().toLocaleTimeString())\r\n\r\n          //  console.log(\"candle live data\",data); \r\n            this.setState({symbolList : this.state.symbolList })\r\n\r\n            this.setState({ liveCandleHistory: [...this.state.liveCandleHistory, data] }, () => {\r\n                if(noSyncVol != 'noSyncVol')\r\n                localStorage.setItem('liveCandleHistory', JSON.stringify(this.state.liveCandleHistory) )\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    callbackAfterOrderDone = (order) => {\r\n        console.log(\"order executed\", order);\r\n    }\r\n\r\n    // waitAndDoSomething =(FIVE_MIN) => {\r\n    // const msToNextRounded5Min = FIVE_MIN - (Date.now() % FIVE_MIN);\r\n    // console.log(`Waiting ${msToNextRounded5Min/60000} min. to next rounded ${FIVE_MIN}.`,new Date().toLocaleTimeString());\r\n    \r\n    //     setTimeout(() => {\r\n    //         console.log('It is now rounded 5 min', new Date().toLocaleTimeString());\r\n    //         this.calculateCandleVolume(); \r\n    //         this.waitAndDoSomething(FIVE_MIN);\r\n    //     }, msToNextRounded5Min);\r\n    // }\r\n\r\n    storeChartData =()=>{\r\n\r\n        let data = {\r\n            dtime : moment( new Date(),'YYYY-MM-DD HH:mm:ss').toString(),\r\n            symbolList : [this.state.symbolList[0]] ,\r\n            analysis: true\r\n        }\r\n\r\n        AdminService.saveCandleHistory(data)\r\n        .then((res) => {\r\n            if (res.data) {\r\n                console.log(res.data)\r\n            }\r\n        })\r\n        .catch((reject) => {\r\n        }).finally((ok) => {\r\n        })\r\n    }\r\n\r\n    getUpdateIndexData = () => {\r\n        this.setState({ softedIndexList: [] })\r\n        AdminService.allIndicesDirectJSON()\r\n            .then((res) => {\r\n\r\n                if (res.data) {\r\n\r\n                    var softedData = res.data && res.data.data;\r\n                    softedData.sort(function (a, b) {\r\n                        return b.percChange - a.percChange;\r\n                    });\r\n\r\n                    for (let index = 0; index < softedData.length; index++) {\r\n                        const element = softedData[index];\r\n                        var slugName = this.state.sluglist[element.indexName];\r\n                        if (slugName) {\r\n                            this.setState({ softedIndexList: [...this.state.softedIndexList, element] });\r\n                        }\r\n                    }\r\n\r\n                    this.makeConnection(this.wsClint)\r\n                    //  this.updateSocketWatch(this.wsClint);\r\n                }\r\n            })\r\n            .catch((reject) => {\r\n                // Notify.showError(\"All Indices API Failed\");\r\n            }).finally((ok) => {\r\n            })\r\n    }\r\n\r\n    speckIt = (text) => {\r\n        if (this.state.isSpeek) {\r\n            var msg = new SpeechSynthesisUtterance();\r\n            msg.text = text.toString();\r\n            window.speechSynthesis.speak(msg);\r\n        }\r\n    }\r\n\r\n    getPercentageColor = (percent) => {\r\n        percent = percent * 100;\r\n        var r = percent < 50 ? 255 : Math.floor(255 - (percent * 2 - 100) * 255 / 100);\r\n        var g = percent > 50 ? 255 : Math.floor((percent * 2) * 255 / 100);\r\n        return 'rgb(' + r + ',' + g + ',0)';\r\n    }\r\n\r\n    onChangeWatchlist = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value, cursor:0 }, function () {\r\n            var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n            \r\n            if (this.state.selectedWatchlist == \"gainerList\") {\r\n                watchList = localStorage.getItem('gainerList') && JSON.parse(localStorage.getItem('gainerList'));\r\n            }\r\n            if (this.state.selectedWatchlist == \"looserList\") {\r\n                watchList = localStorage.getItem('looserList') && JSON.parse(localStorage.getItem('looserList'));\r\n            }\r\n\r\n            this.setState({ symbolList: watchList, originalList: watchList}, () => watchList && this.updateSocketWatch(this.wsClint));\r\n\r\n          //  this.updateDayChartHighLow(); \r\n\r\n          if(e.target.name != 'candleHistoryFlag'){\r\n            this.updatePreviousVolume(); \r\n            this.updateOriginalHist(); \r\n          }\r\n        });\r\n    }\r\n  \r\n    updateOriginalHist= async()=> {\r\n\r\n           let OriginalHist = localStorage.getItem('OriginalHist') && JSON.parse(localStorage.getItem('OriginalHist')) || [];                                          \r\n\r\n        //    var watchList = this.state.staticData['NIFTY 100']; //NIFTY 100 Securities in F&O\r\n            var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n    \r\n            for (let index = 0; index < watchList.length; index++) { //watchList.length\r\n                const element = watchList[index];\r\n    \r\n                const format1 = \"YYYY-MM-DD HH:mm\";\r\n                let enddate = moment(new Date());\r\n                let startDate = moment(enddate, \"DD-MM-YYYY\").subtract(4, 'days');\r\n    \r\n                var data = {\r\n                    \"exchange\": \"NSE\",\r\n                    \"symboltoken\": element.token,\r\n                    \"interval\": this.state.timeFrame, //ONE_DAY FIVE_MINUTE    FIFTEEN_MINUTE\r\n                    \"fromdate\": moment(startDate).format(format1),\r\n                    \"todate\": moment(enddate).format(format1) //moment(this.state.endDate).format(format1) /\r\n                }\r\n\r\n                AdminService.getHistoryData(data).then(res => {\r\n                    let histdata = resolveResponse(res, 'noPop');\r\n                    if (histdata && histdata.data && histdata.data.length) {\r\n                        var candleData = histdata.data.slice(histdata.data.length-20, histdata.data.length);;\r\n                        let found =  OriginalHist.filter((item) => item.s == element.name); \r\n                        if(found.length > 0){\r\n                            for (let index = 0; index < OriginalHist.length; index++) {\r\n                                console.log(\"OriginalHist\", OriginalHist[index].s,  element.name); \r\n                                if(OriginalHist[index].s == element.name){\r\n                                    OriginalHist[index].d = candleData; \r\n                                }                                \r\n                            }\r\n                        }else{\r\n                            OriginalHist.push({ s:  element.name, d:  candleData })\r\n                        }\r\n\r\n                        localStorage.setItem('OriginalHist', JSON.stringify(OriginalHist) );\r\n                    } else {\r\n                        console.log(\"candle data emply\");\r\n                    }\r\n                })\r\n        \r\n              \r\n    \r\n                await new Promise(r => setTimeout(r, 310));\r\n            }\r\n    \r\n           \r\n        }\r\n    updateDayChartHighLow= async()=> {\r\n\r\n    //    var watchList = this.state.staticData['NIFTY 100']; //NIFTY 100 Securities in F&O\r\n        var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n\r\n        for (let index = 0; index < watchList.length; index++) { //watchList.length\r\n            const element = watchList[index];\r\n\r\n            const format1 = \"YYYY-MM-DD HH:mm\";\r\n            let enddate = moment(new Date());\r\n            let startDate = moment(enddate, \"DD-MM-YYYY\").subtract(7, 'days');\r\n\r\n            let found =  this.state.listofHighLow.filter(item => item.symbol == element.symbol); \r\n\r\n            if(found.length == 0){\r\n\r\n                var data = {\r\n                    \"exchange\": \"NSE\",\r\n                    \"symboltoken\": element.token,\r\n                    \"interval\": \"ONE_DAY\", //ONE_DAY FIVE_MINUTE    FIFTEEN_MINUTE\r\n                    \"fromdate\": moment(startDate).format(format1),\r\n                    \"todate\": moment(enddate).format(format1) //moment(this.state.endDate).format(format1) /\r\n                }\r\n        \r\n                AdminService.getHistoryData(data).then(res => {\r\n                    let histdata = resolveResponse(res, 'noPop');\r\n                    //console.log(\"candle history\", histdata); \r\n                    if (histdata && histdata.data && histdata.data.length) {\r\n        \r\n                        var candleData = histdata.data;\r\n                        candleData.reverse();\r\n                        //    console.log(\"candleData\",element, candleData);\r\n                        console.log(\"lastday\", element, candleData[1]);\r\n                        let lastdayinfo = candleData[1];\r\n                        \r\n                      \r\n                        let high = candleData[0][2]; \r\n                        let low = candleData[0][3]; \r\n\r\n                        if(candleData[1][2] > high){\r\n                            high = candleData[1][2];  \r\n                        }\r\n                        if(candleData[1][3] < low){\r\n                            low = candleData[1][3];  \r\n                        }\r\n\r\n                        var beginningTime = moment('9:15am', 'h:mma');\r\n                        var endTime = moment('3:30pm', 'h:mma');\r\n                        const friday = 5; // for friday\r\n                        var currentTime = moment(new Date(), \"h:mma\");\r\n                        const today = moment().isoWeekday();\r\n                        //market hours\r\n                        if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n                             high = candleData[1][2]; \r\n                             low = candleData[1][3]; \r\n\r\n                            if(candleData[2][2] > high){\r\n                                high = candleData[2][2];  \r\n                            }\r\n                            if(candleData[2][3] < low){\r\n                                low = candleData[2][3];  \r\n                            }\r\n                            // if(candleData[1]){\r\n                            //     high = candleData[1][2];  \r\n                            //     low = candleData[1][3]; \r\n                            // }\r\n                          \r\n                        }\r\n                      \r\n    \r\n                        let data = {\r\n                            symbol : element.symbol, \r\n                            high: high, \r\n                            low: low, \r\n                        }\r\n                        \r\n                        this.setState({ listofHighLow: [...this.state.listofHighLow, data] }, function(){\r\n                            console.log(\"highlow\", this.state.listofHighLow)\r\n                            localStorage.setItem(\"listofHighLow\", JSON.stringify(this.state.listofHighLow))\r\n                        });\r\n    \r\n                        // console.log(\"Open=High\", element.symbol, LtpData);                     \r\n                        //var stopLossPrice = LtpData.low - (LtpData.low * TradeConfig.perTradeStopLossPer / 100);\r\n        \r\n                        // if (LtpData.ltp > lastdayinfo[2]) {\r\n                        //    // let stopLossPrice = LtpData.low - (LtpData.low / 10) / 100;\r\n        \r\n                        //     let stopLossPrice = lastdayinfo[3] - (lastdayinfo[3] / 10) / 100;\r\n                        //     stopLossPrice = this.getMinPriceAllowTick(stopLossPrice); //stopLossPrice\r\n                        //     let perTradeExposureAmt = TradeConfig.totalCapital * TradeConfig.perTradeExposurePer / 100;\r\n                        //     let quantity = 1// Math.floor(perTradeExposureAmt / LtpData.ltp);\r\n                        //     console.log(element.symbol + 'ltp ' + LtpData.ltp, \"quantity\", quantity, \"stopLossPrice\", stopLossPrice, \"perTradeExposureAmt\", perTradeExposureAmt);\r\n                        //     var orderOption = {\r\n                        //         transactiontype: 'BUY',\r\n                        //         tradingsymbol: element.symbol,\r\n                        //         symboltoken: element.token,\r\n                        //         buyPrice: 0,\r\n                        //         quantity: quantity,\r\n                        //         stopLossPrice: stopLossPrice\r\n                        //     }\r\n                        //     let mySL = 3.5;\r\n                        //     if (LtpData.ltp >= 200 && LtpData.ltp <= 10000 && stopLossPrice && quantity) {\r\n                        //         this.placeOrderMethod(orderOption);\r\n                        //     }\r\n                        // }\r\n        \r\n                    } else {\r\n                        //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                        console.log(\" candle data emply\");\r\n                    }\r\n                })\r\n            }\r\n    \r\n          \r\n\r\n            await new Promise(r => setTimeout(r, 310));\r\n        }\r\n\r\n       \r\n    }\r\n\r\n    updatePreviousVolume= async()=> {\r\n\r\n        //    var watchList = this.state.staticData['NIFTY 100']; //NIFTY 100 Securities in F&O\r\n            var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n    \r\n            for (let index = 0; index < watchList.length; index++) { //watchList.length\r\n                const element = watchList[index];\r\n    \r\n                const format1 = \"YYYY-MM-DD HH:mm\";\r\n                let enddate = moment(new Date());\r\n                let startDate = moment(enddate, \"DD-MM-YYYY\").subtract(2, 'days');\r\n    \r\n                let found =  this.state.listofHighLow.filter(item => item.symbol == element.symbol); \r\n\r\n                if(found.length == 0){\r\n    \r\n                    var data = {\r\n                        \"exchange\": \"NSE\",\r\n                        \"symboltoken\": element.token,\r\n                        \"interval\": this.state.timeFrame, //ONE_DAY FIVE_MINUTE    FIFTEEN_MINUTE\r\n                        \"fromdate\": moment(startDate).format(format1),\r\n                        \"todate\": moment(enddate).format(format1) //moment(this.state.endDate).format(format1) /\r\n                    }\r\n\r\n            \r\n                    AdminService.getHistoryData(data).then(res => {\r\n                        let histdata = resolveResponse(res, 'noPop');\r\n                        //console.log(\"candle history\", histdata); \r\n\r\n\r\n\r\n                        if (histdata && histdata.data && histdata.data.length) {\r\n            \r\n                            var candleData = histdata.data.slice(histdata.data.length-20, histdata.data.length);;\r\n\r\n                            //    console.log(\"candleData\",element, candleData);\r\n\r\n                            this.deletePrevVolume(element.symbol)\r\n\r\n                            let intradayVol = 0; \r\n                            let storedPrevVol = JSON.parse(localStorage.getItem('liveCandleHistory')) && JSON.parse(localStorage.getItem('liveCandleHistory')) || [];                     \r\n                            let higher = candleData[0][2]; \r\n                            for (let index = 0; index < candleData.length; index++) {\r\n                                const histElement = candleData[index];\r\n                               \r\n                                if(new Date(histElement[0]).getDate() == new Date().getDate()){\r\n                                    intradayVol += histElement[5]; \r\n                                }\r\n\r\n                                  \r\n                                if(histElement[2] > higher){\r\n                                    higher = histElement[2];\r\n                                }\r\n                                \r\n                                var data = {\r\n                                    s: element.symbol, \r\n                                    t: histElement[0],   //new Date(histElement[0]).toLocaleTimeString(\"en-GB\", { hour: \"2-digit\",minute: \"2-digit\"}), \r\n                                    v: intradayVol, \r\n                                    cv: histElement[5], \r\n                                    p: histElement[4], \r\n                                    ch:0\r\n                                }\r\n                                storedPrevVol.push(data); \r\n                            }\r\n                            element.high20Candle = higher; \r\n                            console.log(\"high20Candle\",element.symbol, higher);\r\n\r\n                            \r\n                            localStorage.setItem('liveCandleHistory', JSON.stringify(storedPrevVol) )\r\n\r\n                        } else {\r\n                            //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                            console.log(\" candle data emply\");\r\n                        }\r\n                    })\r\n                }\r\n        \r\n              \r\n    \r\n                await new Promise(r => setTimeout(r, 310));\r\n            }\r\n    \r\n           \r\n        }\r\n\r\n    deletePrevVolume = (symbol) => {\r\n        let storedPrevVol = JSON.parse(localStorage.getItem('liveCandleHistory')) && JSON.parse(localStorage.getItem('liveCandleHistory')) || [];                     \r\n        let newData = [];                       \r\n        for (let index = 0; index < storedPrevVol.length; index++) {\r\n            const element = storedPrevVol[index];\r\n            if(symbol != element.s){\r\n                newData.push(element);\r\n            }\r\n        }\r\n        console.log(\"delete symbol data\", symbol, newData  )\r\n        localStorage.setItem('liveCandleHistory', JSON.stringify(newData) )\r\n        return true; \r\n    }\r\n    sortByColumn = (type) => {\r\n        this.state.symbolList.sort(function (a, b) {\r\n            return b[type] - a[type];\r\n        });\r\n        this.setState({ symbolList: this.state.symbolList, sortedType: type });\r\n    }\r\n\r\n    // checkLiveBids = async () => {\r\n    //     var watchList = this.state.staticData[this.state.selectedWatchlist];\r\n    //     this.setState({ symbolList: watchList});\r\n    // }\r\n    // getLTP = (symbol, token) => {\r\n    //     var data = {\r\n    //         \"exchange\": \"NSE\",\r\n    //         \"tradingsymbol\": symbol,\r\n    //         \"symboltoken\": token,\r\n    //     }\r\n    //     AdminService.getLTP(data).then(res => {\r\n    //         let data = resolveResponse(res, 'noPop');\r\n    //         var LtpData = data && data.data;\r\n\r\n    //         if (LtpData && LtpData.ltp)\r\n    //             this.setState({ InstrumentPerChange: ((LtpData.ltp - LtpData.close) * 100 / LtpData.close) });\r\n    //     })\r\n    // } \r\n\r\n    convertToDecimal = (num) => {\r\n        if (!isNaN(num)) {\r\n\r\n            return num.toFixed(2);\r\n        } else {\r\n            return num;\r\n        }\r\n    }\r\n\r\n\r\n    convertToFloat = (str) => {\r\n        if (!isNaN(str)) {\r\n            return \"(\" + ((str / 100000).toFixed(2)) + \"L)\";\r\n        }\r\n    }\r\n    onInputChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value }, function () {\r\n            //    console.log(\"time\", this.state.timeFrame);\r\n            this.showStaticChart();\r\n        });\r\n    }\r\n    handleKeyDown = (e) => {\r\n\r\n        //38 for down and 40 for up key\r\n        if (e.keyCode === 38 && this.state.cursor > 0) {\r\n            this.setState(prevState => ({ cursor: prevState.cursor - 1 }));\r\n        } else if (e.keyCode === 40 && this.state.cursor < this.state.symbolList.length - 1) {\r\n            this.setState(prevState => ({ cursor: prevState.cursor + 1 }))\r\n        }\r\n\r\n        if(this.state.cursor === this.state.symbolList.length-1){\r\n            this.setState({ cursor: 0});\r\n        }\r\n      //  console.log(\"e\", e, \"cursor\", this.state.cursor, \"this.state.symbolList.length\", this.state.symbolList.length);\r\n\r\n        setTimeout(() => {\r\n            this.updateCandleOnkey();\r\n        }, 100);\r\n\r\n    }\r\n\r\n\r\n    updateCandleOnkey = () => {\r\n        var selectedKeyRow = localStorage.getItem('selectedKeyRow') && JSON.parse(localStorage.getItem('selectedKeyRow'));\r\n        \r\n        if (selectedKeyRow && selectedKeyRow.token && selectedKeyRow.symbol) {\r\n            this.setState({ tradingsymbol: selectedKeyRow.symbol, symboltoken: selectedKeyRow.token }, function () {\r\n                this.showStaticChart(selectedKeyRow.token, selectedKeyRow.symbol, this.state.cursor);\r\n            });\r\n\r\n        }\r\n    }\r\n    handleChange = (event) => {\r\n\r\n        localStorage.setItem('isSpeek', event.target.checked);\r\n        this.setState({ isSpeek: event.target.checked }, () => {\r\n            console.log(\"isSpeek\", this.state.isSpeek, event.target.checked);\r\n        })\r\n\r\n    };\r\n    calculateSMA = (data, count) => {\r\n\r\n        //  console.log(\"smarowdata\", data, count);\r\n\r\n        var avg = function (data) {\r\n            var sum = 0;\r\n            for (var i = 0; i < data.length; i++) {\r\n                sum += data[i].close;\r\n            }\r\n            return sum / data.length;\r\n        };\r\n        var result = [];\r\n        for (var i = count - 1, len = data.length; i < len; i++) {\r\n            var val = avg(data.slice(i - count + 1, i));\r\n            result.push({ time: data[i].time, value: val });\r\n        }\r\n        return result;\r\n    }\r\n    showStaticChart = (token, symbol, index) => {\r\n\r\n        console.log('token, symbol', token, symbol)\r\n        \r\n\r\n\r\n        if (token)\r\n            this.setState({ chartStaticData: '', token: token }, function () {\r\n                console.log('reset done', token);\r\n            });\r\n\r\n        console.log(\"cursor\", this.state.cursor, \"this.state.symbolList.length\", this.state.symbolList.length);\r\n\r\n\r\n        const format1 = \"YYYY-MM-DD HH:mm\";\r\n        let beginningTime = moment('9:15am', 'h:mma');\r\n\r\n        if (this.state.timeFrame == 'ONE_MINUTE') {\r\n            var time = moment.duration(\"00:60:00\");\r\n            beginningTime = moment(new Date()).subtract(time);\r\n        }\r\n\r\n        if (this.state.candleHistoryFlag) {\r\n            var time = moment.duration(\"1000:00:00\");\r\n            if (this.state.timeFrame == 'ONE_MINUTE')\r\n                time = moment.duration(\"100:00:00\");\r\n            beginningTime = moment(new Date()).subtract(time);\r\n        }\r\n\r\n        var data = {\r\n            \"exchange\": \"NSE\",\r\n            \"symboltoken\": token || this.state.token,\r\n            \"interval\": this.state.timeFrame, //ONE_DAY FIVE_MINUTE \r\n            \"fromdate\": moment(beginningTime).format(format1),\r\n            \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n        }\r\n\r\n\r\n        AdminService.getHistoryData(data).then(res => {\r\n            let historyData = resolveResponse(res, 'noPop');\r\n            //    console.log(data); \r\n            if (historyData && historyData.data) {\r\n\r\n                var data = historyData.data;\r\n\r\n\r\n                const cdata = data.map(d => {\r\n                    return { time: new Date(d[0]).getTime(), open: parseFloat(d[1]), high: parseFloat(d[2]), low: parseFloat(d[3]), close: parseFloat(d[4]) }\r\n                });\r\n\r\n                var candleChartData = [], vwapdata = [], closeingData = [], highData = [], lowData = [], openData = [], valumeData = [], bbdata = [], volumeSeriesData = [];\r\n                data.forEach((element, loopindex) => {\r\n                    candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                    vwapdata.push([element[5], (element[2] + element[3] + element[4]) / 3]);\r\n                    closeingData.push(element[4]);\r\n                    highData.push(element[2]);\r\n                    lowData.push(element[3]);\r\n                    openData.push(element[3]);\r\n                    valumeData.push(element[5]);\r\n                    bbdata.push((element[2] + element[3] + element[4]) / 3);\r\n                    volumeSeriesData.push({ time: new Date(element[0]).getTime(), value: element[5], color: 'rgba(211, 211, 211, 1)' })\r\n\r\n                });\r\n\r\n                var input = {\r\n                    period: 20,\r\n                    values: bbdata,\r\n                    stdDev: 2\r\n                }\r\n\r\n                var bb = BollingerBands.calculate(input);\r\n                //   console.log(token, \"Bolinger band\", input, bb);\r\n\r\n                var bb = BollingerBands.calculate(input);\r\n                //  console.log(token, \"Bolinger band\", input, bb);\r\n\r\n\r\n                var inputRSI = { values: closeingData, period: 14 };\r\n                var rsiValues = RSI.calculate(inputRSI);\r\n\r\n               console.log(symbol,data[data.length-1],  \"Rsi\", inputRSI, rsiValues);\r\n             //   console.log(token, \"vwap\", vwapdata, vwap(vwapdata));\r\n            \r\n\r\n                this.setState({  lightChartSymbol: symbol, chartStaticData: cdata, bblastValue: bb[bb.length - 1], vwapvalue: vwap(vwapdata), rsiValues: rsiValues.slice(Math.max(valumeData.length - 19, 1)), valumeData: valumeData.slice(Math.max(valumeData.length - 5, 1)) }, function () {\r\n                    // candleSeries.setData(this.state.chartStaticData); \r\n                    this.state.candleSeries.setData(this.state.chartStaticData);\r\n\r\n                    this.state.volumeSeries.setData(volumeSeriesData);\r\n\r\n                    var smaData = this.calculateSMA(this.state.chartStaticData, 20);\r\n\r\n                    this.state.smaLineSeries.setData(smaData);\r\n\r\n\r\n                    this.state.chart.subscribeCrosshairMove((param) => {\r\n\r\n                        var getit = param.seriesPrices[Symbol.iterator]();\r\n\r\n                        var string = \"\";\r\n                        var change = \"\";\r\n\r\n                        for (var elem of getit) {\r\n\r\n                            if (typeof elem[1] == 'object') {\r\n                                change = (elem[1].close - elem[1].open) * 100 / elem[1].open;\r\n                                string += \" Chg%: <b>\" + change.toFixed(2) + '%</b>';\r\n                                string += \" Chg: <b>\" + (elem[1].close - elem[1].open).toFixed(2) + '</b>';\r\n                                string += \" O: <b>\" + elem[1].open + \"</b>\";\r\n                                string += \" H: <b>\" + elem[1].high + \"</b>\";\r\n                                string += \" L: <b>\" + elem[1].low + \"</b>\";\r\n                                string += \" C: <b>\" + elem[1].close + \"</b>\";\r\n                             \r\n                            } else {\r\n                                string += \" &nbsp; \" + elem[1].toFixed(2) + \" \";\r\n                            }\r\n                        }\r\n\r\n                        if (param.time)\r\n                            string += \" T: <b>\" + new Date(param.time).toLocaleString() + \"</b>\";\r\n                        else\r\n                            string += \" <b>Time: </b>\";\r\n\r\n\r\n                        const domElement = document.getElementById('showChartTitle');\r\n\r\n\r\n                        var str = \"<span style=color:green>\" + string + \"</span> \";\r\n                        if (change < 0)\r\n                            str = \"<span style=color:red>\" + string + \"</span> \";\r\n\r\n                        domElement.innerHTML = str;\r\n                    });\r\n\r\n\r\n                });\r\n\r\n                data && data.sort(function (a, b) {\r\n                    return new Date(b[0]) - new Date(a[0]);\r\n                });\r\n                if (data.length > 0) {\r\n                    localStorage.setItem('InstrumentHistroy', JSON.stringify(data));\r\n                    this.setState({ InstrumentHistroy: data });\r\n\r\n\r\n                    var upsideMoveCount = 0, downMoveCount = 0, totalSum = 0;\r\n                    data.forEach(element => {\r\n\r\n                        var per = (element[4] - element[1]) * 100 / element[1];\r\n                        if (per >= 0.3) {\r\n                            upsideMoveCount += 1;\r\n                        }\r\n                        if (per <= -0.3) {\r\n                            downMoveCount += 1;\r\n                        }\r\n\r\n                        totalSum += per;\r\n\r\n                    });\r\n                    this.setState({ downMoveCount: downMoveCount, upsideMoveCount: upsideMoveCount,cursor: index });\r\n                }\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n    findSymbol = (e) => {\r\n\r\n\r\n        let input = e.target.value; \r\n\r\n        let found =  this.state.originalList.filter(item => item.name.includes(input.toUpperCase())); \r\n        \r\n        this.setState({ symbolList : found}); \r\n\r\n        console.log(input, found);\r\n\r\n        if(!input){\r\n            this.setState({ symbolList : this.state.originalList}); \r\n        }\r\n    }\r\n    copyName =(name)=> {\r\n        navigator.clipboard\r\n        .writeText(name)\r\n        .then(() => {\r\n          Notify.showSuccess(name + \" copied\");\r\n        })\r\n        .catch(() => {\r\n          alert(\"something went wrong\");\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        // if(this.state.softedIndexList.length == 0)  {\r\n        //     this.setState({softedIndexList  : this.state.totalWatchlist})\r\n        // }\r\n        return (\r\n            <React.Fragment>\r\n                <PostLoginNavBar LoadSymbolDetails={this.LoadSymbolDetails} />\r\n                {/* <ChartDialog /> */}\r\n                <Grid direction=\"row\" container>\r\n\r\n                \r\n\r\n                    <Grid item xs={12} sm={6} >\r\n\r\n                        <Paper style={{ padding: \"10px\" }} >\r\n\r\n                            <Grid justify=\"space-between\"\r\n                                container spacing={1}>\r\n\r\n\r\n\r\n\r\n                                <Grid item xs={8} sm={6} >\r\n                                    <FormControl style={styles.selectStyle} >\r\n                                        <InputLabel htmlFor=\"gender\">Select Watchlist</InputLabel>\r\n                                        <Select value={this.state.selectedWatchlist} name=\"selectedWatchlist\" onChange={this.onChangeWatchlist}>\r\n                                            {/* <MenuItem value={\"selectall\"}>{\"Select All\"}</MenuItem> */}\r\n                                            <MenuItem value={\"gainerList\"}>{\"Gainer List (\" + this.state.gainerList.length + \")\"}</MenuItem>\r\n                                             <MenuItem value={\"looserList\"}>{\"Looser List (\" + this.state.looserList.length + \")\"}</MenuItem>\r\n                                            {this.state.softedIndexList && this.state.softedIndexList.map(element => (\r\n                                                <MenuItem style={{ color: element.percChange > 0 ? \"green\" : \"red\" }} value={element.indexName}>{element.indexName} ({element.percChange}%)</MenuItem>\r\n                                            ))\r\n                                            }\r\n                                            {/* {this.state.totalWatchlist && this.state.totalWatchlist.map(element => (\r\n                                                <MenuItem value={element}>{element}</MenuItem>\r\n                                            ))\r\n                                            } */}\r\n                                            <MenuItem value={\"Securities in F&O\"}>{\"Securities in F&O\"}</MenuItem>\r\n\r\n                                            <MenuItem value={\"High Beta Stock\"}>{\"High Beta Stock\"}</MenuItem>\r\n\r\n                                            \r\n                                        </Select>\r\n                                    </FormControl>\r\n\r\n                                    \r\n\r\n                                </Grid>\r\n                                <Grid item xs={4} sm={4} > \r\n                                <form name='keyForm' >\r\n                                    {/* <InputLabel htmlFor=\"gender\">Search</InputLabel> */}\r\n\r\n                                    <input id='keyid' name='keyid'\r\n                                        placeholder='Search: tcs'\r\n                                        onKeyDown={this.handleKeyDown} \r\n                                        onChange={this.findSymbol}\r\n                                        autofocus=\"true\"\r\n                                        type='text'\r\n                                        />\r\n                                </form>\r\n                              \r\n                                </Grid>\r\n\r\n                                <Grid item xs={4} sm={2} > \r\n                                 {/* this.calculateCandleVolume(); this.getUpdateIndexData() */}\r\n                                    <Button variant=\"\" style={{ marginRight: '20px' }} onClick={() => this.calculateCandleVolume('noSyncVol')}>Refresh</Button>                              \r\n                                </Grid>\r\n\r\n\r\n                                \r\n\r\n\r\n\r\n                                {/* <Grid item xs={12} sm={3} >\r\n                                    <Button variant=\"contained\" style={{ marginRight: '20px' }} onClick={() => this.getUpdateIndexData()}>Refresh</Button>\r\n                                    \r\n                                       <FormGroup>\r\n                                        <FormControlLabel\r\n                                        control={<Switch checked={this.state.isSpeek} onChange={this.handleChange} aria-label=\"Speek ON/OFF\" />}\r\n                                        label={this.state.isSpeek ? 'Speak Yes'  : 'Speak No'}\r\n                                        />\r\n                                    </FormGroup>\r\n                                </Grid> */}\r\n\r\n                                {/* <Grid item xs={12} sm={1} >\r\n                                    <Button variant=\"contained\" style={{ marginRight: '20px' }} onClick={() => this.backupData()}>BackUp</Button>\r\n                                </Grid>\r\n\r\n\r\n                                <Grid item xs={12} sm={1} >\r\n                                    <FormControl style={styles.selectStyle} >\r\n                                        <InputLabel htmlFor=\"gender\">Select Back Date</InputLabel>\r\n                                        <Select value={this.state.backDate} name=\"backDate\" onChange={this.onChangeBackDate}>\r\n                                            <MenuItem value={\"\"}>{\"Select Date\"}</MenuItem>\r\n                                            {this.state.backupDateList && this.state.backupDateList.map(element => (\r\n                                                <MenuItem value={element}>{element}</MenuItem>\r\n                                            ))\r\n                                            }\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid> */}\r\n\r\n\r\n\r\n                            </Grid>\r\n\r\n\r\n                            <Table size=\"small\" style={{ width: \"100%\" }} aria-label=\"sticky table\" >\r\n\r\n                                <TableHead style={{ whiteSpace: \"nowrap\" }} variant=\"head\">\r\n                                    <TableRow variant=\"head\" >\r\n\r\n                                        {/* <TableCell >US Limit</TableCell>\r\n                                        <TableCell >LS Limit</TableCell> */}\r\n\r\n                                        {/* <TableCell  ><Button onClick={() => this.sortByColumn(\"buytosellTime\")}>buyTosell(x)</Button>  </TableCell>\r\n                                        <TableCell  ><Button onClick={() => this.sortByColumn(\"selltobuyTime\")}>sellTobuy(x)</Button>  </TableCell> */}\r\n\r\n                                        <TableCell  style={{background: this.state.sortedType == 'buytosellTime'?'lightgray': \"\"}}><Button onClick={() => this.sortByColumn(\"buytosellTime\")}>Buy Bids</Button>  </TableCell>\r\n                                        <TableCell  style={{background: this.state.sortedType == 'pChange'?'lightgray': \"\"}} align=\"left\"><Button onClick={() => this.sortByColumn(\"pChange\")}> Symbol</Button> </TableCell>\r\n                                        {/* <TableCell >VWAP Price</TableCell> */}\r\n\r\n                                        <TableCell style={{background: this.state.sortedType == 'selltobuyTime'?'lightgray': \"\"}}  ><Button onClick={() => this.sortByColumn(\"selltobuyTime\")}>Sell Bids</Button>  </TableCell>\r\n                                        {/* <TableCell ><Button onClick={() => this.sortByColumn(\"volume\")}> Volume</Button>  </TableCell> */}\r\n                              \r\n                                        <TableCell style={{background: this.state.sortedType == 'volBreakoutCount'?'lightgray': \"\"}}  ><Button onClick={() => this.sortByColumn(\"volBreakoutCount\")}>Volume</Button>  </TableCell>\r\n                                        <TableCell style={{background: this.state.sortedType == 'priceVolBreakout'?'lightgray': \"\"}}  ><Button onClick={() => this.sortByColumn(\"priceVolBreakout\")}>Vol+Price</Button>  </TableCell>\r\n                                        <TableCell  style={{background: this.state.sortedType == 'rsi'?'lightgray': \"\"}} ><Button onClick={() => this.sortByColumn(\"rsi\")}>RSI</Button>  </TableCell>\r\n                                        <TableCell  style={{background: this.state.sortedType == 'highupdated'?'lightgray': \"\"}} ><Button onClick={() => this.sortByColumn(\"highupdated\")}>High</Button>  </TableCell>\r\n                                        <TableCell style={{background: this.state.sortedType == 'lowupdated'?'lightgray': \"\"}} ><Button onClick={() => this.sortByColumn(\"lowupdated\")}>Low</Button>  </TableCell>\r\n\r\n\r\n                                        <TableCell title='20 candle high'>Higher</TableCell>\r\n\r\n                                        \r\n                                        {/* <TableCell >Other Details </TableCell>\r\n                                        <TableCell >High Price</TableCell>\r\n                                        <TableCell >Low Price</TableCell> */}\r\n\r\n                                        {/* <TableCell ><Button onClick={() => this.sortByColumn(\"quantityTraded\")}> Quantity Traded</Button>  </TableCell> */}\r\n                                        {/* <TableCell  ><Button onClick={() => this.sortByColumn(\"deliveryQuantity\")}> Delivery Quantity</Button>  </TableCell>\r\n                                        <TableCell  ><Button title={\"Delivery To Traded Quantity\"} onClick={() => this.sortByColumn(\"deliveryToTradedQuantity\")}> Del To Traded Qty%</Button>  </TableCell> */}\r\n\r\n                                        {/* <TableCell  ><Button onClick={() => this.sortByColumn(\"totalTradedVolume\")}> Total Traded Volume</Button>  </TableCell> */}\r\n                                        {/* <TableCell  ><Button onClick={() => this.sortByColumn(\"totalTradedValue\")}> Total Traded Value(L)</Button>  </TableCell> */}\r\n\r\n                                        {/* <TableCell  >Day Open</TableCell>\r\n                                        <TableCell  >Day High</TableCell>\r\n                                        <TableCell  >Day Low</TableCell>\r\n                                        <TableCell  >Previous Close</TableCell> */}\r\n\r\n\r\n                                        {/* <TableCell  ><Button onClick={() => this.getDeliveryHistory()}>Delivery History</Button>  </TableCell> */}\r\n\r\n                                        {/* \r\n                                        <TableCell >Best Buy Qty</TableCell>\r\n                                        <TableCell >Best Buy Price</TableCell>\r\n                                        <TableCell >Best Sell Qty</TableCell>\r\n                                        <TableCell >Best Sell Price</TableCell> */}\r\n\r\n\r\n                                    </TableRow>\r\n                                </TableHead>\r\n\r\n                            </Table>\r\n                            <div style={{ overflow: \"auto\", maxHeight: \"650px\" }}>\r\n                                <Table size=\"small\" style={{ width: \"100%\" }} aria-label=\"sticky table\" >\r\n                                    <TableBody>\r\n\r\n                                        {this.state.symbolList ? this.state.symbolList.map((row, i) => (\r\n                                            <TableRow  onKeyDown={this.handleKeyDown}  selected={this.state.cursor === i ? 'active' : null}\r\n                                                \r\n\r\n                                                style={{ cursor: \"pointer\" }} hover key={i} >\r\n                                                 {this.state.cursor === i ? localStorage.setItem(\"selectedKeyRow\", JSON.stringify(row)) : \"\"}\r\n\r\n                                                {/* <TableCell >{row.upperCircuitLimit}</TableCell>\r\n                                            <TableCell >{row.lowerCircuitLimit}</TableCell> */}\r\n\r\n                                                {/* <TableCell style={{ background: row.highlightbuy ? \"lightgray\" : \"\" }} >\r\n                                                {row.buytosellTime ? row.buytosellTime +\" time buy\" : \"\"}\r\n                                            </TableCell>\r\n                                            <TableCell style={{ background: row.highlightsell ? \"lightgray\" : \"\" }} >\r\n                                                {row.selltobuyTime ? row.selltobuyTime+\" time sell\" : \"\"} \r\n                                            </TableCell> */}\r\n\r\n                                                <TableCell title=\"total buying bids qty\" style={{ background: row.highlightbuy ? \"#FFFF00\" : \"\" }}  >\r\n                                                    {/* {row.buybidHistory &&  row.buybidHistory.map(item => (\r\n                                                        <span style={{color: item>0 ? \"green\" : \"red\"}}> {item}% </span>\r\n                                                    ))} */}\r\n                                                    {row.buytosellTime ? `${row.buytosellTime}` : \"\"}x\r\n\r\n                                                    {/* &nbsp; {row.totalBuyQuantity}  */}\r\n                                                    <br />\r\n                                                    {this.convertToFloat(row.totalBuyQuantity)}\r\n\r\n                                                </TableCell>\r\n                                                <TableCell align=\"left\"  > \r\n                                                    <Button style={{ background: this.getPercentageColor(row.pChange) }} variant='contained'  onClick={() => this.showStaticChart(row.token, row.name, i)}> \r\n                                                    {i+1}.  {row.name} <br /> {row.ltp} {row.pChange ? `(${row.pChange}%)` : \"\"} \r\n\r\n                                                    </Button>\r\n\r\n\r\n                                                    <Button onClick={() => this.copyName(row.name)}> copy </Button> \r\n                                                </TableCell>\r\n                                                <TableCell title=\"Average Price\" style={{ height: '25px', background: row.ltp ? row.ltp >= row.averagePrice ? \"green\" : \"red\" : \"white\" }}>AP<br />{row.averagePrice}</TableCell>\r\n\r\n\r\n                                                <TableCell title=\"total selling bid qty\" style={{ background: row.highlightsell ? \"#FFFF00\" : \"\" }}>\r\n                                                    {/* {row.sellbidHistory &&  row.sellbidHistory.map(item => (\r\n                                                        <span style={{color: item>0 ? \"green\" : \"red\"}}> {item}% </span>\r\n                                                    ))} */}\r\n                                                    {row.selltobuyTime ? `${row.selltobuyTime}` : \"\"}x\r\n\r\n                                                    {/* &nbsp; {row.totalSellQuantity}  */}\r\n                                                    <br />\r\n                                                    {this.convertToFloat(row.totalSellQuantity)}\r\n\r\n                                                </TableCell>\r\n                                                {/* <TableCell title=\"Open Price\">O:{row.openPrice}</TableCell>\r\n                                                <TableCell title=\"High Price\">H:{row.highPrice}</TableCell>\r\n                                                <TableCell title=\"Low Price\" >L:{row.lowPrice}</TableCell>\r\n                                                <TableCell title=\"volume\" >{row.volume}</TableCell> */}\r\n\r\n                                                <TableCell title=\"vbc\" > {row.volBreakoutCount ? 'V: '+row.volBreakoutCount : '-'}  </TableCell>\r\n                                                <TableCell title=\"v+P breakout\" style={{ background: row.priceVolBreakout ? \"#FFFF00\" : \"\" }} > {row.priceVolBreakout ? \"VP: Yes\": \"-\"}\r\n                                                {row.dayPriceVolBreakout ? \"Day VP\" : ''}\r\n                                                </TableCell>\r\n                                                <TableCell title=\"vbc\" > {row.rsi ? 'RSI: '+row.rsi : '-'}</TableCell>\r\n                                                <TableCell style={{ background: row.highupdated ? \"green\" : \"\" }}  title={this.state.timeFrame + '\\s high'} > {row.high ? row.high : '-'}</TableCell>\r\n                                                <TableCell style={{ background: row.lowupdated ? \"red\" : \"\" }}  title={this.state.timeFrame + '\\s low'} > {row.high ? row.low : '-'}</TableCell>\r\n\r\n\r\n\r\n                                                {/* <TableCell >{row.quantityTraded} {this.convertToFloat(row.quantityTraded)}</TableCell> */}\r\n                                                {/* <TableCell >{row.deliveryQuantity} {this.convertToFloat(row.deliveryQuantity)}</TableCell>\r\n                                            <TableCell >{row.deliveryToTradedQuantity}%</TableCell> */}\r\n                                                <TableCell style={{ background: row.high20CandleFlag ? \"#FFFF00\" : \"\" }} title='20 candle high'  >{row.high20Candle}</TableCell>\r\n\r\n                                                {/* <TableCell >{row.totalTradedVolume} {this.convertToFloat(row.totalTradedVolume)}</TableCell> */}\r\n                                                {/* <TableCell >{row.totalTradedValue}L</TableCell> */}\r\n\r\n                                                {/* <TableCell  >{row.open}</TableCell>\r\n                                                <TableCell  >{row.dayHigh}</TableCell>\r\n                                                <TableCell  >{row.dayLow}</TableCell>\r\n                                                <TableCell  >{row.previousClose}</TableCell> */}\r\n\r\n                                                {/* <TableCell style={{ background: \"#eceff1\" }} >\r\n\r\n                                                {row.delHistory && row.delHistory.map(item => (\r\n                                                    <span> {new Date(item.datetime).toLocaleDateString()}  &nbsp;\r\n                                                        <span title={\"quantityTraded \" + item.quantityTraded}> {(item.quantityTraded / 100000)}L  </span>  &nbsp;\r\n                                                        <span title={\"deliveryToTradedQuantity\"}> {item.deliveryToTradedQuantity}%  </span>  &nbsp;\r\n                                                        <span title={\"deliveryQuantity \" + item.deliveryQuantity}> {(item.deliveryQuantity / 100000)}L  </span>  &nbsp;\r\n                                                        <span style={{ color: item.todayChange > 0 ? \"green\" : \"red\" }}> ({item.todayChange}%)   </span>\r\n                                                        &nbsp;  <br /></span>\r\n                                                ))}\r\n\r\n                                            </TableCell> */}\r\n\r\n                                                {/* <TableCell >{row.bestbuyquantity}</TableCell>\r\n                                            <TableCell >{row.bestbuyprice}</TableCell>\r\n                                            <TableCell >{row.bestsellquantity}</TableCell>\r\n                                            <TableCell >{row.bestsellprice}</TableCell> */}\r\n\r\n\r\n\r\n                                            </TableRow>\r\n                                        )) : <Spinner />}\r\n\r\n                                    </TableBody>\r\n\r\n\r\n                                </Table>\r\n                            </div>\r\n\r\n                            <hr />\r\n                            <Grid item xs={12} sm={12} >\r\n                                {/* <Typography color=\"primary\" gutterBottom>\r\n                                      {this.state.selectedWatchlist} ({this.state.symbolList.length})  \r\n                                      \r\n                                      \r\n                                    </Typography> */}\r\n\r\n                                <span>Sorted By:  {this.state.sortedType} </span> <br />\r\n                                <span>Update: {this.state.lastUpdateAction} </span>\r\n\r\n\r\n\r\n                               \r\n                            </Grid>\r\n\r\n                            <Grid item xs={6} sm={6} >\r\n\r\n                                <FormGroup>\r\n                                    <FormControlLabel\r\n                                        control={<Switch checked={this.state.isSpeek} onChange={this.handleChange} aria-label=\"Speek ON/OFF\" />}\r\n                                        label={this.state.isSpeek ? 'Speak Yes' : 'Speak No'}\r\n                                    />\r\n                                </FormGroup>\r\n                            </Grid>\r\n\r\n\r\n\r\n                        </Paper>\r\n\r\n\r\n\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n\r\n                        <Paper style={{ padding: \"10px\" }}>\r\n\r\n                            <Grid style={{ display: \"visible\" }} spacing={1} direction=\"row\" alignItems=\"center\" container>\r\n\r\n\r\n                                <Grid item xs={12} sm={12}  >\r\n\r\n                                    <Grid spacing={1} direction=\"row\" alignItems=\"center\" container>\r\n                                        <Grid item xs={10} sm={8} >\r\n                                            <Typography> {this.state.lightChartSymbol} {this.state.livePrice} {this.state.livePChange ? `(${this.state.livePChange}%)` : \"\"}  </Typography>\r\n\r\n                                        </Grid>\r\n\r\n\r\n                                        <Grid item xs={2} sm={2} >\r\n                                            <FormControl style={styles.selectStyle} style={{ marginTop: '10px' }} >\r\n                                            <InputLabel htmlFor=\"candleHistoryFlag\">Time</InputLabel>\r\n\r\n                                                <Select value={this.state.timeFrame} name=\"timeFrame\" onChange={this.onInputChange}>\r\n                                                    <MenuItem value={'ONE_MINUTE'}>{'1M'}</MenuItem>\r\n                                                    <MenuItem value={'FIVE_MINUTE'}>{'5M'}</MenuItem>\r\n                                                    <MenuItem value={'TEN_MINUTE'}>{'10M'}</MenuItem>\r\n                                                    <MenuItem value={'FIFTEEN_MINUTE'}>{'15M'}</MenuItem>\r\n                                                    <MenuItem value={'THIRTY_MINUTE'}>{'30M'}</MenuItem>\r\n                                                    <MenuItem value={'ONE_HOUR'}>{'1H'}</MenuItem>\r\n                                                    <MenuItem value={'ONE_DAY'}>{'1D'}</MenuItem>\r\n                                                </Select>\r\n                                            </FormControl>\r\n\r\n\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={2} sm={2} >\r\n                                                <FormControl style={styles.selectStyle} >\r\n                                                    <InputLabel htmlFor=\"candleHistoryFlag\">History</InputLabel>\r\n                                                    <Select title='History' value={this.state.candleHistoryFlag} name=\"candleHistoryFlag\" onChange={this.onChangeWatchlist}>\r\n\r\n                                                        <MenuItem value={true}>{\"Yes\"}</MenuItem>\r\n                                                        <MenuItem value={false}>{\"No\"}</MenuItem>\r\n                                                    </Select>\r\n                                                </FormControl>\r\n                                            </Grid>\r\n                                    </Grid>\r\n\r\n\r\n\r\n\r\n                                    <div id=\"showChartTitle\"></div>\r\n                                    <div id=\"tvchart\"></div>\r\n                                </Grid>\r\n\r\n                                <Hidden xsDown>\r\n                                    <Paper style={{ padding: \"10px\" }} >\r\n\r\n                                        <b> {this.state.lightChartSymbol}</b> <br />\r\n\r\n                                        \r\n\r\n\r\n                                        <b> RSI: </b>{this.state.rsiValues && this.state.rsiValues.map((item, j) => (\r\n                                            item >= 60 ? <span style={{ color: 'green', fontWeight: \"bold\" }}> {item} &nbsp;</span> : <span style={{ color: item <= 40 ? 'red' : \"\", fontWeight: \"bold\" }}> {item} &nbsp;</span>\r\n                                        ))}\r\n\r\n\r\n                                        <br />\r\n                                        <b>Vol:</b> {this.state.valumeData && this.state.valumeData.map((item, j) => (\r\n                                            <span style={{ color: item > this.state.dailyAvgValume ? \"green\" : \"\", fontWeight: item > this.state.dailyAvgValume ? \"bold\" : \"\" }}> {(item / 100000).toFixed(2)}L &nbsp;</span>\r\n                                        ))}\r\n\r\n                                        <br />\r\n                                        {this.state.bblastValue ? <span item xs={12} sm={12} >\r\n\r\n                                            <span title=\"Green color mean price running above upper bb band\" style={{ color: this.state.livePrice >= this.state.bblastValue.upper ? \"green\" : \"\", fontWeight: \"bold\" }}>BB Upper: {this.state.bblastValue.upper.toFixed(2)}</span><br />\r\n                                            BB Middle(20 SMA): {this.state.bblastValue.middle.toFixed(2)}<br />\r\n                                            <span title=\"Green red mean price running below lower bb band\" style={{ color: this.state.livePrice <= this.state.bblastValue.lower ? \"red\" : \"\", fontWeight: \"bold\" }}>BB Lower: {this.state.bblastValue.lower.toFixed(2)}</span><br />\r\n                                        </span> : \"\"}\r\n\r\n                                        <span item xs={12} sm={12} style={{ color: this.state.livePrice > this.state.vwapvalue ? \"green\" : \"red\", fontWeight: \"bold\" }}>\r\n                                            VWAP:  {this.state.vwapvalue && this.state.vwapvalue.toFixed(2)}\r\n                                        </span>\r\n\r\n\r\n                                        <br />  <br />\r\n\r\n\r\n                                    </Paper>\r\n\r\n                                    <Paper style={{ padding: \"1\" }} >\r\n                                        <Typography> Vol+Price Breakout</Typography>\r\n                                        {this.state.volumePriceBONames}\r\n                                    </Paper>\r\n\r\n                                    <Paper style={{ padding: \"1\" }} >\r\n\r\n                                       <Typography> Day high Low</Typography>\r\n                                       {\r\n                                       this.state.dayhighLow && this.state.dayhighLow.map((item, j) => (\r\n                                            <span style={{ color: item.type == 'dayhigh' ? 'green' : \"red\" }}>{j+1}{item.name} <br /></span>\r\n                                        ))\r\n                                       }\r\n\r\n                                       \r\n\r\n                                    </Paper>\r\n                                   \r\n                                    \r\n\r\n                                    \r\n                                </Hidden>\r\n\r\n                                {/* <Grid item xs={12} sm={12} style={{ overflowY: 'scroll', height: \"40vh\" }} >\r\n                                <Typography> <b> {this.state.lightChartSymbol} </b> </Typography>\r\n\r\n\r\n                                    <Table size=\"small\" aria-label=\"sticky table\" >\r\n                                        <TableHead style={{ width: \"\", whiteSpace: \"nowrap\" }} variant=\"head\">\r\n                                            <TableRow variant=\"head\" style={{ fontWeight: 'bold' }} >\r\n\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"center\">Symbol<b style={{ color: '#20d020' }}> UP({this.state.upsideMoveCount})</b> | <b style={{ color: 'red' }}> Down({this.state.downMoveCount})</b> </TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"center\">Timestamp</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"center\">Chng% </TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"center\">Open</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"center\">High</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"center\">Low</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"center\">Close </TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" align=\"center\">Volume</TableCell>\r\n\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n                                            {this.state.InstrumentHistroy && this.state.InstrumentHistroy ? this.state.InstrumentHistroy.map((row, i) => (\r\n                                                <TableRow key={i} style={{ background: (row[4] - row[1]) * 100 / row[1] >= 0.3 ? \"#20d020\" : (row[4] - row[1]) * 100 / row[1] <= -0.3 ? \"#e66e6e\" : \"none\" }} >\r\n\r\n                                                    <TableCell align=\"center\">{this.state.tradingsymbol}</TableCell>\r\n                                                    <TableCell align=\"center\">{new Date(row[0]).toLocaleString()}</TableCell>\r\n                                                    <TableCell align=\"center\"> <b>{(row[4] - row[1]) * 100 / row[1] && ((row[4] - row[1]) * 100 / row[1]).toFixed(2)}%</b></TableCell>\r\n                                                    <TableCell align=\"center\">{row[1]}</TableCell>\r\n                                                    <TableCell align=\"center\">{row[2]}</TableCell>\r\n                                                    <TableCell align=\"center\">{row[3]}</TableCell>\r\n                                                    <TableCell align=\"center\">{row[4]}</TableCell>\r\n                                                    <TableCell align=\"center\">{row[5]}</TableCell>\r\n\r\n                                                </TableRow>\r\n                                            )) : ''}\r\n\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </Grid> */}\r\n\r\n\r\n                            </Grid>\r\n                        </Paper>\r\n                        </Grid>\r\n\r\n\r\n\r\n\r\n                </Grid>\r\n            </React.Fragment>\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst styles = {\r\n    selectStyle: {\r\n        minWidth: '100%',\r\n        marginBottom: '10px'\r\n    }\r\n};\r\n\r\nexport default LiveBid;\r\n\r\n","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport { resolveResponse } from \"../../utils/ResponseHandler\";\r\nimport MaterialUIDateTimePicker from '../../utils/MaterialUIDateTimePicker';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport * as moment from 'moment';\r\nimport Notify from \"../../utils/Notify\";\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Spinner from \"react-spinner-material\";\r\nimport { createChart } from 'lightweight-charts';\r\nimport ChartDialog from './ChartDialog';\r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\nimport vwap from 'vwap';\r\nimport { SMA, RSI, VWAP, BollingerBands } from 'technicalindicators';\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport CsvDownload from 'react-json-to-csv'\r\n\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sumPercentage: 0,\r\n            InstrumentPerChange: \"\",\r\n            autoSearchList: [],\r\n            isDasable: false,\r\n            isError: false,\r\n            InstrumentLTP: {},\r\n            ifNotBought: true,\r\n            autoSearchTemp: [],\r\n            backTestResult: [],\r\n            backTestResultCSV: [], \r\n            backTestFlag: true,\r\n            patternType: \"VolumePrice\",  //NR4ForNextDay  NR4_SameDay NR4\r\n            symboltoken: \"\",\r\n            tradingsymbol: \"\",\r\n            buyPrice: 0,\r\n            quantity: 1,\r\n            producttype: \"INTRADAY\",\r\n            symbolList: localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')) || [],\r\n            totalWatchlist: localStorage.getItem('totalWatchlist') && JSON.parse(localStorage.getItem('totalWatchlist')) || [],\r\n            staticData: localStorage.getItem('staticData') && JSON.parse(localStorage.getItem('staticData')) || {},\r\n            selectedWatchlist: 'NIFTY BANK', //'Securities in F&O',\r\n            longExitPriceType: 4,\r\n            shortExitPriceType: 4,\r\n            candleChartData: [],\r\n            stopScaningFlag: false,\r\n            backTestResultDateRange: [],\r\n            searchFailed: 0,\r\n            timeFrame: \"FIFTEEN_MINUTE\",\r\n            cursor: '',\r\n            FoundPatternList: localStorage.getItem('FoundPatternList') && JSON.parse(localStorage.getItem('FoundPatternList')) || [],\r\n            fastMovementList: localStorage.getItem('fastMovementList') && JSON.parse(localStorage.getItem('fastMovementList')) || [],\r\n \r\n        };\r\n        this.myCallback = this.myCallback.bind(this);\r\n\r\n    }\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        var data = e.target.value;\r\n        AdminService.autoCompleteSearch(data).then(res => {\r\n            let data = res.data;\r\n            //  console.log(data);\r\n            localStorage.setItem('autoSearchTemp', JSON.stringify(data));\r\n            this.setState({ autoSearchList: data });\r\n        })\r\n\r\n    }\r\n\r\n    onInputChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value }, function () {\r\n            //    console.log(\"time\", this.state.timeFrame);\r\n            if (this.state.tradingsymbol) {\r\n                this.showStaticChart(this.state.symboltoken);\r\n            }\r\n        });\r\n    }\r\n\r\n    onChangePattern = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n\r\n        if (e.target.value == 'NR4_Daywide_daterage') {\r\n\r\n            var backTestResultDateRange = localStorage.getItem('backTestResultDateRange') && JSON.parse(localStorage.getItem('backTestResultDateRange'));\r\n\r\n            this.setState({ dateAndTypeKeys: Object.keys(backTestResultDateRange || {}), backTestResultDateRange: backTestResultDateRange });\r\n\r\n        }\r\n    }\r\n    onChangeWatchlist = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        var staticData = this.state.staticData;\r\n        this.setState({ symbolList: staticData[e.target.value] }, function () {\r\n            this.setState({ cursor: '' });\r\n        });\r\n\r\n        if (e.target.value == \"selectall\") {\r\n            this.setState({ symbolList: localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')) }, function () {\r\n                //      this.updateSocketWatch();\r\n                //  this.checkOpenEqualToLow();\r\n                this.setState({ cursor: '' });\r\n            });\r\n        }\r\n    }\r\n    checkOpenEqualToLow = async () => {\r\n\r\n        this.setState({\r\n            openEqualHighList: [], openEqualLowList: [], openEqualLowList: [], advanceShareCount: 0,\r\n            declineShareCount: 0, UnchangeShareCount: 0, volumeCrossedList: [], closeingEqualHighList: []\r\n        });\r\n\r\n\r\n        for (let index = 0; index < this.state.symbolList.length; index++) {\r\n            const element = this.state.symbolList[index];\r\n\r\n            var data = {\r\n                \"exchange\": element.exch_seg,\r\n                \"tradingsymbol\": element.symbol,\r\n                \"symboltoken\": element.token,\r\n            }\r\n            AdminService.getLTP(data).then(res => {\r\n                let data = resolveResponse(res, 'noPop');\r\n                var LtpData = data && data.data;\r\n                if (LtpData) {\r\n\r\n                    let change = ((LtpData.ltp - LtpData.close) * 100 / LtpData.close).toFixed(2);\r\n                    LtpData.nc = change;\r\n                    LtpData.symbol = element.symbol;\r\n\r\n                    this.state.symbolList[index].ltp = LtpData.ltp;\r\n                    this.state.symbolList[index].nc = change;\r\n\r\n                    if (LtpData && LtpData.open == LtpData.low) {\r\n                        console.log(\"o=l\", LtpData);\r\n                        var isfound = this.state.openEqualLowList.filter(row => row.symboltoken == element.token);\r\n                        if (!isfound.length)\r\n                            this.setState({ openEqualLowList: [...this.state.openEqualLowList, LtpData] });\r\n                    }\r\n                    console.log(element.symbol, \"ltp=newhigh\", LtpData.ltp, (LtpData.high - LtpData.high * 0.5 / 100));\r\n\r\n                    if (LtpData && LtpData.ltp >= (LtpData.high - LtpData.high * 0.5 / 100)) {\r\n                        var isfound = this.state.closeingEqualHighList.filter(row => row.symboltoken == element.token);\r\n                        if (!isfound.length)\r\n                            this.setState({ closeingEqualHighList: [...this.state.closeingEqualHighList, LtpData] });\r\n                    }\r\n\r\n                    if (LtpData && LtpData.open == LtpData.high) {\r\n                        console.log(\"o=h\", LtpData);\r\n                        var isfound = this.state.openEqualHighList.filter(row => row.symboltoken == element.token);\r\n                        if (!isfound.length)\r\n                            this.setState({ openEqualHighList: [...this.state.openEqualHighList, LtpData] });\r\n\r\n                    }\r\n\r\n                    if (LtpData.perChange > 0)\r\n                        this.setState({ advanceShareCount: this.state.advanceShareCount + 1 });\r\n                    else if (LtpData.perChange < 0)\r\n                        this.setState({ declineShareCount: this.state.declineShareCount + 1 });\r\n                    else\r\n                        this.setState({ UnchangeShareCount: this.state.UnchangeShareCount + 1 });\r\n\r\n\r\n                    this.state.symbolList && this.state.symbolList.sort(function (a, b) {\r\n                        return b.nc - a.nc;\r\n                    });\r\n                    this.setState({ symbolList: this.state.symbolList, tradingsymbol: element.symbol, symboltoken: element.token });\r\n\r\n                    //   this.dailyBasisInfoCheck(element.token, element);\r\n\r\n                    // this.checkSlowMotionStock(element.token, element);\r\n\r\n                }\r\n            })\r\n            await new Promise(r => setTimeout(r, 310));\r\n        }\r\n\r\n    }\r\n\r\n\r\n    myCallback = (date, fromDate) => {\r\n        if (fromDate === \"START_DATE\") {\r\n            this.setState({ startDate: date });\r\n        } else if (fromDate === \"END_DATE\") {\r\n            this.setState({ endDate: date });\r\n        }\r\n    };\r\n    getLTP = () => {\r\n        var data = {\r\n            \"exchange\": \"NSE\",\r\n            \"tradingsymbol\": this.state.tradingsymbol,\r\n            \"symboltoken\": this.state.symboltoken,\r\n        }\r\n        AdminService.getLTP(data).then(res => {\r\n            let data = resolveResponse(res, 'noPop');\r\n            var LtpData = data && data.data;\r\n            this.setState({ InstrumentLTP: LtpData });\r\n\r\n            if (LtpData && LtpData.ltp)\r\n                this.setState({ InstrumentPerChange: ((LtpData.ltp - LtpData.close) * 100 / LtpData.close).toFixed(2) });\r\n            //  this.dailyBasisInfoCheck(this.state.symboltoken);\r\n\r\n\r\n        })\r\n    }\r\n  \r\n\r\n\r\n    componentDidMount() {\r\n\r\n        window.document.title = \"Backtest\";\r\n        this.setState({ symbolList: this.state.staticData[this.state.selectedWatchlist] });\r\n\r\n        const domElement = document.getElementById('tvchart');\r\n        document.getElementById('tvchart').innerHTML = '';\r\n        const chart = createChart(domElement, { width: 550, height: 400, timeVisible: true, secondsVisible: true, });\r\n        const candleSeries = chart.addCandlestickSeries();\r\n        var smaLineSeries = chart.addLineSeries({\r\n            color: 'rgba(4, 111, 232, 1)',\r\n            lineWidth: 2,\r\n        });\r\n        var volumeSeries = chart.addHistogramSeries({\r\n            color: '#26a69a',\r\n            priceFormat: {\r\n                type: 'volume',\r\n            },\r\n            priceScaleId: '',\r\n            scaleMargins: {\r\n                top: 0.8,\r\n                bottom: 0,\r\n            },\r\n        });\r\n\r\n        this.setState({ chart: chart, candleSeries: candleSeries, smaLineSeries: smaLineSeries, volumeSeries: volumeSeries });\r\n    }\r\n\r\n    stopBacktesting = () => {\r\n        this.setState({ stopScaningFlag: true });\r\n    }\r\n\r\n    backTestAnyPattern = async () => {\r\n\r\n        let filename = this.state.patternType +\" \"+ this.state.selectedWatchlist +\" \"+ moment(this.state.startDate).format(\"YYYY-MM-DD\") +\" \"+ moment(this.state.endDate).format(\"YYYY-MM-DD\") +\".csv\" ; \r\n        this.setState({ backTestResult: [], backTestFlag: false, filename: filename });\r\n\r\n\r\n        console.log('filename', filename ); \r\n\r\n        if (!this.state.patternType) {\r\n            Notify.showError(\"Select pattern type\");\r\n            return;\r\n        }\r\n\r\n        if (this.state.patternType === 'NR4') {\r\n            this.backTestNR4();\r\n            return;\r\n        }\r\n        if (this.state.patternType === 'NR4Trail') {\r\n            this.backTestNR4Trail();\r\n            return;\r\n        }\r\n\r\n        if (this.state.patternType === 'NR4ForNextDay') {\r\n            this.NR4ForNextDay();\r\n            return;\r\n        }\r\n\r\n\r\n        if (this.state.patternType === 'NR4_SameDay') {\r\n            this.backTestNR4SameDay();\r\n            return;\r\n        }\r\n\r\n        if (this.state.patternType === 'StrongCandle') {\r\n            this.backtestStrongCandle();\r\n            return;\r\n        }\r\n        \r\n        if (this.state.patternType === 'VolumePrice') {\r\n            this.backtestVolumePrice();\r\n            return;\r\n        }\r\n        if (this.state.patternType === 'VolumePriceSell') {\r\n            this.backtestVolumePriceSell();\r\n            return;\r\n        }\r\n\r\n\r\n        if (this.state.patternType === 'NR4_Daywide_daterage') {\r\n\r\n            var startdate = moment(this.state.startDate);\r\n            var enddate = moment(this.state.endDate);\r\n\r\n            const currentMoment = startdate;\r\n            const endMoment = enddate;\r\n\r\n\r\n            while (currentMoment.isSameOrBefore(endMoment, 'day')) {\r\n\r\n                console.log(`Loop at ${currentMoment.format('DD-MM-YYYY')}`);\r\n\r\n                this.backTestNR4DatewiseRange(currentMoment);\r\n\r\n                if (this.state.stopScaningFlag) {\r\n                    break;\r\n                }\r\n\r\n                await new Promise(r => setTimeout(r, this.state.symbolList.length * 310));\r\n\r\n\r\n                currentMoment.add(1, 'days');\r\n            }\r\n            this.setState({ backTestFlag: true, stopScaningFlag: false });\r\n\r\n\r\n            return;\r\n        }\r\n\r\n\r\n\r\n\r\n        this.setState({ backTestResult: [], backTestFlag: false });\r\n\r\n\r\n        console.log(\"pattername\", this.state.patternType);\r\n\r\n        var watchList = this.state.symbolList; //localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')); \r\n        var runningTest = 1;\r\n        for (let index = 0; index < watchList.length; index++) {\r\n            const element = watchList[index];\r\n\r\n\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"symboltoken\": element.token,\r\n                \"interval\": \"FIFTEEN_MINUTE\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                \"fromdate\": moment(this.state.startDate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                \"todate\": moment(new Date()).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n            }\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n                //console.log(\"candle history\", histdata); \r\n                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                    var candleData = histdata.data;\r\n                    for (let index2 = 0; index2 < candleData.length - 35; index2++) {\r\n                        // var startindex = index2 * 10; \r\n                        var last10Candle = candleData.slice(index2, index2 + 10);\r\n                        var next10Candle = candleData.slice(index2 + 10, index2 + 35);\r\n\r\n                        // console.log(element.symbol, 'backside',  last10Candle, '\\n forntside',  next10Candle);\r\n\r\n                        console.log('\\n'); //&& new Date(candleData[index2][0]).toLocaleTimeString() < \"14:15:00\"\r\n                        if (last10Candle.length >= 10 && new Date(candleData[index2][0]).toLocaleTimeString() < \"14:15:00\") {\r\n                            //  console.log(element.symbol, 'findingtime', new Date(candleData[index2][0]).toLocaleTimeString()); \r\n\r\n                            switch (this.state.patternType) {\r\n                                case 'TweezerTop':\r\n                                    this.backtestTweezerTop(last10Candle, element.symbol, next10Candle);\r\n                                    break;\r\n                                case 'TweezerBottom':\r\n                                    this.backtestTweezerBottom(last10Candle, element.symbol, next10Candle);\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n\r\n                        }\r\n                        runningTest += candleData.length;\r\n                    }\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(\" candle data emply\");\r\n                }\r\n            })\r\n            await new Promise(r => setTimeout(r, 300));\r\n            this.setState({ stockTesting: index + 1 + \". \" + element.symbol, runningTest: runningTest })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    NR4ForNextDay = async () => {\r\n\r\n        this.setState({ FoundPatternList: [], backTestFlag: false });\r\n\r\n        var watchList = this.state.symbolList //localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')); \r\n        var runningTest = 1, sumPercentage = 0;\r\n        for (let index = 0; index < watchList.length; index++) {\r\n            const element = watchList[index];\r\n\r\n\r\n            if (this.state.stopScaningFlag) {\r\n                break;\r\n            }\r\n\r\n            this.setState({ stockTesting: index + 1 + \". \" + element.symbol })\r\n\r\n\r\n\r\n            var time = moment.duration(\"240:00:00\");\r\n            var startdate = moment(this.state.endDate).subtract(time);\r\n\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"symboltoken\": element.token,\r\n                \"interval\": \"ONE_DAY\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                \"fromdate\": moment(startdate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                \"todate\": moment(this.state.endDate).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n            }\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n                //console.log(\"candle history\", histdata); \r\n                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                    var candleData = histdata.data;\r\n                    candleData.reverse();\r\n\r\n                    // var startindex = index2 * 10; \r\n                    var last4Candle = candleData.slice(0, 4);\r\n                    // var next10Candle = candleData.slice(index2+5 , index2+35 );    \r\n\r\n                    // console.log(element.symbol, 'backside',  last10Candle, '\\n forntside',  next10Candle);\r\n\r\n                    //&& new Date(candleData[index2][0]).toLocaleTimeString() < \"14:15:00\"\r\n                    if (last4Candle.length >= 4) {\r\n\r\n                        //last4Candle.reverse();\r\n\r\n                        var rangeArr = [], candleChartData = [];\r\n                        last4Candle.forEach(element => {\r\n                            rangeArr.push(element[2] - element[3]);\r\n                            candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                        });\r\n                        var firstElement = rangeArr[0], rgrangeCount = 0;\r\n                        rangeArr.forEach(element => {\r\n                            if (firstElement <= element) {\r\n                                firstElement = element;\r\n                                rgrangeCount += 1;\r\n                            }\r\n                        });\r\n\r\n                        if (rgrangeCount == 4) {\r\n                            var firstCandle = last4Candle[0];\r\n                            var next5thCandle = candleData[0];\r\n\r\n\r\n                            console.log(element.symbol, last4Candle, rangeArr, rgrangeCount, next5thCandle);\r\n\r\n                            //var buyentry = (firstCandle[2] + (firstCandle[2] - firstCandle[3])/4).toFixed(2);\r\n                            var buyentry = (firstCandle[2] + (firstCandle[2] / 100 / 10)).toFixed(2);\r\n\r\n                            //var sellenty = (firstCandle[3] - (firstCandle[2] - firstCandle[3])/4).toFixed(2); \r\n                            var sellenty = (firstCandle[3] - (firstCandle[3] / 100 / 10)).toFixed(2);\r\n\r\n\r\n                            var foundStock = {\r\n                                foundAt: new Date(firstCandle[0]).toString().substr(0, 25),\r\n                                symbol: element.symbol,\r\n                                token: element.token,\r\n                                pattenName: \"NR4\",\r\n                                SellAt: sellenty,\r\n                                high: firstCandle[2],\r\n                                low: firstCandle[3],\r\n                                BuyAt: buyentry,\r\n                                candleChartData: candleChartData,\r\n                                close: firstCandle[4]\r\n                            }\r\n\r\n                            this.nr4CheckPastPerfommance(element.token, foundStock);\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(element.symbol, \" candle data emply\");\r\n                }\r\n            }).catch(error => {\r\n                Notify.showError(element.symbol + \" Candle data not found!\");\r\n            })\r\n            await new Promise(r => setTimeout(r, 350));\r\n\r\n        }\r\n        this.setState({ backTestFlag: true, stopScaningFlag: false });\r\n    }\r\n\r\n\r\n    findShortTraadeOnNextDay = (element, firstCandle, candleChartData, histdataInside) => {\r\n        var buyentry = (firstCandle[3] - (firstCandle[3] / 100 / 10));\r\n        // var buyentrySL = (firstCandle[2] + (firstCandle[2] / 100 / 10));\r\n        var buyentrySL = (buyentry + (buyentry * 1 / 100));   //1% SL\r\n\r\n\r\n        var resultCandle = [], buyEntryFlag = true, longTradeFound = {}, elementInside = '', buyHighest = histdataInside[0][3];\r\n\r\n        console.log(element.symbol, \"result candle\", histdataInside);\r\n\r\n        if (histdataInside && histdataInside.length) {\r\n\r\n            for (let index = 0; index < histdataInside.length; index++) {\r\n                const candle5min = histdataInside[index];\r\n                resultCandle.push([new Date(candle5min[0]).getTime(), candle5min[1], candle5min[2], candle5min[3], candle5min[4]]);\r\n                if (candle5min[2] < buyHighest) {\r\n                    buyHighest = candle5min[3];\r\n                }\r\n\r\n            }\r\n\r\n            for (let insideIndex = 0; insideIndex < histdataInside.length; insideIndex++) {\r\n                elementInside = histdataInside[insideIndex];\r\n\r\n                if (buyEntryFlag && elementInside[3] < buyentry) {\r\n                    console.log(element.symbol, \"taken short enty\", elementInside[3]);\r\n                    longTradeFound = {\r\n                        foundAt: \"Short-\" + new Date(elementInside[0]).toLocaleString(),\r\n                        symbol: element.symbol,\r\n                        sellEntyPrice: buyentry,\r\n                        stopLoss: buyentrySL,\r\n                        brokerageCharges: 0.06,\r\n                        quantity: Math.floor(100000 / buyentry),\r\n                        candleChartData: candleChartData,\r\n                    }\r\n                    buyEntryFlag = false;\r\n                }\r\n\r\n\r\n\r\n                var perChange = (buyentry - elementInside[3]) * 100 / buyentry;\r\n                console.log(element.symbol, \"perChange\", perChange);\r\n\r\n                //trailing sl  \r\n                // if(elementInside[3] > buyentry && plPerChng >= 0.5){            \r\n                // }\r\n\r\n                //flat 1% profit booking\r\n                if (!buyEntryFlag && perChange >= 1) {\r\n\r\n                    var sellEntyPrice = buyentry - buyentry * 1 / 100;\r\n                    longTradeFound.buyExitPrice = sellEntyPrice;\r\n                    longTradeFound.perChange = perChange;\r\n                    longTradeFound.squareOffAt = new Date(elementInside[0]).toLocaleString();\r\n                    longTradeFound.exitStatus = \"Flat_1%_Booked\";\r\n                    break;\r\n                }\r\n                console.log(element.symbol, \"high\", elementInside[2]);\r\n\r\n                if (!buyEntryFlag && elementInside[2] >= buyentrySL) {\r\n                    var perChng = (buyentry - buyentrySL) * 100 / buyentry;\r\n                    longTradeFound.buyExitPrice = buyentrySL;\r\n                    longTradeFound.perChange = perChng;\r\n                    longTradeFound.squareOffAt = new Date(elementInside[0]).toLocaleString();\r\n                    longTradeFound.exitStatus = \"SL_Hit\";\r\n                    break;\r\n                }\r\n\r\n            }\r\n\r\n            if (!buyEntryFlag && !longTradeFound.sellEntyPrice) {\r\n                var perChng = (elementInside[4] - buyentry) * 100 / buyentry;\r\n                longTradeFound.buyExitPrice = elementInside[4];\r\n                longTradeFound.perChange = perChng;\r\n                longTradeFound.squareOffAt = new Date(elementInside[0]).toLocaleString();\r\n                longTradeFound.exitStatus = \"Market_End\";\r\n            }\r\n\r\n            if (!buyEntryFlag && Math.floor(100000 / buyentry) && longTradeFound.buyExitPrice) {\r\n                var perChngOnHigh = (buyentry - buyHighest) * 100 / buyentry;\r\n                longTradeFound.highAndLow = buyHighest;\r\n                longTradeFound.perChngOnHighLow = perChngOnHigh;\r\n                longTradeFound.candleChartDataInside = resultCandle;\r\n\r\n                this.setState({ backTestResult: [...this.state.backTestResult, longTradeFound] });\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    findLongsTraadeOnNextDay = (element, firstCandle, candleChartData, histdataInside) => {\r\n        var buyentry = (firstCandle[2] + (firstCandle[2] / 100 / 10));\r\n        //        var buyentrySL = (firstCandle[3] - (firstCandle[3] / 100 / 10));\r\n        //    var buyentrySL = (buyentry - (buyentry*1/100));   //1% SL\r\n        var buyentrySL = (buyentry - (buyentry * 0.3 / 100));   //0.3% SL\r\n\r\n\r\n        var resultCandle = [], buyEntryFlag = true, firstTimeTrail = true, trailCount = 0, longTradeFound = {}, elementInside = '', buyHighest = histdataInside[0][2];\r\n\r\n\r\n        if (histdataInside && histdataInside.length) {\r\n\r\n            for (let index = 0; index < histdataInside.length; index++) {\r\n                const candle5min = histdataInside[index];\r\n                resultCandle.push([new Date(candle5min[0]).getTime(), candle5min[1], candle5min[2], candle5min[3], candle5min[4]]);\r\n                if (buyHighest < histdataInside[index][2]) {\r\n                    buyHighest = histdataInside[index][2];\r\n                }\r\n            }\r\n\r\n            for (let insideIndex = 0; insideIndex < histdataInside.length; insideIndex++) {\r\n                elementInside = histdataInside[insideIndex];\r\n\r\n                if (buyEntryFlag && elementInside[2] > buyentry) {\r\n                    longTradeFound = {\r\n                        foundAt: \"Long-\" + new Date(elementInside[0]).toLocaleString(),\r\n                        symbol: element.symbol,\r\n                        buyExitPrice: buyentry,\r\n                        stopLoss: buyentrySL,\r\n                        brokerageCharges: 0.06,\r\n                        quantity: Math.floor(100000 / buyentry),\r\n                        candleChartData: candleChartData,\r\n                    }\r\n                    buyEntryFlag = false;\r\n                }\r\n\r\n\r\n\r\n                var perChange = (elementInside[2] - buyentry) * 100 / buyentry;\r\n\r\n\r\n                //flat 1% profit booking\r\n                // if(!buyEntryFlag && perChange >= 1){\r\n                //     var sellEntyPrice = buyentry + buyentry * 1/100; \r\n                //     longTradeFound.sellEntyPrice = sellEntyPrice;\r\n                //     longTradeFound.perChange = perChange;\r\n                //     longTradeFound.squareOffAt = new Date(elementInside[0]).toLocaleString();\r\n                //     longTradeFound.exitStatus  = \"Flat_1%_Booked\"; \r\n                //     break;\r\n                // }\r\n\r\n                if (!buyEntryFlag) {\r\n\r\n                    if (firstTimeTrail && perChange >= 0.7) {\r\n                        trailCount += 1;\r\n                        var minPrice = buyentry + (buyentry * 0.1 / 100);\r\n                        longTradeFound.sellEntyPrice = minPrice;\r\n                        longTradeFound.perChange = (minPrice - buyentry) * 100 / buyentry;\r\n                        longTradeFound.squareOffAt = new Date(elementInside[0]).toLocaleString();\r\n                        longTradeFound.exitStatus = \"Trail by 0.1% \" + trailCount + \"time\";\r\n                        firstTimeTrail = false;\r\n                    } else {\r\n                        var lastTriggerprice = longTradeFound.sellEntyPrice;\r\n                        var perchngfromTriggerPrice = ((elementInside[2] - lastTriggerprice) * 100 / lastTriggerprice).toFixed(2);\r\n\r\n                        var buyExitPricePer = longTradeFound.buyExitPrice;\r\n                        var buyExitPriceMinRange = ((elementInside[2] - buyExitPricePer) * 100 / buyExitPricePer).toFixed(2);\r\n\r\n                        if (perchngfromTriggerPrice > 0.7) {\r\n                            trailCount += 1;\r\n                            minPrice = lastTriggerprice + (lastTriggerprice * 0.25 / 100);\r\n                            longTradeFound.sellEntyPrice = minPrice;\r\n                            longTradeFound.perChange = (minPrice - buyentry) * 100 / buyentry;\r\n                            longTradeFound.squareOffAt = new Date(elementInside[0]).toLocaleString();\r\n                            longTradeFound.exitStatus = \"Trail by 0.25% \" + trailCount + \"time\";\r\n\r\n                        } else if (buyExitPriceMinRange >= 0.3 && buyExitPriceMinRange <= 0.4) {\r\n                            trailCount += 1;\r\n                            minPrice = lastTriggerprice + (lastTriggerprice * 0.25 / 100);\r\n                            longTradeFound.sellEntyPrice = minPrice;\r\n                            longTradeFound.perChange = (minPrice - buyentry) * 100 / buyentry;\r\n                            longTradeFound.squareOffAt = new Date(elementInside[0]).toLocaleString();\r\n                            longTradeFound.exitStatus = \"Min range 0.3 -0.4% \" + trailCount + \"time\";\r\n                            break;\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    if (elementInside[3] <= longTradeFound.sellEntyPrice) {\r\n                        console.log(element.symbol, \"trail hit elementInside[3] <= sellEntyPrice\", elementInside[3], longTradeFound.sellEntyPrice, new Date(elementInside[0]).toLocaleString());\r\n                        break;\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                if (!buyEntryFlag && elementInside[3] <= buyentrySL) {\r\n                    console.log(element.symbol, \"SL hit elementInside[3] <= buyentrySL\", elementInside[3], buyentrySL, new Date(elementInside[0]).toLocaleString());\r\n\r\n                    var perChng = (buyentrySL - buyentry) * 100 / buyentry;\r\n                    longTradeFound.sellEntyPrice = buyentrySL;\r\n                    longTradeFound.perChange = perChng;\r\n                    longTradeFound.squareOffAt = new Date(elementInside[0]).toLocaleString();\r\n                    longTradeFound.exitStatus = \"SL_Hit\";\r\n                    break;\r\n                }\r\n\r\n            } //candle loop end\r\n\r\n            if (!buyEntryFlag && !longTradeFound.sellEntyPrice) {\r\n                var perChng = (elementInside[4] - buyentry) * 100 / buyentry;\r\n                longTradeFound.buyExitPrice = elementInside[4];\r\n                longTradeFound.perChange = perChng;\r\n                longTradeFound.squareOffAt = new Date(elementInside[0]).toLocaleString();\r\n                longTradeFound.exitStatus = \"Market_End\";\r\n            }\r\n\r\n            if (!buyEntryFlag && Math.floor(100000 / buyentry) && longTradeFound.buyExitPrice) {\r\n                var perChngOnHigh = (buyHighest - buyentry) * 100 / buyentry;\r\n                longTradeFound.highAndLow = buyHighest;\r\n                longTradeFound.perChngOnHighLow = perChngOnHigh;\r\n                longTradeFound.candleChartDataInside = resultCandle;\r\n                console.log(element.symbol, \"longTradeFound\", longTradeFound);\r\n\r\n                this.setState({ backTestResult: [...this.state.backTestResult, longTradeFound] });\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    backTestNR4SameDay = async () => {\r\n\r\n        this.setState({ backTestResult: [], backTestFlag: false, searchFailed: 0 });\r\n\r\n        var watchList = this.state.symbolList //localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')); \r\n        var runningTest = 1, sumPercentage = 0;\r\n        for (let index = 0; index < watchList.length; index++) {\r\n            const element = watchList[index];\r\n\r\n\r\n            if (this.state.stopScaningFlag) {\r\n                break;\r\n            }\r\n\r\n\r\n\r\n            var time = moment.duration(\"240:00:00\");\r\n            var startdate = moment(this.state.endDate).subtract(time);\r\n\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"symboltoken\": element.token,\r\n                \"interval\": \"ONE_DAY\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                \"fromdate\": moment(startdate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                \"todate\": moment(this.state.endDate).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n            }\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n                //console.log(\"candle history\", histdata); \r\n                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                    var candleData = histdata.data;\r\n                    candleData.reverse();\r\n\r\n                    // var startindex = index2 * 10; \r\n                    var last4Candle = candleData.slice(1, 5);\r\n                    // var next10Candle = candleData.slice(index2+5 , index2+35 );    \r\n                    // console.log(element.symbol, 'backside',  last10Candle, '\\n forntside',  next10Candle);\r\n                    //&& new Date(candleData[index2][0]).toLocaleTimeString() < \"14:15:00\"\r\n                    if (last4Candle.length >= 4) {\r\n                        //last4Candle.reverse();\r\n\r\n                        var rangeArr = [], candleChartData = [];\r\n                        last4Candle.forEach(element => {\r\n                            rangeArr.push(element[2] - element[3]);\r\n                            candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                        });\r\n                        var firstElement = rangeArr[0], rgrangeCount = 0;\r\n                        rangeArr.forEach(element => {\r\n                            if (firstElement <= element) {\r\n                                firstElement = element;\r\n                                rgrangeCount += 1;\r\n                            }\r\n                        });\r\n\r\n                        if (rgrangeCount == 4) {\r\n                            var firstCandle = last4Candle[0];\r\n                            var next5thCandle = candleData[0];\r\n                            candleChartData.unshift([next5thCandle[0], next5thCandle[1], next5thCandle[2], next5thCandle[3], next5thCandle[4]]);\r\n\r\n                            console.log(element.symbol, last4Candle, rangeArr, rgrangeCount, next5thCandle);\r\n\r\n                            var start5thdate = moment(next5thCandle[0]).set({ \"hour\": 9, \"minute\": 15 });\r\n                            var end5thdate = moment(next5thCandle[0]).set({ \"hour\": 15, \"minute\": 30 });\r\n\r\n                            var data = {\r\n                                \"exchange\": \"NSE\",\r\n                                \"symboltoken\": element.token,\r\n                                \"interval\": \"ONE_MINUTE\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                                \"fromdate\": moment(start5thdate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                                \"todate\": moment(end5thdate).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n                            }\r\n\r\n                            AdminService.getHistoryData(data).then(insideCandleRes => {\r\n                                let histdataInside = resolveResponse(insideCandleRes, 'noPop');\r\n                                histdataInside = histdataInside && histdataInside.data;\r\n\r\n                                this.findLongsTraadeOnNextDay(element, firstCandle, candleChartData, histdataInside);\r\n                                // this.findShortTraadeOnNextDay(element, firstCandle, candleChartData, histdataInside); \r\n\r\n\r\n                            }).catch(error => {\r\n                                Notify.showError(element.symbol + \" FIVE_MINUTE Candle data not found!\");\r\n                                this.setState({ searchFailed: this.state.searchFailed + 1 })\r\n                            });\r\n\r\n\r\n\r\n                            // var buyentry = (firstCandle[2] + (firstCandle[2] / 100 / 10)).toFixed(2);\r\n                            // if (next5thCandle[2] > buyentry) {\r\n                            //     var perChng = (next5thCandle[4] - buyentry) * 100 / buyentry;\r\n                            //     var perChngOnHigh = (next5thCandle[2] - buyentry) * 100 / buyentry;\r\n\r\n                            //     sumPercentage += perChng;\r\n\r\n                            //     console.log(element.symbol, firstCandle[0], \"upside\", \"same day high\", firstCandle[2], \"same day low\", firstCandle[3], \"nextdaylow\", next5thCandle[3], \"nextdayhigh\", next5thCandle[2], 'next day closing', next5thCandle[4], perChng + '%');\r\n\r\n                            //     var foundStock = {\r\n                            //         foundAt: \"Long - \" + new Date(firstCandle[0]).toLocaleString(),\r\n                            //         symbol: element.symbol,\r\n                            //         sellEntyPrice: next5thCandle[4],\r\n                            //         highAndLow: next5thCandle[2],\r\n                            //         stopLoss: firstCandle[3],\r\n                            //         buyExitPrice: buyentry,\r\n                            //         brokerageCharges: 0.06,\r\n                            //         perChange: perChng.toFixed(2),\r\n                            //         perChngOnHighLow: perChngOnHigh.toFixed(2),\r\n                            //         squareOffAt: new Date(next5thCandle[0]).toLocaleString(),\r\n                            //         quantity: Math.floor(10000 / firstCandle[2]),\r\n                            //         candleChartData : candleChartData,\r\n                            //     }\r\n                            //     if (Math.floor(10000 / firstCandle[2])){ \r\n                            //         this.setState({ backTestResult: [...this.state.backTestResult, foundStock] });\r\n                            //     }\r\n                            // }\r\n                            // var sellenty = (firstCandle[3] - (firstCandle[3] / 100 / 10)).toFixed(2);\r\n                            // if (next5thCandle[3] < sellenty) {\r\n                            //     var perChng = (sellenty - next5thCandle[4]) * 100 / firstCandle[3];\r\n                            //     var perChngOnLow = (sellenty - next5thCandle[3]) * 100 / firstCandle[3];\r\n\r\n                            //     sumPercentage += perChng;\r\n                            //     console.log(element.symbol, firstCandle[0], \"dowside\", \"same day high\", firstCandle[2], \"same day low\", firstCandle[3], \"nextdaylow\", next5thCandle[3], \"nextdayhigh\", next5thCandle[2], 'next day closing', next5thCandle[4], perChng + '%');\r\n\r\n                            //     var foundStock = {\r\n                            //         foundAt: \"Short - \" + new Date(firstCandle[0]).toLocaleString(),\r\n                            //         symbol: element.symbol,\r\n                            //         sellEntyPrice: sellenty,\r\n                            //         stopLoss: firstCandle[2],\r\n                            //         buyExitPrice: next5thCandle[4],\r\n                            //         highAndLow: next5thCandle[3],\r\n                            //         brokerageCharges: 0.06,\r\n                            //         perChange: perChng.toFixed(2),\r\n                            //         perChngOnHighLow: perChngOnLow.toFixed(2),\r\n                            //         squareOffAt: new Date(next5thCandle[0]).toLocaleString(),\r\n                            //         quantity: Math.floor(10000 / firstCandle[3]),\r\n                            //         candleChartData : candleChartData\r\n                            //     }\r\n                            //     if(Math.floor(10000 / firstCandle[3])){\r\n                            //         this.setState({ backTestResult: [...this.state.backTestResult, foundStock] });\r\n                            //     }\r\n\r\n\r\n                            // }\r\n\r\n                        }\r\n\r\n                    }\r\n                    runningTest = runningTest + candleData.length - 35;\r\n\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(element.symbol, \" candle data emply\");\r\n                    Notify.showError(element.symbol + \" FIVE_MINUTE candle data emply!\");\r\n                    this.setState({ searchFailed: this.state.searchFailed + 1 })\r\n\r\n                }\r\n            }).catch(error => {\r\n                Notify.showError(element.symbol + \" 1 day Candle data not found!\");\r\n                this.setState({ searchFailed: this.state.searchFailed + 1 })\r\n\r\n            });\r\n            await new Promise(r => setTimeout(r, 305));\r\n            //   this.setState({ backTestResult:  this.state.backTestResult.reverse()}); \r\n            this.setState({ stockTesting: index + 1 + \". \" + element.symbol, runningTest: runningTest })\r\n        }\r\n        this.setState({ backTestFlag: true, stopScaningFlag: false });\r\n        console.log(\"sumPercentage\", sumPercentage)\r\n    }\r\n\r\n    backTestNR4DatewiseRange = async (date) => {\r\n\r\n        this.setState({ backTestFlag: false });\r\n\r\n        var watchList = this.state.symbolList //localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')); \r\n        var runningTest = 1, sumPercentage = 0;\r\n        for (let index = 0; index < watchList.length; index++) {\r\n            const element = watchList[index];\r\n\r\n\r\n            if (this.state.stopScaningFlag) {\r\n                break;\r\n            }\r\n\r\n\r\n\r\n            var time = moment.duration(\"240:00:00\");\r\n            var startdate = moment(date).subtract(time);\r\n\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"symboltoken\": element.token,\r\n                \"interval\": \"ONE_DAY\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                \"fromdate\": moment(startdate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                \"todate\": moment(date).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n            }\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n                //console.log(\"candle history\", histdata); \r\n                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                    var candleData = histdata.data;\r\n                    candleData.reverse();\r\n\r\n                    // var startindex = index2 * 10; \r\n                    var last4Candle = candleData.slice(1, 5);\r\n                    // var next10Candle = candleData.slice(index2+5 , index2+35 );    \r\n\r\n                    // console.log(element.symbol, 'backside',  last10Candle, '\\n forntside',  next10Candle);\r\n\r\n                    //&& new Date(candleData[index2][0]).toLocaleTimeString() < \"14:15:00\"\r\n                    if (last4Candle.length >= 4) {\r\n\r\n                        //last4Candle.reverse();\r\n\r\n                        var rangeArr = [], candleChartData = [];\r\n                        last4Candle.forEach(element => {\r\n                            rangeArr.push(element[2] - element[3]);\r\n                            candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                        });\r\n                        var firstElement = rangeArr[0], rgrangeCount = 0;\r\n                        rangeArr.forEach(element => {\r\n                            if (firstElement <= element) {\r\n                                firstElement = element;\r\n                                rgrangeCount += 1;\r\n                            }\r\n                        });\r\n\r\n                        if (rgrangeCount == 4) {\r\n                            var firstCandle = last4Candle[0];\r\n                            var next5thCandle = candleData[0];\r\n                            candleChartData.unshift([next5thCandle[0], next5thCandle[1], next5thCandle[2], next5thCandle[3], next5thCandle[4]]);\r\n\r\n                            var currentDate = date.format('DD-MM-YYYY');\r\n\r\n                            var dateWithWlType = currentDate + ' ' + this.state.selectedWatchlist;\r\n\r\n                            var backTestResultDateRange = localStorage.getItem(\"backTestResultDateRange\") ? JSON.parse(localStorage.getItem(\"backTestResultDateRange\")) : {};\r\n                            var datewisetrades = backTestResultDateRange[dateWithWlType] ? backTestResultDateRange[dateWithWlType] : [];\r\n\r\n                            console.log(element.symbol, last4Candle, rangeArr, rgrangeCount, next5thCandle);\r\n\r\n                            //var buyentry = (firstCandle[2] + (firstCandle[2] - firstCandle[3])/4).toFixed(2);\r\n                            var buyentry = (firstCandle[2] + (firstCandle[2] / 100 / 10)).toFixed(2);\r\n\r\n                            if (next5thCandle[2] > buyentry) {\r\n                                var perChng = (next5thCandle[4] - buyentry) * 100 / buyentry;\r\n                                var perChngOnHigh = (next5thCandle[2] - buyentry) * 100 / buyentry;\r\n\r\n                                sumPercentage += perChng;\r\n\r\n                                console.log(element.symbol, firstCandle[0], \"upside\", \"same day high\", firstCandle[2], \"same day low\", firstCandle[3], \"nextdaylow\", next5thCandle[3], \"nextdayhigh\", next5thCandle[2], 'next day closing', next5thCandle[4], perChng + '%');\r\n\r\n                                var foundStock = {\r\n                                    foundAt: \"Long - \" + new Date(firstCandle[0]).toLocaleString(),\r\n                                    symbol: element.symbol,\r\n                                    sellEntyPrice: next5thCandle[4],\r\n                                    highAndLow: next5thCandle[2],\r\n                                    stopLoss: firstCandle[3],\r\n                                    buyExitPrice: buyentry,\r\n                                    brokerageCharges: 0.06,\r\n                                    perChange: perChng.toFixed(2),\r\n                                    perChngOnHighLow: perChngOnHigh.toFixed(2),\r\n                                    squareOffAt: new Date(next5thCandle[0]).toLocaleString(),\r\n                                    quantity: Math.floor(10000 / firstCandle[2]),\r\n                                    candleChartData: candleChartData\r\n                                }\r\n                                if (Math.floor(10000 / firstCandle[2])) {\r\n                                    this.setState({ backTestResult: [...this.state.backTestResult, foundStock] });\r\n\r\n                                    datewisetrades.push(foundStock);\r\n                                    backTestResultDateRange[dateWithWlType] = datewisetrades;\r\n                                    localStorage.setItem('backTestResultDateRange', JSON.stringify(backTestResultDateRange));\r\n\r\n\r\n                                }\r\n\r\n                            }\r\n                            //var sellenty = (firstCandle[3] - (firstCandle[2] - firstCandle[3])/4).toFixed(2); \r\n                            var sellenty = (firstCandle[3] - (firstCandle[3] / 100 / 10)).toFixed(2);\r\n\r\n                            if (next5thCandle[3] < sellenty) {\r\n                                var perChng = (sellenty - next5thCandle[4]) * 100 / firstCandle[3];\r\n                                var perChngOnLow = (sellenty - next5thCandle[3]) * 100 / firstCandle[3];\r\n\r\n                                sumPercentage += perChng;\r\n                                console.log(element.symbol, firstCandle[0], \"dowside\", \"same day high\", firstCandle[2], \"same day low\", firstCandle[3], \"nextdaylow\", next5thCandle[3], \"nextdayhigh\", next5thCandle[2], 'next day closing', next5thCandle[4], perChng + '%');\r\n\r\n                                var foundStock = {\r\n                                    foundAt: \"Short - \" + new Date(firstCandle[0]).toLocaleString(),\r\n                                    symbol: element.symbol,\r\n                                    sellEntyPrice: sellenty,\r\n                                    stopLoss: firstCandle[2],\r\n                                    buyExitPrice: next5thCandle[4],\r\n                                    highAndLow: next5thCandle[3],\r\n                                    brokerageCharges: 0.06,\r\n                                    perChange: perChng.toFixed(2),\r\n                                    perChngOnHighLow: perChngOnLow.toFixed(2),\r\n                                    squareOffAt: new Date(next5thCandle[0]).toLocaleString(),\r\n                                    quantity: Math.floor(10000 / firstCandle[3]),\r\n                                    candleChartData: candleChartData\r\n                                }\r\n                                if (Math.floor(10000 / firstCandle[3])) {\r\n                                    this.setState({ backTestResult: [...this.state.backTestResult, foundStock] });\r\n\r\n                                    datewisetrades.push(foundStock);\r\n                                    backTestResultDateRange[dateWithWlType] = datewisetrades;\r\n\r\n                                    console.log('backTestResultDateRange', backTestResultDateRange);\r\n                                    localStorage.setItem('backTestResultDateRange', JSON.stringify(backTestResultDateRange));\r\n\r\n                                    //  var backTestResultDateRange = localStorage.getItem('backTestResultDateRange') && JSON.parse(localStorage.getItem('backTestResultDateRange')) ; \r\n\r\n                                    this.setState({ dateAndTypeKeys: Object.keys(backTestResultDateRange), backTestResultDateRange: backTestResultDateRange });\r\n\r\n                                }\r\n\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n                    runningTest = runningTest + candleData.length - 35;\r\n\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(element.symbol, \" candle data emply\");\r\n                }\r\n            })\r\n            await new Promise(r => setTimeout(r, 300));\r\n            this.setState({ stockTesting: date.format('YYYY-MM-DD') + ' ' + index + 1 + \". \" + element.symbol, runningTest: runningTest })\r\n        }\r\n    }\r\n\r\n    backTestNR4 = async () => {\r\n\r\n        this.setState({ backTestResult: [], backTestFlag: false });\r\n\r\n        var watchList = this.state.symbolList //localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')); \r\n        var runningTest = 1, sumPercentage = 0;\r\n        for (let index = 0; index < watchList.length; index++) {\r\n            const element = watchList[index];\r\n\r\n            if (this.state.stopScaningFlag) {\r\n                this.setState({stopScaningFlag : false})\r\n                break;\r\n            }\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"symboltoken\": element.token,\r\n                \"interval\": \"ONE_DAY\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                \"fromdate\": moment(this.state.startDate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                \"todate\": moment(this.state.endDate).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n            }\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n                //console.log(\"candle history\", histdata); \r\n                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                    var candleData = histdata.data;\r\n                    //  candleData.reverse(); \r\n                    for (let index2 = 0; index2 < candleData.length - 4; index2++) {\r\n                        // var startindex = index2 * 10; \r\n                        var last4Candle = candleData.slice(index2, index2 + 4);\r\n                        // var next10Candle = candleData.slice(index2+5 , index2+35 );    \r\n\r\n                        // console.log(element.symbol, 'backside',  last10Candle, '\\n forntside',  next10Candle);\r\n\r\n                        //&& new Date(candleData[index2][0]).toLocaleTimeString() < \"14:15:00\"\r\n                        if (last4Candle.length >= 4 && new Date(candleData[index2][0]).toLocaleTimeString() < \"14:15:00\") {\r\n\r\n                            last4Candle.reverse();\r\n\r\n                            var rangeArr = [], candleChartData = [];\r\n                            last4Candle.forEach(element => {\r\n                                rangeArr.push(element[2] - element[3]);\r\n                                candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                            });\r\n                            var firstElement = rangeArr[0], rgrangeCount = 0;\r\n                            rangeArr.forEach(element => {\r\n                                if (firstElement <= element) {\r\n                                    firstElement = element;\r\n                                    rgrangeCount += 1;\r\n                                }\r\n                            });\r\n\r\n                            //  console.log(element.symbol, last4Candle, rangeArr, rgrangeCount); \r\n                            if (rgrangeCount == 4) {\r\n                                var firstCandle = last4Candle[0];\r\n                                var next5thCandle = candleData[index2 + 4];\r\n                                candleChartData.unshift([next5thCandle[0], next5thCandle[1], next5thCandle[2], next5thCandle[3], next5thCandle[4]]);\r\n\r\n                                //var buyentry = (firstCandle[2] + (firstCandle[2] - firstCandle[3])/4).toFixed(2);\r\n                                var buyentry = (firstCandle[2] + (firstCandle[2] / 100 / 10)).toFixed(2);\r\n                                var stopLoss = (firstCandle[3] - (firstCandle[3] / 100 / 10)).toFixed(2);\r\n\r\n\r\n                                if (next5thCandle[2] > buyentry) {\r\n\r\n                                    let exitPrice = next5thCandle[this.state.longExitPriceType], exitStatus = \"ME@3:30pm\";  \r\n                                    if(next5thCandle[this.state.longExitPriceType] <= stopLoss){\r\n                                        exitPrice = stopLoss; \r\n                                        exitStatus = \"SLHit\";\r\n                                    }\r\n\r\n\r\n                                    var perChng = (exitPrice - buyentry) * 100 / buyentry;\r\n                                    var perChngOnHigh = (next5thCandle[2] - buyentry) * 100 / buyentry;\r\n\r\n                                    sumPercentage += perChng;\r\n                                    console.log(element.symbol, firstCandle[0], \"upside\", \"same day high\", firstCandle[2], \"same day low\", firstCandle[3], \"nextdaylow\", next5thCandle[3], \"nextdayhigh\", next5thCandle[2], 'next day closing', next5thCandle[4], perChng + '%');\r\n                                    let slPer = ((buyentry-stopLoss)*100/buyentry).toFixed(2); \r\n\r\n\r\n                                    var monthMinusOneName =  moment(next5thCandle[0]).subtract(0, \"month\").startOf(\"month\").format('MMMM');\r\n\r\n\r\n\r\n                                    var foundStock = {\r\n                                        foundAt: \"Long - \" + new Date(firstCandle[0]).toLocaleString(),\r\n                                        monthName: monthMinusOneName, \r\n                                        symbol: element.symbol,\r\n                                        perChange: perChng.toFixed(2),\r\n                                        perChngOnHighLow: perChngOnHigh.toFixed(2),\r\n                                        brokerageCharges: 0.06,\r\n                                        sellEntyPrice: exitPrice,\r\n                                        stopLoss: `${stopLoss} (${slPer}%)`,\r\n                                        exitStatus : exitStatus,\r\n                                        quantity: Math.floor(10000 / firstCandle[2]),\r\n                                        token: element.token,\r\n                                        highAndLow: next5thCandle[2],\r\n                                        buyExitPrice: buyentry,\r\n                                        entryAt:  firstCandle[0],\r\n                                        squareOffAt: next5thCandle[0],\r\n                                        candleChartData: candleChartData,\r\n                                    }\r\n                                    if (Math.floor(10000 / firstCandle[2])) {\r\n                                        this.setState({ backTestResult: [...this.state.backTestResult, foundStock] });\r\n                                        this.setState({ backTestResult: this.state.backTestResult.reverse() });\r\n                                    }\r\n\r\n                                }\r\n                                //var sellenty = (firstCandle[3] - (firstCandle[2] - firstCandle[3])/4).toFixed(2); \r\n                                var sellenty = (firstCandle[3] - (firstCandle[3] / 100 / 10)).toFixed(2);\r\n                                var stopLoss = (firstCandle[2] + (firstCandle[2] / 100 / 10)).toFixed(2);\r\n\r\n                                if (next5thCandle[3] < sellenty) {\r\n                                    let exitPrice = next5thCandle[this.state.longExitPriceType], exitStatus = \"ME@3:30pm\";  \r\n                                    if(next5thCandle[this.state.longExitPriceType] >= stopLoss){\r\n                                        exitPrice =  stopLoss; \r\n                                        exitStatus = \"SLHit\";\r\n                                    }\r\n                                    \r\n                                    var perChng = (sellenty - exitPrice) * 100 / firstCandle[3];\r\n                                    var perChngOnLow = (sellenty - next5thCandle[3]) * 100 / firstCandle[3];\r\n\r\n                                    sumPercentage += perChng;\r\n                                    console.log(element.symbol, firstCandle[0], \"dowside\", \"same day high\", firstCandle[2], \"same day low\", firstCandle[3], \"nextdaylow\", next5thCandle[3], \"nextdayhigh\", next5thCandle[2], 'next day closing', next5thCandle[4], perChng + '%');\r\n                                    let slPer = ((stopLoss-sellenty)*100/stopLoss).toFixed(2); \r\n                                    var monthMinusOneName =  moment(next5thCandle[0]).subtract(0, \"month\").startOf(\"month\").format('MMMM');\r\n\r\n\r\n                                    var foundStock = {\r\n                                        foundAt: \"Short - \" + new Date(firstCandle[0]).toLocaleString(),\r\n                                        monthName: monthMinusOneName, \r\n                                        symbol: element.symbol,\r\n                                        perChange: perChng.toFixed(2),\r\n                                        perChngOnHighLow: perChngOnLow.toFixed(2),\r\n                                        brokerageCharges: 0.06,\r\n                                        sellEntyPrice: sellenty,\r\n                                        stopLoss:  `${stopLoss} (${slPer}%)`,\r\n                                        exitStatus : exitStatus, \r\n                                        quantity: Math.floor(10000 / firstCandle[3]),\r\n                                        token: element.token,\r\n                                        highAndLow: next5thCandle[3],\r\n                                        buyExitPrice: exitPrice,\r\n                                        entryAt:  firstCandle[0],\r\n                                        squareOffAt: next5thCandle[0],\r\n                                        candleChartData: candleChartData,\r\n                                    }\r\n                                    if (Math.floor(10000 / firstCandle[3])) {\r\n                                        this.setState({ backTestResult: [...this.state.backTestResult, foundStock] });\r\n                                    }\r\n\r\n\r\n                                }\r\n\r\n                            }\r\n\r\n                        }\r\n                        runningTest = runningTest + candleData.length - 35;\r\n                    }\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(element.symbol, \" candle data emply\");\r\n                }\r\n            })\r\n            await new Promise(r => setTimeout(r, 300));\r\n            this.setState({ stockTesting: index + 1 + \". \" + element.symbol, runningTest: runningTest })\r\n        }\r\n        this.setState({ backTestFlag: true });\r\n        console.log(\"sumPercentage\", sumPercentage)\r\n    }\r\n    \r\n    \r\n   \r\n    backtestVolumePrice = async () => {\r\n\r\n        this.setState({ backTestResult: [], backTestFlag: false });\r\n\r\n        var watchList = this.state.symbolList //localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')); \r\n        var runningTest = 1, sumPercentage = 0;\r\n        for (let index = 0; index < watchList.length; index++) {\r\n            const element = watchList[index];\r\n\r\n            if (this.state.stopScaningFlag) {\r\n                this.setState({stopScaningFlag : false})\r\n                break;\r\n            }\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"symboltoken\": element.token,\r\n                \"interval\": this.state.timeFrame, //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                \"fromdate\": moment(this.state.startDate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                \"todate\": moment(this.state.endDate).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n            }\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n                //console.log(\"candle history\", histdata); \r\n                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                    var candleData = histdata.data;\r\n                    //  candleData.reverse(); \r\n                    for (let index2 = 0; index2 < candleData.length - 7; index2++) {\r\n                        // var startindex = index2 * 10; \r\n                        var backtestCandle = candleData.slice(index2, index2 + 7);\r\n                        // var next10Candle = candleData.slice(index2+5 , index2+35 );    \r\n\r\n\r\n                        if(new Date(candleData[index2][0]).toLocaleTimeString()  > \"09:30:00\" && new Date(candleData[index2][0]).toLocaleTimeString() < \"14:15:00\") {\r\n                            var candleChartData = [];\r\n\r\n                            let currentCandle = backtestCandle[backtestCandle.length - 1]; \r\n\r\n\r\n                            let volBreakcount =0, curVol = currentCandle[5]; \r\n                            backtestCandle.forEach(elementback => {\r\n                                  if(curVol > elementback[5]){\r\n                                    volBreakcount++\r\n                                  } \r\n                                  candleChartData.push([elementback[0], elementback[1], elementback[2], elementback[3], elementback[4]]);\r\n\r\n                            });\r\n\r\n                            let candleDistance = currentCandle[2] - currentCandle[3]; //high - low\r\n                            let strongPer = ((currentCandle[4] - currentCandle[3]) * 100) / candleDistance; \r\n                            var changePer = (currentCandle[4] - currentCandle[1]) * 100 / currentCandle[1];\r\n\r\n                            if(volBreakcount >= 4 && strongPer >= 80 && changePer > 0.5) {  //(currentCandle[4] == currentCandle[2])\r\n                                console.log(element.symbol, 'backtestCandle',  backtestCandle, \"volBreakcount\",  volBreakcount);\r\n                               \r\n                                var foundStock = {\r\n                                    foundAt: moment(currentCandle[0]).format(\"DD-MM-YYYY HH:mm\"),\r\n                                    symbol: element.name,\r\n                                    token: element.token, \r\n                                    chartDate: currentCandle[0],\r\n                                    candleChartData:candleChartData\r\n\r\n                                }\r\n\r\n                                \r\n                                this.setState({ backTestResult: [...this.state.backTestResult, foundStock] }, function(){\r\n                                   \r\n                                    let data = ''; \r\n                                    this.state.backTestResult.forEach((item)=> data+= item.foundAt + \"\\t\"+ item.symbol + \"\\n\")\r\n                                    \r\n                                    this.setState({ copydata: data});\r\n\r\n                                } );        \r\n                                \r\n                            }\r\n\r\n\r\n\r\n                            \r\n                        }\r\n\r\n                      \r\n                       \r\n                       \r\n                        runningTest = runningTest + candleData.length - 35;\r\n                    }\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(element.symbol, \" candle data emply\");\r\n                }\r\n            })\r\n            await new Promise(r => setTimeout(r, 300));\r\n            this.setState({ stockTesting: index + 1 + \". \" + element.symbol, runningTest: runningTest })\r\n        }\r\n        this.setState({ backTestFlag: true });\r\n       \r\n    }\r\n    backtestVolumePriceSell = async () => {\r\n\r\n        this.setState({ backTestResult: [], backTestFlag: false });\r\n\r\n        var watchList = this.state.symbolList //localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')); \r\n        var runningTest = 1, sumPercentage = 0;\r\n        for (let index = 0; index < watchList.length; index++) {\r\n            const element = watchList[index];\r\n\r\n            if (this.state.stopScaningFlag) {\r\n                this.setState({stopScaningFlag : false})\r\n                break;\r\n            }\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"symboltoken\": element.token,\r\n                \"interval\": this.state.timeFrame, //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                \"fromdate\": moment(this.state.startDate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                \"todate\": moment(this.state.endDate).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n            }\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n                //console.log(\"candle history\", histdata); \r\n                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                    var candleData = histdata.data;\r\n                    //  candleData.reverse(); \r\n                    for (let index2 = 0; index2 < candleData.length - 7; index2++) {\r\n                        // var startindex = index2 * 10; \r\n                        var backtestCandle = candleData.slice(index2, index2 + 7);\r\n                        // var next10Candle = candleData.slice(index2+5 , index2+35 );    \r\n\r\n\r\n                        if(new Date(candleData[index2][0]).toLocaleTimeString()  > \"09:30:00\" && new Date(candleData[index2][0]).toLocaleTimeString() < \"14:15:00\") {\r\n                            var candleChartData = [];\r\n\r\n                            let currentCandle = backtestCandle[backtestCandle.length - 1]; \r\n\r\n\r\n                            let volBreakcount =0, curVol = currentCandle[5]; \r\n                            backtestCandle.forEach(elementback => {\r\n                                  if(curVol > elementback[5]){\r\n                                    volBreakcount++\r\n                                  } \r\n                                  candleChartData.push([elementback[0], elementback[1], elementback[2], elementback[3], elementback[4]]);\r\n\r\n                            });\r\n\r\n                            let candleDistance = currentCandle[2] - currentCandle[3]; //high - low\r\n                            let strongPer = ((currentCandle[4] - currentCandle[3]) * 100) / candleDistance; \r\n                            var changePer = (currentCandle[4] - currentCandle[1]) * 100 / currentCandle[1];\r\n\r\n                            if(volBreakcount >= 4 && strongPer <= 20 && changePer < -0.5) {  //(currentCandle[4] == currentCandle[2])\r\n                                console.log(element.symbol, 'backtestCandle',  backtestCandle, \"volBreakcount\",  volBreakcount);\r\n                               \r\n                                var foundStock = {\r\n                                    foundAt: moment(currentCandle[0]).format(\"DD-MM-YYYY HH:mm\"),\r\n                                    symbol: element.name,\r\n                                    token: element.token,\r\n                                    chartDate: currentCandle[0],\r\n                                    candleChartData:candleChartData\r\n\r\n                                }\r\n\r\n                                \r\n                                this.setState({ backTestResult: [...this.state.backTestResult, foundStock] }, function(){\r\n                                   \r\n                                    let data = ''; \r\n                                    this.state.backTestResult.forEach((item)=> data+= item.foundAt + \"\\t\"+ item.symbol + \"\\n\")\r\n                                    \r\n                                    this.setState({ copydata: data});\r\n\r\n                                } );        \r\n                                \r\n                            }\r\n\r\n\r\n\r\n                            \r\n                        }\r\n\r\n                      \r\n                       \r\n                       \r\n                        runningTest = runningTest + candleData.length - 35;\r\n                    }\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(element.symbol, \" candle data emply\");\r\n                }\r\n            })\r\n            await new Promise(r => setTimeout(r, 300));\r\n            this.setState({ stockTesting: index + 1 + \". \" + element.symbol, runningTest: runningTest })\r\n        }\r\n        this.setState({ backTestFlag: true });\r\n       \r\n    }\r\n    \r\n    backtestStrongCandle = async () => {\r\n\r\n        this.setState({ backTestResult: [], backTestFlag: false });\r\n\r\n        var watchList = this.state.symbolList //localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')); \r\n        var runningTest = 1, sumPercentage = 0;\r\n        for (let index = 0; index < watchList.length; index++) {\r\n            const element = watchList[index];\r\n\r\n            if (this.state.stopScaningFlag) {\r\n                this.setState({stopScaningFlag : false})\r\n                break;\r\n            }\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"symboltoken\": element.token,\r\n                \"interval\": \"FIVE_MINUTE\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                \"fromdate\": moment(this.state.startDate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                \"todate\": moment(this.state.endDate).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n            }\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n                //console.log(\"candle history\", histdata); \r\n                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                    var candleData = histdata.data;\r\n                    //  candleData.reverse(); \r\n                    for (let index2 = 0; index2 < candleData.length - 4; index2++) {\r\n                        // var startindex = index2 * 10; \r\n                        var last4Candle = candleData.slice(index2, index2 + 4);\r\n                        // var next10Candle = candleData.slice(index2+5 , index2+35 );    \r\n\r\n                        // console.log(element.symbol, 'backside',  last10Candle, '\\n forntside',  next10Candle);\r\n\r\n                        //&& new Date(candleData[index2][0]).toLocaleTimeString() < \"14:15:00\"\r\n                      //  last4Candle.reverse();\r\n\r\n                        var candleChartData = [];\r\n                        last4Candle.forEach(candleElement => {\r\n                            candleChartData.push([candleElement[0], candleElement[1], candleElement[2], candleElement[3], candleElement[4]]);\r\n\r\n                            let candleChangePer = (candleElement[2] - candleElement[3]) * 100 / candleElement[1];\r\n                            if(candleElement[1] == candleElement[3] && candleElement[2] == candleElement[4] && candleChangePer >= 0.3){\r\n                          \r\n                                var firstCandle = candleElement[0];\r\n                                var next5thCandle = candleData[index2 + 1];\r\n                               // candleChartData.unshift([next5thCandle[0], next5thCandle[1], next5thCandle[2], next5thCandle[3], next5thCandle[4]]);\r\n    \r\n//                                var buyentry = (firstCandle[2] + (firstCandle[2] - firstCandle[3])/4).toFixed(2);\r\n                                var buyentry = (firstCandle[2] + (firstCandle[2] / 100 / 10));\r\n                                var stopLoss = (firstCandle[3] - (firstCandle[3] / 100 / 10));\r\n    \r\n    \r\n                                let exitPrice = next5thCandle[2], exitStatus = \"Market End\";  \r\n                                if(next5thCandle[2] <= stopLoss){\r\n                                    exitPrice = stopLoss; \r\n                                    exitStatus = \"SL Hit\";\r\n                                }\r\n\r\n\r\n                                var perChng = (exitPrice - buyentry) * 100 / buyentry;\r\n                                var perChngOnHigh = (next5thCandle[2] - buyentry) * 100 / buyentry;\r\n\r\n                                 sumPercentage += perChng;\r\n                                // console.log(element.symbol, firstCandle[0], \"upside\", \"same day high\", firstCandle[2], \"same day low\", firstCandle[3], \"nextdaylow\", next5thCandle[3], \"nextdayhigh\", next5thCandle[2], 'next day closing', next5thCandle[4], perChng + '%');\r\n                                 let slPer = ((buyentry-stopLoss)*100/buyentry).toFixed(2); \r\n                                \r\n                                \r\n                                var foundStock = {\r\n                                    foundAt:  new Date(candleElement[0]).toLocaleString(),\r\n                                    symbol: element.symbol,\r\n                                    token: element.token,\r\n                                    sellEntyPrice: exitPrice,\r\n                                    stopLoss: `${stopLoss} (${slPer}%)`,\r\n                                    highAndLow: next5thCandle[2],\r\n                                    perChngOnHighLow: perChngOnHigh.toFixed(2),\r\n                                    buyExitPrice: buyentry,\r\n                                    brokerageCharges: 0.06,\r\n                                    perChange: perChng.toFixed(2),\r\n                                    entryAt:  firstCandle[0],\r\n                                    squareOffAt: next5thCandle[0],\r\n                                    quantity: Math.floor(10000 / firstCandle[2]),\r\n                                    candleChartData: candleChartData,\r\n                                    exitStatus : exitStatus\r\n                                }\r\n                                console.log(\"5min strong candle\", foundStock);\r\n\r\n                                this.setState({ backTestResult: [...this.state.backTestResult, foundStock] });\r\n                                this.setState({ backTestResult: this.state.backTestResult.reverse() });\r\n                                //var sellenty = (firstCandle[3] - (firstCandle[2] - firstCandle[3])/4).toFixed(2); \r\n                                // var sellenty = (firstCandle[3] - (firstCandle[3] / 100 / 10)).toFixed(2);\r\n                                // var stopLoss = (firstCandle[2] + (firstCandle[2] / 100 / 10)).toFixed(2);\r\n    \r\n                                // if (next5thCandle[3] < sellenty) {\r\n                                //     let exitPrice = next5thCandle[this.state.longExitPriceType], exitStatus = \"Market End\";  \r\n                                //     if(next5thCandle[this.state.longExitPriceType] >= stopLoss){\r\n                                //         exitPrice =  stopLoss; \r\n                                //         exitStatus = \"SL Hit\";\r\n                                //     }\r\n                                    \r\n                                //     var perChng = (sellenty - exitPrice) * 100 / firstCandle[3];\r\n                                //     var perChngOnLow = (sellenty - next5thCandle[3]) * 100 / firstCandle[3];\r\n    \r\n                                //     sumPercentage += perChng;\r\n                                //     console.log(element.symbol, firstCandle[0], \"dowside\", \"same day high\", firstCandle[2], \"same day low\", firstCandle[3], \"nextdaylow\", next5thCandle[3], \"nextdayhigh\", next5thCandle[2], 'next day closing', next5thCandle[4], perChng + '%');\r\n                                //     let slPer = ((stopLoss-sellenty)*100/stopLoss).toFixed(2); \r\n    \r\n                                //     var foundStock = {\r\n                                //         foundAt: \"Short - \" + new Date(firstCandle[0]).toLocaleString(),\r\n                                //         symbol: element.symbol,\r\n                                //         token: element.token,\r\n                                //         sellEntyPrice: sellenty,\r\n                                //         perChngOnHighLow: perChngOnLow.toFixed(2),\r\n                                //         stopLoss:  `${stopLoss} (${slPer}%)`,\r\n                                //         highAndLow: next5thCandle[3],\r\n                                //         buyExitPrice: exitPrice,\r\n                                //         brokerageCharges: 0.06,\r\n                                //         perChange: perChng.toFixed(2),\r\n                                //         entryAt:  firstCandle[0],\r\n                                //         squareOffAt: next5thCandle[0],\r\n                                //         quantity: Math.floor(10000 / firstCandle[3]),\r\n                                //         candleChartData: candleChartData,\r\n                                //         exitStatus : \"Market End\"\r\n                                //     }\r\n                                //     if (Math.floor(10000 / firstCandle[3])) {\r\n                                //         this.setState({ backTestResult: [...this.state.backTestResult, foundStock] });\r\n                                //     }\r\n    \r\n    \r\n                                // }\r\n                            }\r\n\r\n\r\n\r\n                        });\r\n                       \r\n                       \r\n                        runningTest = runningTest + candleData.length - 35;\r\n                    }\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(element.symbol, \" candle data emply\");\r\n                }\r\n            })\r\n            await new Promise(r => setTimeout(r, 300));\r\n            this.setState({ stockTesting: index + 1 + \". \" + element.symbol, runningTest: runningTest })\r\n        }\r\n        this.setState({ backTestFlag: true });\r\n       \r\n    }\r\n    \r\n    backTestNR4Trail = async () => {\r\n\r\n        this.setState({ backTestResult: [], backTestFlag: false });\r\n\r\n        var watchList = this.state.symbolList //localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')); \r\n        var runningTest = 1, sumPercentage = 0;\r\n        for (let index = 0; index < watchList.length; index++) {\r\n            const element = watchList[index];\r\n\r\n            if (this.state.stopScaningFlag) {\r\n                this.setState({stopScaningFlag : false})\r\n                break;\r\n            }\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"symboltoken\": element.token,\r\n                \"interval\": \"ONE_DAY\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                \"fromdate\": moment(this.state.startDate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                \"todate\": moment(this.state.endDate).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n            }\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n                //console.log(\"candle history\", histdata); \r\n                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                    var candleData = histdata.data;\r\n                    //  candleData.reverse(); \r\n                    for (let index2 = 0; index2 < candleData.length - 4; index2++) {\r\n                        // var startindex = index2 * 10; \r\n                        var last4Candle = candleData.slice(index2, index2 + 4);\r\n                        // var next10Candle = candleData.slice(index2+5 , index2+35 );    \r\n\r\n                        // console.log(element.symbol, 'backside',  last10Candle, '\\n forntside',  next10Candle);\r\n\r\n                        //&& new Date(candleData[index2][0]).toLocaleTimeString() < \"14:15:00\"\r\n                        if (last4Candle.length >= 4 && new Date(candleData[index2][0]).toLocaleTimeString() < \"14:15:00\") {\r\n\r\n                            last4Candle.reverse();\r\n\r\n                            var rangeArr = [], candleChartData = [];\r\n                            last4Candle.forEach(element => {\r\n                                rangeArr.push(element[2] - element[3]);\r\n                                candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                            });\r\n                            var firstElement = rangeArr[0], rgrangeCount = 0;\r\n                            rangeArr.forEach(element => {\r\n                                if (firstElement <= element) {\r\n                                    firstElement = element;\r\n                                    rgrangeCount += 1;\r\n                                }\r\n                            });\r\n\r\n                            //  console.log(element.symbol, last4Candle, rangeArr, rgrangeCount); \r\n                            if (rgrangeCount == 4) {\r\n                                var firstCandle = last4Candle[0];\r\n                                var next5thCandle = candleData[index2 + 4];\r\n                                candleChartData.unshift([next5thCandle[0], next5thCandle[1], next5thCandle[2], next5thCandle[3], next5thCandle[4]]);\r\n\r\n                                //var buyentry = (firstCandle[2] + (firstCandle[2] - firstCandle[3])/4).toFixed(2);\r\n                                var buyentry = (firstCandle[2] + (firstCandle[2] / 100 / 10)).toFixed(2);\r\n\r\n                                if (next5thCandle[2] > buyentry) {\r\n                                    var perChng = (next5thCandle[this.state.longExitPriceType] - buyentry) * 100 / buyentry;\r\n                                    var perChngOnHigh = (next5thCandle[2] - buyentry) * 100 / buyentry;\r\n\r\n                                    sumPercentage += perChng;\r\n                                    console.log(element.symbol, firstCandle[0], \"upside\", \"same day high\", firstCandle[2], \"same day low\", firstCandle[3], \"nextdaylow\", next5thCandle[3], \"nextdayhigh\", next5thCandle[2], 'next day closing', next5thCandle[4], perChng + '%');\r\n\r\n                                    var foundStock = {\r\n                                        foundAt: \"Long - \" + new Date(firstCandle[0]).toLocaleString(),\r\n                                        symbol: element.symbol,\r\n                                        token: element.token,\r\n                                        sellEntyPrice: next5thCandle[this.state.longExitPriceType],\r\n                                        stopLoss: firstCandle[3],\r\n                                        highAndLow: next5thCandle[2],\r\n                                        perChngOnHighLow: perChngOnHigh.toFixed(2),\r\n                                        buyExitPrice: buyentry,\r\n                                        brokerageCharges: 0.06,\r\n                                        perChange: perChng.toFixed(2),\r\n                                        entryAt:  firstCandle[0],\r\n                                        squareOffAt: next5thCandle[0],\r\n                                        quantity: Math.floor(10000 / firstCandle[2]),\r\n                                        candleChartData: candleChartData\r\n                                    }\r\n                                    if (Math.floor(10000 / firstCandle[2])) {\r\n                                        this.setState({ backTestResult: [...this.state.backTestResult, foundStock] });\r\n                                        this.setState({ backTestResult: this.state.backTestResult.reverse() });\r\n                                    }\r\n\r\n                                }\r\n                                //var sellenty = (firstCandle[3] - (firstCandle[2] - firstCandle[3])/4).toFixed(2); \r\n                                var sellenty = (firstCandle[3] - (firstCandle[3] / 100 / 10)).toFixed(2);\r\n\r\n                                if (next5thCandle[3] < sellenty) {\r\n                                    var perChng = (sellenty - next5thCandle[this.state.shortExitPriceType]) * 100 / firstCandle[3];\r\n                                    var perChngOnLow = (sellenty - next5thCandle[3]) * 100 / firstCandle[3];\r\n\r\n                                    sumPercentage += perChng;\r\n                                    console.log(element.symbol, firstCandle[0], \"dowside\", \"same day high\", firstCandle[2], \"same day low\", firstCandle[3], \"nextdaylow\", next5thCandle[3], \"nextdayhigh\", next5thCandle[2], 'next day closing', next5thCandle[4], perChng + '%');\r\n\r\n                                    var foundStock = {\r\n                                        foundAt: \"Short - \" + new Date(firstCandle[0]).toLocaleString(),\r\n                                        symbol: element.symbol,\r\n                                        token: element.token,\r\n                                        sellEntyPrice: sellenty,\r\n                                        perChngOnHighLow: perChngOnLow.toFixed(2),\r\n                                        stopLoss: firstCandle[2],\r\n                                        highAndLow: next5thCandle[3],\r\n                                        buyExitPrice: next5thCandle[this.state.shortExitPriceType],\r\n                                        brokerageCharges: 0.06,\r\n                                        perChange: perChng.toFixed(2),\r\n                                        entryAt:  firstCandle[0],\r\n                                        squareOffAt: next5thCandle[0],\r\n                                        quantity: Math.floor(10000 / firstCandle[3]),\r\n                                        candleChartData: candleChartData\r\n                                    }\r\n                                    if (Math.floor(10000 / firstCandle[3])) {\r\n                                        this.setState({ backTestResult: [...this.state.backTestResult, foundStock] });\r\n                                    }\r\n\r\n\r\n                                }\r\n\r\n                            }\r\n\r\n                        }\r\n                        runningTest = runningTest + candleData.length - 35;\r\n                    }\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(element.symbol, \" candle data emply\");\r\n                }\r\n            })\r\n            await new Promise(r => setTimeout(r, 300));\r\n            this.setState({ stockTesting: index + 1 + \". \" + element.symbol, runningTest: runningTest })\r\n        }\r\n        this.setState({ backTestFlag: true });\r\n        console.log(\"sumPercentage\", sumPercentage)\r\n    }\r\n    \r\n\r\n\r\n    nr4CheckPastPerfommance = (token, foundStock) => {\r\n        var time = moment.duration(\"4320:00:00\");\r\n        var startdate = moment(this.state.endDate).subtract(time);\r\n        var totalLongs = 0, totalShort = 0, totalLongPer = 0, totalShortPer = 0, totalLongHighPer = 0, totalShortLowPer = 0;\r\n        var longCandles = [], shortCandles = [];\r\n\r\n        console.log('starting function foundStock', foundStock)\r\n        var data = {\r\n            \"exchange\": \"NSE\",\r\n            \"symboltoken\": token,\r\n            \"interval\": \"ONE_DAY\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n            \"fromdate\": moment(startdate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n            \"todate\": moment(this.state.endDate).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n        }\r\n\r\n        AdminService.getHistoryData(data).then(res => {\r\n            let histdata = resolveResponse(res, 'noPop');\r\n            console.log(\"candle history\", histdata);\r\n            if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                var candleData = histdata.data;\r\n                //  candleData.reverse(); \r\n                for (let index2 = 0; index2 < candleData.length - 4; index2++) {\r\n                    // var startindex = index2 * 10; \r\n                    var last4Candle = candleData.slice(index2, index2 + 4);\r\n                    // var next10Candle = candleData.slice(index2+5 , index2+35 );    \r\n\r\n                    // console.log(element.symbol, 'backside',  last10Candle, '\\n forntside',  next10Candle);\r\n\r\n                    //&& new Date(candleData[index2][0]).toLocaleTimeString() < \"14:15:00\"\r\n                    if (last4Candle.length >= 4 && new Date(candleData[index2][0]).toLocaleTimeString() < \"14:15:00\") {\r\n\r\n                        last4Candle.reverse();\r\n\r\n                        var rangeArr = [], candleChartData = [];\r\n                        last4Candle.forEach(element => {\r\n                            rangeArr.push(element[2] - element[3]);\r\n                            candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                        });\r\n                        var firstElement = rangeArr[0], rgrangeCount = 0;\r\n                        rangeArr.forEach(element => {\r\n                            if (firstElement <= element) {\r\n                                firstElement = element;\r\n                                rgrangeCount += 1;\r\n                            }\r\n                        });\r\n\r\n                        if (rgrangeCount == 4) {\r\n\r\n                            var firstCandle = last4Candle[0];\r\n                            var next5thCandle = candleData[index2 + 4];\r\n                            candleChartData.unshift([next5thCandle[0], next5thCandle[1], next5thCandle[2], next5thCandle[3], next5thCandle[4]]);\r\n\r\n                            console.log(token, last4Candle, rangeArr, rgrangeCount, firstCandle[0].toString().substr(0, 25));\r\n\r\n                            var buyentry = (firstCandle[2] + (firstCandle[2] / 100 / 10)).toFixed(2);\r\n\r\n                            if (next5thCandle[2] > buyentry) {\r\n\r\n                                var perChng = (next5thCandle[4] - buyentry) * 100 / buyentry;\r\n                                var perChngOnHigh = (next5thCandle[2] - buyentry) * 100 / buyentry;\r\n\r\n                                var longData = {\r\n                                    foundAt: \"Long - \" + new Date(firstCandle[0]).toLocaleString(),\r\n                                    sellEntyPrice: next5thCandle[4],\r\n                                    stopLoss: firstCandle[3],\r\n                                    highAndLow: next5thCandle[2],\r\n                                    perChngOnHighLow: perChngOnHigh.toFixed(2),\r\n                                    buyExitPrice: buyentry,\r\n                                    brokerageCharges: 0.06,\r\n                                    perChange: perChng.toFixed(2),\r\n                                    squareOffAt: new Date(next5thCandle[0]).toLocaleString(),\r\n                                    quantity: Math.floor(10000 / firstCandle[2]),\r\n                                    candleChartData: candleChartData\r\n                                }\r\n                                longCandles.push(longData);\r\n\r\n                                totalLongs += 1;\r\n                                totalLongPer += perChng;\r\n                                totalLongHighPer += perChngOnHigh;\r\n\r\n                            }\r\n                            var sellenty = (firstCandle[3] - (firstCandle[3] / 100 / 10)).toFixed(2);\r\n\r\n                            if (next5thCandle[3] < sellenty) {\r\n                                var perChng = (sellenty - next5thCandle[4]) * 100 / firstCandle[3];\r\n                                var perChngOnLow = (sellenty - next5thCandle[3]) * 100 / firstCandle[3];\r\n\r\n                                var shortData = {\r\n                                    foundAt: \"Short - \" + new Date(firstCandle[0]).toLocaleString(),\r\n                                    sellEntyPrice: sellenty,\r\n                                    perChngOnHighLow: perChngOnLow.toFixed(2),\r\n                                    stopLoss: firstCandle[2],\r\n                                    highAndLow: next5thCandle[3],\r\n                                    buyExitPrice: next5thCandle[4],\r\n                                    brokerageCharges: 0.06,\r\n                                    perChange: perChng.toFixed(2),\r\n                                    squareOffAt: new Date(next5thCandle[0]).toLocaleString(),\r\n                                    quantity: Math.floor(10000 / firstCandle[3]),\r\n                                    candleChartData: candleChartData\r\n                                }\r\n                                shortCandles.push(shortData);\r\n\r\n                                totalShort += 1;\r\n                                totalShortPer += perChng;\r\n                                totalShortLowPer += perChngOnLow;\r\n\r\n                            }\r\n\r\n\r\n                        }\r\n\r\n                    }\r\n                }\r\n\r\n\r\n                var pastPerferm = {\r\n                    totalLongs: totalLongs,\r\n                    totalShort: totalShort,\r\n                    totalLongPer: totalLongPer.toFixed(2),\r\n                    totalShortPer: totalShortPer.toFixed(2),\r\n                    totalLongHighPer: totalLongHighPer.toFixed(2),\r\n                    totalShortLowPer: totalShortLowPer.toFixed(2),\r\n                }\r\n                if (foundStock)\r\n                    foundStock.pastPerferm = pastPerferm;\r\n                foundStock.longCandles = longCandles;\r\n                foundStock.shortCandles = shortCandles;\r\n\r\n\r\n                console.log(\"foundStock\", foundStock);\r\n                if (Math.floor(10000 / firstCandle[4])) {\r\n                    this.setState({ FoundPatternList: [...this.state.FoundPatternList, foundStock] });\r\n\r\n                    localStorage.setItem('FoundPatternList', JSON.stringify(this.state.FoundPatternList));\r\n                }\r\n\r\n            } else {\r\n                //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                console.log(token, \" candle data emply\");\r\n            }\r\n        });\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    backtestTweezerTop = (candleHist, symbol, next10Candle) => {\r\n\r\n        if (candleHist && candleHist.length > 0) {\r\n\r\n            candleHist = candleHist.reverse();\r\n            // console.log(symbol, \"candleHist\",candleHist, new Date().toString()); \r\n\r\n\r\n            var maxHigh = candleHist[2] && candleHist[2][2], maxLow = candleHist[2] && candleHist[2][3];\r\n            for (let index = 3; index < candleHist.length; index++) {\r\n                if (maxHigh < candleHist[index][2])\r\n                    maxHigh = candleHist[index][2];\r\n                if (candleHist[index][3] < maxLow)\r\n                    maxLow = candleHist[index][3];\r\n            }\r\n\r\n\r\n            var lastTrendCandleLow = candleHist[9][3];\r\n            var firstTrendCandleHigh = candleHist[2][2];\r\n\r\n            var firstCandle = {\r\n                time: candleHist[0] && candleHist[0][0],\r\n                open: candleHist[0] && candleHist[0][1],\r\n                high: candleHist[0] && candleHist[0][2],\r\n                low: candleHist[0] && candleHist[0][3],\r\n                close: candleHist[0] && candleHist[0][4]\r\n            }\r\n            var secondCandle = {\r\n                time: candleHist[1] && candleHist[1][0],\r\n                open: candleHist[1] && candleHist[1][1],\r\n                high: candleHist[1] && candleHist[1][2],\r\n                low: candleHist[1] && candleHist[1][3],\r\n                close: candleHist[1] && candleHist[1][4]\r\n            }\r\n\r\n\r\n\r\n            var diffPer = (firstTrendCandleHigh - lastTrendCandleLow) * 100 / lastTrendCandleLow;\r\n            var lowestOfBoth = secondCandle.low < firstCandle.low ? secondCandle.low : firstCandle.low;\r\n            var highestOfBoth = secondCandle.high < firstCandle.high ? secondCandle.high : firstCandle.high;\r\n            //uptrend movement 1.5% \r\n            //    console.log(symbol, \"last 8th candle diff% \",  diffPer, \"10th Low\", lastTrendCandleLow,\"3rd high\", firstTrendCandleHigh);\r\n\r\n\r\n            if (diffPer >= 1.5 && maxHigh < highestOfBoth && maxLow < lowestOfBoth) {\r\n                //1st candle #20d020 & 2nd candle is red check\r\n                if (secondCandle.open < secondCandle.close && firstCandle.open > firstCandle.close) {\r\n                    // console.log(symbol, \"candleHist\",candleHist); \r\n                    //  console.log(symbol, \"last 8th candle diff% \",  diffPer, \"10th Low\", lastTrendCandleLow,\"3rd high\", firstTrendCandleHigh);\r\n                    //  console.log(symbol, 'making twisser 1st #20d020 & 2nd red' , firstCandle, secondCandle );\r\n\r\n                    if (Math.round(secondCandle.close) == Math.round(firstCandle.open) && Math.round(secondCandle.open) == Math.round(firstCandle.close)) {\r\n\r\n                        console.log('%c' + new Date(candleHist[0][0]).toString(), 'color: #20d020');\r\n                        console.log(symbol, \"last 8th candle diff% \", diffPer, \"10th Low\", lastTrendCandleLow, \"3rd high\", firstTrendCandleHigh);\r\n\r\n                        console.log(symbol, \"maxHigh\", maxHigh, \"maxLow\", maxLow);\r\n                        console.log(\"last10Candle\", candleHist);\r\n                        console.log(symbol, 'perfect twisser top done close=open || open=close',);\r\n                        console.log(\"next10Candle\", next10Candle);\r\n\r\n                        if (next10Candle && next10Candle.length) {\r\n                            // next10Candle = next10Candle.reverse(); \r\n\r\n                            var higherStopLoss = (highestOfBoth + (highestOfBoth / 100 / 10)).toFixed(2);\r\n                            var sellEntyPrice = (lowestOfBoth - (lowestOfBoth / 100 / 10)).toFixed(2);\r\n\r\n                            //flat 3:15 or SL hit squired off \r\n                            var squiredOffAt315 = 0, squareOffAt315Time = '';\r\n                            for (let indexTarget = 0; indexTarget < next10Candle.length; indexTarget++) {\r\n\r\n                                if (next10Candle[indexTarget][2] > higherStopLoss) {\r\n                                    squiredOffAt315 = higherStopLoss;\r\n                                    squareOffAt315Time = next10Candle[indexTarget][0];\r\n                                    break;\r\n                                }\r\n                                if (new Date(next10Candle[indexTarget][0]).toLocaleTimeString() == \"15:15:00\") {\r\n                                    squiredOffAt315 = next10Candle[indexTarget][4];\r\n                                    squareOffAt315Time = next10Candle[indexTarget][0];\r\n                                    break;\r\n                                }\r\n                            }\r\n                            //lowest of 3:15 profit booking\r\n                            var lowestOf315 = next10Candle[0][4], lowestSquareOffAt = '';\r\n                            for (let indexTarget2 = 1; indexTarget2 < next10Candle.length; indexTarget2++) {\r\n                                if (next10Candle[indexTarget2][4] < lowestOf315) {\r\n                                    lowestOf315 = next10Candle[indexTarget2][4];\r\n                                    lowestSquareOffAt = next10Candle[indexTarget2][0];\r\n                                }\r\n                                if (new Date(next10Candle[indexTarget2][0]).toLocaleTimeString() == \"15:15:00\") {\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            //trailing profit till of 3:15 \r\n                            var trailingSL = higherStopLoss, trailingSLAT = '';\r\n                            for (let indexTarget3 = 0; indexTarget3 < next10Candle.length; indexTarget3++) {\r\n                                if (trailingSL > next10Candle[indexTarget3][2]) {\r\n                                    trailingSL = (next10Candle[indexTarget3][2] + (next10Candle[indexTarget3][2] / 100 / 4)).toFixed(2);\r\n                                    trailingSLAT = next10Candle[indexTarget3][0];\r\n                                }\r\n                                else {\r\n                                    trailingSL = (next10Candle[indexTarget3][4]).toFixed(2);\r\n                                    trailingSLAT = next10Candle[indexTarget3][0];\r\n                                    break;\r\n                                }\r\n                                if (new Date(next10Candle[indexTarget3][0]).toLocaleTimeString() == \"15:15:00\") {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            //flat 0.75% or SL hit profit booking\r\n                            var flatSellingPrice = 0, flatSellingPriceAt = '';\r\n                            for (let indexTarget4 = 0; indexTarget4 < next10Candle.length; indexTarget4++) {\r\n\r\n                                var priceDiff = (next10Candle[indexTarget4][3] - sellEntyPrice) * 100 / sellEntyPrice;\r\n\r\n                                if (priceDiff < -0.70) {\r\n                                    flatSellingPrice = next10Candle[indexTarget4][3];\r\n                                    flatSellingPriceAt = next10Candle[indexTarget4][0];\r\n                                    break;\r\n                                }\r\n                                if (next10Candle[indexTarget4][2] > higherStopLoss) {\r\n                                    flatSellingPrice = higherStopLoss;\r\n                                    flatSellingPriceAt = next10Candle[indexTarget4][0];\r\n                                    break;\r\n                                }\r\n                                if (new Date(next10Candle[indexTarget4][0]).toLocaleTimeString() == \"15:15:00\") {\r\n                                    flatSellingPrice = next10Candle[indexTarget4][3];\r\n                                    flatSellingPriceAt = next10Candle[indexTarget4][0];\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            //range based target range*1.5% or SL hit profit booking\r\n                            var rangeSellingPrice = 0, rangeSellingPriceAt = '';\r\n                            for (let indexTarget5 = 0; indexTarget5 < next10Candle.length; indexTarget5++) {\r\n\r\n                                var rangePriceDiff = (next10Candle[indexTarget5][3] - sellEntyPrice) * 100 / sellEntyPrice;\r\n\r\n                                if (rangePriceDiff <= -1.5) {\r\n                                    rangeSellingPrice = next10Candle[indexTarget5][3];\r\n                                    rangeSellingPriceAt = next10Candle[indexTarget5][0];\r\n                                    break;\r\n                                }\r\n                                if (next10Candle[indexTarget5][2] > higherStopLoss) {\r\n                                    rangeSellingPrice = higherStopLoss;\r\n                                    rangeSellingPriceAt = next10Candle[indexTarget5][0];\r\n                                    break;\r\n                                }\r\n                                if (new Date(next10Candle[indexTarget5][0]).toLocaleTimeString() == \"15:15:00\") {\r\n                                    rangeSellingPrice = next10Candle[indexTarget5][3];\r\n                                    rangeSellingPriceAt = next10Candle[indexTarget5][0];\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            var backTestResult = localStorage.getItem(\"backTestResult\") ? JSON.parse(localStorage.getItem(\"backTestResult\")) : [];\r\n\r\n\r\n                            if (next10Candle[0][3] < lowestOfBoth || next10Candle[1][3] < lowestOfBoth || next10Candle[2][3] < lowestOfBoth) {\r\n                                var foundStock = {\r\n                                    foundAt: new Date(candleHist[0][0]).toLocaleString(),\r\n                                    symbol: symbol,\r\n                                    sellEntyPrice: sellEntyPrice,\r\n                                    stopLoss: higherStopLoss,\r\n                                    orderActivated: false,\r\n                                    buyExitPrice: 0,\r\n                                    brokerageCharges: 0.06,\r\n                                    quantity: Math.floor(10000 / sellEntyPrice),\r\n                                }\r\n                                foundStock.orderActivated = true;\r\n                                //sqr off at 3:15\r\n                                //   foundStock.squareOffAt = new Date( squareOffAt315Time ).toLocaleString();\r\n                                //   foundStock.buyExitPrice = squiredOffAt315; \r\n\r\n                                //  lowest of 3:15\r\n                                // foundStock.squareOffAt = new Date( lowestSquareOffAt ).toLocaleString();\r\n                                // foundStock.buyExitPrice = lowestOf315 \r\n\r\n                                //trailing till 3:15\r\n                                // foundStock.squareOffAt = new Date( trailingSLAT ).toLocaleString();\r\n                                // foundStock.buyExitPrice = trailingSL;\r\n\r\n                                //flat profit booking at 0.70%\r\n                                foundStock.squareOffAt = new Date(flatSellingPriceAt).toLocaleString();\r\n                                foundStock.buyExitPrice = flatSellingPrice;\r\n\r\n\r\n                                //range based target range*1.5%\r\n                                //    foundStock.squareOffAt = new Date( rangeSellingPriceAt ).toLocaleString();\r\n                                //    foundStock.buyExitPrice = rangeSellingPrice;\r\n\r\n                                foundStock.perChange = ((foundStock.sellEntyPrice - foundStock.buyExitPrice) * 100 / foundStock.sellEntyPrice).toFixed(2);\r\n                                backTestResult.push(foundStock);\r\n\r\n                                this.setState({ backTestResult: [...this.state.backTestResult, foundStock] });\r\n\r\n                                //  localStorage.setItem('backTestResult', JSON.stringify(backTestResult));\r\n                            }\r\n\r\n\r\n\r\n\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        this.setState({ backTestFlag: true });\r\n    }\r\n\r\n    backtestTweezerBottom = (candleHist, symbol, next10Candle) => {\r\n        if (candleHist && candleHist.length > 0) {\r\n\r\n            candleHist = candleHist.reverse();\r\n            // console.log(symbol, \"candleHist\",candleHist, new Date().toString()); \r\n\r\n\r\n            var maxHigh = candleHist[2] && candleHist[2][2], maxLow = candleHist[2] && candleHist[2][3];\r\n            for (let index = 3; index < candleHist.length; index++) {\r\n                if (maxHigh < candleHist[index][2])\r\n                    maxHigh = candleHist[index][2];\r\n                if (candleHist[index][3] < maxLow)\r\n                    maxLow = candleHist[index][3];\r\n            }\r\n\r\n\r\n            var lastTrendCandleLow = candleHist[9][3];\r\n            var firstTrendCandleHigh = candleHist[2][2];\r\n\r\n            var firstCandle = {\r\n                time: candleHist[0] && candleHist[0][0],\r\n                open: candleHist[0] && candleHist[0][1],\r\n                high: candleHist[0] && candleHist[0][2],\r\n                low: candleHist[0] && candleHist[0][3],\r\n                close: candleHist[0] && candleHist[0][4]\r\n            }\r\n            var secondCandle = {\r\n                time: candleHist[1] && candleHist[1][0],\r\n                open: candleHist[1] && candleHist[1][1],\r\n                high: candleHist[1] && candleHist[1][2],\r\n                low: candleHist[1] && candleHist[1][3],\r\n                close: candleHist[1] && candleHist[1][4]\r\n            }\r\n\r\n\r\n\r\n            var diffPer = (firstTrendCandleHigh - lastTrendCandleLow) * 100 / lastTrendCandleLow;\r\n            var lowestOfBoth = secondCandle.low < firstCandle.low ? secondCandle.low : firstCandle.low;\r\n            var highestOfBoth = secondCandle.high < firstCandle.high ? secondCandle.high : firstCandle.high;\r\n            //uptrend movement 1.5% \r\n            //    console.log(symbol, \"last 8th candle diff% \",  diffPer, \"10th Low\", lastTrendCandleLow,\"3rd high\", firstTrendCandleHigh);\r\n\r\n\r\n            if (diffPer <= -1.5 && highestOfBoth < maxHigh && lowestOfBoth < maxLow) {\r\n                //1st candle #20d020 & 2nd candle is red check\r\n                if (secondCandle.open > secondCandle.close && firstCandle.close > firstCandle.open) {\r\n                    // console.log(symbol, \"candleHist\",candleHist); \r\n                    //  console.log(symbol, \"last 8th candle diff% \",  diffPer, \"10th Low\", lastTrendCandleLow,\"3rd high\", firstTrendCandleHigh);\r\n                    //  console.log(symbol, 'making twisser 1st #20d020 & 2nd red' , firstCandle, secondCandle );\r\n\r\n                    if (Math.round(secondCandle.close) == Math.round(firstCandle.open) || Math.round(secondCandle.open) == Math.round(firstCandle.close)) {\r\n\r\n                        console.log('%c' + new Date(candleHist[0][0]).toString(), 'color: #20d020');\r\n                        console.log(symbol, \"last 8th candle diff% \", diffPer, \"10th Low\", lastTrendCandleLow, \"3rd high\", firstTrendCandleHigh);\r\n\r\n                        console.log(symbol, \"maxHigh\", maxHigh, \"maxLow\", maxLow);\r\n                        console.log(\"last10Candle\", candleHist);\r\n                        console.log(symbol, 'perfect twisser top done close=open || open=close',);\r\n                        console.log(\"next10Candle\", next10Candle);\r\n\r\n                        if (next10Candle && next10Candle.length) {\r\n                            // next10Candle = next10Candle.reverse(); \r\n\r\n                            var buyEntyPrice = (highestOfBoth + (highestOfBoth / 100 / 10)).toFixed(2);\r\n                            var LowerStopLoss = (lowestOfBoth - (lowestOfBoth / 100 / 10)).toFixed(2);\r\n\r\n                            //flat 3:15 or SL hit squired off \r\n                            var squiredOffAt315 = 0, squareOffAt315Time = '';\r\n                            for (let indexTarget = 0; indexTarget < next10Candle.length; indexTarget++) {\r\n\r\n                                if (next10Candle[indexTarget][2] < LowerStopLoss) {\r\n                                    squiredOffAt315 = LowerStopLoss;\r\n                                    squareOffAt315Time = next10Candle[indexTarget][0];\r\n                                    break;\r\n                                }\r\n                                if (new Date(next10Candle[indexTarget][0]).toLocaleTimeString() == \"15:15:00\") {\r\n                                    squiredOffAt315 = next10Candle[indexTarget][4];\r\n                                    squareOffAt315Time = next10Candle[indexTarget][0];\r\n                                    break;\r\n                                }\r\n                            }\r\n                            //highest of 3:15 profit booking\r\n                            var highestOf315 = next10Candle[0][4], highestSquareOffAt = '';\r\n                            for (let indexTarget2 = 1; indexTarget2 < next10Candle.length; indexTarget2++) {\r\n                                if (highestOf315 < next10Candle[indexTarget2][4]) {\r\n                                    highestOf315 = next10Candle[indexTarget2][4];\r\n                                    highestSquareOffAt = next10Candle[indexTarget2][0];\r\n                                }\r\n                                if (new Date(next10Candle[indexTarget2][0]).toLocaleTimeString() == \"15:15:00\") {\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            //trailing profit till of 3:15 \r\n                            var trailingSL = LowerStopLoss, trailingSLAT = '';\r\n                            for (let indexTarget3 = 0; indexTarget3 < next10Candle.length; indexTarget3++) {\r\n                                if (trailingSL > next10Candle[indexTarget3][2]) {\r\n                                    trailingSL = (next10Candle[indexTarget3][2] + (next10Candle[indexTarget3][2] / 100 / 4)).toFixed(2);\r\n                                    trailingSLAT = next10Candle[indexTarget3][0];\r\n                                }\r\n                                else {\r\n                                    trailingSL = (next10Candle[indexTarget3][4]).toFixed(2);\r\n                                    trailingSLAT = next10Candle[indexTarget3][0];\r\n                                    break;\r\n                                }\r\n                                if (new Date(next10Candle[indexTarget3][0]).toLocaleTimeString() == \"15:15:00\") {\r\n                                    break;\r\n                                }\r\n                            }\r\n                            //flat 0.75% or SL hit profit booking\r\n                            var flatSellingPrice = 0, flatSellingPriceAt = '';\r\n                            for (let indexTarget4 = 0; indexTarget4 < next10Candle.length; indexTarget4++) {\r\n\r\n                                var priceDiff = (next10Candle[indexTarget4][3] - buyEntyPrice) * 100 / buyEntyPrice;\r\n\r\n                                if (priceDiff > 0.70) {\r\n                                    flatSellingPrice = next10Candle[indexTarget4][3];\r\n                                    flatSellingPriceAt = next10Candle[indexTarget4][0];\r\n                                    break;\r\n                                }\r\n                                if (next10Candle[indexTarget4][2] > LowerStopLoss) {\r\n                                    flatSellingPrice = LowerStopLoss;\r\n                                    flatSellingPriceAt = next10Candle[indexTarget4][0];\r\n                                    break;\r\n                                }\r\n                                if (new Date(next10Candle[indexTarget4][0]).toLocaleTimeString() == \"15:15:00\") {\r\n                                    flatSellingPrice = next10Candle[indexTarget4][3];\r\n                                    flatSellingPriceAt = next10Candle[indexTarget4][0];\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            //range based target range*1.5% or SL hit profit booking\r\n                            var rangeSellingPrice = 0, rangeSellingPriceAt = '';\r\n                            for (let indexTarget5 = 0; indexTarget5 < next10Candle.length; indexTarget5++) {\r\n\r\n                                var rangePriceDiff = (next10Candle[indexTarget5][3] - buyEntyPrice) * 100 / buyEntyPrice;\r\n\r\n                                if (rangePriceDiff >= -1.5) {\r\n                                    rangeSellingPrice = next10Candle[indexTarget5][3];\r\n                                    rangeSellingPriceAt = next10Candle[indexTarget5][0];\r\n                                    break;\r\n                                }\r\n                                if (next10Candle[indexTarget5][2] > LowerStopLoss) {\r\n                                    rangeSellingPrice = LowerStopLoss;\r\n                                    rangeSellingPriceAt = next10Candle[indexTarget5][0];\r\n                                    break;\r\n                                }\r\n                                if (new Date(next10Candle[indexTarget5][0]).toLocaleTimeString() == \"15:15:00\") {\r\n                                    rangeSellingPrice = next10Candle[indexTarget5][3];\r\n                                    rangeSellingPriceAt = next10Candle[indexTarget5][0];\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            var backTestResult = localStorage.getItem(\"backTestResult\") ? JSON.parse(localStorage.getItem(\"backTestResult\")) : [];\r\n\r\n\r\n                            if (next10Candle[0][3] < lowestOfBoth || next10Candle[1][3] < lowestOfBoth || next10Candle[2][3] < lowestOfBoth) {\r\n                                var foundStock = {\r\n                                    foundAt: new Date(candleHist[0][0]).toLocaleString(),\r\n                                    symbol: symbol,\r\n                                    sellEntyPrice: 0,\r\n                                    stopLoss: LowerStopLoss,\r\n                                    orderActivated: false,\r\n                                    buyExitPrice: buyEntyPrice,\r\n                                    brokerageCharges: 0.06,\r\n                                    quantity: Math.floor(10000 / buyEntyPrice),\r\n                                }\r\n                                foundStock.orderActivated = true;\r\n                                //sqr off at 3:15\r\n                                foundStock.squareOffAt = new Date(squareOffAt315Time).toLocaleString();\r\n                                foundStock.sellEntyPrice = squiredOffAt315;\r\n\r\n                                //  lowest of 3:15\r\n                                // foundStock.squareOffAt = new Date( lowestSquareOffAt ).toLocaleString();\r\n                                // foundStock.sellEntyPrice = lowestOf315 \r\n\r\n                                //trailing till 3:15\r\n                                // foundStock.squareOffAt = new Date( trailingSLAT ).toLocaleString();\r\n                                // foundStock.sellEntyPrice = trailingSL;\r\n\r\n                                //flat profit booking at 0.70%\r\n                                // foundStock.squareOffAt = new Date( flatSellingPriceAt ).toLocaleString();\r\n                                // foundStock.sellEntyPrice = flatSellingPrice;\r\n\r\n\r\n                                //range based target range*1.5%\r\n                                //    foundStock.squareOffAt = new Date( rangeSellingPriceAt ).toLocaleString();\r\n                                //    foundStock.sellEntyPrice = rangeSellingPrice;\r\n\r\n                                foundStock.perChange = ((foundStock.sellEntyPrice - foundStock.buyExitPrice) * 100 / foundStock.sellEntyPrice).toFixed(2);\r\n                                backTestResult.push(foundStock);\r\n\r\n                                this.setState({ backTestResult: [...this.state.backTestResult, foundStock] });\r\n\r\n                                //  localStorage.setItem('backTestResult', JSON.stringify(backTestResult));\r\n                            }\r\n\r\n\r\n\r\n\r\n                        }\r\n\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        this.setState({ backTestFlag: true });\r\n\r\n    }\r\n\r\n    getTimeFrameValue = (timeFrame) => {\r\n        //18 HOURS FOR BACK 1 DATE BACK MARKET OFF\r\n\r\n\r\n\r\n        switch (timeFrame) {\r\n            // case 'ONE_MINUTE':\r\n            //     if (new Date().toLocaleTimeString() < \"10:05:00\")\r\n            //         return \"19:00:00\";\r\n            //     else\r\n            //         return \"01:00:00\";\r\n            //     break;\r\n            // case 'FIVE_MINUTE':\r\n            //     if (new Date().toLocaleTimeString() < \"11:00:00\")\r\n            //         return \"23:00:00\";\r\n            //     else\r\n            //         return \"03:00:00\";\r\n            //     break;\r\n            // case 'TEN_MINUTE':\r\n            //     if (new Date().toLocaleTimeString() < \"12:35:00\")\r\n            //         return \"24:21:00\";\r\n            //     else\r\n            //         return \"07:00:00\";\r\n            //     break;\r\n            // case 'FIFTEEN_MINUTE':\r\n            //     if (new Date().toLocaleTimeString() < \"14:15:00\")\r\n            //         return \"28:01:00\";\r\n            //     else\r\n            //         return \"10:01:00\";\r\n            //     break;\r\n            // case 'THIRTY_MINUTE':\r\n            //     return \"100:01:00\";\r\n            //     break;\r\n            // case 'ONE_HOUR':\r\n            //     return \"200:01:00\";\r\n            //     break;\r\n            // case 'ONE_DAY':\r\n            //     return \"1000:01:00\";\r\n            //     break;\r\n            // default:\r\n            //     break;\r\n\r\n            case 'ONE_MINUTE':\r\n                return \"720:00:00\";\r\n                break;\r\n            case 'FIVE_MINUTE':\r\n                return \"1000:00:00\";\r\n                break;\r\n            case 'TEN_MINUTE':\r\n                return \"1000:00:00\";\r\n                break;\r\n            case 'FIFTEEN_MINUTE':\r\n                return \"1000:00:00\";\r\n                break;\r\n            case 'THIRTY_MINUTE':\r\n                return \"1000:00:00\";\r\n                break;\r\n            case 'ONE_HOUR':\r\n                return \"1000:00:00\";\r\n                break;\r\n            case 'ONE_DAY':\r\n                return \"1000:00:00\";\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    calculateSMA = (data, count) => {\r\n\r\n        //  console.log(\"smarowdata\", data, count);\r\n\r\n        var avg = function (data) {\r\n            var sum = 0;\r\n            for (var i = 0; i < data.length; i++) {\r\n                sum += data[i].close;\r\n            }\r\n            return sum / data.length;\r\n        };\r\n        var result = [];\r\n        for (var i = count - 1, len = data.length; i < len; i++) {\r\n            var val = avg(data.slice(i - count + 1, i));\r\n            result.push({ time: data[i].time, value: val });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    //   calculateBBValue = (data, type ) => {\r\n\r\n    //     console.log(\"smarowdata\", data , count); \r\n\r\n    //     var result = [];\r\n    //     for (var i=count - 1, len=data.length; i < len; i++){\r\n    //       var val = avg(data.slice(i - count + 1, i));\r\n    //       result.push({ time: data[i].time, value: val});\r\n    //     }\r\n    //     return result;\r\n    //   }\r\n\r\n\r\n\r\n    showStaticChart = (token, symbol, entryAt, exitAt) => {\r\n\r\n        \r\n\r\n        console.log('token, symbol, entryAt, exitAt', token, symbol, entryAt, exitAt)\r\n\r\n        this.setState({ chartStaticData: '' , lightChartSymbol :symbol }, function () {\r\n            console.log('reset done', token);\r\n        });\r\n\r\n    //     console.log(\"time in function \", this.state.timeFrame);\r\n\r\n        const format1 = \"YYYY-MM-DD HH:mm\";\r\n    //     // var time = moment.duration(\"10:50:00\");\r\n    //     // var startDate = moment(new Date()).subtract(time);\r\n    //     // var startdate = moment(this.state.startDate).subtract(time);\r\n    //     var beginningTime = moment('9:15am', 'h:mma');\r\n\r\n    //     let timeDuration = this.getTimeFrameValue(this.state.timeFrame);\r\n    //     var time = moment.duration(timeDuration);  //22:00:00\" for last day  2hours \r\n    //    // var startDate = moment(new Date(foundAt)).set()\r\n     \r\n       var startDate = moment(entryAt).set(\"hour\", '09').set(\"minute\", '15');\r\n        var enddate = moment(exitAt).set(\"hour\", '15').set(\"minute\", '30');\r\n\r\n\r\n        var data = {\r\n            \"exchange\": \"NSE\",\r\n            \"symboltoken\": token,\r\n            \"interval\": this.state.timeFrame, //ONE_DAY FIVE_MINUTE \r\n            \"fromdate\": moment(startDate).format(format1),\r\n            \"todate\": moment(enddate).format(format1) //moment(this.state.endDate).format(format1) /\r\n        }\r\n\r\n\r\n        AdminService.getHistoryData(data).then(res => {\r\n            let historyData = resolveResponse(res, 'noPop');\r\n            //    console.log(data); \r\n            if (historyData && historyData.data) {\r\n\r\n                var data = historyData.data;\r\n\r\n                const cdata = data.map(d => {\r\n                    return { time: new Date(d[0]).getTime(), open: parseFloat(d[1]), high: parseFloat(d[2]), low: parseFloat(d[3]), close: parseFloat(d[4]) }\r\n                });\r\n\r\n                var candleChartData = [], vwapdata = [], closeingData = [], highData = [], lowData = [], openData = [], valumeData = [], bbdata = [], volumeSeriesData = [];\r\n                data.forEach((element, loopindex) => {\r\n                    candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                    vwapdata.push([element[5], (element[2] + element[3] + element[4]) / 3]);\r\n                    closeingData.push(element[4]);\r\n                    highData.push(element[2]);\r\n                    lowData.push(element[3]);\r\n                    openData.push(element[3]);\r\n                    valumeData.push(element[5]);\r\n                    bbdata.push((element[2] + element[3] + element[4]) / 3);\r\n                    volumeSeriesData.push({ time: new Date(element[0]).getTime(), value: element[5], color: 'rgba(211, 211, 211, 1)' })\r\n\r\n                });\r\n\r\n                var input = {\r\n                    period: 20,\r\n                    values: bbdata,\r\n                    stdDev: 2\r\n                }\r\n\r\n                var bb = BollingerBands.calculate(input);\r\n                console.log(token, \"Bolinger band\", input, bb);\r\n\r\n                var bb = BollingerBands.calculate(input);\r\n                console.log(token, \"Bolinger band\", input, bb);\r\n\r\n                var inputRSI = { values: closeingData, period: 14 };\r\n                var rsiValues = RSI.calculate(inputRSI);\r\n\r\n                console.log(token, \"Rsi\", inputRSI, rsiValues);\r\n                console.log(token, \"vwap\", vwapdata, vwap(vwapdata));\r\n\r\n\r\n                this.setState({ chartStaticData: cdata, bblastValue: bb[bb.length - 1], vwapvalue: vwap(vwapdata), rsiValues: rsiValues.slice(Math.max(valumeData.length - 19, 1)), valumeData: valumeData.slice(Math.max(valumeData.length - 5, 1)) }, function () {\r\n                    // candleSeries.setData(this.state.chartStaticData); \r\n                    this.state.candleSeries.setData(this.state.chartStaticData);\r\n\r\n                    this.state.volumeSeries.setData(volumeSeriesData);\r\n\r\n                    var smaData = this.calculateSMA(this.state.chartStaticData, 20);\r\n\r\n                    this.state.smaLineSeries.setData(smaData);\r\n\r\n\r\n                    this.state.chart.subscribeCrosshairMove((param) => {\r\n\r\n                        var getit = param.seriesPrices[Symbol.iterator]();\r\n\r\n                        var string = \"\";\r\n                        var change = \"\";\r\n\r\n                        for (var elem of getit) {\r\n\r\n                            if (typeof elem[1] == 'object') {\r\n                                string += \" Open: <b>\" + elem[1].open + \"</b>\";\r\n                                string += \" High: <b>\" + elem[1].high + \"</b>\";\r\n                                string += \" Low: <b>\" + elem[1].low + \"</b>\";\r\n                                string += \" Close: <b>\" + elem[1].close + \"</b>\";\r\n                                change = (elem[1].close - elem[1].open) * 100 / elem[1].open;\r\n                                string += \" Chng: <b>\" + change.toFixed(2) + '%</b>';\r\n                            } else {\r\n                                string += \" &nbsp; \" + elem[1].toFixed(2) + \" \";\r\n                            }\r\n                        }\r\n\r\n                        if (param.time)\r\n                            string += \" Time: <b>\" + new Date(param.time).toLocaleString() + \"</b>\";\r\n                        else\r\n                            string += \" <b>Time: </b>\";\r\n\r\n\r\n                        const domElement = document.getElementById('showChartTitle');\r\n\r\n\r\n                        var str = \"<span style=color:green>\" + string + \"</span> \";\r\n                        if (change < 0)\r\n                            str = \"<span style=color:red>\" + string + \"</span> \";\r\n\r\n                        domElement.innerHTML = str;\r\n                    });\r\n\r\n\r\n                });\r\n\r\n\r\n                data && data.sort(function (a, b) {\r\n                    return new Date(b[0]) - new Date(a[0]);\r\n                });\r\n                if (data.length > 0) {\r\n                    localStorage.setItem('InstrumentHistroy', JSON.stringify(data));\r\n                    this.setState({ InstrumentHistroy: data });\r\n\r\n\r\n                    var upsideMoveCount = 0, downMoveCount = 0, totalSum = 0;\r\n                    data.forEach(element => {\r\n\r\n                        var per = (element[4] - element[1]) * 100 / element[1];\r\n                        if (per >= 0.3) {\r\n                            upsideMoveCount += 1;\r\n                        }\r\n                        if (per <= -0.3) {\r\n                            downMoveCount += 1;\r\n                        }\r\n\r\n                        totalSum += per;\r\n\r\n                    });\r\n\r\n\r\n                    this.setState({ downMoveCount: downMoveCount, upsideMoveCount: upsideMoveCount, totalPerchentageChange: totalSum, startingFrom: moment(startDate).format(format1) });\r\n\r\n\r\n                }\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    checkSlowMotionStock = (token, stock) => {\r\n\r\n        const format1 = \"YYYY-MM-DD HH:mm\";\r\n        var time = moment.duration(\"240:00:00\");  //22:00:00\" for last day  2hours \r\n        var startDate = moment(new Date()).subtract(time);\r\n        var dataDay = {\r\n            \"exchange\": 'NSE',\r\n            \"symboltoken\": token,\r\n            \"interval\": 'FIVE_MINUTE',\r\n            \"fromdate\": moment(startDate).format(format1),\r\n            \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n        }\r\n        AdminService.getHistoryData(dataDay).then(resd => {\r\n            let histdatad = resolveResponse(resd, 'noPop');\r\n            var DSMA = '';\r\n            if (histdatad && histdatad.data && histdatad.data.length) {\r\n                var candleDatad = histdatad.data;\r\n                var closeingDatadaily = [], valumeSum = 0;\r\n\r\n                var bigCandleCount = 0;\r\n\r\n                for (let index = candleDatad.length - 375; index < candleDatad.length; index++) {\r\n                    const element = candleDatad[index];\r\n\r\n                    if (element) {\r\n                        var per = (element[4] - element[1]) * 100 / element[1];\r\n\r\n                        if (per >= 0.4) {\r\n                            bigCandleCount += 1;\r\n                            console.log(stock.symbol, per, element[0]);\r\n\r\n                        }\r\n                        if (per <= -0.4) {\r\n                            bigCandleCount += 1;\r\n                            console.log(stock.symbol, per, element[0]);\r\n\r\n                        }\r\n                    }\r\n                }\r\n                console.log(\"Totalcount\", stock.symbol, bigCandleCount);\r\n                if (bigCandleCount <= 15) {\r\n\r\n                    stock.bigCandleCount = bigCandleCount;\r\n\r\n                    this.setState({ slowMotionStockList: [...this.state.slowMotionStockList, stock] }, function () {\r\n                        localStorage.setItem(\"slowMotionStockList\", JSON.stringify(this.state.slowMotionStockList));\r\n                    });\r\n                }\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    checkSlowMotionCheckLive = async () => {\r\n\r\n        for (let index = 0; index < this.state.slowMotionStockList.length; index++) {\r\n            const row = this.state.slowMotionStockList[index];\r\n            const format1 = \"YYYY-MM-DD HH:mm\";\r\n            var time = moment.duration(\"22:00:00\");  //22:00:00\" for last day  2hours \r\n            var startDate = moment(new Date()).subtract(time);\r\n            var dataDay = {\r\n                \"exchange\": 'NSE',\r\n                \"symboltoken\": row.token,\r\n                \"interval\": 'FIVE_MINUTE',\r\n                \"fromdate\": moment(startDate).format(format1),\r\n                \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n            }\r\n            AdminService.getHistoryData(dataDay).then(resd => {\r\n                let histdatad = resolveResponse(resd, 'noPop');\r\n                var DSMA = '';\r\n                if (histdatad && histdatad.data && histdatad.data.length) {\r\n                    var candleDatad = histdatad.data;\r\n                    var closeingDatadaily = [], valumeSum = 0;\r\n\r\n                    var bigCandleCount = 0, bullishCount = 0;\r\n\r\n                    for (let index = candleDatad.length - 3; index < candleDatad.length; index++) {\r\n                        const element = candleDatad[index];\r\n\r\n                        if (element) {\r\n\r\n                            var per = (element[4] - element[1]) * 100 / element[1];\r\n                            if (per >= 0.7) {\r\n                                bigCandleCount += 1;\r\n                            }\r\n                            if (per >= 0) {\r\n                                bullishCount += 1;\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                    if (bigCandleCount >= 1) {\r\n                        row.highlisht = true;\r\n                        window.document.title = \"SM: \" + row.symbol;\r\n                        console.log('hey listen, slow motion stock' + row.symbol + \" broken\");\r\n\r\n                        this.speckIt('hey listen, slow motion stock' + row.symbol + \" broken\");\r\n\r\n                        this.setState({ slowMotionStockList: this.state.slowMotionStockList })\r\n                    }\r\n                }\r\n\r\n            });\r\n            await new Promise(r => setTimeout(r, 310));\r\n        }\r\n\r\n    }\r\n\r\n    copyAll =()=> {\r\n        navigator.clipboard.writeText(this.state.copydata);\r\n        Notify.showSuccess(\"Copied to clickboard\")\r\n    }\r\n    checkLiveBids = async () => {\r\n\r\n        for (let index = 0; index < this.state.symbolList.length; index++) {\r\n            const row = this.state.symbolList[index];\r\n\r\n            AdminService.checkLiveBids(row.name).then(resd => {\r\n                // let histdatad = resolveResponse(resd, 'noPop');\r\n\r\n                console.log(\"bid\", resd.data.data);\r\n\r\n                // adhocMargin: \"0.48\"\r\n                // applicableMargin: \"19.00\"\r\n                // averagePrice: \"705.27\"\r\n                // basePrice: \"717.15\"\r\n                // bcEndDate: \"-\"\r\n                // bcStartDate: \"-\"\r\n                // buyPrice1: \"710.60\"\r\n                // buyPrice2: \"710.55\"\r\n                // buyPrice3: \"710.50\"\r\n                // buyPrice4: \"710.45\"\r\n                // buyPrice5: \"710.40\"\r\n                // buyQuantity1: \"6\"\r\n                // buyQuantity2: \"50\"\r\n                // buyQuantity3: \"33\"\r\n                // buyQuantity4: \"153\"\r\n                // buyQuantity5: \"100\"\r\n                // change: \"-6.55\"\r\n                // closePrice: \"0.00\"\r\n                // cm_adj_high_dt: \"28-SEP-21\"\r\n                // cm_adj_low_dt: \"28-SEP-20\"\r\n                // cm_ffm: \"4,96,600.56\"\r\n                // companyName: \"ICICI Bank Limited\"\r\n                // css_status_desc: \"Listed\"\r\n                // dayHigh: \"710.95\"\r\n                // dayLow: \"701.30\"\r\n                // deliveryQuantity: \"55,54,344\"\r\n                // deliveryToTradedQuantity: \"63.08\"\r\n                // exDate: \"29-JUL-21\"\r\n                // extremeLossMargin: \"3.50\"\r\n                // faceValue: \"2.00\"\r\n                // high52: \"735.40\"\r\n                // indexVar: \"-\"\r\n                // isExDateFlag: false\r\n                // isinCode: \"INE090A01021\"\r\n                // lastPrice: \"710.60\"\r\n                // low52: \"349.10\"\r\n                // marketType: \"N\"\r\n                // ndEndDate: \"-\"\r\n                // ndStartDate: \"-\"\r\n                // open: \"707.35\"\r\n                // pChange: \"-0.91\"\r\n                // previousClose: \"717.15\"\r\n                // priceBand: \"No Band\"\r\n                // pricebandlower: \"645.45\"\r\n                // pricebandupper: \"788.85\"\r\n                // purpose: \"DIVIDEND - RS 2 PER SHARE\"\r\n                // quantityTraded: \"88,05,883\"\r\n                // recordDate: \"30-JUL-21\"\r\n                // secDate: \"29-Sep-2021 14:00:00\"\r\n                // securityVar: \"15.02\"\r\n                // sellPrice1: \"710.65\"\r\n                // sellPrice2: \"710.70\"\r\n                // sellPrice3: \"710.75\"\r\n                // sellPrice4: \"710.80\"\r\n                // sellPrice5: \"710.85\"\r\n                // sellQuantity1: \"1,382\"\r\n                // sellQuantity2: \"719\"\r\n                // sellQuantity3: \"1,217\"\r\n                // sellQuantity4: \"4,159\"\r\n                // sellQuantity5: \"793\"\r\n                // series: \"EQ\"\r\n                // surv_indicator: \"-\"\r\n                // symbol: \"ICICIBANK\"\r\n                // totalBuyQuantity: \"10,31,358\"\r\n                // totalSellQuantity: \"8,75,359\"\r\n                // totalTradedValue: \"66,963.99\"\r\n                // totalTradedVolume: \"94,94,802\"\r\n\r\n                if (resd.data && resd.data.data.length) {\r\n\r\n                    let bidlivedata = resd.data.data[0];\r\n                    let biddata = {\r\n                        totalBuyQuantity: bidlivedata.totalBuyQuantity,\r\n                        totalSellQuantity: bidlivedata.totalSellQuantity,\r\n                        deliveryToTradedQuantity: bidlivedata.deliveryToTradedQuantity,\r\n                        symbol: bidlivedata.symbol,\r\n                        orderType: bidlivedata.totalBuyQuantity + \"|\" + bidlivedata.totalSellQuantity,\r\n                        nc: bidlivedata.pChange,\r\n                        ltp: bidlivedata.lastPrice,\r\n                    }\r\n\r\n                    this.setState({ liveBidsList: [...this.state.liveBidsList, biddata] }, function () {\r\n\r\n                        localStorage.setItem(\"liveBidsList\", JSON.stringify(this.state.liveBidsList));\r\n                    });\r\n\r\n\r\n                }\r\n\r\n            });\r\n            await new Promise(r => setTimeout(r, 100));\r\n        }\r\n\r\n    }\r\n\r\n    speckIt = (text) => {\r\n        var msg = new SpeechSynthesisUtterance();\r\n        msg.text = text.toString();\r\n        window.speechSynthesis.speak(msg);\r\n    }\r\n\r\n\r\n    dailyBasisInfoCheck = (token, element) => {\r\n        //this.setState({DailyBulishStatus: ''}); \r\n\r\n        const format1 = \"YYYY-MM-DD HH:mm\";\r\n\r\n        let timeDuration = this.getTimeFrameValue('ONE_DAY');\r\n        var time = moment.duration(timeDuration);  //22:00:00\" for last day  2hours \r\n        var startDateforDaily = moment(new Date()).subtract(time);\r\n        var dataDay = {\r\n            \"exchange\": 'NSE',\r\n            \"symboltoken\": token,\r\n            \"interval\": 'ONE_DAY',\r\n            \"fromdate\": moment(startDateforDaily).format(format1),\r\n            \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n        }\r\n        AdminService.getHistoryData(dataDay).then(resd => {\r\n            let histdatad = resolveResponse(resd, 'noPop');\r\n            var DSMA = '';\r\n            if (histdatad && histdatad.data && histdatad.data.length) {\r\n                var candleDatad = histdatad.data;\r\n                var closeingDatadaily = [], valumeSum = 0;\r\n\r\n\r\n                for (let index = candleDatad.length - 20; index < candleDatad.length; index++) {\r\n                    const element = candleDatad[index];\r\n                    if (element) {\r\n                        closeingDatadaily.push(element[4]);\r\n                        valumeSum += element[5];\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                DSMA = SMA.calculate({ period: 20, values: closeingDatadaily });\r\n                this.setState({ dailyAvgValume: valumeSum / 20 });\r\n\r\n                var DSMALastValue = DSMA && DSMA[DSMA.length - 1];\r\n                console.log(token, \"DSMA\", DSMALastValue);\r\n\r\n                if (DSMALastValue) {\r\n                    this.setState({ DailyBulishStatus: DSMALastValue, todayCurrentVolume: candleDatad[candleDatad.length - 1][5] });\r\n                }\r\n\r\n                if (candleDatad[candleDatad.length - 1][5] > valumeSum / 20) {\r\n                    console.log(\"crosssed voliue\", element);\r\n                    this.setState({ volumeCrossedList: [...this.state.volumeCrossedList, element] })\r\n                }\r\n\r\n            }\r\n\r\n\r\n        });\r\n    }\r\n\r\n   \r\n   \r\n    getPercentageColor = (percent) => {\r\n        percent = percent * 100;\r\n        var r = percent < 50 ? 255 : Math.floor(255 - (percent * 2 - 100) * 255 / 100);\r\n        var g = percent > 50 ? 255 : Math.floor((percent * 2) * 255 / 100);\r\n        return 'rgb(' + r + ',' + g + ',0)';\r\n    }\r\n\r\n\r\n  \r\n\r\n    getAveragePrice = (orderId) => {\r\n\r\n        var oderbookData = localStorage.getItem('oderbookData');\r\n        var averageprice = 0;\r\n        for (let index = 0; index < oderbookData.length; index++) {\r\n            if (oderbookData[index].orderid === 'orderId') {\r\n                averageprice = oderbookData[index].averageprice\r\n                this.setState({ averageprice: averageprice });\r\n                break;\r\n            }\r\n        }\r\n        return averageprice;\r\n    }\r\n    showCandleChart = (candleData, symbol, insiderow) => {\r\n\r\n\r\n        candleData = candleData && candleData.reverse();\r\n\r\n        localStorage.setItem('candleChartData', JSON.stringify(candleData))\r\n        localStorage.setItem('cadleChartSymbol', symbol)\r\n\r\n        if (insiderow)\r\n            localStorage.setItem('chartInfoDetails', JSON.stringify(insiderow));\r\n\r\n\r\n        document.getElementById('showCandleChart').click();\r\n    }\r\n\r\n    showCandleBothChart = (row) => {\r\n        var candleChartData = row.candleChartData && row.candleChartData.reverse();\r\n        localStorage.setItem('candleChartData', JSON.stringify(candleChartData))\r\n        localStorage.setItem('cadleChartSymbol', row.symbol)\r\n\r\n        var candleChartDataInside = row.candleChartDataInside;\r\n\r\n        if (candleChartDataInside)\r\n            localStorage.setItem('candleChartDataInside', JSON.stringify(candleChartDataInside));\r\n\r\n\r\n        document.getElementById('showCandleChart').click();\r\n    }\r\n\r\n    handleKeyDown = (e) => {\r\n\r\n        console.log(\"key\", e.keyCode);\r\n        //38 for down and 40 for up key\r\n        if (e.keyCode === 38 && this.state.cursor > 0) {\r\n            this.setState(prevState => ({ cursor: prevState.cursor - 1 }));\r\n        } else if (e.keyCode === 40 && this.state.cursor < this.state.symbolList.length - 1) {\r\n            this.setState(prevState => ({ cursor: prevState.cursor + 1 }))\r\n        }\r\n\r\n        setTimeout(() => {\r\n            this.updateCandleOnkey();\r\n        }, 100);\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const dateParam = {\r\n            myCallback: this.myCallback,\r\n            startDate: '',\r\n            endDate: '',\r\n            firstLavel: \"Start Date and Time\",\r\n            secondLavel: \"End Date and Time\"\r\n        }\r\n    \r\n        console.log(\"backTestResult\", this.state.backTestResult)\r\n\r\n        var sumPerChange = 0, sumBrokeragePer = 0, netSumPerChange = 0, sumPerChangeHighLow = 0, sumPnlValue = 0, sumPnlValueOnHighLow = 0, totalInvestedValue = 0, totalLongTrade = 0, totalShortTrade = 0;\r\n        var tradetotal = 0, totalWin = 0, totalLoss = 0, totalMarketEnd = 0, totalSlHit =0;\r\n        return (\r\n            <React.Fragment>\r\n                <PostLoginNavBar  />\r\n                <ChartDialog />\r\n                <Grid direction=\"row\" container spacing={1} style={{ padding: \"5px\" }} >\r\n\r\n\r\n\r\n                    <Grid item xs={12} sm={8}>\r\n\r\n\r\n                        <Paper style={{ padding: \"10px\" }}>\r\n                            <Typography style={{ textAlign: \"center\", background: \"lightgray\" }}>Backtest</Typography>\r\n\r\n                           \r\n\r\n                            <Grid direction=\"row\" container spacing={2}>\r\n\r\n\r\n                                <Grid item xs={12} sm={2}>\r\n                                    <FormControl style={styles.selectStyle}>\r\n                                        <InputLabel htmlFor=\"Nationality\">Pattern Type</InputLabel>\r\n                                        <Select value={this.state.patternType} name=\"patternType\" onChange={this.onChangePattern}>\r\n                                            <MenuItem value={\"TweezerTop\"}>Tweezer Top</MenuItem>\r\n                                            <MenuItem value={\"TweezerBottom\"}>Tweezer Bottom</MenuItem>\r\n                                            <MenuItem value={\"NR4\"}>NR4 @ 3:30pm </MenuItem>\r\n                                            <MenuItem value={\"NR4Trail\"}>Narrow Range 4 - Trail</MenuItem>\r\n\r\n                                            <MenuItem value={\"NR4ForNextDay\"}>NR4 For Next Day</MenuItem>\r\n\r\n                                            <MenuItem value={\"NR4_SameDay\"}>NR4 ByDate</MenuItem>\r\n                                            <MenuItem value={\"NR4_Daywide_daterage\"}>NR4 Daywise Range</MenuItem>\r\n                                            <MenuItem value={\"StrongCandle\"}>5min Strong Candle</MenuItem>\r\n                                            <MenuItem value={\"VolumePrice\"}>Volume Price Buy</MenuItem>\r\n                                            <MenuItem value={\"VolumePriceSell\"}>Volume Price Sell</MenuItem>\r\n\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} sm={2} >\r\n                                    <FormControl style={styles.selectStyle} >\r\n                                        <InputLabel htmlFor=\"gender\">Select Watchlist</InputLabel>\r\n                                        <Select value={this.state.selectedWatchlist} name=\"selectedWatchlist\" onChange={this.onChangeWatchlist}>\r\n                                            <MenuItem value={\"selectall\"}>{\"Select All\"}</MenuItem>\r\n                                            {this.state.totalWatchlist && this.state.totalWatchlist.map(element => (\r\n                                                <MenuItem value={element}>{element}</MenuItem>\r\n                                            ))\r\n                                            }\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n\r\n\r\n                                <Grid item xs={12} sm={4}>\r\n                                    <MaterialUIDateTimePicker callbackFromParent={dateParam} />\r\n                                </Grid>\r\n\r\n\r\n\r\n                                <Grid item xs={12} sm={4} style={{ marginTop: '5px' }}>\r\n                                    {this.state.backTestFlag ? <Button variant=\"contained\" onClick={() => this.backTestAnyPattern()}>Search</Button> : <> <Button> <Spinner /> &nbsp; <Button variant=\"contained\" onClick={() => this.stopBacktesting()}>Stop Scaning</Button> &nbsp;  {this.state.stockTesting} {this.state.runningTest}  </Button>   </>}\r\n                                    &nbsp; Failed: {this.state.searchFailed}\r\n\r\n                                </Grid>\r\n\r\n                               \r\n                            </Grid>\r\n\r\n                            <Grid direction=\"row\" container spacing={2}>\r\n\r\n                                <Grid item xs={12} sm={12}>\r\n\r\n\r\n                                <Table size=\"small\" aria-label=\"sticky table\" >\r\n\r\n                                <TableHead style={{ width: \"\", whiteSpace: \"nowrap\" }} variant=\"head\">\r\n                                    <TableRow style={{ background: \"lightgray\" }}>\r\n\r\n                                        <TableCell style={{ color: localStorage.getItem('sumPerChange') > 0 ? \"#20d020\" : \"#e66e6e\" }} ><b>{localStorage.getItem('sumPerChange')}%</b></TableCell>\r\n\r\n                                        {/* <TableCell style={{ color: \"#e66e6e\" }} ><b>{localStorage.getItem('sumBrokeragePer')}%</b></TableCell>\r\n                                <TableCell style={{ color: localStorage.getItem('netSumPerChange') > 0 ? \"#20d020\" : \"#e66e6e\" }} ><b>{localStorage.getItem('netSumPerChange')}%</b></TableCell> */}\r\n\r\n\r\n                                        <TableCell style={{ color: localStorage.getItem('sumPnlValue') > 0 ? \"#20d020\" : \"#e66e6e\" }} >{localStorage.getItem('sumPnlValue')}</TableCell>\r\n\r\n                                        <TableCell style={{ color: localStorage.getItem('sumPerChangeHighLow') > 0 ? \"#20d020\" : \"#e66e6e\" }} ><b>{localStorage.getItem('sumPerChangeHighLow')}%</b></TableCell>\r\n                                        <TableCell style={{ color: localStorage.getItem('sumPnlValueOnHighLow') > 0 ? \"#20d020\" : \"#e66e6e\" }} >{localStorage.getItem('sumPnlValueOnHighLow')}</TableCell>\r\n\r\n\r\n\r\n\r\n                                        <TableCell  title='Total Trades'>T.T: {this.state.backTestResult && this.state.backTestResult.length} &nbsp; W: {localStorage.getItem('totalWin')} L: {localStorage.getItem('totalLoss')}</TableCell>\r\n\r\n\r\n                                        <TableCell  title='L:long S:short'  colSpan={2}>L: {localStorage.getItem('totalLongTrade')} S:  {this.state.backTestResult && this.state.backTestResult.length - localStorage.getItem('totalLongTrade')}</TableCell>\r\n                                        <TableCell title='ME: MarketEnd SL: Stop Loss'  colSpan={2}> ME: {localStorage.getItem('totalMarketEnd')} SL: {localStorage.getItem('totalSlHit')}</TableCell>\r\n\r\n                                        <TableCell  title='TI: Total Invested ' colSpan={2}> TI:  {localStorage.getItem('totalInvestedValue')}</TableCell>\r\n\r\n                                        <TableCell title=\" Average gross/trade PnL: \"  colSpan={4}> A.g/t PnL:  <b style={{ color: (localStorage.getItem('sumPerChange') / this.state.backTestResult.length) > 0 ? \"#20d020\" : \"#e66e6e\" }} >{(localStorage.getItem('sumPerChange') / this.state.backTestResult.length).toFixed(2)}%</b>\r\n                                        \r\n                                        &nbsp; <CsvDownload filename={this.state.filename} data={this.state.backTestResult} />\r\n                                        <button onClick={()=> this.copyAll()} >Copy</button>\r\n                                        </TableCell>\r\n\r\n\r\n                                    </TableRow>\r\n                                    <TableRow variant=\"head\" style={{ fontWeight: 'bold' }}>\r\n\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" >CPnl% </TableCell>\r\n\r\n                                        {/* <TableCell className=\"TableHeadFormat\" >Charges</TableCell>\r\n                                <TableCell className=\"TableHeadFormat\" >Net PnL %</TableCell> */}\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" >CNetPnL </TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" title=\"High on long side | Low in short side\" >HLPnL% </TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" title=\"High on long side | Low in short side\" >HLNet PnL</TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" >Symbol</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" >Entry</TableCell>\r\n                                        {/* <TableCell className=\"TableHeadFormat\" >SquiredOffAt</TableCell> */}\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" >ExitStatus</TableCell>\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" >Buy</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" >Sell(Qty)</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" title=\"High on long side | Low in short side\" >High/Low</TableCell>\r\n\r\n\r\n                                        <TableCell className=\"TableHeadFormat\" >StopLoss</TableCell>\r\n                                        <TableCell className=\"TableHeadFormat\" >Day Chart </TableCell>\r\n\r\n\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                </Table>\r\n\r\n                                    {this.state.patternType == 'NR4' || this.state.patternType == 'TweezerTop' || this.state.patternType == 'TweezerBottom' || this.state.patternType == 'NR4_SameDay' || this.state.patternType == 'StrongCandle' || this.state.patternType == 'VolumePrice' || this.state.patternType == 'VolumePriceSell'  ? \r\n                                        <div style={{overflow:\"auto\", maxHeight:\"550px\"}}> \r\n\r\n                                        <Table size=\"small\" aria-label=\"sticky table\" >\r\n\r\n                                      \r\n                                        <TableBody style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n\r\n\r\n                                            {this.state.backTestResult ? this.state.backTestResult.map((row, i) => (\r\n\r\n\r\n\r\n                                                //    style={{display: row.orderActivated ? 'visible' : 'none'}} \"darkmagenta\" : \"#00cbcb\"\r\n                                                <TableRow hover key={i}  >\r\n\r\n                                                    <TableCell style={{ color: row.perChange > 0 ? \"#20d020\" : \"#e66e6e\" }}  {...sumPerChange = sumPerChange + parseFloat(row.perChange || 0)}>{row.perChange}%</TableCell>\r\n                                                    {/* <TableCell style={{ color: \"gray\" }}  {...sumBrokeragePer = sumBrokeragePer + parseFloat(row.brokerageCharges)}>{row.brokerageCharges}%</TableCell>\r\n        <TableCell style={{ color: (row.perChange - row.brokerageCharges) > 0 ? \"#20d020\" : \"#e66e6e\" }}  {...netSumPerChange = netSumPerChange + parseFloat(row.perChange - row.brokerageCharges)}> <b>{(row.perChange - row.brokerageCharges).toFixed(2)}%</b></TableCell>\r\n        */}\r\n                                                    <TableCell {...tradetotal = ((row.sellEntyPrice * (row.perChange - row.brokerageCharges) / 100) * row.quantity)} {...sumPnlValue = sumPnlValue + tradetotal} {...totalWin += (((row.sellEntyPrice * (row.perChange - row.brokerageCharges) / 100) * row.quantity) > 0 ? 1 : 0)} {...totalLoss += ((row.sellEntyPrice * (row.perChange - row.brokerageCharges) / 100) * row.quantity) < 0 ? 1 : 0} style={{ color: tradetotal > 0 ? \"#20d020\" : \"#e66e6e\" }}  > {tradetotal.toFixed(2)}</TableCell>\r\n\r\n                                                    <TableCell style={{ color: row.perChngOnHighLow > 0 ? \"#20d020\" : \"#e66e6e\" }}  {...sumPerChangeHighLow = sumPerChangeHighLow + parseFloat(row.perChngOnHighLow || 0)}> {row.perChngOnHighLow}%</TableCell>\r\n                                                    <TableCell {...sumPnlValueOnHighLow = sumPnlValueOnHighLow + ((row.sellEntyPrice * (row.perChngOnHighLow - row.brokerageCharges) / 100) * row.quantity)} style={{ color: ((row.sellEntyPrice * (row.perChngOnHighLow - row.brokerageCharges) / 100) * row.quantity) > 0 ? \"#20d020\" : \"#e66e6e\" }}  >{((row.sellEntyPrice * (row.perChngOnHighLow - row.brokerageCharges) / 100) * row.quantity).toFixed(2)}</TableCell>\r\n\r\n\r\n\r\n                                                    <TableCell > <Button variant=\"contained\" style={{ marginLeft: '20px' }} onClick={() => this.showCandleBothChart(row)}>{row.symbol} <EqualizerIcon /> </Button></TableCell>\r\n\r\n                                                    <TableCell  style={{ color: row.foundAt && row.foundAt.indexOf('Long') == 0 ? \"#20d020\" : \"#e66e6e\" }} {...totalLongTrade = totalLongTrade + (row.foundAt && row.foundAt.indexOf('Long') == 0 ? 1 : 0)}>{row.foundAt.substr(0, 18)}</TableCell>\r\n                                                    {/* <TableCell >{row.squareOffAt.substr(0, 10)}</TableCell> */}\r\n\r\n                                                    <TableCell {...totalMarketEnd += row.exitStatus ==='ME@3:30pm' ? 1 : 0}{...totalSlHit += row.exitStatus ==='SLHit' ? 1 : 0} >{row.exitStatus}</TableCell>\r\n\r\n                                                    <TableCell >{row.buyExitPrice}</TableCell>\r\n\r\n                                                    <TableCell  {...totalInvestedValue = totalInvestedValue + (row.foundAt && row.foundAt.indexOf('Long') == 0 ? parseFloat(row.buyExitPrice * row.quantity) : parseFloat(row.sellEntyPrice * row.quantity))}>{row.sellEntyPrice}({row.quantity})</TableCell>\r\n                                                    <TableCell title=\"High on long side | Low in short side\" >{row.highAndLow}</TableCell>\r\n\r\n\r\n                                                    <TableCell >{row.stopLoss}</TableCell>\r\n                                                    <TableCell > <Button variant=\"contained\" style={{ marginLeft: '20px' }} onClick={() => this.showStaticChart(row.token, row.symbol, row.chartDate, row.chartDate)}>Day<ShowChartIcon /> </Button></TableCell>\r\n\r\n\r\n                                                </TableRow>\r\n\r\n\r\n\r\n                                            )) : ''}\r\n                                           \r\n\r\n                                            <TableRow style={{ background: \"lightgray\" }} >\r\n\r\n                                                <TableCell style={{ color: sumPerChange > 0 ? \"#20d020\" : \"#e66e6e\" }} ><b>{localStorage.setItem('sumPerChange', sumPerChange.toFixed(2))}{sumPerChange.toFixed(2)}%</b></TableCell>\r\n\r\n                                                {/* <TableCell style={{ color: \"#e66e6e\" }} ><b>-{(sumBrokeragePer).toFixed(2)}%</b>{localStorage.setItem('sumBrokeragePer', sumBrokeragePer.toFixed(2))}</TableCell>\r\n<TableCell style={{ color: netSumPerChange > 0 ? \"#20d020\" : \"#e66e6e\" }} ><b>{(netSumPerChange).toFixed(2)}%</b>{localStorage.setItem('netSumPerChange', netSumPerChange.toFixed(2))}</TableCell> */}\r\n\r\n                                                <TableCell style={{ color: sumPnlValue > 0 ? \"#20d020\" : \"#e66e6e\" }} ><b>{(sumPnlValue).toFixed(2)}</b>{localStorage.setItem('sumPnlValue', sumPnlValue.toFixed(2))}</TableCell>\r\n\r\n                                                <TableCell style={{ color: sumPerChangeHighLow > 0 ? \"#20d020\" : \"#e66e6e\" }} ><b>{localStorage.setItem('sumPerChangeHighLow', sumPerChangeHighLow.toFixed(2))}{sumPerChangeHighLow.toFixed(2)}%</b></TableCell>\r\n                                                <TableCell style={{ color: sumPnlValueOnHighLow > 0 ? \"#20d020\" : \"#e66e6e\" }} ><b>{(sumPnlValueOnHighLow).toFixed(2)}</b>{localStorage.setItem('sumPnlValueOnHighLow', sumPnlValueOnHighLow.toFixed(2))}</TableCell>\r\n\r\n\r\n                                                <TableCell  > {localStorage.setItem('totalLongTrade', totalLongTrade)} {localStorage.setItem('totalInvestedValue', totalInvestedValue.toFixed(2))} </TableCell>\r\n\r\n                                                <TableCell >{localStorage.setItem('sumPerChangeHighLow', sumPerChangeHighLow.toFixed(2))} {localStorage.setItem('sumPnlValueOnHighLow', sumPnlValueOnHighLow.toFixed(2))}</TableCell>\r\n\r\n                                                <TableCell >{localStorage.setItem('totalWin', totalWin)}{localStorage.setItem('totalLoss', totalLoss)} {localStorage.setItem('totalMarketEnd', totalMarketEnd)} {localStorage.setItem('totalSlHit', totalSlHit)} </TableCell>\r\n\r\n\r\n                                                <TableCell  > </TableCell>\r\n                                                <TableCell > </TableCell>\r\n\r\n                                                <TableCell > </TableCell>\r\n                                                <TableCell > </TableCell>\r\n                                                <TableCell > </TableCell>\r\n                                                <TableCell > </TableCell>\r\n\r\n\r\n\r\n\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n\r\n\r\n                                        </Table>\r\n                                        </div>\r\n                                    \r\n\r\n                                        : \"\"}\r\n\r\n                                    {this.state.patternType == 'NR4_Daywide_daterage' ? <>\r\n\r\n                                        {this.state.dateAndTypeKeys ? this.state.dateAndTypeKeys.map(key => (\r\n\r\n                                            <Table size=\"small\" aria-label=\"sticky table\" style={{ padding: \"5px\" }}>\r\n                                                <TableHead style={{ width: \"\", whiteSpace: \"nowrap\" }} variant=\"head\">\r\n\r\n                                                    <TableRow style={{ background: \"lightgray\" }} key={key}>\r\n                                                        <TableCell colSpan={11} className=\"TableHeadFormat\" > {key}  {sumPerChange = 0, sumBrokeragePer = 0, netSumPerChange = 0, sumPerChangeHighLow = 0, sumPnlValue = 0, sumPnlValueOnHighLow = 0, totalInvestedValue = 0, totalLongTrade = 0, totalShortTrade = 0}</TableCell>\r\n                                                    </TableRow>\r\n\r\n                                                    <TableRow key={key + 1} variant=\"head\" style={{ fontWeight: 'bold', background: \"lightgray\" }}>\r\n\r\n\r\n                                                        <TableCell className=\"TableHeadFormat\" > CPnL% </TableCell>\r\n\r\n                                                        {/* <TableCell className=\"TableHeadFormat\" >Charges</TableCell>\r\n                        <TableCell className=\"TableHeadFormat\" >Net PnL %</TableCell> */}\r\n\r\n                                                        <TableCell className=\"TableHeadFormat\" >CNetPnL </TableCell>\r\n\r\n                                                        <TableCell className=\"TableHeadFormat\" title=\"High on long side | Low in short side\" >HLPnL% </TableCell>\r\n                                                        <TableCell className=\"TableHeadFormat\" title=\"High on long side | Low in short side\" >HLNet PnL</TableCell>\r\n\r\n                                                        <TableCell className=\"TableHeadFormat\" >Symbol</TableCell>\r\n                                                        <TableCell className=\"TableHeadFormat\" >FoundAt</TableCell>\r\n                                                        <TableCell className=\"TableHeadFormat\" >Buy</TableCell>\r\n                                                        <TableCell className=\"TableHeadFormat\" >Sell(Qty)</TableCell>\r\n                                                        <TableCell className=\"TableHeadFormat\" title=\"High on long side | Low in short side\" >High/Low</TableCell>\r\n\r\n\r\n                                                        <TableCell className=\"TableHeadFormat\" >SquiredOffAt</TableCell>\r\n                                                        <TableCell className=\"TableHeadFormat\" >StopLoss</TableCell>\r\n                                                        {/* <TableCell className=\"TableHeadFormat\" >Sr. </TableCell> */}\r\n\r\n\r\n                                                    </TableRow>\r\n\r\n                                                </TableHead>\r\n                                                <TableBody style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n\r\n\r\n\r\n                                                    {this.state.backTestResultDateRange[key].map((row, i) => (\r\n\r\n\r\n                                                        //    style={{display: row.orderActivated ? 'visible' : 'none'}} \"darkmagenta\" : \"#00cbcb\"\r\n\r\n                                                        <TableRow hover key={i}  >\r\n\r\n                                                            <TableCell style={{ color: row.perChange > 0 ? \"#20d020\" : \"#e66e6e\" }}  {...sumPerChange = sumPerChange + parseFloat(row.perChange || 0)}>{row.perChange}%</TableCell>\r\n                                                            {/* <TableCell style={{ color: \"gray\" }}  {...sumBrokeragePer = sumBrokeragePer + parseFloat(row.brokerageCharges)}>{row.brokerageCharges}%</TableCell>\r\n                            <TableCell style={{ color: (row.perChange - row.brokerageCharges) > 0 ? \"#20d020\" : \"#e66e6e\" }}  {...netSumPerChange = netSumPerChange + parseFloat(row.perChange - row.brokerageCharges)}> <b>{(row.perChange - row.brokerageCharges).toFixed(2)}%</b></TableCell>\r\n                        */}\r\n                                                            <TableCell {...sumPnlValue = sumPnlValue + ((row.sellEntyPrice * (row.perChange - row.brokerageCharges) / 100) * row.quantity)} style={{ color: ((row.sellEntyPrice * (row.perChange - row.brokerageCharges) / 100) * row.quantity) > 0 ? \"#20d020\" : \"#e66e6e\" }}  > {((row.sellEntyPrice * (row.perChange - row.brokerageCharges) / 100) * row.quantity).toFixed(2)}</TableCell>\r\n\r\n                                                            <TableCell style={{ color: row.perChngOnHighLow > 0 ? \"#20d020\" : \"#e66e6e\" }}  {...sumPerChangeHighLow = sumPerChangeHighLow + parseFloat(row.perChngOnHighLow || 0)}> <b>{row.perChngOnHighLow}%</b></TableCell>\r\n                                                            <TableCell {...sumPnlValueOnHighLow = sumPnlValueOnHighLow + ((row.sellEntyPrice * (row.perChngOnHighLow - row.brokerageCharges) / 100) * row.quantity)} style={{ color: ((row.sellEntyPrice * (row.perChngOnHighLow - row.brokerageCharges) / 100) * row.quantity) > 0 ? \"#20d020\" : \"#e66e6e\" }}  >{((row.sellEntyPrice * (row.perChngOnHighLow - row.brokerageCharges) / 100) * row.quantity).toFixed(2)}</TableCell>\r\n\r\n\r\n\r\n                                                            <TableCell > <Button variant=\"contained\" style={{ marginLeft: '20px' }} onClick={() => this.showCandleChart(row.candleChartData, row.symbol)}>{row.symbol} <EqualizerIcon /> </Button></TableCell>\r\n\r\n                                                            <TableCell  style={{ color: row.foundAt.indexOf('Long') == 0 ? \"#20d020\" : \"#e66e6e\" }} {...totalLongTrade = totalLongTrade + (row.foundAt.indexOf('Long') == 0 ? 1 : 0)}>{row.foundAt}</TableCell>\r\n                                                            <TableCell >{row.buyExitPrice}</TableCell>\r\n\r\n                                                            <TableCell  {...totalInvestedValue = totalInvestedValue + (row.foundAt.indexOf('Long') == 0 ? parseFloat(row.buyExitPrice * row.quantity) : parseFloat(row.sellEntyPrice * row.quantity))}>{row.sellEntyPrice}({row.quantity})</TableCell>\r\n                                                            <TableCell title=\"High on long side | Low in short side\" >{row.highAndLow}</TableCell>\r\n\r\n                                                            <TableCell >{row.squareOffAt}</TableCell>\r\n\r\n                                                            <TableCell >{row.stopLoss}</TableCell>\r\n                                                            {/* <TableCell >{i + 1}</TableCell> */}\r\n\r\n                                                        </TableRow>\r\n\r\n\r\n                                                    ))}\r\n\r\n\r\n\r\n                                                    <TableRow style={{ background: \"lightgray\" }} >\r\n\r\n                                                        <TableCell style={{ color: sumPerChange > 0 ? \"#20d020\" : \"#e66e6e\" }} ><b>{localStorage.setItem('sumPerChange', sumPerChange.toFixed(2))}{sumPerChange.toFixed(2)}%</b></TableCell>\r\n\r\n                                                        {/* <TableCell style={{ color: \"#e66e6e\" }} ><b>-{(sumBrokeragePer).toFixed(2)}%</b>{localStorage.setItem('sumBrokeragePer', sumBrokeragePer.toFixed(2))}</TableCell>\r\n            <TableCell style={{ color: netSumPerChange > 0 ? \"#20d020\" : \"#e66e6e\" }} ><b>{(netSumPerChange).toFixed(2)}%</b>{localStorage.setItem('netSumPerChange', netSumPerChange.toFixed(2))}</TableCell> */}\r\n\r\n                                                        <TableCell style={{ color: sumPnlValue > 0 ? \"#20d020\" : \"#e66e6e\" }} ><b>{(sumPnlValue).toFixed(2)}</b>{localStorage.setItem('sumPnlValue', sumPnlValue.toFixed(2))}</TableCell>\r\n\r\n                                                        <TableCell style={{ color: sumPerChangeHighLow > 0 ? \"#20d020\" : \"#e66e6e\" }} ><b>{localStorage.setItem('sumPerChangeHighLow', sumPerChangeHighLow.toFixed(2))}{sumPerChangeHighLow.toFixed(2)}%</b></TableCell>\r\n                                                        <TableCell style={{ color: sumPnlValueOnHighLow > 0 ? \"#20d020\" : \"#e66e6e\" }} ><b>{(sumPnlValueOnHighLow).toFixed(2)}</b>{localStorage.setItem('sumPnlValueOnHighLow', sumPnlValueOnHighLow.toFixed(2))}</TableCell>\r\n\r\n\r\n                                                        <TableCell  > {localStorage.setItem('totalLongTrade', totalLongTrade)} {localStorage.setItem('totalInvestedValue', totalInvestedValue.toFixed(2))} </TableCell>\r\n\r\n                                                        <TableCell >{localStorage.setItem('sumPerChangeHighLow', sumPerChangeHighLow.toFixed(2))} {localStorage.setItem('sumPnlValueOnHighLow', sumPnlValueOnHighLow.toFixed(2))}</TableCell>\r\n\r\n                                                        <TableCell ></TableCell>\r\n\r\n\r\n                                                        <TableCell  > </TableCell>\r\n                                                        <TableCell > </TableCell>\r\n\r\n                                                        <TableCell > </TableCell>\r\n                                                        <TableCell > </TableCell>\r\n\r\n\r\n\r\n\r\n                                                    </TableRow>\r\n\r\n                                                </TableBody>\r\n                                            </Table>\r\n\r\n\r\n\r\n                                        )) : ''}\r\n\r\n                                    </>\r\n\r\n                                        : \"\"}\r\n\r\n\r\n                                    {this.state.patternType == 'NR4ForNextDay' ?\r\n\r\n                                        <Typography component=\"h3\" variant=\"h6\" color=\"primary\" gutterBottom>\r\n                                            NR4 For Next Day  ({this.state.FoundPatternList.length})  at {this.state.endDate && this.state.endDate ? this.state.endDate.toString().substr(0, 16) : new Date().toString().substr(0, 16)}\r\n                                        </Typography>\r\n                                        : \"\"}\r\n\r\n                                    {this.state.patternType == 'NR4ForNextDay' ?\r\n                                        <Table size=\"small\" aria-label=\"sticky table\" >\r\n\r\n                                            <TableHead style={{ width: \"\", whiteSpace: \"nowrap\" }} variant=\"head\">\r\n\r\n                                                <TableRow variant=\"head\" style={{ fontWeight: 'bold' }}>\r\n\r\n                                                    <TableCell className=\"TableHeadFormat\" >Sr </TableCell>\r\n\r\n                                                    <TableCell className=\"TableHeadFormat\" >Symbol </TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >FoundAt </TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >Past Performance </TableCell>\r\n\r\n                                                    <TableCell className=\"TableHeadFormat\" >BuyAt</TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >SellAt</TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >High</TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >Low</TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >Close</TableCell>\r\n\r\n\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n\r\n\r\n\r\n                                                {this.state.FoundPatternList ? this.state.FoundPatternList.map((row, i) => (\r\n\r\n\r\n\r\n                                                    //    style={{display: row.orderActivated ? 'visible' : 'none'}} \"darkmagenta\" : \"#00cbcb\"\r\n                                                    <TableRow hover key={i}  >\r\n                                                        <TableCell >{i + 1}</TableCell>\r\n                                                        <TableCell > <Button variant=\"contained\" style={{ marginLeft: '20px' }} onClick={() => this.showCandleChart(row.candleChartData, row.symbol)}>{row.symbol} <EqualizerIcon /> </Button></TableCell>\r\n\r\n                                                        <TableCell >{row.foundAt.substr(0, 16)}</TableCell>\r\n                                                        <TableCell  title=\"based on last one 6 month\">\r\n\r\n                                                            <span style={{ background: row.pastPerferm.totalLongPer / row.pastPerferm.totalLongs >= 1 ? \"#92f192\" : \"\" }}><b>{row.pastPerferm.totalLongs}</b>  Longs:  {row.pastPerferm.totalLongPer}% ({(row.pastPerferm.totalLongPer / row.pastPerferm.totalLongs).toFixed(2)}% per trade)  </span> <br />\r\n                                                            Longs on High%: {row.pastPerferm.totalLongHighPer}%  ({(row.pastPerferm.totalLongHighPer / row.pastPerferm.totalLongs).toFixed(2)}% per trade)<br />\r\n                                                            {row.longCandles && row.longCandles.map((insiderow, i) => (\r\n                                                                <>\r\n                                                                    {/* <Button size=\"small\"  variant=\"contained\" style={{ marginLeft: '20px' }} onClick={() => this.showCandleChart(insiderow.candleChartData, row.symbol, insiderow)}> <EqualizerIcon /></Button> */}\r\n\r\n                                                                    <a style={{ textDecoration: 'underline', background: 'lightgray', cursor: 'pointer' }} onClick={() => this.showCandleChart(insiderow.candleChartData, row.symbol, insiderow)}> {insiderow.foundAt.substr(7, 10)} </a>  &nbsp;\r\n                                                                </>\r\n                                                            ))}\r\n\r\n                                                            <br />\r\n\r\n                                                            <span style={{ background: row.pastPerferm.totalShortPer / row.pastPerferm.totalShort >= 1 ? \"#e87b7b\" : \"\" }}><b>{row.pastPerferm.totalShort}</b> Short: {row.pastPerferm.totalShortPer}% ({(row.pastPerferm.totalShortPer / row.pastPerferm.totalShort).toFixed(2)}% per trade) </span> <br />\r\n                                                            Short on Low%: {row.pastPerferm.totalShortLowPer}% ({(row.pastPerferm.totalShortLowPer / row.pastPerferm.totalShort).toFixed(2)}% per trade)<br />\r\n                                                            {row.shortCandles && row.shortCandles.map((insiderow, i) => (\r\n                                                                <>\r\n                                                                    <a style={{ textDecoration: 'underline', background: 'lightgray', cursor: 'pointer' }} onClick={() => this.showCandleChart(insiderow.candleChartData, row.symbol, insiderow)}> {insiderow.foundAt.substr(7, 10)}  </a> &nbsp;\r\n\r\n\r\n                                                                </>\r\n                                                            ))}\r\n\r\n                                                        </TableCell>\r\n\r\n\r\n                                                        <TableCell >{row.BuyAt}</TableCell>\r\n                                                        <TableCell >{row.SellAt}</TableCell>\r\n                                                        <TableCell >{row.high}</TableCell>\r\n                                                        <TableCell >{row.low}</TableCell>\r\n                                                        <TableCell >{row.close}</TableCell>\r\n\r\n\r\n                                                    </TableRow>\r\n\r\n\r\n\r\n                                                )) : ''}\r\n\r\n                                            </TableBody>\r\n\r\n                                        </Table>\r\n\r\n                                        : \"\"}\r\n                                </Grid>\r\n\r\n\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={4}>\r\n\r\n                        <Paper style={{ padding: \"10px\" }}>\r\n\r\n                            <Grid style={{ display: \"visible\" }} spacing={1} direction=\"row\" alignItems=\"center\" container>\r\n\r\n                                \r\n                                <Grid item xs={12} sm={12}  >\r\n                                    <Grid  spacing={1} direction=\"row\" alignItems=\"center\" container>\r\n                                        <Grid item xs={12} sm={2} > \r\n                                         <FormControl style={styles.selectStyle} style={{ marginTop: '10px' }} >\r\n                                        <Select value={this.state.timeFrame} name=\"timeFrame\" onChange={this.onInputChange}>\r\n                                            <MenuItem value={'ONE_MINUTE'}>{'1M'}</MenuItem>\r\n                                            <MenuItem value={'FIVE_MINUTE'}>{'5M'}</MenuItem>\r\n                                            <MenuItem value={'TEN_MINUTE'}>{'10M'}</MenuItem>\r\n                                            <MenuItem value={'FIFTEEN_MINUTE'}>{'15M'}</MenuItem>\r\n                                            <MenuItem value={'THIRTY_MINUTE'}>{'30M'}</MenuItem>\r\n                                            <MenuItem value={'ONE_HOUR'}>{'1H'}</MenuItem>\r\n                                            <MenuItem value={'ONE_DAY'}>{'1D'}</MenuItem>\r\n                                        </Select>\r\n                                        </FormControl>\r\n                                    \r\n\r\n                                         </Grid>\r\n                                         <Grid item xs={12} sm={10} > \r\n                                         <Typography>Same Day Chart:  {this.state.lightChartSymbol}</Typography>\r\n\r\n                                         </Grid>\r\n                                        \r\n                                    </Grid>\r\n                                    \r\n\r\n                                        \r\n\r\n                                    <div id=\"showChartTitle\"></div>\r\n                                    <div id=\"tvchart\"></div>\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} sm={12} style={{ overflowY: 'scroll', height: \"40vh\" }} >\r\n                                <Typography> Candle Data </Typography>\r\n\r\n                                    <Table size=\"small\" aria-label=\"sticky table\" >\r\n                                        <TableHead style={{ width: \"\", whiteSpace: \"nowrap\" }} variant=\"head\">\r\n                                            <TableRow variant=\"head\" style={{ fontWeight: 'bold' }} >\r\n\r\n                                                <TableCell className=\"TableHeadFormat\" >Symbol</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" >Timestamp</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" >Chng% <b style={{ color: '#20d020' }}> UP({this.state.upsideMoveCount})</b> | <b style={{ color: 'red' }}> Down({this.state.downMoveCount})</b> </TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" >Open</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" >High</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" >Low</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" >Close </TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" >Volume</TableCell>\r\n\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n                                            {/* this.getPercentageColor((row[4] - row[1])*100/row[1] >= 0.3)  */}\r\n                                            {this.state.InstrumentHistroy && this.state.InstrumentHistroy ? this.state.InstrumentHistroy.map((row, i) => (\r\n                                                <TableRow key={i} style={{ background: (row[4] - row[1]) * 100 / row[1] >= 0.3 ? \"#20d020\" : (row[4] - row[1]) * 100 / row[1] <= -0.3 ? \"#e66e6e\" : \"none\" }} >\r\n\r\n                                                    <TableCell >{this.state.tradingsymbol}</TableCell>\r\n                                                    <TableCell >{new Date(row[0]).toLocaleString()}</TableCell>\r\n                                                    <TableCell > <b>{(row[4] - row[1]) * 100 / row[1] && ((row[4] - row[1]) * 100 / row[1]).toFixed(2)}%</b></TableCell>\r\n                                                    <TableCell >{row[1]}</TableCell>\r\n                                                    <TableCell >{row[2]}</TableCell>\r\n                                                    <TableCell >{row[3]}</TableCell>\r\n                                                    <TableCell >{row[4]}</TableCell>\r\n                                                    <TableCell >{row[5]}</TableCell>\r\n\r\n                                                </TableRow>\r\n                                            )) : ''}\r\n\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </Grid>\r\n\r\n\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n\r\n\r\n\r\n\r\n                </Grid>\r\n\r\n            </React.Fragment>\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst styles = {\r\n    formContainer: {\r\n        display: 'flex',\r\n        flexFlow: 'row wrap'\r\n    },\r\n\r\n    textStyle: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n\r\n    },\r\n    imgStyle: {\r\n        display: 'flex'\r\n    },\r\n\r\n    selectStyle: {\r\n        minWidth: '100%',\r\n        marginBottom: '10px'\r\n    },\r\n    MuiTextField: {\r\n        overflowY: 'scroll',\r\n        fontSize: \"12px\",\r\n        maxHeight: \"50px\",\r\n\r\n    },\r\n    footerButton: {\r\n        position: 'fixed',\r\n        left: 0,\r\n        bottom: '20px',\r\n        width: '100%',\r\n        textAlign: 'right'\r\n    }\r\n\r\n};\r\n\r\nexport default Home;\r\n\r\n","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport { resolveResponse } from \"../../utils/ResponseHandler\";\r\nimport MaterialUIDateTimePicker from '../../utils/MaterialUIDateTimePicker';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport * as moment from 'moment';\r\nimport Notify from \"../../utils/Notify\";\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Spinner from \"react-spinner-material\";\r\nimport { createChart } from 'lightweight-charts';\r\nimport ChartDialog from './ChartDialog';\r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\nimport vwap from 'vwap';\r\nimport { SMA, RSI, VWAP, BollingerBands } from 'technicalindicators';\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport CsvDownload from 'react-json-to-csv'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport worker_script from './worker';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sumPercentage: 0,\r\n            InstrumentPerChange: \"\",\r\n            autoSearchList: [],\r\n            isDasable: false,\r\n            isError: false,\r\n            InstrumentLTP: {},\r\n            ifNotBought: true,\r\n            autoSearchTemp: [],\r\n            backTestResult: [],\r\n            backTestResultCSV: [],\r\n            backTestFlag: true,\r\n            patternType: \"NR4\",  //NR4ForNextDay  NR4_SameDay\r\n            symboltoken: \"\",\r\n            tradingsymbol: \"\",\r\n            buyPrice: 0,\r\n            quantity: 1,\r\n            producttype: \"INTRADAY\",\r\n            symbolList: localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')) || [],\r\n            totalWatchlist: localStorage.getItem('totalWatchlist') && JSON.parse(localStorage.getItem('totalWatchlist')) || [],\r\n            staticData: localStorage.getItem('staticData') && JSON.parse(localStorage.getItem('staticData')) || {},\r\n            selectedWatchlist: 'NIFTY BANK', //'Securities in F&O',\r\n            longExitPriceType: 4,\r\n            shortExitPriceType: 4,\r\n            candleChartData: [],\r\n            stopScaningFlag: false,\r\n            backTestResultDateRange: [],\r\n            searchFailed: 0,\r\n            FoundPatternList: localStorage.getItem('FoundPatternList') && JSON.parse(localStorage.getItem('FoundPatternList')) || [],\r\n            fastMovementList: localStorage.getItem('fastMovementList') && JSON.parse(localStorage.getItem('fastMovementList')) || [],\r\n            newJsonList: [],\r\n            timeFrame: \"FIFTEEN_MINUTE\",\r\n            overAllResult: [],\r\n            pertradePandL: 0,\r\n            pertradePandLNet: 0,\r\n            allQniqueStockList: [],\r\n            isSameDayDuplcate: true,\r\n            stockWiseListOverall: [],\r\n            filename: \"\",\r\n            overallMonthWise: [],\r\n            entryCandlePoint:5,\r\n            totalWinTrade:0, \r\n            maxDrowDown:0, \r\n            maxProfit:0, \r\n            crossedTargetCount: 0, \r\n            orderType:\"buy\",\r\n            targetPer: 0.5\r\n        \r\n        };\r\n\r\n    }\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n\r\n    onInputChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value }, function () {\r\n            //    console.log(\"time\", this.state.timeFrame);\r\n            if (this.state.tradingsymbol) {\r\n                this.showStaticChart(this.state.symboltoken);\r\n            }\r\n        });\r\n    }\r\n    handleChange = (event) => {\r\n\r\n        this.setState({ isSameDayDuplcate: event.target.checked }, () => {\r\n            console.log(\"isSameDayDuplcate\", this.state.isSameDayDuplcate, event.target.checked);\r\n        })\r\n\r\n    };\r\n    componentDidMount() {\r\n\r\n\r\n\r\n        window.document.title = \"Backtest\";\r\n        this.setState({ symbolList: this.state.staticData[this.state.selectedWatchlist] });\r\n        var myWorker = new Worker(worker_script);\r\n        this.setState({ myWorker :  myWorker}); \r\n\r\n        const domElement = document.getElementById('tvchart');\r\n        document.getElementById('tvchart').innerHTML = '';\r\n        const chart = createChart(domElement, { width: 500, height: 250, timeVisible: true, secondsVisible: true, });\r\n        const candleSeries = chart.addCandlestickSeries();\r\n        var smaLineSeries = chart.addLineSeries({\r\n            color: 'rgba(4, 111, 232, 1)',\r\n            lineWidth: 2,\r\n        });\r\n        var volumeSeries = chart.addHistogramSeries({\r\n            color: '#26a69a',\r\n            priceFormat: {\r\n                type: 'volume',\r\n            },\r\n            priceScaleId: '',\r\n            scaleMargins: {\r\n                top: 0.8,\r\n                bottom: 0,\r\n            },\r\n        });\r\n\r\n        this.setState({ chart: chart, candleSeries: candleSeries, smaLineSeries: smaLineSeries, volumeSeries: volumeSeries });\r\n        \r\n        AdminService.updateStockList().then(res => {\r\n            this.setState({stockList:  res.data}); \r\n        })\r\n        \r\n\r\n\r\n\r\n    }\r\n\r\n    stopBacktesting = () => {\r\n        this.setState({ stopScaningFlag: true });\r\n    }\r\n\r\n    readCsv = async (callback) => {\r\n        this.setState({ newJsonList: [] })\r\n        let csvFormatInput = this.state.csvFormatInput.trim().split('\\n');\r\n        for (let index = 0; index < csvFormatInput.length; index++) {\r\n            const element = csvFormatInput[index];\r\n            let symbol = element.split('\\t')[1];\r\n            let startTime = element.split('\\t')[0];\r\n            this.setState({ stockTesting: index + 1 + \". \" + symbol + \" getting details\" })\r\n\r\n            //   console.log(element, symbol, startTime);\r\n\r\n            // \"13-01-2022 11:20\\tSHREEPUSHK\\tSmallcap\\tIndustrials\"\r\n\r\n            AdminService.autoCompleteSearch(symbol).then(searchRes => {\r\n\r\n                let searchResdata = searchRes.data;\r\n                var found = searchResdata.filter(row => row.exch_seg === \"NSE\" && row.lotsize === \"1\" && row.name === symbol);\r\n                //     console.log(\"found\",  found)\r\n\r\n                if (found.length) {\r\n                    found[0].startTime = startTime;\r\n                    this.setState({ newJsonList: [...this.state.newJsonList, found[0]] }, () => {\r\n                        if (csvFormatInput.length - 1 == index) {\r\n                            callback()\r\n                        }\r\n                    });\r\n                }\r\n\r\n            })\r\n\r\n            await new Promise(r => setTimeout(r, 150));\r\n        }\r\n    }\r\n\r\n    getAlltokenOfList = (callback) => {\r\n        let listofstockfound = [];\r\n        let allStockWithTime = [];\r\n        let updateList = [];\r\n        let csvFormatInput = this.state.csvFormatInput.trim().split('\\n');\r\n        for (let index = 0; index < csvFormatInput.length; index++) {\r\n            const element = csvFormatInput[index];\r\n\r\n            let name = element.split('\\t')[1];\r\n            let startTime = element.split('\\t')[0];\r\n\r\n            this.setState({ stockTesting: index + 1 + \". \" + name + \" getting details\" });\r\n            allStockWithTime.push({ name: name, startTime: startTime });\r\n            let found = listofstockfound.filter((item) => item.name === name);\r\n            if (!found[0]) {\r\n                listofstockfound.push({ name: name });\r\n            }\r\n        }\r\n        this.setState({ totaluniqueStocks: listofstockfound.length, allQniqueStockList: listofstockfound })\r\n\r\n        if (this.state.stockList.length > 0) {\r\n            for (let index = 0; index < allStockWithTime.length; index++) {\r\n                const element = allStockWithTime[index];\r\n                let filerdata = this.state.stockList.filter((item => item.name == element.name));\r\n                if (filerdata.length > 0) {\r\n                    let data = {\r\n                        symbol: filerdata[0].symbol,\r\n                        name: filerdata[0].name,\r\n                        startTime: element.startTime,\r\n                        token: filerdata[0].token,\r\n                    }\r\n                    updateList.push(data);\r\n                }\r\n            }\r\n            callback(updateList, listofstockfound, this.state.stockList);\r\n        }else{\r\n            AdminService.getAllListTokens(listofstockfound).then(searchRes => {\r\n                let searchResdata = searchRes.data;\r\n                if (searchResdata.length > 0) {\r\n                    for (let index = 0; index < allStockWithTime.length; index++) {\r\n                        const element = allStockWithTime[index];\r\n                        let filerdata = searchResdata.filter((item => item.name == element.name));\r\n                        if (filerdata.length > 0) {\r\n                            let data = {\r\n                                symbol: filerdata[0].symbol,\r\n                                name: filerdata[0].name,\r\n                                startTime: element.startTime,\r\n                                token: filerdata[0].token,\r\n                            }\r\n                            updateList.push(data);\r\n                        }\r\n                    }\r\n                }\r\n                callback(updateList, listofstockfound, searchResdata);\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    getDateFormate = (givendate, time) => {\r\n        let dateinfo = givendate.split(' ');\r\n        let sdate = dateinfo[0].split('-');\r\n        return moment(sdate[2] + '/' + sdate[1] + '/' + sdate[0] + ' ' + time);\r\n    }\r\n\r\n    convertDateFormat = (datetime) => {\r\n        let dateinfo = datetime.split(' ');\r\n        let date = dateinfo[0].split('-');\r\n        let input = date[2] + '/' + date[1] + '/' + date[0];\r\n        let time = '';\r\n        if (dateinfo && dateinfo[1]) {\r\n            time = moment(dateinfo[1], 'HH:mm').format('HH:mm');\r\n        }\r\n        // console.log(time)\r\n        return moment(input + ' ' + time);\r\n    }\r\n\r\n    getPerChangeOfStock = (histdata, stockInfo) => {\r\n\r\n        if (histdata.length > 0) {\r\n\r\n            var candleData = histdata;\r\n            let entryCandlePoint = this.state.entryCandlePoint; \r\n            let entryPrice = candleData[0][entryCandlePoint]\r\n            if(entryCandlePoint == 5){\r\n                entryPrice =  (candleData[0][2] + candleData[0][3]) / 2; \r\n            }\r\n\r\n            if(entryCandlePoint == 6){\r\n                candleData.forEach(element => {\r\n                    if(element[2] >  (candleData[0][2] + (candleData[0][2] / 100 / 10))){\r\n                        entryPrice = (candleData[0][2] + (candleData[0][2] / 100 / 10)); //candleData[0][2]; \r\n                        return;\r\n                    }\r\n                });\r\n            }\r\n            if(entryCandlePoint == 7){\r\n                candleData.forEach(element => {\r\n                    if(element[3] < (candleData[0][3] - (candleData[0][3] / 100 / 10))){\r\n                        entryPrice = (candleData[0][3] - (candleData[0][3] / 100 / 10)) //candleData[0][3]; \r\n                        return;\r\n                    }\r\n                });\r\n            }\r\n            \r\n            let stock = {\r\n                name: stockInfo.name,\r\n                symbol: stockInfo.symbol,\r\n                token: stockInfo.token,\r\n                entryPrice: entryPrice.toFixed(2),\r\n                foundAt: moment(candleData[0][0]).format('YYYY-MM-DD HH:mm')\r\n            }\r\n\r\n            let priceChangeList = [];  \r\n            for (let index2 = 1; index2 < candleData.length; index2++) {\r\n                let perChange = (candleData[index2][4] - stock.entryPrice) * 100 / stock.entryPrice;\r\n                let datetime = moment(candleData[index2][0]).format('h:mma')\r\n                if (this.state.timeFrame == 'ONE_DAY') {\r\n                    datetime = moment(candleData[index2][0]).format('DD/MM/YYYY h:mma')\r\n                }\r\n                if(perChange < this.state.maxDrowDown){\r\n                    this.setState({maxDrowDown : perChange.toFixed(2)}); \r\n                }\r\n                if(perChange > this.state.maxProfit){\r\n                    this.setState({maxProfit : perChange.toFixed(2)}); \r\n                }\r\n                priceChangeList.push({ perChange: perChange.toFixed(2), close: candleData[index2][4], datetime: datetime });\r\n            }\r\n\r\n            for (let index3 = 1; index3 < candleData.length; index3++) {\r\n                if(this.state.orderType == \"buy\") {\r\n                    let perChange = (candleData[index3][2] - stock.entryPrice) * 100 / stock.entryPrice;\r\n                    if(perChange >= this.state.targetPer){\r\n                        this.setState({crossedTargetCount : this.state.crossedTargetCount+1 }); \r\n                        break; \r\n                    }\r\n                }\r\n                if(this.state.orderType == \"sell\"){\r\n                    let perChange = (candleData[index3][3] - stock.entryPrice) * 100 / stock.entryPrice;\r\n                    if(perChange <= -this.state.targetPer){\r\n                        this.setState({crossedTargetCount : this.state.crossedTargetCount+1 }); \r\n                        break; \r\n                    }\r\n                }\r\n            }\r\n\r\n            stock.candleData = priceChangeList;\r\n            let isWinOnClosing = priceChangeList[priceChangeList.length-1].perChange > 0 ? true : false;\r\n            stock.isWinOnClosing = isWinOnClosing; \r\n            if(isWinOnClosing){\r\n                this.setState({ totalWinTrade: this.state.totalWinTrade+1 })\r\n            }\r\n            \r\n            if(stock.entryPrice > 0){\r\n                this.setState({ backTestResult: [...this.state.backTestResult, stock] }, () => {});\r\n            }\r\n        } else {\r\n            console.log(\" candle data emply\");\r\n            this.setState({ searchFailed: this.state.searchFailed + 1 })\r\n\r\n        }\r\n    }\r\n\r\n\r\n    backTestAnyPatternStockWise = () => {\r\n       \r\n        if(this.state.csvFormatInput){\r\n\r\n            this.setState({ backTestResult: [], overAllResult: [],stockWiseListOverall:[], backTestFlag: false, filename: '', searchFailed: 0, pertradePandL: 0, pertradePandLNet: 0 });\r\n            this.setState({ totalgross: 0, totalAvg: 0, totTrade: 0, totalNet: 0, totalExp: 0,totalWinTrade:0,   maxDrowDown:0, maxProfit:0, crossedTargetCount: 0 });\r\n    \r\n            this.getAlltokenOfList(async (newJsonList, listofstockfound, searchResdata) => {\r\n\r\n                //    newJsonList.sort((a, b) => a.startTime.localeCompare(b.startTime));\r\n                // console.log(\"newJsonList\",newJsonList[0].startTime, newJsonList[newJsonList.length-1 ].startTime);\r\n    \r\n                for (let index = 0; index < listofstockfound.length; index++) {\r\n    \r\n                    if (this.state.stopScaningFlag) {\r\n                        this.setState({ stopScaningFlag: false })\r\n                        break;\r\n                    }\r\n    \r\n                    const element = listofstockfound[index];\r\n                     console.log(\"unique loop\", element, new Date().toLocaleTimeString())\r\n    \r\n                    let filerdata = searchResdata.filter((item => item.name == element.name));\r\n                    let stocktoken = filerdata.length > 0 ? filerdata[0].token : \"\";\r\n                    if (stocktoken) {\r\n    \r\n                        \r\n                        let sameAllStock = newJsonList.filter((item => item.name == element.name));\r\n                      //  console.log(\"sameAllStock\",sameAllStock); \r\n    \r\n                        if(this.state.isSameDayDuplcate){\r\n                            let singleDatewiseSamestock = [];\r\n                            sameAllStock.forEach(elementstock => {\r\n                                let uniquestock = singleDatewiseSamestock.filter((item => moment(item.startTime).format('YYYY-MM-DD') == moment(elementstock.startTime).format('YYYY-MM-DD')));\r\n                                if(!uniquestock.length)\r\n                                singleDatewiseSamestock.push(elementstock); \r\n                            });\r\n                            sameAllStock = singleDatewiseSamestock;\r\n                        }\r\n                 \r\n                        let datelist = [];\r\n                        sameAllStock.forEach(elementsame => {\r\n                            datelist.push(this.convertDateFormat(elementsame.startTime))\r\n                        });\r\n    \r\n                        let momentsDates = datelist.map(d => moment(d));\r\n                        let startDate = moment.min(momentsDates);\r\n                        let endDate = moment.max(momentsDates);\r\n    \r\n                        if(this.state.entryTimeAt){\r\n                            startDate =  startDate.format(\"YYYY-MM-DD\")+ ' ' + this.state.entryTimeAt; \r\n                        }\r\n    \r\n    \r\n                        var data = {\r\n                            \"exchange\": \"NSE\",\r\n                            \"symboltoken\": stocktoken,\r\n                            \"interval\": this.state.timeFrame, //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                            \"fromdate\": moment(startDate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                            \"todate\": moment(endDate.format(\"YYYY-MM-DD\")+ ' ' + '15:30').format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n                        }\r\n    \r\n                        AdminService.getHistoryData(data).then(res => {\r\n                            let histdata = resolveResponse(res, 'noPop');\r\n                            if (histdata && histdata.data && histdata.data.length) {\r\n    \r\n                                console.log(\"history\", element, new Date().toLocaleTimeString())\r\n    \r\n    \r\n                                for (let index = 0; index < sameAllStock.length; index++) {\r\n                                    const samestock = sameAllStock[index];\r\n    \r\n                                    let foundat = this.convertDateFormat(samestock.startTime);\r\n                                    let endtime = moment(foundat.format('YYYY-MM-DD') + ' ' + '15:30');\r\n                                    // console.log(\"startime\",foundat, endtime)\r\n    \r\n                                    let chunkCandleData = histdata.data.filter((candleInfo => moment(candleInfo[0]).isSameOrAfter(foundat) && moment(candleInfo[0]).isSameOrBefore(endtime)))  //isBetween(foundat, endtime);\r\n    \r\n                                  //    console.log(\"chunkdata\", stock,chunkCandleData )\r\n                             //     console.log(\"inside for loop start\", samestock, new Date().toLocaleTimeString())\r\n    \r\n                                    this.getPerChangeOfStock(chunkCandleData, samestock);\r\n                                //    console.log(\"inside\", samestock, new Date().toLocaleTimeString())\r\n                                }\r\n                                // sameAllStock.forEach((stock, i) => {\r\n    \r\n                                //     console.log(\"inside foreach loop\", stock, new Date().toLocaleTimeString())\r\n    \r\n                                //     let foundat = this.convertDateFormat(stock.startTime);\r\n                                //     let endtime = moment(foundat.format('YYYY-MM-DD') + ' ' + '15:30');\r\n                                //     // console.log(\"startime\",foundat, endtime)\r\n    \r\n                                //     let chunkCandleData = histdata.data.filter((candleInfo => moment(candleInfo[0]).isSameOrAfter(foundat) && moment(candleInfo[0]).isSameOrBefore(endtime)))  //isBetween(foundat, endtime);\r\n    \r\n                                //   //    console.log(\"chunkdata\", stock,chunkCandleData )\r\n                                //     this.getPerChangeOfStock(chunkCandleData, stock);\r\n    \r\n                                // //    this.state.myWorker.postMessage({chunkCandleData: chunkCandleData, stock: stock});\r\n    \r\n                                // });\r\n    \r\n                                // this.state.myWorker.onmessage = (m) => {\r\n                                //     console.log(\"msg from worker: \", m.data);\r\n                                // };\r\n    \r\n    \r\n                               //  this.updateOverall();\r\n                                 \r\n                               this.updateStockWiseOverall();\r\n                            //   this.updateMonthWise();\r\n                            } else {\r\n                                console.log(\" candle data emply\");\r\n                                this.setState({ searchFailed: this.state.searchFailed + 1 })\r\n                            }\r\n                        }).catch((error) => {\r\n                            console.log(element.symbol, error)\r\n                            this.setState({ searchFailed: this.state.searchFailed + 1 })\r\n                        })\r\n    \r\n                    } else {\r\n                        continue;\r\n                    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n                    await new Promise(r => setTimeout(r, 350));\r\n                    this.setState({ stockTesting: index + 1 + \". \" + element.name })\r\n                }\r\n    \r\n                this.setState({ backTestFlag: true });\r\n    \r\n            });\r\n        }else{\r\n            Notify.showError(\"Paste stocklist datetime  symbol format, tab format\")\r\n        }\r\n      \r\n    }\r\n\r\n    backTestAnyPattern = () => {\r\n        this.setState({ backTestResult: [], overAllResult: [],overallMonthWise:[], backTestFlag: false, filename: '', searchFailed: 0, pertradePandL: 0, pertradePandLNet: 0 });\r\n\r\n        this.getAlltokenOfList(async (newJsonList) => {\r\n            //  let newJsonList = this.state.newJsonList; \r\n            for (let index = 0; index < newJsonList.length; index++) {\r\n\r\n                if (this.state.stopScaningFlag) {\r\n                    this.setState({ stopScaningFlag: false })\r\n                    break;\r\n                }\r\n\r\n                const element = newJsonList[index];\r\n                //    console.log(element)\r\n\r\n                let dateinfo = element.startTime.split(' ');\r\n                let date = dateinfo[0].split('-');\r\n                let input = date[2] + '/' + date[1] + '/' + date[0];\r\n                let time = '9:15';\r\n                if (dateinfo && dateinfo[1]) {\r\n                    moment(dateinfo[1], 'HH:mm').format('HH:mm');\r\n                }\r\n                //   console.log(time)\r\n                var startDate = moment(input + ' ' + time);\r\n                var marketendtime = \"15:30\";\r\n                var endtime = moment(input + ' ' + marketendtime);\r\n                if (this.state.timeFrame == 'ONE_DAY') {\r\n\r\n                    endtime = moment(startDate, \"DD-MM-YYYY\").add(5, 'days');\r\n                    let nextdate = moment(endtime).format(\"YYYY-MM-DD\");\r\n                    endtime = moment(nextdate + ' ' + marketendtime);\r\n                }\r\n\r\n                var data = {\r\n                    \"exchange\": \"NSE\",\r\n                    \"symboltoken\": element.token,\r\n                    \"interval\": this.state.timeFrame, //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                    \"fromdate\": moment(startDate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                    \"todate\": moment(endtime).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n                }\r\n\r\n                AdminService.getHistoryData(data).then(res => {\r\n                    let histdata = resolveResponse(res, 'noPop');\r\n                    if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                        var candleData = histdata.data;\r\n                        let stock = {\r\n                            symbol: element.symbol,\r\n                            token: element.token,\r\n                            entryPrice: candleData[0][4],\r\n                            foundAt: moment(candleData[0][0]).format('YYYY-MM-DD HH:mm')\r\n                        }\r\n\r\n                        let priceChangeList = [];\r\n                        for (let index2 = 1; index2 < candleData.length; index2++) {\r\n                            let perChange = (candleData[index2][4] - stock.entryPrice) * 100 / stock.entryPrice;\r\n                            let datetime = moment(candleData[index2][0]).format('h:mma')\r\n                            if (this.state.timeFrame == 'ONE_DAY') {\r\n                                datetime = moment(candleData[index2][0]).format('DD/MM/YYYY h:mma')\r\n                            }\r\n                            priceChangeList.push({ perChange: perChange.toFixed(2), close: candleData[index2][4], datetime: datetime });\r\n                        }\r\n                        stock.candleData = priceChangeList;\r\n                        this.setState({ backTestResult: [...this.state.backTestResult, stock] }, () => {\r\n                            this.updateOverall();\r\n                        });\r\n                    } else {\r\n                        console.log(\" candle data emply\");\r\n                        this.setState({ searchFailed: this.state.searchFailed + 1 })\r\n\r\n                    }\r\n                }).catch((error) => {\r\n                    console.log(element.symbol, error)\r\n                    this.setState({ searchFailed: this.state.searchFailed + 1 })\r\n\r\n                })\r\n                await new Promise(r => setTimeout(r, 350));\r\n                this.setState({ stockTesting: index + 1 + \". \" + element.symbol })\r\n            }\r\n            this.setState({ backTestFlag: true });\r\n        });\r\n\r\n        //    this.readCsv( );//callback end \r\n\r\n    }\r\n\r\n    updateOverall = () => {\r\n        // this.setState({ overAllResult : [] });\r\n\r\n        let timelist = [];\r\n        this.state.backTestResult.forEach(element => {\r\n            element.candleData.forEach((item) => {\r\n                let found = timelist.filter((time) => time === item.datetime);\r\n                if (!found[0]) {\r\n                    timelist.push(item.datetime);\r\n                }\r\n            });\r\n        });\r\n\r\n        let overallData = [];\r\n\r\n        timelist.forEach(timeelement => {\r\n            let sumofall = 0;\r\n            this.state.backTestResult.forEach(element => {\r\n                for (let index = 0; index < element.candleData.length; index++) {\r\n                    const item = element.candleData[index];\r\n                    if (timeelement === item.datetime) {\r\n                        sumofall += parseFloat(item.perChange)\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n\r\n            let expence = this.state.backTestResult.length * 0.06;\r\n            overallData.push({\r\n                datetime: timeelement,\r\n                sumofall: sumofall.toFixed(2),\r\n                expence: expence.toFixed(2),\r\n                netOverAll: (sumofall - expence).toFixed(2),\r\n                noOfTrade: this.state.backTestResult.length\r\n            })\r\n        });\r\n\r\n        // overallData.reverse()\r\n        overallData.sort((a, b) => moment(b.datetime, 'h:mma') - moment(a.datetime, 'h:mma'));\r\n\r\n        this.setState({ overAllResult: overallData }, () => {\r\n            //  console.log('overAllResult', this.state.overAllResult)\r\n            if(this.state.overAllResult.length > 0){\r\n                let pertradePandLgross = (this.state.overAllResult[0].sumofall / this.state.overAllResult[0].noOfTrade);\r\n                let pertradePandLNet = pertradePandLgross - 0.06;\r\n                this.setState({ \"pertradePandL\": pertradePandLgross.toFixed(2), pertradePandLNet: pertradePandLNet.toFixed(2) });    \r\n            }\r\n         \r\n        });\r\n\r\n    }\r\n\r\n\r\n    updateStockWiseOverall = () => {\r\n        // this.setState({ overAllResult : [] });\r\n        this.setState({ stockWiseListOverall: [] })\r\n\r\n        let overall = []; \r\n      //  console.log(\"this.state.allQniqueStockList\", this.state.allQniqueStockList, this.state.backTestResult)\r\n\r\n        this.state.allQniqueStockList.forEach(stockelement => {\r\n\r\n         //   console.log('stockelement', stockelement); \r\n            let sumofall = 0, totalSameTrade = 0;\r\n            this.state.backTestResult.forEach(element => {\r\n                if (stockelement.name == element.name) {\r\n                 //   console.log('result element', element); \r\n\r\n                    if (element.candleData.length > 0) {\r\n                        sumofall += parseFloat(element.candleData[element.candleData.length - 1].perChange)\r\n                        totalSameTrade += 1;\r\n                    }\r\n                }\r\n            });\r\n            let expence = totalSameTrade * 0.06;\r\n            let data = {\r\n                name: stockelement.name,\r\n                totalSameTrade: totalSameTrade,\r\n                sumofall: sumofall,\r\n                expence: expence,\r\n                netPnL: (sumofall - expence)\r\n            }\r\n\r\n            overall.push(data); \r\n            \r\n        });\r\n\r\n\r\n        this.setState({ stockWiseListOverall: overall}, () => {\r\n\r\n            let totalgross = 0, totalAvg = 0, totTrade = 0, totalNet = 0, totalExp = 0, winCount=0,lossCount=0;\r\n            this.state.stockWiseListOverall.forEach(item => {\r\n                totalgross += item.sumofall;\r\n                totTrade += item.totalSameTrade;\r\n                totalNet += item.netPnL;\r\n                totalExp += item.expence;\r\n                winCount += item.netPnL>0 ? 1 : 0;\r\n                lossCount += item.netPnL<0 ? 1 : 0;\r\n            })\r\n\r\n            totalAvg = (totalgross/totTrade).toFixed(2);\r\n\r\n            let data = {\r\n                name: \"Total (Gross Avg%): \"+totalAvg,\r\n                totalSameTrade: totTrade,\r\n                sumofall: totalgross ,\r\n                expence: totalExp,\r\n                netPnL: totalNet,\r\n                winCount:winCount,\r\n                lossCount:lossCount\r\n            }\r\n\r\n            this.state.stockWiseListOverall.push(data); \r\n\r\n\r\n            this.setState({stockWiseListOverall: this.state.stockWiseListOverall, lossCount:lossCount,winCount:winCount,  totalgross: totalgross.toFixed(2), totalAvg: totalAvg, totTrade: totTrade, totalNet: totalNet.toFixed(2), totalExp: totalExp.toFixed(2) });\r\n\r\n\r\n        })\r\n    }\r\n\r\n\r\n    \r\n    updateMonthWise = () => {\r\n        this.setState({ overallMonthWise: [] })\r\n        let months = [\r\n            {name: 'Jan'}, \r\n            {name: 'Feb'}, \r\n            {name: 'Mar'}, \r\n            {name: 'Apr'}, \r\n            {name: 'May'}, \r\n            {name: 'Jun'}, \r\n            {name: 'Jul'}, \r\n            {name: 'Aug'}, \r\n            {name: 'Sep'}, \r\n            {name: 'Nov'}, \r\n            {name: 'Dec'}, \r\n            \r\n        ]; \r\n        let overall = []; \r\n\r\n        let sumofall = 0, totalSameTrade = 0;\r\n       \r\n        months.forEach(month => {\r\n\r\n            //   console.log('stockelement', stockelement); \r\n               let sumofall = 0, totalSameTrade = 0;\r\n               this.state.backTestResult.forEach(element => {\r\n                   let tradeMonth = moment(element.foundAt).format('MMM'); \r\n                   if (month.name == tradeMonth) {\r\n                       if (element.candleData.length > 0) {\r\n                           sumofall += parseFloat(element.candleData[element.candleData.length - 1].perChange)\r\n                           totalSameTrade += 1;\r\n                       }\r\n                   }\r\n               });\r\n               let expence = totalSameTrade * 0.06;\r\n               let data = {\r\n                   name: month.name,\r\n                   totalSameTrade: totalSameTrade,\r\n                   sumofall: sumofall.toFixed(2),\r\n                   expence: expence.toFixed(2),\r\n                   netPnL: (sumofall - expence).toFixed(2)\r\n               }\r\n\r\n               overall.push(data); \r\n               \r\n           });\r\n\r\n        this.setState({ overallMonthWise: overall}, () => {            \r\n\r\n        })\r\n    }\r\n\r\n\r\n    calculateSMA = (data, count) => {\r\n\r\n        //  console.log(\"smarowdata\", data, count);\r\n\r\n        var avg = function (data) {\r\n            var sum = 0;\r\n            for (var i = 0; i < data.length; i++) {\r\n                sum += data[i].close;\r\n            }\r\n            return sum / data.length;\r\n        };\r\n        var result = [];\r\n        for (var i = count - 1, len = data.length; i < len; i++) {\r\n            var val = avg(data.slice(i - count + 1, i));\r\n            result.push({ time: data[i].time, value: val });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    showStaticChart = (token, symbol, entryAt, exitAt) => {\r\n\r\n\r\n\r\n        console.log('token, symbol, entryAt, exitAt', token, symbol, entryAt, exitAt)\r\n\r\n        this.setState({ chartStaticData: '', lightChartSymbol: symbol }, function () {\r\n            console.log('reset done', token);\r\n        });\r\n\r\n        //     console.log(\"time in function \", this.state.timeFrame);\r\n\r\n        const format1 = \"YYYY-MM-DD HH:mm\";\r\n        //     // var time = moment.duration(\"10:50:00\");\r\n        //     // var startDate = moment(new Date()).subtract(time);\r\n        //     // var startdate = moment(this.state.startDate).subtract(time);\r\n        //     var beginningTime = moment('9:15am', 'h:mma');\r\n\r\n        //     let timeDuration = this.getTimeFrameValue(this.state.timeFrame);\r\n        //     var time = moment.duration(timeDuration);  //22:00:00\" for last day  2hours \r\n        //    // var startDate = moment(new Date(foundAt)).set()\r\n\r\n        var startDate = moment(entryAt).set(\"hour\", '09').set(\"minute\", '15');\r\n        var enddate = moment(exitAt).set(\"hour\", '15').set(\"minute\", '30');\r\n\r\n\r\n        var data = {\r\n            \"exchange\": \"NSE\",\r\n            \"symboltoken\": token,\r\n            \"interval\": this.state.timeFrame, //ONE_DAY FIVE_MINUTE \r\n            \"fromdate\": moment(startDate).format(format1),\r\n            \"todate\": moment(enddate).format(format1) //moment(this.state.endDate).format(format1) /\r\n        }\r\n\r\n\r\n        AdminService.getHistoryData(data).then(res => {\r\n            let historyData = resolveResponse(res, 'noPop');\r\n            //    console.log(data); \r\n            if (historyData && historyData.data) {\r\n\r\n                var data = historyData.data;\r\n\r\n                const cdata = data.map(d => {\r\n                    return { time: new Date(d[0]).getTime(), open: parseFloat(d[1]), high: parseFloat(d[2]), low: parseFloat(d[3]), close: parseFloat(d[4]) }\r\n                });\r\n\r\n                var candleChartData = [], vwapdata = [], closeingData = [], highData = [], lowData = [], openData = [], valumeData = [], bbdata = [], volumeSeriesData = [];\r\n                data.forEach((element, loopindex) => {\r\n                    candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                    vwapdata.push([element[5], (element[2] + element[3] + element[4]) / 3]);\r\n                    closeingData.push(element[4]);\r\n                    highData.push(element[2]);\r\n                    lowData.push(element[3]);\r\n                    openData.push(element[3]);\r\n                    valumeData.push(element[5]);\r\n                    bbdata.push((element[2] + element[3] + element[4]) / 3);\r\n                    volumeSeriesData.push({ time: new Date(element[0]).getTime(), value: element[5], color: 'rgba(211, 211, 211, 1)' })\r\n\r\n                });\r\n\r\n                var input = {\r\n                    period: 20,\r\n                    values: bbdata,\r\n                    stdDev: 2\r\n                }\r\n\r\n                var bb = BollingerBands.calculate(input);\r\n                console.log(token, \"Bolinger band\", input, bb);\r\n\r\n                var bb = BollingerBands.calculate(input);\r\n                console.log(token, \"Bolinger band\", input, bb);\r\n\r\n                var inputRSI = { values: closeingData, period: 14 };\r\n                var rsiValues = RSI.calculate(inputRSI);\r\n\r\n                console.log(token, \"Rsi\", inputRSI, rsiValues);\r\n                console.log(token, \"vwap\", vwapdata, vwap(vwapdata));\r\n\r\n\r\n                this.setState({ chartStaticData: cdata, bblastValue: bb[bb.length - 1], vwapvalue: vwap(vwapdata), rsiValues: rsiValues.slice(Math.max(valumeData.length - 19, 1)), valumeData: valumeData.slice(Math.max(valumeData.length - 5, 1)) }, function () {\r\n                    // candleSeries.setData(this.state.chartStaticData); \r\n                    this.state.candleSeries.setData(this.state.chartStaticData);\r\n\r\n                    this.state.volumeSeries.setData(volumeSeriesData);\r\n\r\n                    var smaData = this.calculateSMA(this.state.chartStaticData, 20);\r\n\r\n                    this.state.smaLineSeries.setData(smaData);\r\n\r\n\r\n                    this.state.chart.subscribeCrosshairMove((param) => {\r\n\r\n                        var getit = param.seriesPrices[Symbol.iterator]();\r\n\r\n                        var string = \"\";\r\n                        var change = \"\";\r\n\r\n                        for (var elem of getit) {\r\n\r\n                            if (typeof elem[1] == 'object') {\r\n                                string += \" Open: <b>\" + elem[1].open + \"</b>\";\r\n                                string += \" High: <b>\" + elem[1].high + \"</b>\";\r\n                                string += \" Low: <b>\" + elem[1].low + \"</b>\";\r\n                                string += \" Close: <b>\" + elem[1].close + \"</b>\";\r\n                                change = (elem[1].close - elem[1].open) * 100 / elem[1].open;\r\n                                string += \" Chng: <b>\" + change.toFixed(2) + '%</b>';\r\n                            } else {\r\n                                string += \" &nbsp; \" + elem[1].toFixed(2) + \" \";\r\n                            }\r\n                        }\r\n\r\n                        if (param.time)\r\n                            string += \" Time: <b>\" + moment(param.time).format('DD/MM/YYYY h:mma') + \"</b>\";\r\n                        else\r\n                            string += \" <b>Time: </b>\";\r\n\r\n\r\n                        const domElement = document.getElementById('showChartTitle');\r\n\r\n\r\n                        var str = \"<span style=color:green>\" + string + \"</span> \";\r\n                        if (change < 0)\r\n                            str = \"<span style=color:red>\" + string + \"</span> \";\r\n\r\n                        domElement.innerHTML = str;\r\n                    });\r\n\r\n\r\n                });\r\n\r\n\r\n                data && data.sort(function (a, b) {\r\n                    return new Date(b[0]) - new Date(a[0]);\r\n                });\r\n                if (data.length > 0) {\r\n                    localStorage.setItem('InstrumentHistroy', JSON.stringify(data));\r\n                    this.setState({ InstrumentHistroy: data });\r\n\r\n\r\n                    var upsideMoveCount = 0, downMoveCount = 0, totalSum = 0;\r\n                    data.forEach(element => {\r\n\r\n                        var per = (element[4] - element[1]) * 100 / element[1];\r\n                        if (per >= 0.3) {\r\n                            upsideMoveCount += 1;\r\n                        }\r\n                        if (per <= -0.3) {\r\n                            downMoveCount += 1;\r\n                        }\r\n\r\n                        totalSum += per;\r\n\r\n                    });\r\n\r\n\r\n                    this.setState({ downMoveCount: downMoveCount, upsideMoveCount: upsideMoveCount, totalPerchentageChange: totalSum, startingFrom: moment(startDate).format(format1) });\r\n\r\n\r\n                }\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    speckIt = (text) => {\r\n        var msg = new SpeechSynthesisUtterance();\r\n        msg.text = text.toString();\r\n        window.speechSynthesis.speak(msg);\r\n    }\r\n\r\n\r\n\r\n    getPercentageColor = (percent) => {\r\n        percent = percent * 100;\r\n        var r = percent < 50 ? 255 : Math.floor(255 - (percent * 2 - 100) * 255 / 100);\r\n        var g = percent > 50 ? 255 : Math.floor((percent * 2) * 255 / 100);\r\n        return 'rgb(' + r + ',' + g + ',0)';\r\n    }\r\n\r\n\r\n\r\n\r\n    onFileChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.files[0] });\r\n    }\r\n\r\n    render() {\r\n        const dateParam = {\r\n            myCallback: this.myCallback,\r\n            startDate: '',\r\n            endDate: '',\r\n            firstLavel: \"Start Date and Time\",\r\n            secondLavel: \"End Date and Time\"\r\n        }\r\n\r\n        //    console.log(\"backTestResult\", this.state.backTestResult)\r\n        //    console.log(\"stockWiseListOverall\", this.state.stockWiseListOverall)\r\n\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <PostLoginNavBar />\r\n                <ChartDialog />\r\n                <Grid direction=\"row\" container spacing={1} style={{ padding: \"5px\" }} >\r\n\r\n\r\n\r\n                    <Grid item xs={12} sm={8}>\r\n\r\n\r\n                        <Paper style={{ padding: \"10px\" }}>\r\n                            {/* <Typography style={{ textAlign: \"center\", background: \"lightgray\" }}>Chartink Backtest</Typography> */}\r\n\r\n                            <Grid direction=\"row\" container spacing={2}>\r\n\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <TextField variant=\"outlined\" id=\"textarea\" multiline rows={10} fullwidth style={{ width: '90%', height: '50%' }} label=\"1. Datetime 2. Symbol format : Paste\" value={this.state.csvFormatInput} name=\"csvFormatInput\" onChange={this.onChange} />\r\n\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} sm={2} >\r\n                                    <FormControl style={styles.selectStyle} style={{ marginTop: '10px' }} >\r\n                                        <Select value={this.state.timeFrame} name=\"timeFrame\" onChange={this.onInputChange}>\r\n                                            <MenuItem value={'ONE_MINUTE'}>{'1M'}</MenuItem>\r\n                                            <MenuItem value={'FIVE_MINUTE'}>{'5M'}</MenuItem>\r\n                                            <MenuItem value={'TEN_MINUTE'}>{'10M'}</MenuItem>\r\n                                            <MenuItem value={'FIFTEEN_MINUTE'}>{'15M'}</MenuItem>\r\n                                            <MenuItem value={'THIRTY_MINUTE'}>{'30M'}</MenuItem>\r\n                                            <MenuItem value={'ONE_HOUR'}>{'1H'}</MenuItem>\r\n                                            <MenuItem value={'ONE_DAY'}>{'1D'}</MenuItem>\r\n                                        </Select>\r\n\r\n                                        <Select title='Entry candle point , mid means high+low/2' value={this.state.entryCandlePoint} name=\"entryCandlePoint\" onChange={this.onInputChange}>\r\n                                            <MenuItem value={1}>{'Open'}</MenuItem>\r\n                                            <MenuItem value={2}>{'High'}</MenuItem>\r\n                                            <MenuItem value={3}>{'Low'}</MenuItem>\r\n                                            <MenuItem value={4}>{'Close'}</MenuItem>\r\n                                            <MenuItem value={5}>{'Mid'}</MenuItem>\r\n                                            <MenuItem value={6}>{'Above High'}</MenuItem>\r\n                                            <MenuItem value={7}>{'Below Low'}</MenuItem>\r\n\r\n                                        </Select>\r\n\r\n                                        <Select title='checking for buy or sell' value={this.state.orderType} name=\"orderType\" onChange={this.onInputChange}>\r\n                                            <MenuItem value={'buy'}>{'Buy'}</MenuItem>\r\n                                            <MenuItem value={'sell'}>{'Sell'}</MenuItem>\r\n                                         \r\n                                        </Select>\r\n                                        <input placeholder='9:20' fullwidth style={{ width: '90%', height: '50%' }} label=\"entryTimeAt\" value={this.state.entryTimeAt} name=\"entryTimeAt\" onChange={this.onChange} />\r\n                                        <input placeholder='target %: 0.5' type='number' step={0.1} fullwidth style={{ width: '90%', height: '50%' }} label=\"Target\" value={this.state.targetPer} name=\"targetPer\" onChange={this.onChange} />\r\n\r\n\r\n                                        <FormGroup>\r\n                                            <FormControlLabel\r\n                                                control={<Switch checked={this.state.isSameDayDuplcate} onChange={this.handleChange} aria-label=\"Speek ON/OFF\" />}\r\n                                                label={this.state.isSameDayDuplcate ? 'Same Day Duplcate: Yes' : 'Same Day Duplcate: No'}\r\n                                            />\r\n                                        </FormGroup>\r\n                                   \r\n\r\n                                         <input placeholder='filename' id=\"textarea\" fullwidth style={{ width: '90%', height: '50%' }} label=\"Filename\" value={this.state.filename} name=\"filename\" onChange={this.onChange} />\r\n\r\n                                         \r\n                                         Failed:{this.state.searchFailed} \r\n                                     <br /> \r\n                                    {this.state.totaluniqueStocks ? this.state.totaluniqueStocks + \" unique stocks found\" : \"\"}\r\n                                    <br />\r\n                                    {this.state.stockTesting}\r\n                                    </FormControl>\r\n\r\n                                </Grid>\r\n\r\n\r\n                                <Grid item xs={12} sm={4} style={{ marginTop: '5px' }}>\r\n                                    {/* {this.state.backTestFlag ? <Button variant=\"contained\" onClick={() => this.backTestAnyPattern()}>Search</Button> : <>  <Spinner />  &nbsp;&nbsp;   <Button variant=\"contained\" onClick={() => this.stopBacktesting()}>Stop Scaning &nbsp; </Button>   </>} */}\r\n                                    {this.state.backTestFlag ? <Button variant=\"contained\" onClick={() => this.backTestAnyPatternStockWise()}>Test Stock Wise</Button> : <>  <Spinner />  &nbsp; <Button variant=\"contained\" onClick={() => this.stopBacktesting()}>Stop</Button>  </>}\r\n                                   \r\n                                    <span title='Success Ratio'>Success Ratio: {(this.state.crossedTargetCount * 100/this.state.backTestResult.length).toFixed(2)}%</span> \r\n\r\n                                        <Table size=\"small\" aria-label=\"sticky table\" >\r\n                                            <TableHead style={{ width: \"\", whiteSpace: \"nowrap\" }} variant=\"head\">\r\n                                                <TableRow variant=\"head\" style={{ fontWeight: 'bold' }} >\r\n\r\n                                                    <TableCell className=\"TableHeadFormat\" >\r\n                                                    <Button size='small' variant='outlined' onClick={this.updateMonthWise}>Month</Button>                                                </TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >Trades\r\n                                                    </TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >Gross P/L\r\n                                                    </TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >Expence</TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" > Net P/L\r\n                                                    </TableCell>\r\n\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n                                                {this.state.overallMonthWise ? this.state.overallMonthWise.map((item, i) => (\r\n                                                    item.totalSameTrade > 0 ?  <TableRow key={i}>\r\n                                                    <TableCell>{item.name}</TableCell>\r\n                                                    <TableCell>{item.totalSameTrade}</TableCell>\r\n                                                    <TableCell>{item.sumofall > 0 ? <span style={{ color: 'green' }}> {item.sumofall}</span> : <span style={{ color: 'red' }}> {item.sumofall}</span>}% </TableCell>\r\n                                                    <TableCell>{item.expence}%</TableCell>\r\n                                                    <TableCell>{item.netPnL > 0 ? <span style={{ color: 'green' }}> {item.netPnL}</span> : <span style={{ color: 'red' }}> {item.netPnL}</span>}% </TableCell>\r\n\r\n                                                </TableRow>:\"\"\r\n                                                )) : ''}\r\n\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                   \r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} sm={12} >\r\n\r\n                                    <div style={{ overflow: \"auto\", maxHeight: \"200px\" }}>\r\n\r\n                                        <Table size=\"small\" aria-label=\"sticky table\" >\r\n                                            <TableHead style={{ width: \"\", whiteSpace: \"nowrap\" }} variant=\"head\">\r\n                                                <TableRow variant=\"head\" style={{ fontWeight: 'bold' }} >\r\n                                                <TableCell>Sr.&nbsp;</TableCell>\r\n\r\n                                                    <TableCell className=\"TableHeadFormat\" >Stock ({this.state.stockWiseListOverall.length}) <CsvDownload filename={'Overall_'+this.state.timeFrame+'_'+this.state.entryCandlePoint+'_'+this.state.orderType+'_'+this.state.filename+'.csv'} data={this.state.stockWiseListOverall} />                                                    </TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >T.T ({this.state.totTrade})  Avg:\r\n                                                    ({this.state.totalAvg > 0 ? <span style={{ color: 'green' }}> {this.state.totalAvg}</span> : <span style={{ color: 'red' }}> {this.state.totalAvg}</span>})%\r\n                                                    </TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >Gross P/L\r\n                                                        ({this.state.totalgross > 0 ? <span style={{ color: 'green' }}> {this.state.totalgross}</span> : <span style={{ color: 'red' }}> {this.state.totalgross}</span>})%\r\n                                                    </TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >Expence ({this.state.totalExp})%</TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" > Net P/L\r\n                                                        ({this.state.totalNet > 0 ? <span style={{ color: 'green' }}> {this.state.totalNet}</span> : <span style={{ color: 'red' }}> {this.state.totalNet}</span>})%\r\n\r\n                                                        &nbsp;  W:{this.state.winCount}  &nbsp; L:{this.state.lossCount}\r\n                                                    </TableCell>\r\n\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n                                                {this.state.stockWiseListOverall ? this.state.stockWiseListOverall.map((item, i) => (\r\n                                                    <TableRow key={i}>\r\n                                                        <TableCell>{i+1}</TableCell>\r\n\r\n                                                        <TableCell>{item.name}</TableCell>\r\n                                                        <TableCell>{item.totalSameTrade}</TableCell>\r\n                                                        <TableCell>{item.sumofall > 0 ? <span style={{ color: 'green' }}> {item.sumofall}</span> : <span style={{ color: 'red' }}> {item.sumofall}</span>}% </TableCell>\r\n                                                        <TableCell>{item.expence}%</TableCell>\r\n                                                        <TableCell>{item.netPnL > 0 ? <span style={{ color: 'green' }}> {item.netPnL}</span> : <span style={{ color: 'red' }}> {item.netPnL}</span>}% </TableCell>\r\n\r\n                                                    </TableRow>\r\n                                                )) : ''}\r\n\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                    </div>\r\n                                </Grid>\r\n\r\n\r\n                            </Grid>\r\n\r\n                            <Grid direction=\"row\" container spacing={2}>\r\n\r\n                                <Grid item xs={12} sm={12}>\r\n\r\n                                    <div style={{ overflow: \"auto\", maxHeight: \"550px\" }}>\r\n\r\n                                        <Table size=\"small\" aria-label=\"sticky table\" >\r\n\r\n                                            <TableHead style={{ width: \"\", whiteSpace: \"nowrap\" }} variant=\"head\">\r\n\r\n                                                <TableRow variant=\"head\" style={{ fontWeight: 'bold' }}>\r\n                                                    <TableCell className=\"TableHeadFormat\" >Sr.</TableCell>\r\n\r\n                                                    <TableCell className=\"TableHeadFormat\" >Datetime <CsvDownload filename={'Trade_'+this.state.timeFrame+'_'+this.state.entryCandlePoint+'_'+this.state.orderType+'_'+this.state.filename+'.csv'} data={this.state.backTestResult} /></TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >Symbol &nbsp;</TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >EntryPrice &nbsp;</TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >ExitPrice &nbsp;</TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >T.T:({this.state.backTestResult.length}) &nbsp;W:{this.state.totalWinTrade} &nbsp;L:{this.state.backTestResult.length - this.state.totalWinTrade}&nbsp;<span title='Max Loss'>ML:{this.state.maxDrowDown}%</span>&nbsp;<span title='Max Profit'>MP:{this.state.maxProfit}%</span>&nbsp;<span title='target crossed'> C.T:{this.state.crossedTargetCount}</span>&nbsp;<span title='target not crossed'>N.C:{this.state.backTestResult.length - this.state.crossedTargetCount} </span> &nbsp;\r\n                                                     <span title='Success Ratio'>S.R.{(this.state.crossedTargetCount * 100/this.state.backTestResult.length).toFixed(2)}%</span> \r\n                                                     </TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n\r\n                                            <TableBody style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n                                                {this.state.backTestResult ? this.state.backTestResult.map((row, i) => (\r\n                                                    //    style={{display: row.orderActivated ? 'visible' : 'none'}} \"darkmagenta\" : \"#00cbcb\"\r\n                                                    <TableRow hover key={i}  style={{ background: !row.isWinOnClosing ? 'bisque' : \"\"}}>\r\n\r\n                                                        <TableCell>{i + 1}&nbsp;</TableCell>\r\n\r\n                                                        <TableCell >{row.foundAt} &nbsp;</TableCell>\r\n                                                        <TableCell><Button size='small' variant='contained' onClick={() => this.showStaticChart(row.token, row.symbol, row.foundAt, row.foundAt)}>{row.symbol} </Button> </TableCell>\r\n                                                        <TableCell><span style={{ fontStyle: 'italic' }}> {row.entryPrice}</span> &nbsp;</TableCell>\r\n                                                        <TableCell><span style={{ fontStyle: 'italic', color: row.candleData[row.candleData.length-1].close > row.entryPrice ? 'green' : \"red\"}}> {row.candleData[row.candleData.length-1].close} ({row.candleData[row.candleData.length-1].perChange}%) </span> &nbsp;</TableCell>\r\n\r\n                                                        <TableCell >\r\n                                                            {row.candleData.map((item, j) => (<>\r\n                                                                <span>{item.datetime}: </span>{item.close}({item.perChange > 0 ? <span style={{ color: 'green' }}> {item.perChange}%</span> : <span style={{ color: 'red' }}> {item.perChange}%</span>}) &nbsp;\r\n                                                            </>\r\n                                                            ))}\r\n\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n                                                )) : ''}\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={4}>\r\n\r\n                        <Paper style={{ padding: \"10px\", position:  navigator.userAgentData.mobile ? \"\" :  \"fixed\"  }}>\r\n\r\n                            <Grid style={{ display: \"visible\" }} spacing={1} direction=\"row\" alignItems=\"center\" container>\r\n                                <Grid item xs={12} sm={12}  >\r\n                                    <Grid spacing={1} direction=\"row\" alignItems=\"center\" container>\r\n                                        <Grid item xs={12} sm={2} >\r\n                                            <FormControl style={styles.selectStyle} style={{ marginTop: '10px' }} >\r\n                                                <Select value={this.state.timeFrame} name=\"timeFrame\" onChange={this.onInputChange}>\r\n                                                    <MenuItem value={'ONE_MINUTE'}>{'1M'}</MenuItem>\r\n                                                    <MenuItem value={'FIVE_MINUTE'}>{'5M'}</MenuItem>\r\n                                                    <MenuItem value={'TEN_MINUTE'}>{'10M'}</MenuItem>\r\n                                                    <MenuItem value={'FIFTEEN_MINUTE'}>{'15M'}</MenuItem>\r\n                                                    <MenuItem value={'THIRTY_MINUTE'}>{'30M'}</MenuItem>\r\n                                                    <MenuItem value={'ONE_HOUR'}>{'1H'}</MenuItem>\r\n                                                    <MenuItem value={'ONE_DAY'}>{'1D'}</MenuItem>\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={10} >\r\n                                            <Typography>Same Day Chart:  {this.state.lightChartSymbol}</Typography>\r\n\r\n                                        </Grid>\r\n\r\n                                    </Grid>\r\n                                    <div id=\"showChartTitle\"></div>\r\n                                    <div id=\"tvchart\"></div>\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} sm={12} style={{ overflowY: 'scroll', height: \"40vh\" }} >\r\n                                    <Typography> <Button size='small' variant='outlined' onClick={this.updateOverall}> Overall </Button>\r\n                                        {this.state.pertradePandL > 0 ? <span style={{ color: 'green' }}> {this.state.pertradePandL}</span> : <span style={{ color: 'red' }}> {this.state.pertradePandL}</span>}% Gross/Trade   |\r\n                                        {this.state.pertradePandLNet > 0 ? <span style={{ color: 'green' }}> {this.state.pertradePandLNet}</span> : <span style={{ color: 'red' }}> {this.state.pertradePandLNet}</span>}% Net/Trade  </Typography>\r\n\r\n                                    <Table size=\"small\" aria-label=\"sticky table\" >\r\n                                        <TableHead style={{ width: \"\", whiteSpace: \"nowrap\" }} variant=\"head\">\r\n                                            <TableRow variant=\"head\" style={{ fontWeight: 'bold' }} >\r\n\r\n                                                <TableCell className=\"TableHeadFormat\" >Timestamp</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" >No Of Trade</TableCell>\r\n\r\n\r\n                                                <TableCell className=\"TableHeadFormat\" >Gross Overall P/L%</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" >Expence%</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" >Net P/L%</TableCell>\r\n\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n                                            {this.state.overAllResult ? this.state.overAllResult.map((item, i) => (\r\n                                                <TableRow key={i}>\r\n\r\n\r\n                                                    <TableCell>{item.datetime}</TableCell>\r\n                                                    <TableCell>{item.noOfTrade}</TableCell>\r\n\r\n                                                    <TableCell>{item.sumofall > 0 ? <span style={{ color: 'green' }}> {item.sumofall}</span> : <span style={{ color: 'red' }}> {item.sumofall}</span>}% </TableCell>\r\n                                                    <TableCell>{item.expence}%</TableCell>\r\n                                                    <TableCell>{item.netOverAll > 0 ? <span style={{ color: 'green' }}> {item.netOverAll}</span> : <span style={{ color: 'red' }}> {item.netOverAll}</span>}% </TableCell>\r\n\r\n                                                </TableRow>\r\n                                            )) : ''}\r\n\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </Grid>\r\n\r\n\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n\r\n                    <Grid item xs={12}>\r\n                        <div id=\"showChartTitle\"></div>\r\n                        <div id=\"tvchart\"></div>\r\n\r\n                     </Grid>\r\n\r\n\r\n\r\n                </Grid>\r\n\r\n            </React.Fragment>\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst styles = {\r\n    formContainer: {\r\n        display: 'flex',\r\n        flexFlow: 'row wrap'\r\n    },\r\n\r\n    textStyle: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n\r\n    },\r\n    imgStyle: {\r\n        display: 'flex'\r\n    },\r\n\r\n    selectStyle: {\r\n        minWidth: '100%',\r\n        marginBottom: '10px'\r\n    },\r\n    MuiTextField: {\r\n        overflowY: 'scroll',\r\n        fontSize: \"12px\",\r\n        maxHeight: \"50px\",\r\n\r\n    },\r\n    footerButton: {\r\n        position: 'fixed',\r\n        left: 0,\r\n        bottom: '20px',\r\n        width: '100%',\r\n        textAlign: 'right'\r\n    }\r\n\r\n};\r\n\r\nexport default Home;\r\n\r\n","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport { resolveResponse } from \"../../utils/ResponseHandler\";\r\nimport MaterialUIDateTimePicker from '../../utils/MaterialUIDateTimePicker';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport * as moment from 'moment';\r\nimport Notify from \"../../utils/Notify\";\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Spinner from \"react-spinner-material\";\r\nimport { createChart } from 'lightweight-charts';\r\nimport ChartDialog from './ChartDialog';\r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\nimport vwap from 'vwap';\r\nimport { SMA, RSI, VWAP, BollingerBands } from 'technicalindicators';\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport CsvDownload from 'react-json-to-csv'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport worker_script from './worker';\r\nimport Switch from '@material-ui/core/Switch';\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sumPercentage: 0,\r\n            InstrumentPerChange: \"\",\r\n            autoSearchList: [],\r\n            isDasable: false,\r\n            isError: false,\r\n            InstrumentLTP: {},\r\n            ifNotBought: true,\r\n            autoSearchTemp: [],\r\n            backTestResult: [],\r\n            backTestResultCSV: [],\r\n            backTestFlag: true,\r\n            patternType: \"NR4\",  //NR4ForNextDay  NR4_SameDay\r\n            symboltoken: \"\",\r\n            tradingsymbol: \"\",\r\n            buyPrice: 0,\r\n            quantity: 1,\r\n            producttype: \"INTRADAY\",\r\n            symbolList: localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')) || [],\r\n            totalWatchlist: localStorage.getItem('totalWatchlist') && JSON.parse(localStorage.getItem('totalWatchlist')) || [],\r\n            staticData: localStorage.getItem('staticData') && JSON.parse(localStorage.getItem('staticData')) || {},\r\n            selectedWatchlist: 'NIFTY BANK', //'Securities in F&O',\r\n            longExitPriceType: 4,\r\n            shortExitPriceType: 4,\r\n            candleChartData: [],\r\n            stopScaningFlag: false,\r\n            backTestResultDateRange: [],\r\n            searchFailed: 0,\r\n            FoundPatternList: localStorage.getItem('FoundPatternList') && JSON.parse(localStorage.getItem('FoundPatternList')) || [],\r\n            fastMovementList: localStorage.getItem('fastMovementList') && JSON.parse(localStorage.getItem('fastMovementList')) || [],\r\n            newJsonList: [],\r\n            timeFrame: \"FIFTEEN_MINUTE\",\r\n            overAllResult: [],\r\n            pertradePandL: 0,\r\n            pertradePandLNet: 0,\r\n            allQniqueStockList: [],\r\n            isSameDayDuplcate: true,\r\n            stockWiseListOverall: [],\r\n            filename: \"\",\r\n            overallMonthWise: [],\r\n            entryCandlePoint:5,\r\n            totalWinTrade:0, \r\n            maxDrowDown:0, \r\n            maxProfit:0, \r\n            crossedTargetCount: 0, \r\n            orderType:\"buy\",\r\n            targetPer: 0.5\r\n        \r\n        };\r\n\r\n    }\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value })\r\n    }\r\n\r\n    onInputChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value }, function () {\r\n            //    console.log(\"time\", this.state.timeFrame);\r\n            if (this.state.tradingsymbol) {\r\n                this.showStaticChart(this.state.symboltoken);\r\n            }\r\n        });\r\n    }\r\n    handleChange = (event) => {\r\n\r\n        this.setState({ isSameDayDuplcate: event.target.checked }, () => {\r\n            console.log(\"isSameDayDuplcate\", this.state.isSameDayDuplcate, event.target.checked);\r\n        })\r\n\r\n    };\r\n    componentDidMount() {\r\n\r\n\r\n\r\n        window.document.title = \"Backtest\";\r\n        this.setState({ symbolList: this.state.staticData[this.state.selectedWatchlist] });\r\n        var myWorker = new Worker(worker_script);\r\n        this.setState({ myWorker :  myWorker}); \r\n\r\n        const domElement = document.getElementById('tvchart');\r\n        document.getElementById('tvchart').innerHTML = '';\r\n        const chart = createChart(domElement, { width: 500, height: 250, timeVisible: true, secondsVisible: true, });\r\n        const candleSeries = chart.addCandlestickSeries();\r\n        var smaLineSeries = chart.addLineSeries({\r\n            color: 'rgba(4, 111, 232, 1)',\r\n            lineWidth: 2,\r\n        });\r\n        var volumeSeries = chart.addHistogramSeries({\r\n            color: '#26a69a',\r\n            priceFormat: {\r\n                type: 'volume',\r\n            },\r\n            priceScaleId: '',\r\n            scaleMargins: {\r\n                top: 0.8,\r\n                bottom: 0,\r\n            },\r\n        });\r\n\r\n        this.setState({ chart: chart, candleSeries: candleSeries, smaLineSeries: smaLineSeries, volumeSeries: volumeSeries });\r\n        \r\n        AdminService.updateStockList().then(res => {\r\n            this.setState({stockList:  res.data}); \r\n        })\r\n        \r\n\r\n\r\n\r\n    }\r\n\r\n    stopBacktesting = () => {\r\n        this.setState({ stopScaningFlag: true });\r\n    }\r\n\r\n    readCsv = async (callback) => {\r\n        this.setState({ newJsonList: [] })\r\n        let csvFormatInput = this.state.csvFormatInput.trim().split('\\n');\r\n        for (let index = 0; index < csvFormatInput.length; index++) {\r\n            const element = csvFormatInput[index];\r\n            let symbol = element.split('\\t')[1];\r\n            let startTime = element.split('\\t')[0];\r\n            this.setState({ stockTesting: index + 1 + \". \" + symbol + \" getting details\" })\r\n\r\n            //   console.log(element, symbol, startTime);\r\n\r\n            // \"13-01-2022 11:20\\tSHREEPUSHK\\tSmallcap\\tIndustrials\"\r\n\r\n            AdminService.autoCompleteSearch(symbol).then(searchRes => {\r\n\r\n                let searchResdata = searchRes.data;\r\n                var found = searchResdata.filter(row => row.exch_seg === \"NSE\" && row.lotsize === \"1\" && row.name === symbol);\r\n                //     console.log(\"found\",  found)\r\n\r\n                if (found.length) {\r\n                    found[0].startTime = startTime;\r\n                    this.setState({ newJsonList: [...this.state.newJsonList, found[0]] }, () => {\r\n                        if (csvFormatInput.length - 1 == index) {\r\n                            callback()\r\n                        }\r\n                    });\r\n                }\r\n\r\n            })\r\n\r\n            await new Promise(r => setTimeout(r, 150));\r\n        }\r\n    }\r\n\r\n    getAlltokenOfList = (callback) => {\r\n        let listofstockfound = [];\r\n        let allStockWithTime = [];\r\n        let updateList = [];\r\n        let csvFormatInput = this.state.csvFormatInput.trim().split('\\n');\r\n        for (let index = 0; index < csvFormatInput.length; index++) {\r\n            const element = csvFormatInput[index];\r\n\r\n            let name = element.split('\\t')[1];\r\n            let startTime = element.split('\\t')[0];\r\n\r\n            this.setState({ stockTesting: index + 1 + \". \" + name + \" getting details\" });\r\n            allStockWithTime.push({ name: name, startTime: startTime });\r\n            let found = listofstockfound.filter((item) => item.name === name);\r\n            if (!found[0]) {\r\n                listofstockfound.push({ name: name });\r\n            }\r\n        }\r\n        this.setState({ totaluniqueStocks: listofstockfound.length, allQniqueStockList: listofstockfound })\r\n\r\n        if (this.state.stockList.length > 0) {\r\n            for (let index = 0; index < allStockWithTime.length; index++) {\r\n                const element = allStockWithTime[index];\r\n                let filerdata = this.state.stockList.filter((item => item.name == element.name));\r\n                if (filerdata.length > 0) {\r\n                    let data = {\r\n                        symbol: filerdata[0].symbol,\r\n                        name: filerdata[0].name,\r\n                        startTime: element.startTime,\r\n                        token: filerdata[0].token,\r\n                    }\r\n                    updateList.push(data);\r\n                }\r\n            }\r\n            callback(updateList, listofstockfound, this.state.stockList);\r\n        }else{\r\n            AdminService.getAllListTokens(listofstockfound).then(searchRes => {\r\n                let searchResdata = searchRes.data;\r\n                if (searchResdata.length > 0) {\r\n                    for (let index = 0; index < allStockWithTime.length; index++) {\r\n                        const element = allStockWithTime[index];\r\n                        let filerdata = searchResdata.filter((item => item.name == element.name));\r\n                        if (filerdata.length > 0) {\r\n                            let data = {\r\n                                symbol: filerdata[0].symbol,\r\n                                name: filerdata[0].name,\r\n                                startTime: element.startTime,\r\n                                token: filerdata[0].token,\r\n                            }\r\n                            updateList.push(data);\r\n                        }\r\n                    }\r\n                }\r\n                callback(updateList, listofstockfound, searchResdata);\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    getDateFormate = (givendate, time) => {\r\n        let dateinfo = givendate.split(' ');\r\n        let sdate = dateinfo[0].split('-');\r\n        return moment(sdate[2] + '/' + sdate[1] + '/' + sdate[0] + ' ' + time);\r\n    }\r\n\r\n    convertDateFormat = (datetime) => {\r\n        let dateinfo = datetime.split(' ');\r\n        let date = dateinfo[0].split('-');\r\n        let input = date[2] + '/' + date[1] + '/' + date[0];\r\n        let time = '';\r\n        if (dateinfo && dateinfo[1]) {\r\n            time = moment(dateinfo[1], 'HH:mm').format('HH:mm');\r\n        }\r\n        // console.log(time)\r\n        return moment(input + ' ' + time);\r\n    }\r\n\r\n    getPerChangeOfStock = (histdata, stockInfo) => {\r\n\r\n        if (histdata.length > 0) {\r\n\r\n            var candleData = histdata;\r\n            let entryCandlePoint = this.state.entryCandlePoint; \r\n            let entryPrice = candleData[0][entryCandlePoint]\r\n            if(entryCandlePoint == 5){\r\n                entryPrice =  (candleData[0][2] + candleData[0][3]) / 2; \r\n            }\r\n\r\n            if(entryCandlePoint == 6){\r\n                candleData.forEach(element => {\r\n                    if(element[2] >  (candleData[0][2] + (candleData[0][2] / 100 / 10))){\r\n                        entryPrice = (candleData[0][2] + (candleData[0][2] / 100 / 10)); //candleData[0][2]; \r\n                        return;\r\n                    }\r\n                });\r\n            }\r\n            if(entryCandlePoint == 7){\r\n                candleData.forEach(element => {\r\n                    if(element[3] < (candleData[0][3] - (candleData[0][3] / 100 / 10))){\r\n                        entryPrice = (candleData[0][3] - (candleData[0][3] / 100 / 10)) //candleData[0][3]; \r\n                        return;\r\n                    }\r\n                });\r\n            }\r\n            \r\n            let stock = {\r\n                name: stockInfo.name,\r\n                symbol: stockInfo.symbol,\r\n                token: stockInfo.token,\r\n                entryPrice: entryPrice.toFixed(2),\r\n                foundAt: moment(candleData[0][0]).format('YYYY-MM-DD HH:mm')\r\n            }\r\n\r\n            let priceChangeList = [];  \r\n            for (let index2 = 1; index2 < candleData.length; index2++) {\r\n                let perChange = (candleData[index2][4] - stock.entryPrice) * 100 / stock.entryPrice;\r\n                let datetime = moment(candleData[index2][0]).format('h:mma')\r\n                if (this.state.timeFrame == 'ONE_DAY') {\r\n                    datetime = moment(candleData[index2][0]).format('DD/MM/YYYY h:mma')\r\n                }\r\n                if(perChange < this.state.maxDrowDown){\r\n                    this.setState({maxDrowDown : perChange.toFixed(2)}); \r\n                }\r\n                if(perChange > this.state.maxProfit){\r\n                    this.setState({maxProfit : perChange.toFixed(2)}); \r\n                }\r\n                priceChangeList.push({ perChange: perChange.toFixed(2), close: candleData[index2][4], datetime: datetime });\r\n            }\r\n\r\n            for (let index3 = 1; index3 < candleData.length; index3++) {\r\n                if(this.state.orderType == \"buy\") {\r\n                    let perChange = (candleData[index3][2] - stock.entryPrice) * 100 / stock.entryPrice;\r\n                    if(perChange > this.state.targetPer){\r\n                        this.setState({crossedTargetCount : this.state.crossedTargetCount+1 }); \r\n                        break; \r\n                    }\r\n                }\r\n                if(this.state.orderType == \"sell\"){\r\n                    let perChange = (candleData[index3][3] - stock.entryPrice) * 100 / stock.entryPrice;\r\n                    if(perChange < -this.state.targetPer){\r\n                        this.setState({crossedTargetCount : this.state.crossedTargetCount+1 }); \r\n                        break; \r\n                    }\r\n                }\r\n            }\r\n\r\n            stock.candleData = priceChangeList;\r\n            let isWinOnClosing = priceChangeList[priceChangeList.length-1].perChange > 0 ? true : false;\r\n            stock.isWinOnClosing = isWinOnClosing; \r\n            if(isWinOnClosing){\r\n                this.setState({ totalWinTrade: this.state.totalWinTrade+1 })\r\n            }\r\n            \r\n            if(stock.entryPrice > 0){\r\n                this.setState({ backTestResult: [...this.state.backTestResult, stock] }, () => {});\r\n            }\r\n        } else {\r\n            console.log(\" candle data emply\");\r\n            this.setState({ searchFailed: this.state.searchFailed + 1 })\r\n\r\n        }\r\n    }\r\n\r\n\r\n    backTestAnyPatternStockWise = () => {\r\n        this.setState({ backTestResult: [], overAllResult: [],stockWiseListOverall:[], backTestFlag: true, filename: '', searchFailed: 0, pertradePandL: 0, pertradePandLNet: 0 });\r\n        this.setState({ totalgross: 0, totalAvg: 0, totTrade: 0, totalNet: 0, totalExp: 0,totalWinTrade:0,   maxDrowDown:0, maxProfit:0, crossedTargetCount: 0 });\r\n     \r\n        let candle = JSON.parse(this.state.csvFormatInput);\r\n  //      console.log('candle', candle)\r\n       \r\n       // candle.reverse(); \r\n        if(this.state.csvFormatInput){\r\n\r\n            let lower=candle[0][3], higher=candle[0][2]; \r\n            let rangehighlow = 0, lowdate = candle[0][0], highdate = candle[0][0]\r\n            for (let index = 0; index < candle.length-1; index++) {\r\n                const element = candle[index];\r\n                let high = element[2]; \r\n                let low = element[3]; \r\n\r\n                if(rangehighlow <= 1){\r\n                    if(low < lower) {\r\n                        lower = low;\r\n                        lowdate = element[0];\r\n                    }         \r\n                    if(higher <  high) {\r\n                        higher = high\r\n                        highdate = element[0];\r\n                    } \r\n                    rangehighlow++;        \r\n                }\r\n\r\n                if(rangehighlow == 1){\r\n                    var nextCandles = candle.slice(index, index + 25);\r\n                    let buffer = (higher - lower) * 20 /100; \r\n                    lower =  lower - buffer; \r\n                    higher =  higher + buffer;\r\n                    this.findRange(nextCandles, lower,  higher); \r\n                    // console.log(\"lower\", lower,  \"lowdate\", new Date(lowdate).toLocaleString()  )\r\n                    // console.log(\"higher\", higher, \"highdate\", new Date(highdate).toLocaleString(),  \"\\n\")\r\n                    rangehighlow = 0; \r\n                    lower=candle[index+1][3];\r\n                    higher=candle[index+1][2]; \r\n                }\r\n\r\n            }\r\n\r\n        }else{\r\n            Notify.showError(\"Paste candle data json format\")\r\n        }\r\n      \r\n    }\r\n\r\n    findRange( nextCandles, lower, higher) { \r\n        let count = 0, range = higher - lower;\r\n        if(range >= 30 && range <= 60 ){\r\n\r\n\r\n            for (let index = 0; index < nextCandles.length; index++) {\r\n                const element = nextCandles[index];\r\n                if(element[2] <= higher && element[3] >= lower){\r\n                    //console.log(element);\r\n                    count++;  \r\n                }else{\r\n                    break; \r\n                }\r\n            }\r\n            if(count >= 3){\r\n\r\n                console.log( count , lower, higher, range, new Date(nextCandles[0][0]).toLocaleString() );\r\n\r\n            }\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    backTestAnyPattern = () => {\r\n        this.setState({ backTestResult: [], overAllResult: [],overallMonthWise:[], backTestFlag: false, filename: '', searchFailed: 0, pertradePandL: 0, pertradePandLNet: 0 });\r\n\r\n        this.getAlltokenOfList(async (newJsonList) => {\r\n            //  let newJsonList = this.state.newJsonList; \r\n            for (let index = 0; index < newJsonList.length; index++) {\r\n\r\n                if (this.state.stopScaningFlag) {\r\n                    this.setState({ stopScaningFlag: false })\r\n                    break;\r\n                }\r\n\r\n                const element = newJsonList[index];\r\n                //    console.log(element)\r\n\r\n                let dateinfo = element.startTime.split(' ');\r\n                let date = dateinfo[0].split('-');\r\n                let input = date[2] + '/' + date[1] + '/' + date[0];\r\n                let time = '9:15';\r\n                if (dateinfo && dateinfo[1]) {\r\n                    moment(dateinfo[1], 'HH:mm').format('HH:mm');\r\n                }\r\n                //   console.log(time)\r\n                var startDate = moment(input + ' ' + time);\r\n                var marketendtime = \"15:30\";\r\n                var endtime = moment(input + ' ' + marketendtime);\r\n                if (this.state.timeFrame == 'ONE_DAY') {\r\n\r\n                    endtime = moment(startDate, \"DD-MM-YYYY\").add(5, 'days');\r\n                    let nextdate = moment(endtime).format(\"YYYY-MM-DD\");\r\n                    endtime = moment(nextdate + ' ' + marketendtime);\r\n                }\r\n\r\n                var data = {\r\n                    \"exchange\": \"NSE\",\r\n                    \"symboltoken\": element.token,\r\n                    \"interval\": this.state.timeFrame, //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                    \"fromdate\": moment(startDate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                    \"todate\": moment(endtime).format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n                }\r\n\r\n                AdminService.getHistoryData(data).then(res => {\r\n                    let histdata = resolveResponse(res, 'noPop');\r\n                    if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                        var candleData = histdata.data;\r\n                        let stock = {\r\n                            symbol: element.symbol,\r\n                            token: element.token,\r\n                            entryPrice: candleData[0][4],\r\n                            foundAt: moment(candleData[0][0]).format('YYYY-MM-DD HH:mm')\r\n                        }\r\n\r\n                        let priceChangeList = [];\r\n                        for (let index2 = 1; index2 < candleData.length; index2++) {\r\n                            let perChange = (candleData[index2][4] - stock.entryPrice) * 100 / stock.entryPrice;\r\n                            let datetime = moment(candleData[index2][0]).format('h:mma')\r\n                            if (this.state.timeFrame == 'ONE_DAY') {\r\n                                datetime = moment(candleData[index2][0]).format('DD/MM/YYYY h:mma')\r\n                            }\r\n                            priceChangeList.push({ perChange: perChange.toFixed(2), close: candleData[index2][4], datetime: datetime });\r\n                        }\r\n                        stock.candleData = priceChangeList;\r\n                        this.setState({ backTestResult: [...this.state.backTestResult, stock] }, () => {\r\n                            this.updateOverall();\r\n                        });\r\n                    } else {\r\n                        console.log(\" candle data emply\");\r\n                        this.setState({ searchFailed: this.state.searchFailed + 1 })\r\n\r\n                    }\r\n                }).catch((error) => {\r\n                    console.log(element.symbol, error)\r\n                    this.setState({ searchFailed: this.state.searchFailed + 1 })\r\n\r\n                })\r\n                await new Promise(r => setTimeout(r, 350));\r\n                this.setState({ stockTesting: index + 1 + \". \" + element.symbol })\r\n            }\r\n            this.setState({ backTestFlag: true });\r\n        });\r\n\r\n        //    this.readCsv( );//callback end \r\n\r\n    }\r\n\r\n    updateOverall = () => {\r\n        // this.setState({ overAllResult : [] });\r\n\r\n        let timelist = [];\r\n        this.state.backTestResult.forEach(element => {\r\n            element.candleData.forEach((item) => {\r\n                let found = timelist.filter((time) => time === item.datetime);\r\n                if (!found[0]) {\r\n                    timelist.push(item.datetime);\r\n                }\r\n            });\r\n        });\r\n\r\n        let overallData = [];\r\n\r\n        timelist.forEach(timeelement => {\r\n            let sumofall = 0;\r\n            this.state.backTestResult.forEach(element => {\r\n                for (let index = 0; index < element.candleData.length; index++) {\r\n                    const item = element.candleData[index];\r\n                    if (timeelement === item.datetime) {\r\n                        sumofall += parseFloat(item.perChange)\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n\r\n            let expence = this.state.backTestResult.length * 0.06;\r\n            overallData.push({\r\n                datetime: timeelement,\r\n                sumofall: sumofall.toFixed(2),\r\n                expence: expence.toFixed(2),\r\n                netOverAll: (sumofall - expence).toFixed(2),\r\n                noOfTrade: this.state.backTestResult.length\r\n            })\r\n        });\r\n\r\n        // overallData.reverse()\r\n        overallData.sort((a, b) => moment(b.datetime, 'h:mma') - moment(a.datetime, 'h:mma'));\r\n\r\n        this.setState({ overAllResult: overallData }, () => {\r\n            //  console.log('overAllResult', this.state.overAllResult)\r\n            if(this.state.overAllResult.length > 0){\r\n                let pertradePandLgross = (this.state.overAllResult[0].sumofall / this.state.overAllResult[0].noOfTrade);\r\n                let pertradePandLNet = pertradePandLgross - 0.06;\r\n                this.setState({ \"pertradePandL\": pertradePandLgross.toFixed(2), pertradePandLNet: pertradePandLNet.toFixed(2) });    \r\n            }\r\n         \r\n        });\r\n\r\n    }\r\n\r\n\r\n    updateStockWiseOverall = () => {\r\n        // this.setState({ overAllResult : [] });\r\n        this.setState({ stockWiseListOverall: [] })\r\n\r\n        let overall = []; \r\n      //  console.log(\"this.state.allQniqueStockList\", this.state.allQniqueStockList, this.state.backTestResult)\r\n\r\n        this.state.allQniqueStockList.forEach(stockelement => {\r\n\r\n         //   console.log('stockelement', stockelement); \r\n            let sumofall = 0, totalSameTrade = 0;\r\n            this.state.backTestResult.forEach(element => {\r\n                if (stockelement.name == element.name) {\r\n                 //   console.log('result element', element); \r\n\r\n                    if (element.candleData.length > 0) {\r\n                        sumofall += parseFloat(element.candleData[element.candleData.length - 1].perChange)\r\n                        totalSameTrade += 1;\r\n                    }\r\n                }\r\n            });\r\n            let expence = totalSameTrade * 0.06;\r\n            let data = {\r\n                name: stockelement.name,\r\n                totalSameTrade: totalSameTrade,\r\n                sumofall: sumofall,\r\n                expence: expence,\r\n                netPnL: (sumofall - expence)\r\n            }\r\n\r\n            overall.push(data); \r\n            \r\n        });\r\n\r\n\r\n        this.setState({ stockWiseListOverall: overall}, () => {\r\n\r\n            let totalgross = 0, totalAvg = 0, totTrade = 0, totalNet = 0, totalExp = 0, winCount=0,lossCount=0;\r\n            this.state.stockWiseListOverall.forEach(item => {\r\n                totalgross += item.sumofall;\r\n                totTrade += item.totalSameTrade;\r\n                totalNet += item.netPnL;\r\n                totalExp += item.expence;\r\n                winCount += item.netPnL>0 ? 1 : 0;\r\n                lossCount += item.netPnL<0 ? 1 : 0;\r\n            })\r\n\r\n            totalAvg = (totalgross/totTrade).toFixed(2);\r\n\r\n            let data = {\r\n                name: \"Total (Gross Avg%): \"+totalAvg,\r\n                totalSameTrade: totTrade,\r\n                sumofall: totalgross ,\r\n                expence: totalExp,\r\n                netPnL: totalNet,\r\n                winCount:winCount,\r\n                lossCount:lossCount\r\n            }\r\n\r\n            this.state.stockWiseListOverall.push(data); \r\n\r\n\r\n            this.setState({stockWiseListOverall: this.state.stockWiseListOverall, lossCount:lossCount,winCount:winCount,  totalgross: totalgross.toFixed(2), totalAvg: totalAvg, totTrade: totTrade, totalNet: totalNet.toFixed(2), totalExp: totalExp.toFixed(2) });\r\n\r\n\r\n        })\r\n    }\r\n\r\n\r\n    \r\n    updateMonthWise = () => {\r\n        this.setState({ overallMonthWise: [] })\r\n        let months = [\r\n            {name: 'Jan'}, \r\n            {name: 'Feb'}, \r\n            {name: 'Mar'}, \r\n            {name: 'Apr'}, \r\n            {name: 'May'}, \r\n            {name: 'Jun'}, \r\n            {name: 'Jul'}, \r\n            {name: 'Aug'}, \r\n            {name: 'Sep'}, \r\n            {name: 'Nov'}, \r\n            {name: 'Dec'}, \r\n            \r\n        ]; \r\n        let overall = []; \r\n\r\n        let sumofall = 0, totalSameTrade = 0;\r\n       \r\n        months.forEach(month => {\r\n\r\n            //   console.log('stockelement', stockelement); \r\n               let sumofall = 0, totalSameTrade = 0;\r\n               this.state.backTestResult.forEach(element => {\r\n                   let tradeMonth = moment(element.foundAt).format('MMM'); \r\n                   if (month.name == tradeMonth) {\r\n                       if (element.candleData.length > 0) {\r\n                           sumofall += parseFloat(element.candleData[element.candleData.length - 1].perChange)\r\n                           totalSameTrade += 1;\r\n                       }\r\n                   }\r\n               });\r\n               let expence = totalSameTrade * 0.06;\r\n               let data = {\r\n                   name: month.name,\r\n                   totalSameTrade: totalSameTrade,\r\n                   sumofall: sumofall.toFixed(2),\r\n                   expence: expence.toFixed(2),\r\n                   netPnL: (sumofall - expence).toFixed(2)\r\n               }\r\n\r\n               overall.push(data); \r\n               \r\n           });\r\n\r\n        this.setState({ overallMonthWise: overall}, () => {            \r\n\r\n        })\r\n    }\r\n\r\n\r\n    calculateSMA = (data, count) => {\r\n\r\n        //  console.log(\"smarowdata\", data, count);\r\n\r\n        var avg = function (data) {\r\n            var sum = 0;\r\n            for (var i = 0; i < data.length; i++) {\r\n                sum += data[i].close;\r\n            }\r\n            return sum / data.length;\r\n        };\r\n        var result = [];\r\n        for (var i = count - 1, len = data.length; i < len; i++) {\r\n            var val = avg(data.slice(i - count + 1, i));\r\n            result.push({ time: data[i].time, value: val });\r\n        }\r\n        return result;\r\n    }\r\n\r\n    showStaticChart = (token, symbol, entryAt, exitAt) => {\r\n\r\n\r\n\r\n        console.log('token, symbol, entryAt, exitAt', token, symbol, entryAt, exitAt)\r\n\r\n        this.setState({ chartStaticData: '', lightChartSymbol: symbol }, function () {\r\n            console.log('reset done', token);\r\n        });\r\n\r\n        //     console.log(\"time in function \", this.state.timeFrame);\r\n\r\n        const format1 = \"YYYY-MM-DD HH:mm\";\r\n        //     // var time = moment.duration(\"10:50:00\");\r\n        //     // var startDate = moment(new Date()).subtract(time);\r\n        //     // var startdate = moment(this.state.startDate).subtract(time);\r\n        //     var beginningTime = moment('9:15am', 'h:mma');\r\n\r\n        //     let timeDuration = this.getTimeFrameValue(this.state.timeFrame);\r\n        //     var time = moment.duration(timeDuration);  //22:00:00\" for last day  2hours \r\n        //    // var startDate = moment(new Date(foundAt)).set()\r\n\r\n        var startDate = moment(entryAt).set(\"hour\", '09').set(\"minute\", '15');\r\n        var enddate = moment(exitAt).set(\"hour\", '15').set(\"minute\", '30');\r\n\r\n\r\n        var data = {\r\n            \"exchange\": \"NSE\",\r\n            \"symboltoken\": token,\r\n            \"interval\": this.state.timeFrame, //ONE_DAY FIVE_MINUTE \r\n            \"fromdate\": moment(startDate).format(format1),\r\n            \"todate\": moment(enddate).format(format1) //moment(this.state.endDate).format(format1) /\r\n        }\r\n\r\n\r\n        AdminService.getHistoryData(data).then(res => {\r\n            let historyData = resolveResponse(res, 'noPop');\r\n            //    console.log(data); \r\n            if (historyData && historyData.data) {\r\n\r\n                var data = historyData.data;\r\n\r\n                const cdata = data.map(d => {\r\n                    return { time: new Date(d[0]).getTime(), open: parseFloat(d[1]), high: parseFloat(d[2]), low: parseFloat(d[3]), close: parseFloat(d[4]) }\r\n                });\r\n\r\n                var candleChartData = [], vwapdata = [], closeingData = [], highData = [], lowData = [], openData = [], valumeData = [], bbdata = [], volumeSeriesData = [];\r\n                data.forEach((element, loopindex) => {\r\n                    candleChartData.push([element[0], element[1], element[2], element[3], element[4]]);\r\n                    vwapdata.push([element[5], (element[2] + element[3] + element[4]) / 3]);\r\n                    closeingData.push(element[4]);\r\n                    highData.push(element[2]);\r\n                    lowData.push(element[3]);\r\n                    openData.push(element[3]);\r\n                    valumeData.push(element[5]);\r\n                    bbdata.push((element[2] + element[3] + element[4]) / 3);\r\n                    volumeSeriesData.push({ time: new Date(element[0]).getTime(), value: element[5], color: 'rgba(211, 211, 211, 1)' })\r\n\r\n                });\r\n\r\n                var input = {\r\n                    period: 20,\r\n                    values: bbdata,\r\n                    stdDev: 2\r\n                }\r\n\r\n                var bb = BollingerBands.calculate(input);\r\n                console.log(token, \"Bolinger band\", input, bb);\r\n\r\n                var bb = BollingerBands.calculate(input);\r\n                console.log(token, \"Bolinger band\", input, bb);\r\n\r\n                var inputRSI = { values: closeingData, period: 14 };\r\n                var rsiValues = RSI.calculate(inputRSI);\r\n\r\n                console.log(token, \"Rsi\", inputRSI, rsiValues);\r\n                console.log(token, \"vwap\", vwapdata, vwap(vwapdata));\r\n\r\n\r\n                this.setState({ chartStaticData: cdata, bblastValue: bb[bb.length - 1], vwapvalue: vwap(vwapdata), rsiValues: rsiValues.slice(Math.max(valumeData.length - 19, 1)), valumeData: valumeData.slice(Math.max(valumeData.length - 5, 1)) }, function () {\r\n                    // candleSeries.setData(this.state.chartStaticData); \r\n                    this.state.candleSeries.setData(this.state.chartStaticData);\r\n\r\n                    this.state.volumeSeries.setData(volumeSeriesData);\r\n\r\n                    var smaData = this.calculateSMA(this.state.chartStaticData, 20);\r\n\r\n                    this.state.smaLineSeries.setData(smaData);\r\n\r\n\r\n                    this.state.chart.subscribeCrosshairMove((param) => {\r\n\r\n                        var getit = param.seriesPrices[Symbol.iterator]();\r\n\r\n                        var string = \"\";\r\n                        var change = \"\";\r\n\r\n                        for (var elem of getit) {\r\n\r\n                            if (typeof elem[1] == 'object') {\r\n                                string += \" Open: <b>\" + elem[1].open + \"</b>\";\r\n                                string += \" High: <b>\" + elem[1].high + \"</b>\";\r\n                                string += \" Low: <b>\" + elem[1].low + \"</b>\";\r\n                                string += \" Close: <b>\" + elem[1].close + \"</b>\";\r\n                                change = (elem[1].close - elem[1].open) * 100 / elem[1].open;\r\n                                string += \" Chng: <b>\" + change.toFixed(2) + '%</b>';\r\n                            } else {\r\n                                string += \" &nbsp; \" + elem[1].toFixed(2) + \" \";\r\n                            }\r\n                        }\r\n\r\n                        if (param.time)\r\n                            string += \" Time: <b>\" + moment(param.time).format('DD/MM/YYYY h:mma') + \"</b>\";\r\n                        else\r\n                            string += \" <b>Time: </b>\";\r\n\r\n\r\n                        const domElement = document.getElementById('showChartTitle');\r\n\r\n\r\n                        var str = \"<span style=color:green>\" + string + \"</span> \";\r\n                        if (change < 0)\r\n                            str = \"<span style=color:red>\" + string + \"</span> \";\r\n\r\n                        domElement.innerHTML = str;\r\n                    });\r\n\r\n\r\n                });\r\n\r\n\r\n                data && data.sort(function (a, b) {\r\n                    return new Date(b[0]) - new Date(a[0]);\r\n                });\r\n                if (data.length > 0) {\r\n                    localStorage.setItem('InstrumentHistroy', JSON.stringify(data));\r\n                    this.setState({ InstrumentHistroy: data });\r\n\r\n\r\n                    var upsideMoveCount = 0, downMoveCount = 0, totalSum = 0;\r\n                    data.forEach(element => {\r\n\r\n                        var per = (element[4] - element[1]) * 100 / element[1];\r\n                        if (per >= 0.3) {\r\n                            upsideMoveCount += 1;\r\n                        }\r\n                        if (per <= -0.3) {\r\n                            downMoveCount += 1;\r\n                        }\r\n\r\n                        totalSum += per;\r\n\r\n                    });\r\n\r\n\r\n                    this.setState({ downMoveCount: downMoveCount, upsideMoveCount: upsideMoveCount, totalPerchentageChange: totalSum, startingFrom: moment(startDate).format(format1) });\r\n\r\n\r\n                }\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n\r\n    speckIt = (text) => {\r\n        var msg = new SpeechSynthesisUtterance();\r\n        msg.text = text.toString();\r\n        window.speechSynthesis.speak(msg);\r\n    }\r\n\r\n\r\n\r\n    getPercentageColor = (percent) => {\r\n        percent = percent * 100;\r\n        var r = percent < 50 ? 255 : Math.floor(255 - (percent * 2 - 100) * 255 / 100);\r\n        var g = percent > 50 ? 255 : Math.floor((percent * 2) * 255 / 100);\r\n        return 'rgb(' + r + ',' + g + ',0)';\r\n    }\r\n\r\n\r\n\r\n\r\n    onFileChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.files[0] });\r\n    }\r\n\r\n    render() {\r\n        const dateParam = {\r\n            myCallback: this.myCallback,\r\n            startDate: '',\r\n            endDate: '',\r\n            firstLavel: \"Start Date and Time\",\r\n            secondLavel: \"End Date and Time\"\r\n        }\r\n\r\n        //    console.log(\"backTestResult\", this.state.backTestResult)\r\n        //    console.log(\"stockWiseListOverall\", this.state.stockWiseListOverall)\r\n\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <PostLoginNavBar />\r\n                <ChartDialog />\r\n                <Grid direction=\"row\" container spacing={1} style={{ padding: \"5px\" }} >\r\n\r\n\r\n\r\n                    <Grid item xs={12} sm={8}>\r\n\r\n\r\n                        <Paper style={{ padding: \"10px\" }}>\r\n                            {/* <Typography style={{ textAlign: \"center\", background: \"lightgray\" }}>Chartink Backtest</Typography> */}\r\n\r\n                            <Grid direction=\"row\" container spacing={2}>\r\n\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <TextField variant=\"outlined\" id=\"textarea\" multiline rows={10} fullwidth style={{ width: '90%', height: '50%' }} label=\"historic candle  paste\" value={this.state.csvFormatInput} name=\"csvFormatInput\" onChange={this.onChange} />\r\n\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} sm={2} >\r\n                                    <FormControl style={styles.selectStyle} style={{ marginTop: '10px' }} >\r\n                                        <Select value={this.state.timeFrame} name=\"timeFrame\" onChange={this.onInputChange}>\r\n                                            <MenuItem value={'ONE_MINUTE'}>{'1M'}</MenuItem>\r\n                                            <MenuItem value={'FIVE_MINUTE'}>{'5M'}</MenuItem>\r\n                                            <MenuItem value={'TEN_MINUTE'}>{'10M'}</MenuItem>\r\n                                            <MenuItem value={'FIFTEEN_MINUTE'}>{'15M'}</MenuItem>\r\n                                            <MenuItem value={'THIRTY_MINUTE'}>{'30M'}</MenuItem>\r\n                                            <MenuItem value={'ONE_HOUR'}>{'1H'}</MenuItem>\r\n                                            <MenuItem value={'ONE_DAY'}>{'1D'}</MenuItem>\r\n                                        </Select>\r\n\r\n                                        <Select title='Entry candle point , mid means high+low/2' value={this.state.entryCandlePoint} name=\"entryCandlePoint\" onChange={this.onInputChange}>\r\n                                            <MenuItem value={1}>{'Open'}</MenuItem>\r\n                                            <MenuItem value={2}>{'High'}</MenuItem>\r\n                                            <MenuItem value={3}>{'Low'}</MenuItem>\r\n                                            <MenuItem value={4}>{'Close'}</MenuItem>\r\n                                            <MenuItem value={5}>{'Mid'}</MenuItem>\r\n                                            <MenuItem value={6}>{'Above High'}</MenuItem>\r\n                                            <MenuItem value={7}>{'Below Low'}</MenuItem>\r\n\r\n                                        </Select>\r\n\r\n                                        <Select title='checking for buy or sell' value={this.state.orderType} name=\"orderType\" onChange={this.onInputChange}>\r\n                                            <MenuItem value={'buy'}>{'Buy'}</MenuItem>\r\n                                            <MenuItem value={'sell'}>{'Sell'}</MenuItem>\r\n                                         \r\n                                        </Select>\r\n                                        <input placeholder='9:20' fullwidth style={{ width: '90%', height: '50%' }} label=\"entryTimeAt\" value={this.state.entryTimeAt} name=\"entryTimeAt\" onChange={this.onChange} />\r\n                                        <input placeholder='target %: 0.5' type='number' step={0.1} fullwidth style={{ width: '90%', height: '50%' }} label=\"Target\" value={this.state.targetPer} name=\"targetPer\" onChange={this.onChange} />\r\n\r\n\r\n                                        <FormGroup>\r\n                                            <FormControlLabel\r\n                                                control={<Switch checked={this.state.isSameDayDuplcate} onChange={this.handleChange} aria-label=\"Speek ON/OFF\" />}\r\n                                                label={this.state.isSameDayDuplcate ? 'Same Day Duplcate: Yes' : 'Same Day Duplcate: No'}\r\n                                            />\r\n                                        </FormGroup>\r\n                                   \r\n\r\n                                         <input placeholder='filename' id=\"textarea\" fullwidth style={{ width: '90%', height: '50%' }} label=\"Filename\" value={this.state.filename} name=\"filename\" onChange={this.onChange} />\r\n\r\n                                         \r\n                                         Failed:{this.state.searchFailed} \r\n                                     <br /> \r\n                                    {this.state.totaluniqueStocks ? this.state.totaluniqueStocks + \" unique stocks found\" : \"\"}\r\n                                    <br />\r\n                                    {this.state.stockTesting}\r\n                                    </FormControl>\r\n\r\n                                </Grid>\r\n\r\n\r\n                                <Grid item xs={12} sm={4} style={{ marginTop: '5px' }}>\r\n                                    {/* {this.state.backTestFlag ? <Button variant=\"contained\" onClick={() => this.backTestAnyPattern()}>Search</Button> : <>  <Spinner />  &nbsp;&nbsp;   <Button variant=\"contained\" onClick={() => this.stopBacktesting()}>Stop Scaning &nbsp; </Button>   </>} */}\r\n                                    {this.state.backTestFlag ? <Button variant=\"contained\" onClick={() => this.backTestAnyPatternStockWise()}>Test </Button> : <>  <Spinner />  &nbsp; <Button variant=\"contained\" onClick={() => this.stopBacktesting()}>Stop</Button>  </>}\r\n                                   \r\n                                    <span title='Success Ratio'>Success Ratio: {(this.state.crossedTargetCount * 100/this.state.backTestResult.length).toFixed(2)}%</span> \r\n\r\n                                        <Table size=\"small\" aria-label=\"sticky table\" >\r\n                                            <TableHead style={{ width: \"\", whiteSpace: \"nowrap\" }} variant=\"head\">\r\n                                                <TableRow variant=\"head\" style={{ fontWeight: 'bold' }} >\r\n\r\n                                                    <TableCell className=\"TableHeadFormat\" >\r\n                                                    <Button size='small' variant='outlined' onClick={this.updateMonthWise}>Month</Button>                                                </TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >Trades\r\n                                                    </TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >Gross P/L\r\n                                                    </TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >Expence</TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" > Net P/L\r\n                                                    </TableCell>\r\n\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n                                                {this.state.overallMonthWise ? this.state.overallMonthWise.map((item, i) => (\r\n                                                    item.totalSameTrade > 0 ?  <TableRow key={i}>\r\n                                                    <TableCell>{item.name}</TableCell>\r\n                                                    <TableCell>{item.totalSameTrade}</TableCell>\r\n                                                    <TableCell>{item.sumofall > 0 ? <span style={{ color: 'green' }}> {item.sumofall}</span> : <span style={{ color: 'red' }}> {item.sumofall}</span>}% </TableCell>\r\n                                                    <TableCell>{item.expence}%</TableCell>\r\n                                                    <TableCell>{item.netPnL > 0 ? <span style={{ color: 'green' }}> {item.netPnL}</span> : <span style={{ color: 'red' }}> {item.netPnL}</span>}% </TableCell>\r\n\r\n                                                </TableRow>:\"\"\r\n                                                )) : ''}\r\n\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                   \r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} sm={12} >\r\n\r\n                                    <div style={{ overflow: \"auto\", maxHeight: \"200px\" }}>\r\n\r\n                                        <Table size=\"small\" aria-label=\"sticky table\" >\r\n                                            <TableHead style={{ width: \"\", whiteSpace: \"nowrap\" }} variant=\"head\">\r\n                                                <TableRow variant=\"head\" style={{ fontWeight: 'bold' }} >\r\n                                                <TableCell>Sr.&nbsp;</TableCell>\r\n\r\n                                                    <TableCell className=\"TableHeadFormat\" >Stock ({this.state.stockWiseListOverall.length}) <CsvDownload filename={'Overall_'+this.state.timeFrame+'_'+this.state.entryCandlePoint+'_'+this.state.orderType+'_'+this.state.filename+'.csv'} data={this.state.stockWiseListOverall} />                                                    </TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >T.T ({this.state.totTrade})  Avg:\r\n                                                    ({this.state.totalAvg > 0 ? <span style={{ color: 'green' }}> {this.state.totalAvg}</span> : <span style={{ color: 'red' }}> {this.state.totalAvg}</span>})%\r\n                                                    </TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >Gross P/L\r\n                                                        ({this.state.totalgross > 0 ? <span style={{ color: 'green' }}> {this.state.totalgross}</span> : <span style={{ color: 'red' }}> {this.state.totalgross}</span>})%\r\n                                                    </TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >Expence ({this.state.totalExp})%</TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" > Net P/L\r\n                                                        ({this.state.totalNet > 0 ? <span style={{ color: 'green' }}> {this.state.totalNet}</span> : <span style={{ color: 'red' }}> {this.state.totalNet}</span>})%\r\n\r\n                                                        &nbsp;  W:{this.state.winCount}  &nbsp; L:{this.state.lossCount}\r\n                                                    </TableCell>\r\n\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n                                                {this.state.stockWiseListOverall ? this.state.stockWiseListOverall.map((item, i) => (\r\n                                                    <TableRow key={i}>\r\n                                                        <TableCell>{i+1}</TableCell>\r\n\r\n                                                        <TableCell>{item.name}</TableCell>\r\n                                                        <TableCell>{item.totalSameTrade}</TableCell>\r\n                                                        <TableCell>{item.sumofall > 0 ? <span style={{ color: 'green' }}> {item.sumofall}</span> : <span style={{ color: 'red' }}> {item.sumofall}</span>}% </TableCell>\r\n                                                        <TableCell>{item.expence}%</TableCell>\r\n                                                        <TableCell>{item.netPnL > 0 ? <span style={{ color: 'green' }}> {item.netPnL}</span> : <span style={{ color: 'red' }}> {item.netPnL}</span>}% </TableCell>\r\n\r\n                                                    </TableRow>\r\n                                                )) : ''}\r\n\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                    </div>\r\n                                </Grid>\r\n\r\n\r\n                            </Grid>\r\n\r\n                            <Grid direction=\"row\" container spacing={2}>\r\n\r\n                                <Grid item xs={12} sm={12}>\r\n\r\n                                    <div style={{ overflow: \"auto\", maxHeight: \"550px\" }}>\r\n\r\n                                        <Table size=\"small\" aria-label=\"sticky table\" >\r\n\r\n                                            <TableHead style={{ width: \"\", whiteSpace: \"nowrap\" }} variant=\"head\">\r\n\r\n                                                <TableRow variant=\"head\" style={{ fontWeight: 'bold' }}>\r\n                                                    <TableCell className=\"TableHeadFormat\" >Sr.</TableCell>\r\n\r\n                                                    <TableCell className=\"TableHeadFormat\" >Datetime <CsvDownload filename={'Trade_'+this.state.timeFrame+'_'+this.state.entryCandlePoint+'_'+this.state.orderType+'_'+this.state.filename+'.csv'} data={this.state.backTestResult} /></TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >Symbol &nbsp;</TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >EntryPrice &nbsp;</TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >ExitPrice &nbsp;</TableCell>\r\n                                                    <TableCell className=\"TableHeadFormat\" >T.T:({this.state.backTestResult.length}) &nbsp;W:{this.state.totalWinTrade} &nbsp;L:{this.state.backTestResult.length - this.state.totalWinTrade}&nbsp;<span title='Max Loss'>ML:{this.state.maxDrowDown}%</span>&nbsp;<span title='Max Profit'>MP:{this.state.maxProfit}%</span>&nbsp;<span title='target crossed'> C.T:{this.state.crossedTargetCount}</span>&nbsp;<span title='target not crossed'>N.C:{this.state.backTestResult.length - this.state.crossedTargetCount} </span> &nbsp;\r\n                                                     <span title='Success Ratio'>S.R.{(this.state.crossedTargetCount * 100/this.state.backTestResult.length).toFixed(2)}%</span> \r\n                                                     </TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n\r\n                                            <TableBody style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n                                                {this.state.backTestResult ? this.state.backTestResult.map((row, i) => (\r\n                                                    //    style={{display: row.orderActivated ? 'visible' : 'none'}} \"darkmagenta\" : \"#00cbcb\"\r\n                                                    <TableRow hover key={i}  style={{ background: !row.isWinOnClosing ? 'bisque' : \"\"}}>\r\n\r\n                                                        <TableCell>{i + 1}&nbsp;</TableCell>\r\n\r\n                                                        <TableCell >{row.foundAt} &nbsp;</TableCell>\r\n                                                        <TableCell><Button size='small' variant='contained' onClick={() => this.showStaticChart(row.token, row.symbol, row.foundAt, row.foundAt)}>{row.symbol} </Button> </TableCell>\r\n                                                        <TableCell><span style={{ fontStyle: 'italic' }}> {row.entryPrice}</span> &nbsp;</TableCell>\r\n                                                        <TableCell><span style={{ fontStyle: 'italic', color: row.candleData[row.candleData.length-1].close > row.entryPrice ? 'green' : \"red\"}}> {row.candleData[row.candleData.length-1].close} ({row.candleData[row.candleData.length-1].perChange}%) </span> &nbsp;</TableCell>\r\n\r\n                                                        <TableCell >\r\n                                                            {row.candleData.map((item, j) => (<>\r\n                                                                <span>{item.datetime}: </span>{item.close}({item.perChange > 0 ? <span style={{ color: 'green' }}> {item.perChange}%</span> : <span style={{ color: 'red' }}> {item.perChange}%</span>}) &nbsp;\r\n                                                            </>\r\n                                                            ))}\r\n\r\n                                                        </TableCell>\r\n                                                    </TableRow>\r\n                                                )) : ''}\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                    </div>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={4}>\r\n\r\n                        <Paper style={{ padding: \"10px\", position:  navigator.userAgentData.mobile ? \"\" :  \"fixed\"  }}>\r\n\r\n                            <Grid style={{ display: \"visible\" }} spacing={1} direction=\"row\" alignItems=\"center\" container>\r\n                                <Grid item xs={12} sm={12}  >\r\n                                    <Grid spacing={1} direction=\"row\" alignItems=\"center\" container>\r\n                                        <Grid item xs={12} sm={2} >\r\n                                            <FormControl style={styles.selectStyle} style={{ marginTop: '10px' }} >\r\n                                                <Select value={this.state.timeFrame} name=\"timeFrame\" onChange={this.onInputChange}>\r\n                                                    <MenuItem value={'ONE_MINUTE'}>{'1M'}</MenuItem>\r\n                                                    <MenuItem value={'FIVE_MINUTE'}>{'5M'}</MenuItem>\r\n                                                    <MenuItem value={'TEN_MINUTE'}>{'10M'}</MenuItem>\r\n                                                    <MenuItem value={'FIFTEEN_MINUTE'}>{'15M'}</MenuItem>\r\n                                                    <MenuItem value={'THIRTY_MINUTE'}>{'30M'}</MenuItem>\r\n                                                    <MenuItem value={'ONE_HOUR'}>{'1H'}</MenuItem>\r\n                                                    <MenuItem value={'ONE_DAY'}>{'1D'}</MenuItem>\r\n                                                </Select>\r\n                                            </FormControl>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={10} >\r\n                                            <Typography>Same Day Chart:  {this.state.lightChartSymbol}</Typography>\r\n\r\n                                        </Grid>\r\n\r\n                                    </Grid>\r\n                                    <div id=\"showChartTitle\"></div>\r\n                                    <div id=\"tvchart\"></div>\r\n                                </Grid>\r\n\r\n                                <Grid item xs={12} sm={12} style={{ overflowY: 'scroll', height: \"40vh\" }} >\r\n                                    <Typography> <Button size='small' variant='outlined' onClick={this.updateOverall}> Overall </Button>\r\n                                        {this.state.pertradePandL > 0 ? <span style={{ color: 'green' }}> {this.state.pertradePandL}</span> : <span style={{ color: 'red' }}> {this.state.pertradePandL}</span>}% Gross/Trade   |\r\n                                        {this.state.pertradePandLNet > 0 ? <span style={{ color: 'green' }}> {this.state.pertradePandLNet}</span> : <span style={{ color: 'red' }}> {this.state.pertradePandLNet}</span>}% Net/Trade  </Typography>\r\n\r\n                                    <Table size=\"small\" aria-label=\"sticky table\" >\r\n                                        <TableHead style={{ width: \"\", whiteSpace: \"nowrap\" }} variant=\"head\">\r\n                                            <TableRow variant=\"head\" style={{ fontWeight: 'bold' }} >\r\n\r\n                                                <TableCell className=\"TableHeadFormat\" >Timestamp</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" >No Of Trade</TableCell>\r\n\r\n\r\n                                                <TableCell className=\"TableHeadFormat\" >Gross Overall P/L%</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" >Expence%</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" >Net P/L%</TableCell>\r\n\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n                                            {this.state.overAllResult ? this.state.overAllResult.map((item, i) => (\r\n                                                <TableRow key={i}>\r\n\r\n\r\n                                                    <TableCell>{item.datetime}</TableCell>\r\n                                                    <TableCell>{item.noOfTrade}</TableCell>\r\n\r\n                                                    <TableCell>{item.sumofall > 0 ? <span style={{ color: 'green' }}> {item.sumofall}</span> : <span style={{ color: 'red' }}> {item.sumofall}</span>}% </TableCell>\r\n                                                    <TableCell>{item.expence}%</TableCell>\r\n                                                    <TableCell>{item.netOverAll > 0 ? <span style={{ color: 'green' }}> {item.netOverAll}</span> : <span style={{ color: 'red' }}> {item.netOverAll}</span>}% </TableCell>\r\n\r\n                                                </TableRow>\r\n                                            )) : ''}\r\n\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </Grid>\r\n\r\n\r\n                            </Grid>\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n\r\n                    <Grid item xs={12}>\r\n                        <div id=\"showChartTitle\"></div>\r\n                        <div id=\"tvchart\"></div>\r\n\r\n                     </Grid>\r\n\r\n\r\n\r\n                </Grid>\r\n\r\n            </React.Fragment>\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst styles = {\r\n    formContainer: {\r\n        display: 'flex',\r\n        flexFlow: 'row wrap'\r\n    },\r\n\r\n    textStyle: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n\r\n    },\r\n    imgStyle: {\r\n        display: 'flex'\r\n    },\r\n\r\n    selectStyle: {\r\n        minWidth: '100%',\r\n        marginBottom: '10px'\r\n    },\r\n    MuiTextField: {\r\n        overflowY: 'scroll',\r\n        fontSize: \"12px\",\r\n        maxHeight: \"50px\",\r\n\r\n    },\r\n    footerButton: {\r\n        position: 'fixed',\r\n        left: 0,\r\n        bottom: '20px',\r\n        width: '100%',\r\n        textAlign: 'right'\r\n    }\r\n\r\n};\r\n\r\nexport default Home;\r\n\r\n","import React from \"react\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport {resolveResponse} from \"../../utils/ResponseHandler\";\r\nimport Spinner from \"react-spinner-material\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport pako from 'pako';\r\nimport * as moment from 'moment';\r\nimport CommonOrderMethod from \"../../utils/CommonMethods\";\r\nimport { w3cwebsocket } from 'websocket';\r\n\r\nclass OrderBook extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            oderbookData:[],\r\n            listofzones:[],\r\n            selectedZone:[],\r\n            niftyLtp: {},\r\n            zone:'',\r\n            selectAllzone:'Select All',\r\n            triggerprice :0,\r\n            price:0,\r\n            lotsize:0,\r\n\r\n            firstTimeFlag: true,\r\n            selectedStrike:[],\r\n            symbolList: [],\r\n            trackSLPrice: localStorage.getItem('trackSLPrice') && JSON.parse(localStorage.getItem('trackSLPrice')) || [], \r\n\r\n        }\r\n    }\r\n\r\n    getTodayOrder = () => {\r\n\r\n      //  console.log('this.state.trackSLPrice', this.state.trackSLPrice);\r\n\r\n        let trackSLPrice = localStorage.getItem('trackSLPrice') && JSON.parse(localStorage.getItem('trackSLPrice')) || []; \r\n        AdminService.retrieveOrderBook()\r\n        .then((res) => {\r\n            let data = resolveResponse(res, \"noPop\");\r\n            if(data && data.data){\r\n                var orderlist = data.data; \r\n                  orderlist.sort(function(a,b){\r\n                    return new Date(b.updatetime) - new Date(a.updatetime);\r\n                  });\r\n\r\n                  \r\n                  orderlist.forEach(element => {\r\n                        let trakingRecord = trackSLPrice.filter((item)=> item.tradingsymbol == element.tradingsymbol); \r\n                        \r\n                        if(trakingRecord.length > 0 && element.tradingsymbol == trakingRecord[0].tradingsymbol){\r\n                           this.setState({ ['priceTarget_' + element.tradingsymbol] :  trakingRecord[0].priceTarget })  \r\n                           this.setState({ ['priceStopLoss_' + element.tradingsymbol] :  trakingRecord[0].priceStopLoss })  \r\n                        }\r\n                  });\r\n                  \r\n\r\n           //     orderlist.sort((a, b) => a.status - b.status); \r\n                this.setState({oderbookData: orderlist});\r\n                localStorage.setItem('oderbookData', JSON.stringify( orderlist ));\r\n\r\n          \r\n            }\r\n        });\r\n    }\r\n\r\n    decodeWebsocketData = (array) => {\r\n        var newarray = [];\r\n        try {\r\n            for (var i = 0; i < array.length; i++) {\r\n                newarray.push(String.fromCharCode(array[i]));\r\n            }\r\n        } catch (e) { }\r\n        //  console.log(newarray.join(''))\r\n        return newarray.join('');\r\n    }\r\n\r\n    updateSocketWatch = (wsClint) => {\r\n\r\n        var channel = this.state.symbolList.map(element => {\r\n            return 'nse_cm|' + element.token;\r\n        });\r\n        channel = channel.join('&');\r\n        var updateSocket = {\r\n            \"task\": \"mw\",\r\n            \"channel\": channel,\r\n            \"token\": this.state.feedToken,\r\n            \"user\": this.state.clientcode,\r\n            \"acctid\": this.state.clientcode\r\n        }\r\n      //  console.log(\"wsClint\", wsClint)\r\n\r\n        wsClint.send(JSON.stringify(updateSocket));\r\n    }\r\n\r\n    makeConnection = (wsClint) => {\r\n        var firstTime_req = '{\"task\":\"cn\",\"channel\":\"NONLM\",\"token\":\"' + this.state.feedToken + '\",\"user\": \"' + this.state.clientcode + '\",\"acctid\":\"' + this.state.clientcode + '\"}';\r\n        wsClint.send(firstTime_req);\r\n        this.updateSocketWatch(wsClint);\r\n    }\r\n\r\n    updateSocketDetails = (wsClint) => {\r\n        wsClint.onopen = (res) => {\r\n            this.makeConnection(wsClint);\r\n            this.updateSocketWatch(wsClint);\r\n        }\r\n        wsClint.onmessage = (message) => {\r\n            var decoded = window.atob(message.data);\r\n            var data = this.decodeWebsocketData(pako.inflate(decoded));\r\n            var liveData = JSON.parse(data);\r\n\r\n            var symbolListArray = this.state.symbolList;\r\n            this.state.symbolList && this.state.symbolList.forEach((element, index) => {\r\n                var foundLive = liveData.filter(row => row.tk == element.token);\r\n                if (foundLive.length > 0 && foundLive[0].ltp && foundLive[0].nc) {\r\n\r\n                    symbolListArray[index].ltp = foundLive[0].ltp;\r\n                    symbolListArray[index].pChange = foundLive[0].nc;\r\n                    symbolListArray[index].totalBuyQuantity = foundLive[0].tbq;\r\n                    symbolListArray[index].totalSellQuantity = foundLive[0].tsq;\r\n                    symbolListArray[index].totalTradedVolume = foundLive[0].v;\r\n                    symbolListArray[index].averagePrice = foundLive[0].ap;\r\n                    symbolListArray[index].lowPrice = foundLive[0].lo;\r\n                    symbolListArray[index].highPrice = foundLive[0].h;\r\n                    symbolListArray[index].openPrice = foundLive[0].op;\r\n                    symbolListArray[index].volume = foundLive[0].v;\r\n\r\n                    symbolListArray[index].bestbuyquantity = foundLive[0].bq;\r\n                    symbolListArray[index].bestbuyprice = foundLive[0].bp;\r\n                    symbolListArray[index].bestsellquantity = foundLive[0].bs;\r\n                    symbolListArray[index].bestsellprice = foundLive[0].sp;\r\n                    symbolListArray[index].ltt = moment(foundLive[0].ltt,'YYYY-MM-DD HH:mm:ss').toString();\r\n\r\n                    // symbolListArray[index].upperCircuitLimit = foundLive[0].ucl;\r\n                    // symbolListArray[index].lowerCircuitLimit = foundLive[0].lcl;\r\n\r\n                    symbolListArray[index].buytosellTime = (foundLive[0].tbq / foundLive[0].tsq).toFixed(2);\r\n                    symbolListArray[index].selltobuyTime = (foundLive[0].tsq / foundLive[0].tbq).toFixed(2);\r\n\r\n                }\r\n            });\r\n\r\n\r\n            let shortBy = this.state.sortedType;\r\n            symbolListArray && symbolListArray.sort(function (a, b) {\r\n                return b[shortBy] - a[shortBy];\r\n            });\r\n            this.setState({ symbolList: symbolListArray }, ()=> {\r\n              //  console.log('updated',  this.state.symbolList )\r\n            });\r\n        }\r\n\r\n        wsClint.onerror = (e) => {\r\n            console.log(\"socket error\", e);\r\n           // this.makeConnection(this.wsClint);\r\n        }\r\n\r\n        setInterval(() => {\r\n            console.log(\"this.wsClint\", this.wsClint)\r\n\r\n            if(this.wsClint.readyState != 1){\r\n                this.makeConnection(this.wsClint);\r\n            }\r\n\r\n            var _req = '{\"task\":\"hb\",\"channel\":\"\",\"token\":\"' + this.state.feedToken + '\",\"user\": \"' + this.state.clientcode + '\",\"acctid\":\"' + this.state.clientcode + '\"}';\r\n            console.log(\"Request :- \" + _req);\r\n            wsClint.send(_req);\r\n        }, 59000);\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n\r\n        setInterval(() => {\r\n            this.getNiftyLTP();\r\n        }, 1000);\r\n       \r\n\r\n       // let items = [{\"token\":\"42494\",\"symbol\":\"NIFTY05MAY2216400PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1640000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42493\",\"symbol\":\"NIFTY05MAY2216400CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1640000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42498\",\"symbol\":\"NIFTY05MAY2216450PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1645000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42495\",\"symbol\":\"NIFTY05MAY2216450CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1645000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42500\",\"symbol\":\"NIFTY05MAY2216500PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1650000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42499\",\"symbol\":\"NIFTY05MAY2216500CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1650000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42501\",\"symbol\":\"NIFTY05MAY2216550CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1655000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42502\",\"symbol\":\"NIFTY05MAY2216550PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1655000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42504\",\"symbol\":\"NIFTY05MAY2216600PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1660000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42503\",\"symbol\":\"NIFTY05MAY2216600CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1660000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42506\",\"symbol\":\"NIFTY05MAY2216650PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1665000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42505\",\"symbol\":\"NIFTY05MAY2216650CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1665000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42507\",\"symbol\":\"NIFTY05MAY2216700CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1670000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42508\",\"symbol\":\"NIFTY05MAY2216700PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1670000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42510\",\"symbol\":\"NIFTY05MAY2216750PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1675000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42509\",\"symbol\":\"NIFTY05MAY2216750CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1675000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42513\",\"symbol\":\"NIFTY05MAY2216800PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1680000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42511\",\"symbol\":\"NIFTY05MAY2216800CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1680000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42518\",\"symbol\":\"NIFTY05MAY2216850PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1685000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42515\",\"symbol\":\"NIFTY05MAY2216850CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1685000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42519\",\"symbol\":\"NIFTY05MAY2216900CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1690000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42521\",\"symbol\":\"NIFTY05MAY2216900PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1690000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42524\",\"symbol\":\"NIFTY05MAY2216950CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1695000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42527\",\"symbol\":\"NIFTY05MAY2216950PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1695000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42529\",\"symbol\":\"NIFTY05MAY2217000CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1700000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42530\",\"symbol\":\"NIFTY05MAY2217000PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1700000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42532\",\"symbol\":\"NIFTY05MAY2217050CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1705000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42533\",\"symbol\":\"NIFTY05MAY2217050PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1705000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42534\",\"symbol\":\"NIFTY05MAY2217100CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1710000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42535\",\"symbol\":\"NIFTY05MAY2217100PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1710000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42543\",\"symbol\":\"NIFTY05MAY2217150PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1715000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42536\",\"symbol\":\"NIFTY05MAY2217150CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1715000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42550\",\"symbol\":\"NIFTY05MAY2217200PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1720000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42544\",\"symbol\":\"NIFTY05MAY2217200CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1720000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42558\",\"symbol\":\"NIFTY05MAY2217250CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1725000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42559\",\"symbol\":\"NIFTY05MAY2217250PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1725000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42564\",\"symbol\":\"NIFTY05MAY2217300PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1730000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42563\",\"symbol\":\"NIFTY05MAY2217300CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1730000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42570\",\"symbol\":\"NIFTY05MAY2217350PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1735000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42567\",\"symbol\":\"NIFTY05MAY2217350CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1735000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42572\",\"symbol\":\"NIFTY05MAY2217400PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1740000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42571\",\"symbol\":\"NIFTY05MAY2217400CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1740000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42574\",\"symbol\":\"NIFTY05MAY2217450PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1745000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42573\",\"symbol\":\"NIFTY05MAY2217450CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1745000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42576\",\"symbol\":\"NIFTY05MAY2217500PE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1750000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"},{\"token\":\"42575\",\"symbol\":\"NIFTY05MAY2217500CE\",\"name\":\"NIFTY\",\"expiry\":\"05MAY2022\",\"strike\":\"1750000.000000\",\"lotsize\":\"50\",\"instrumenttype\":\"OPTIDX\",\"exch_seg\":\"NFO\",\"tick_size\":\"5.000000\"}]; \r\n\r\n        var tokens = JSON.parse(localStorage.getItem(\"userTokens\"));\r\n        var feedToken = tokens && tokens.feedToken;\r\n        var userProfile = JSON.parse(localStorage.getItem(\"userProfile\"));\r\n        var clientcode = userProfile && userProfile.clientcode;\r\n        this.setState({ feedToken: feedToken, clientcode: clientcode }, function () {\r\n            this.wsClint = new w3cwebsocket('wss://omnefeeds.angelbroking.com/NestHtml5Mobile/socket/stream');\r\n        //    this.updateSocketDetails(this.wsClint);\r\n        });\r\n\r\n\r\n        setInterval(() => {\r\n            this.updateLTP();\r\n        }, 1000);\r\n       \r\n        setInterval(() => {\r\n            this.selectOnlyLtp150To170();\r\n        }, 60000 * 2);\r\n      //  this.getTodayOrder();\r\n    }\r\n\r\n    getNiftyLTP = () => {\r\n        var data = {\r\n            \"exchange\": \"NSE\",\r\n            \"tradingsymbol\": \"NIFTY\",\r\n            \"symboltoken\": \"26000\",\r\n        }\r\n        AdminService.getLTP(data).then(res => {\r\n            let data = resolveResponse(res, 'noPop');\r\n            var LtpData = data && data.data;\r\n            //console.log(LtpData);\r\n            if (LtpData && LtpData.ltp) {\r\n                let per = (LtpData.ltp - LtpData.close) * 100 / LtpData.close;                 \r\n                this.setState({ niftyLtp: { ltp: LtpData.ltp, per : per.toFixed(2)  }}); \r\n\r\n                if(this.state.firstTimeFlag){ \r\n                    let lowerLevel = LtpData.ltp - LtpData.ltp * 3/100; \r\n                    let upperLevel = LtpData.ltp + LtpData.ltp * 3/100; \r\n\r\n                    let roundLower = lowerLevel - lowerLevel % 100;\r\n                    let roundUpper = upperLevel + upperLevel % 100;\r\n    \r\n                    for (let index = roundLower; index <= roundUpper; index+=50) {\r\n                      //  console.log(LtpData.ltp, lowerLevel, upperLevel, \"strike\",  index);\r\n                        this.setState({ selectedStrike: [...this.state.selectedStrike, index]});\r\n                    }\r\n                    this.getToketForStrike(); \r\n                    this.setState({firstTimeFlag : false}); \r\n                }\r\n\r\n              }\r\n            \r\n            let trackSLPrice = localStorage.getItem('trackSLPrice') ? JSON.parse( localStorage.getItem('trackSLPrice')) : []; \r\n        })\r\n    }\r\n\r\n\r\n    getToketForStrike =() => {\r\n     console.log(this.state.selectedStrike); \r\n     \r\n     AdminService.getAll145Tokens(this.state.selectedStrike).then(res => {\r\n        \r\n        this.setState({rowSymbolList : res.data },  () => {\r\n           // this.makeConnection(this.wsClint); \r\n            this.selectOnlyLtp150To170();\r\n        })\r\n     \r\n        //   this.setState({stockList:  res.data}); \r\n    })\r\n     \r\n    }\r\n\r\n    selectOnlyLtp150To170 = async()=> {\r\n        this.setState({  symbolList: []})\r\n        console.log(\"refresh\",this.state.symbolList )\r\n\r\n        if(this.state.rowSymbolList) {\r\n            for (let index = 0; index < this.state.rowSymbolList.length; index++) {\r\n                const element = this.state.rowSymbolList[index];\r\n                var data = { \"exchange\": element.exch_seg, \"tradingsymbol\": element.symbol, \"symboltoken\": element.token };\r\n                AdminService.getLTP(data).then(res => {\r\n                    let data = resolveResponse(res, 'noPop');\r\n                    var LtpData = data && data.data;\r\n                    //console.log(LtpData);\r\n                    if (LtpData && LtpData.ltp) {\r\n                        element.ltp = LtpData.ltp;\r\n                        element.perChange = ((LtpData.ltp - LtpData.close) * 100 / LtpData.close).toFixed(2);\r\n                    }\r\n    \r\n                    if (LtpData && LtpData.ltp > 150 && LtpData.ltp < 185) {\r\n                        this.setState({ symbolList: [...this.state.symbolList, element]});\r\n                    }\r\n                })\r\n        }\r\n            await new Promise(r => setTimeout(r, 100));\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    updateLTP = async () => {\r\n\r\n        for (let index = 0; index < this.state.symbolList.length; index++) {\r\n            const element = this.state.symbolList[index];\r\n            var data = { \"exchange\": element.exch_seg, \"tradingsymbol\": element.symbol, \"symboltoken\": element.token };\r\n            AdminService.getLTP(data).then(res => {\r\n                let data = resolveResponse(res, 'noPop');\r\n                var LtpData = data && data.data;\r\n                if (LtpData && LtpData.ltp) {\r\n                    element.ltp = LtpData.ltp;\r\n                    element.perChange = ((LtpData.ltp - LtpData.close) * 100 / LtpData.close).toFixed(2);\r\n\r\n\r\n                    this.updateBOPerformance(element, LtpData); \r\n                }\r\n            })\r\n\r\n            await new Promise(r => setTimeout(r, 100));\r\n        }\r\n\r\n    }\r\n\r\n    updateBOPerformance = (element, LtpData) => {\r\n        let Track145 = localStorage.getItem(\"Track145\") && JSON.parse(localStorage.getItem(\"Track145\")) || [];\r\n        let found = Track145.filter((item)=> item.symbol == element.symbol); \r\n        const objIndex = Track145.findIndex(obj => obj.symbol === element.symbol);\r\n\r\n        if(LtpData.ltp>185){\r\n         \r\n            if(!found.length){\r\n                element.entry = LtpData.ltp; \r\n                element.upsideLtp = LtpData.ltp;\r\n                element.downsideLtp = LtpData.ltp;\r\n                Track145.push(element); \r\n                localStorage.setItem(\"Track145\", JSON.stringify(Track145) ); \r\n            }else{ \r\n                if(LtpData.ltp  > found[0].upsideLtp){\r\n                    const updatedObj = { ...Track145[objIndex], upsideLtp: LtpData.ltp, returnPer: (LtpData.ltp - found[0].entry) * 100 / found[0].entry};\r\n                    const updatedList = [\r\n                        ...Track145.slice(0, objIndex),\r\n                        updatedObj,\r\n                        ...Track145.slice(objIndex + 1),\r\n                        ];\r\n                    console.log(\"updatedObj\",  updatedObj)\r\n                    localStorage.setItem(\"Track145\", JSON.stringify(updatedList) ); \r\n                }\r\n            }\r\n        }else if(found.length && LtpData.ltp <  found[0].downsideLtp){\r\n            const updatedObj = { ...Track145[objIndex], downsideLtp: LtpData.ltp};\r\n            const updatedList = [\r\n                ...Track145.slice(0, objIndex),\r\n                updatedObj,\r\n                ...Track145.slice(objIndex + 1),\r\n                ];\r\n            localStorage.setItem(\"Track145\", JSON.stringify(updatedList) ); \r\n        }\r\n\r\n    }\r\n   \r\n    cancelOrderOfSame = (orderId,variety) =>  {\r\n       \r\n        var data = {\r\n            \"variety\":variety,\r\n            \"orderid\":orderId,\r\n        }\r\n        AdminService.cancelOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n            if(data.status  && data.message === 'SUCCESS'){\r\n              //  console.log(\"cancel order\", data);   \r\n                this.getTodayOrder();\r\n               // this.setState({ orderid : data.data && data.data.orderid });\r\n            }\r\n        })\r\n       \r\n    }\r\n\r\n\r\n\r\n\r\n    modifyOrder = (row, trailingstoploss) => {\r\n\r\n\r\n        var data = {\r\n            \"variety\" :row.variety,  // \"STOPLOSS\",\r\n            \"orderid\": row.orderid,\r\n            \"ordertype\": this.state.price !== 0 ? \"STOPLOSS_LIMIT\" : \"STOPLOSS_MARKET\",\r\n            \"producttype\":  row.producttype, //\"DELIVERY\",\r\n            \"duration\": row.duration,\r\n            \"price\":  this.state.price,\r\n            \"triggerprice\": trailingstoploss || this.state.triggerprice,\r\n            \"quantity\":row.quantity,\r\n            \"tradingsymbol\": row.tradingsymbol,\r\n            \"symboltoken\": row.symboltoken,\r\n            \"exchange\": row.exchange\r\n            }\r\n        AdminService.modifyOrder(data).then(res => {\r\n            let data = resolveResponse(res);\r\n           // console.log(data);   \r\n            if(data.status  && data.message === 'SUCCESS'){\r\n               // localStorage.setItem('ifNotBought' ,  'false')\r\n               this.setState({triggerprice : 0}); \r\n               this.getTodayOrder();\r\n            }\r\n        })\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value.trim() });\r\n    }\r\n\r\n    onChangePriceStopLoss = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value.trim() });\r\n        let tradingsymbol = e.target.name.split('_')[1]; \r\n        let trackSLPrice = localStorage.getItem('trackSLPrice') && JSON.parse(localStorage.getItem('trackSLPrice')) || []; \r\n        let isfound = false; \r\n        for (let index = 0; index < trackSLPrice.length; index++) {\r\n            const element = trackSLPrice[index];\r\n            if(element.tradingsymbol === tradingsymbol){\r\n                element.priceStopLoss = e.target.value.trim(); \r\n                isfound = true; \r\n                break;\r\n            }\r\n        }\r\n        if(!isfound){\r\n              trackSLPrice.push({\r\n                priceStopLoss :  e.target.value.trim(), \r\n                tradingsymbol : tradingsymbol, \r\n                optiontype : tradingsymbol.substr(tradingsymbol.length-2,tradingsymbol.length-1),\r\n                name : tradingsymbol.includes('BANKNIFTY') ? 'BANKNIFTY' : \"NIFTY\"\r\n              }); \r\n        }\r\n        \r\n    //    console.log(\"slprice tradingsymbol\", trackSLPrice , tradingsymbol, isfound)\r\n        localStorage.setItem('trackSLPrice', JSON.stringify(trackSLPrice));\r\n    }\r\n\r\n    onChangePriceTarget = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value.trim() });\r\n        let tradingsymbol = e.target.name.split('_')[1]; \r\n        let trackSLPrice = localStorage.getItem('trackSLPrice') && JSON.parse(localStorage.getItem('trackSLPrice')) || []; \r\n        let isfound = false; \r\n        for (let index = 0; index < trackSLPrice.length; index++) {\r\n            const element = trackSLPrice[index];\r\n            if(element.tradingsymbol === tradingsymbol){\r\n                element.priceTarget = e.target.value.trim(); \r\n                isfound = true; \r\n                break;\r\n            }\r\n        }\r\n        if(!isfound){\r\n            trackSLPrice.push({\r\n              priceStopLoss :  e.target.value.trim(), \r\n              tradingsymbol : tradingsymbol, \r\n              optiontype : tradingsymbol.substr(tradingsymbol.length-2,tradingsymbol.length-1),\r\n              name : tradingsymbol.includes('BANKNIFTY') ? 'BANKNIFTY' : \"NIFTY\"\r\n \r\n            }); \r\n      }\r\n     //   console.log(\"trarget price update\", trackSLPrice)\r\n        localStorage.setItem('trackSLPrice', JSON.stringify(trackSLPrice));\r\n    }\r\n\r\n\r\n    render(){\r\n        console.log('this.state.symbolList', this.state.symbolList);\r\n\r\n        this.state.symbolList.sort(function (a, b) {\r\n            return b.ltp - a.ltp;\r\n        });\r\n\r\n        let Track145 = localStorage.getItem(\"Track145\") && JSON.parse(localStorage.getItem(\"Track145\")) || []; \r\n\r\n\r\n      return(\r\n        <React.Fragment>\r\n\r\n\r\n            {window.location.hash !== \"#/position\" ?    <PostLoginNavBar/> : \"\"}\r\n            \r\n                \r\n            <Grid direction=\"row\" alignItems=\"center\" container>\r\n            <Grid item xs={12} sm={12} >\r\n                     <Paper style={{padding:\"10px\"}} >\r\n\r\n                     <Grid spacing={1}  direction=\"row\" alignItems=\"center\" container>\r\n                                <Grid item xs={12} sm={6} >\r\n                                    <Typography color=\"primary\" gutterBottom>\r\n                                    145 Strategy: Legs ({this.state.symbolList.length})  <span style={{color: this.state.niftyLtp.per > 0 ? 'green' : 'red'}}> Nifty { this.state.niftyLtp.ltp }  ({ this.state.niftyLtp.per }%) </span>\r\n                                    </Typography> \r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6} >\r\n                                    <Button id=\"orderRefresh\"  type=\"number\" variant=\"contained\"  style={{float:\"right\"}} onClick={() => this.selectOnlyLtp150To170()}>Refresh</Button>    \r\n                                </Grid>\r\n                                \r\n                </Grid>\r\n\r\n                     <Table  size=\"small\"  style={{width:\"100%\"}}  aria-label=\"sticky table\" >\r\n               \r\n                        <TableHead style={{whiteSpace: \"nowrap\"}} variant=\"head\">\r\n                            <TableRow variant=\"head\" >\r\n                                <TableCell align=\"center\"><b>Name</b></TableCell>\r\n                                <TableCell align=\"center\"><b>Option</b></TableCell>\r\n                                <TableCell align=\"center\"><b>Expiry</b></TableCell>\r\n\r\n                                <TableCell align=\"center\"><b>Ltp</b></TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                        \r\n                            {this.state.symbolList.length ? this.state.symbolList.map((row, i)  => (\r\n                                <TableRow hover key={i} >\r\n                                    <TableCell style={{ width: '10%'}}  align=\"center\">{row.name}</TableCell>\r\n                                    <TableCell align=\"center\">{row.symbol}</TableCell>\r\n                                    <TableCell align=\"center\">{row.expiry}</TableCell>\r\n\r\n                                    <TableCell align=\"center\">\r\n                                        <span style={{color: row.perChange > 0 ? 'green' : 'red'}}> {row.ltp} ({ row.perChange }%) </span>\r\n                                    </TableCell>\r\n\r\n                                </TableRow>\r\n                            )):<Spinner/>}\r\n                        </TableBody>\r\n                    </Table>\r\n                    </Paper>    \r\n                </Grid>\r\n                 \r\n               </Grid>   \r\n\r\n\r\n                <Grid direction=\"row\" alignItems=\"center\" container>\r\n                   <Grid item xs={12} sm={12} >\r\n                     <Paper style={{padding:\"10px\"}} >\r\n                     <Typography color=\"primary\" gutterBottom> Performance</Typography> \r\n\r\n                     <Table  size=\"small\"  style={{width:\"100%\"}}  aria-label=\"sticky table\" >\r\n               \r\n                        <TableHead style={{whiteSpace: \"nowrap\"}} variant=\"head\">\r\n                            <TableRow variant=\"head\" >\r\n                                <TableCell align=\"center\"><b>Name</b></TableCell>\r\n                                <TableCell align=\"center\"><b>Option</b></TableCell>\r\n                                <TableCell align=\"center\"><b>Expiry</b></TableCell>\r\n                                <TableCell align=\"center\"><b>Ltp</b></TableCell>\r\n                                <TableCell align=\"center\"><b>Entry</b></TableCell>\r\n\r\n                                <TableCell align=\"center\"><b>Upside Price</b></TableCell>\r\n                                <TableCell align=\"center\"><b>Return%</b></TableCell>\r\n                                <TableCell align=\"center\"><b>Downside Price</b></TableCell>\r\n\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                        \r\n                            {Track145.length ? Track145.map((row, i)  => (\r\n                                <TableRow hover key={i} >\r\n                                    <TableCell style={{ width: '10%'}}  align=\"center\">{row.name}</TableCell>\r\n                                    <TableCell align=\"center\">{row.symbol}</TableCell>\r\n                                    <TableCell align=\"center\">{row.expiry}</TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <span style={{color: row.perChange > 0 ? 'green' : 'red'}}> {row.ltp} ({ row.perChange }%) </span>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">{row.entry}</TableCell>\r\n\r\n                                    <TableCell align=\"center\">{row.upsideLtp}</TableCell>\r\n                                    <TableCell align=\"center\">{row.returnPer}</TableCell>\r\n                                    <TableCell align=\"center\">{row.downsideLtp}</TableCell>\r\n\r\n                                </TableRow>\r\n                            )):<Typography> Nothing crossed as of now</Typography> }\r\n                        </TableBody>\r\n                    </Table>\r\n                    </Paper>    \r\n                </Grid>\r\n                 \r\n               </Grid>   \r\n           \r\n            </React.Fragment> \r\n        )\r\n    }\r\n  \r\n}\r\n\r\n// const styles = {\r\n//     tableStyle : {\r\n//         display: 'flex',\r\n//         justifyContent: 'center'\r\n//     },\r\n//     selectStyle:{\r\n//         // minWidth: '100%',\r\n//          marginBottom: '0px',\r\n//           minWidth: 300,\r\n//           maxWidth: 300,\r\n//     }\r\n// }\r\n\r\n// const mapStateToProps=(state)=>{\r\n//     return {packs:state.packs.packs.data};\r\n// }\r\n\r\n//export default connect(mapStateToProps,{setPackLoaded})(OrderBook);\r\nexport default OrderBook;","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AdminService from \"../service/AdminService\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PostLoginNavBar from \"../PostLoginNavbar\";\r\nimport { resolveResponse } from \"../../utils/ResponseHandler\";\r\nimport MaterialUIDateTimePicker from '../../utils/MaterialUIDateTimePicker';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport * as moment from 'moment';\r\nimport Notify from \"../../utils/Notify\";\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Spinner from \"react-spinner-material\";\r\nimport { createChart } from 'lightweight-charts';\r\nimport ChartDialog from './ChartDialog';\r\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\r\nimport vwap from 'vwap';\r\nimport { SMA, RSI, VWAP, BollingerBands } from 'technicalindicators';\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport CsvDownload from 'react-json-to-csv'\r\n\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n       \r\n            symbolList: localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')) || [],\r\n            totalWatchlist: localStorage.getItem('totalWatchlist') && JSON.parse(localStorage.getItem('totalWatchlist')) || [],\r\n            staticData: localStorage.getItem('staticData') && JSON.parse(localStorage.getItem('staticData')) || {},\r\n            selectedWatchlist: 'NIFTY 50', //'Securities in F&O',\r\n            stopScaningFlag: false,\r\n            backTestResultDateRange: [],\r\n            searchFailed: 0,\r\n       \r\n            backTestFlag: true,\r\n            backupHistoryStatus : []\r\n        };\r\n        this.myCallback = this.myCallback.bind(this);\r\n\r\n    }\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        var data = e.target.value;\r\n        AdminService.autoCompleteSearch(data).then(res => {\r\n            let data = res.data;\r\n            //  console.log(data);\r\n            localStorage.setItem('autoSearchTemp', JSON.stringify(data));\r\n            this.setState({ autoSearchList: data });\r\n        })\r\n\r\n    }\r\n\r\n    onInputChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value }, function () {\r\n            //    console.log(\"time\", this.state.timeFrame);\r\n            if (this.state.tradingsymbol) {\r\n                this.showStaticChart(this.state.symboltoken);\r\n            }\r\n        });\r\n    }\r\n\r\n    onChangePattern = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n\r\n        if (e.target.value == 'NR4_Daywide_daterage') {\r\n\r\n            var backTestResultDateRange = localStorage.getItem('backTestResultDateRange') && JSON.parse(localStorage.getItem('backTestResultDateRange'));\r\n\r\n            this.setState({ dateAndTypeKeys: Object.keys(backTestResultDateRange || {}), backTestResultDateRange: backTestResultDateRange });\r\n\r\n        }\r\n    }\r\n    onChangeWatchlist = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        var staticData = this.state.staticData;\r\n        this.setState({ symbolList: staticData[e.target.value] }, function () {\r\n            this.setState({ cursor: '' });\r\n        });\r\n\r\n        if (e.target.value == \"selectall\") {\r\n            this.setState({ symbolList: localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')) }, function () {\r\n                //      this.updateSocketWatch();\r\n                //  this.checkOpenEqualToLow();\r\n                this.setState({ cursor: '' });\r\n            });\r\n        }\r\n    }\r\n\r\n    myCallback = (date, fromDate) => {\r\n        if (fromDate === \"START_DATE\") {\r\n            this.setState({ startDate: date });\r\n        } else if (fromDate === \"END_DATE\") {\r\n            this.setState({ endDate: date });\r\n        }\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        window.document.title = \"Backtest\";\r\n        this.setState({ symbolList: this.state.staticData[this.state.selectedWatchlist] }, function(){            \r\n\r\n\r\n            this.getCandleHistoryAndStore(); \r\n\r\n            const friday = 5; // for friday\r\n            var currentTime = moment(new Date(), \"h:mma\");\r\n            const today = moment().isoWeekday();\r\n            var beginningTime = moment('9:15am', 'h:mma');\r\n            var endTime = moment('3:30pm', 'h:mma');\r\n    \r\n            if (today <= friday && currentTime.isBetween(beginningTime, endTime)) {\r\n                var tostartInteral =   setInterval(() => {\r\n                    var time = new Date(); \r\n                    if(time.getSeconds() === 0){\r\n                        setTimeout(() => {\r\n                            this.getCandleHistoryAndStore(); \r\n                        }, 10000);\r\n                        setInterval(() => {\r\n                            this.getCandleHistoryAndStore(); \r\n                         }, 60000 * 1 + 10000 );  \r\n                         clearInterval(tostartInteral); \r\n                    } \r\n                }, 1000);\r\n            }\r\n        });\r\n      \r\n    }\r\n\r\n    \r\n    getCandleHistoryAndStore = async () => {\r\n\r\n        console.log(\"last candle called time\", new Date().toLocaleTimeString());\r\n        var stop = new Date().toLocaleTimeString() > \"15:00:00\" ? clearInterval(this.state.candleHistoryInterval) : \"\";\r\n        var timediff = moment.duration(\"00:01:00\");\r\n        this.setState({ backupHistoryStatus: [] });\r\n\r\n        const format1 = \"YYYY-MM-DD HH:mm\";\r\n        var startdate = moment(new Date()).subtract(timediff);\r\n\r\n        let symbolList  = this.state.symbolList; \r\n\r\n    //    console.log(\"watchlist to backup\", symbolList)\r\n        for (let index = 0; index < symbolList.length; index++) {\r\n            const element = symbolList[index];\r\n            var data = {\r\n                \"exchange\": \"NSE\",\r\n                \"symboltoken\": element.token,\r\n                \"interval\": \"ONE_MINUTE\", //ONE_DAY FIVE_MINUTE    FIFTEEN_MINUTE\r\n                \"fromdate\": moment(startdate).format(format1),\r\n                \"todate\": moment(new Date()).format(format1) //moment(this.state.endDate).format(format1) /\r\n            }\r\n\r\n            let status = {\r\n                symbol: element.name,\r\n                startDate: moment(startdate).format(format1),\r\n                endDate:  moment(new Date()).format(format1) ,\r\n                downloadStatus: false,\r\n                noOfRows : 0, \r\n                backStatus : false,\r\n                hugeVol: false\r\n            }\r\n\r\n\r\n            AdminService.getHistoryData(data).then(res => {\r\n                let histdata = resolveResponse(res, 'noPop');\r\n                //console.log(\"candle history\", histdata); \r\n                if (histdata && histdata.data && histdata.data.length) {\r\n\r\n                    let requestInfo = {\r\n                        symbol: element.symbol,\r\n                        token: element.token,\r\n                        candleData: histdata.data,\r\n                        analysis: true\r\n                    }\r\n                    status.downloadStatus = true; \r\n                    AdminService.backupHistoryData(requestInfo).then(res => {\r\n                        status.backStatus = true ;\r\n                      //  console.log(\"test\", res.data);\r\n                        status.noOfRows =  res.data && res.data.result; \r\n                        status.hugeVol =  res.data && res.data.hugeVol\r\n\r\n                        if(res.data && res.data.hugeVol){\r\n                            console.log( ' huge Volume in '+ element.symbol)\r\n                                var msg = new SpeechSynthesisUtterance();\r\n                                msg.text = ' huge Volume in '+ element.symbol;\r\n                                window.speechSynthesis.speak(msg);\r\n                        }\r\n\r\n                    })\r\n\r\n                } else {\r\n                    //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                    console.log(\" candle data emply\");\r\n                }\r\n            })\r\n            await new Promise(r => setTimeout(r, 310));\r\n            this.setState({backupHistoryStatus: [...this.state.backupHistoryStatus, status]  }); \r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    stopBacktesting = () => {\r\n        this.setState({ stopScaningFlag: true });\r\n    }\r\n\r\n    storyHistoryData = async () => {\r\n\r\n        let filename = this.state.patternType + \" \" + this.state.selectedWatchlist + \" \" + moment(this.state.startDate).format(\"YYYY-MM-DD\") + \" \" + moment(this.state.endDate).format(\"YYYY-MM-DD\") + \".csv\";\r\n        this.setState({ backupHistoryStatus: [], backTestFlag: false, filename: filename, stopScaningFlag: false });\r\n\r\n      //  console.log('filename', filename);\r\n        \r\n        var watchList = this.state.symbolList; //localStorage.getItem('watchList') && JSON.parse(localStorage.getItem('watchList')); \r\n        var runningTest = 1;\r\n\r\n        var date1 = moment(this.state.startDate);\r\n        var date2 = moment(this.state.endDate);\r\n        let nod = date2.diff(date1, 'days'); \r\n        let looptime = Math.ceil(nod/30); \r\n        console.log(\"nod\", looptime); \r\n\r\n        //  currentDate = moment(this.state.startDate).set('9:15am', 'h:mma'); \r\n        // var endDate =  moment(currentDate).add(29, 'days');\r\n//        endDate = moment(endDate).set('3:30pm', 'h:mma') ; \r\n\r\n        let loopStartDate =  moment(this.state.startDate).set('9:15am', 'h:mma'); \r\n\r\n        for (let outterIndex = 0; outterIndex < looptime; outterIndex++) {\r\n\r\n            let loopEndDate = moment(loopStartDate).add(29, 'days');\r\n            console.log(\"nod\", looptime); \r\n\r\n            \r\n            for (let index = 0; index < watchList.length; index++) {\r\n                const element = watchList[index];\r\n    \r\n                if (this.state.stopScaningFlag) {\r\n                    break;\r\n                }              \r\n    \r\n                var data = {\r\n                    \"exchange\": \"NSE\",\r\n                    \"symboltoken\": element.token,\r\n                    \"interval\": \"ONE_MINUTE\", //ONE_DAY FIVE_MINUTE FIFTEEN_MINUTE THIRTY_MINUTE\r\n                    \"fromdate\":moment(loopStartDate).format(\"YYYY-MM-DD HH:mm\"), //moment(\"2021-07-20 09:15\").format(\"YYYY-MM-DD HH:mm\") , \r\n                    \"todate\": loopEndDate.format(\"YYYY-MM-DD HH:mm\") // moment(\"2020-06-30 14:00\").format(\"YYYY-MM-DD HH:mm\") \r\n                }\r\n    \r\n                let status = {\r\n                    symbol: element.name,\r\n                    startDate: moment(loopStartDate).format(\"DD-MM-YYYY\"),\r\n                    endDate:  moment(loopEndDate).format(\"DD-MM-YYYY\"),\r\n                    downloadStatus: false,\r\n                    noOfRows : 0, \r\n                    backStatus : false\r\n                }\r\n    \r\n    \r\n                AdminService.getHistoryData(data).then(res => {\r\n                    let histdata = resolveResponse(res, 'noPop');\r\n                    //console.log(\"candle history\", histdata); \r\n                    if (histdata && histdata.data && histdata.data.length) {\r\n    \r\n                        histdata.data.pop(); \r\n    \r\n                        let requestInfo = {\r\n                            symbol: element.symbol,\r\n                            token: element.token,\r\n                            candleData: histdata.data\r\n                        }\r\n                        status.downloadStatus = true; \r\n                      \r\n                        AdminService.backupHistoryData(requestInfo).then(res => {\r\n                            status.backStatus = true ;\r\n    \r\n                            console.log(\"test\", res.data);\r\n                            status.noOfRows =  res.data && res.data.result; \r\n    \r\n                        })\r\n    \r\n                    } else {\r\n                        //localStorage.setItem('NseStock_' + symbol, \"\");\r\n                        console.log(\" candle data emply\");\r\n                    }\r\n                })\r\n                await new Promise(r => setTimeout(r, 400));\r\n                this.setState({ stockTesting: index + 1 + \". \" + element.symbol, runningTest: runningTest }); \r\n           \r\n                this.setState({backupHistoryStatus: [...this.state.backupHistoryStatus, status]  }); \r\n    \r\n                this.setState({done: true  })\r\n    \r\n                console.log(\"status\", status)\r\n\r\n                          \r\n                \r\n            }\r\n\r\n            loopStartDate = loopEndDate; \r\n            await new Promise(r => setTimeout(r, 400 * watchList.length));\r\n        \r\n            \r\n        }\r\n\r\n      \r\n\r\n        this.setState({ backTestFlag: true });\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const dateParam = {\r\n            myCallback: this.myCallback,\r\n            startDate: '',\r\n            endDate: '',\r\n            firstLavel: \"Start Date and Time\",\r\n            secondLavel: \"End Date and Time\"\r\n        }\r\n\r\n        var sumPerChange = 0, sumBrokeragePer = 0, netSumPerChange = 0, sumPerChangeHighLow = 0, sumPnlValue = 0, sumPnlValueOnHighLow = 0, totalInvestedValue = 0, totalLongTrade = 0, totalShortTrade = 0;\r\n        var tradetotal = 0, totalWin = 0, totalLoss = 0, totalMarketEnd = 0, totalSlHit = 0;\r\n        return (\r\n            <React.Fragment>\r\n                <PostLoginNavBar />\r\n                <ChartDialog />\r\n                <Grid direction=\"row\" container spacing={1} style={{ padding: \"5px\" }} >\r\n\r\n\r\n\r\n                    <Grid item xs={12} sm={12}>\r\n\r\n\r\n                        <Paper style={{ padding: \"10px\" }}>\r\n                            <Typography style={{ textAlign: \"center\", background: \"lightgray\" }}>History Backup</Typography>\r\n\r\n\r\n\r\n                            <Grid direction=\"row\" container spacing={2}>\r\n\r\n\r\n                                {/* <Grid item xs={12} sm={2}>\r\n                                    <FormControl style={styles.selectStyle}>\r\n                                        <InputLabel htmlFor=\"Nationality\">Pattern Type</InputLabel>\r\n                                        <Select value={this.state.patternType} name=\"patternType\" onChange={this.onChangePattern}>\r\n                                            <MenuItem value={\"TweezerTop\"}>Tweezer Top</MenuItem>\r\n                                            <MenuItem value={\"TweezerBottom\"}>Tweezer Bottom</MenuItem>\r\n                                            <MenuItem value={\"NR4\"}>NR4 @ 3:30pm </MenuItem>\r\n                                            <MenuItem value={\"NR4Trail\"}>Narrow Range 4 - Trail</MenuItem>\r\n\r\n                                            <MenuItem value={\"NR4ForNextDay\"}>NR4 For Next Day</MenuItem>\r\n\r\n                                            <MenuItem value={\"NR4_SameDay\"}>NR4 ByDate</MenuItem>\r\n                                            <MenuItem value={\"NR4_Daywide_daterage\"}>NR4 Daywise Range</MenuItem>\r\n                                            <MenuItem value={\"StrongCandle\"}>5min Strong Candle</MenuItem>\r\n\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid> */}\r\n\r\n                                <Grid item xs={12} sm={2} >\r\n                                    <FormControl style={styles.selectStyle} >\r\n                                        <InputLabel htmlFor=\"gender\">Select Watchlist</InputLabel>\r\n                                        <Select value={this.state.selectedWatchlist} name=\"selectedWatchlist\" onChange={this.onChangeWatchlist}>\r\n                                            <MenuItem value={\"selectall\"}>{\"Select All\"}</MenuItem>\r\n                                            {this.state.totalWatchlist && this.state.totalWatchlist.map(element => (\r\n                                                <MenuItem value={element}>{element}</MenuItem>\r\n                                            ))\r\n                                            }\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n\r\n\r\n                                <Grid item xs={12} sm={4}>\r\n                                    <MaterialUIDateTimePicker callbackFromParent={dateParam} />\r\n                                </Grid>\r\n\r\n\r\n\r\n                                <Grid item xs={12} sm={4} style={{ marginTop: '5px' }}>\r\n                                    {this.state.backTestFlag ? <Button variant=\"contained\" onClick={() => this.storyHistoryData()}>Backup</Button> : <> <Button> <Spinner /> &nbsp; <Button variant=\"contained\" onClick={() => this.stopBacktesting()}>Stop Scaning</Button> &nbsp;  {this.state.stockTesting} {this.state.runningTest}  </Button>   </>}\r\n                                    &nbsp; Failed: {this.state.searchFailed}\r\n\r\n                                </Grid>\r\n\r\n\r\n                            </Grid>\r\n\r\n\r\n                        </Paper>\r\n\r\n                        <Paper style={{ padding: \"10px\" }}>\r\n\r\n                        <Table size=\"small\" aria-label=\"sticky table\" >\r\n                                        <TableHead style={{ width: \"\", whiteSpace: \"nowrap\" }} variant=\"head\">\r\n                                            <TableRow variant=\"head\" style={{ fontWeight: 'bold' }} >\r\n                                            <TableCell className=\"TableHeadFormat\" >Sr. No.</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" >Symbol</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" >From date</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" >To date  </TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" >Download Status</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" >Backup Status</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" >No of Rows</TableCell>\r\n                                                <TableCell className=\"TableHeadFormat\" >Huge Volume(last 100min)</TableCell>\r\n\r\n                         \r\n\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody style={{ width: \"\", whiteSpace: \"nowrap\" }}>\r\n                                            {/* this.getPercentageColor((row[4] - row[1])*100/row[1] >= 0.3)  */}\r\n                                            {this.state.backupHistoryStatus && this.state.backupHistoryStatus ? this.state.backupHistoryStatus.map((row, i) => (\r\n                                                <TableRow key={i}  >\r\n                                                    <TableCell >{i+1}</TableCell>\r\n                                                    <TableCell >{row.symbol}</TableCell>\r\n                                                    <TableCell >{row.startDate}</TableCell>\r\n                                                    <TableCell >{row.endDate}</TableCell>\r\n                                                    <TableCell >{row.downloadStatus ? \"Yes\": \"No\"}</TableCell>\r\n                                                    <TableCell >{row.backStatus ? \"Yes\": \"No\"}</TableCell>\r\n                                                    <TableCell >{row.noOfRows}</TableCell>\r\n                                                    <TableCell >{row.hugeVol ? \"Yes\" : \"-\"}</TableCell>\r\n\r\n                                                 \r\n                                                </TableRow>\r\n                                            )) : ''}\r\n\r\n                                        </TableBody>\r\n                                    </Table>\r\n                        </Paper>\r\n\r\n                    </Grid>\r\n\r\n\r\n\r\n\r\n\r\n                </Grid>\r\n\r\n            </React.Fragment>\r\n        )\r\n\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nconst styles = {\r\n    formContainer: {\r\n        display: 'flex',\r\n        flexFlow: 'row wrap'\r\n    },\r\n\r\n    textStyle: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n\r\n    },\r\n    imgStyle: {\r\n        display: 'flex'\r\n    },\r\n\r\n    selectStyle: {\r\n        minWidth: '100%',\r\n        marginBottom: '10px'\r\n    },\r\n    MuiTextField: {\r\n        overflowY: 'scroll',\r\n        fontSize: \"12px\",\r\n        maxHeight: \"50px\",\r\n\r\n    },\r\n    footerButton: {\r\n        position: 'fixed',\r\n        left: 0,\r\n        bottom: '20px',\r\n        width: '100%',\r\n        textAlign: 'right'\r\n    }\r\n\r\n};\r\n\r\nexport default Home;\r\n\r\n","import { HashRouter as Router, Route, Switch} from 'react-router-dom'\r\nimport React from \"react\";\r\nimport LoginComponent from \"./login/LoginComponent\";\r\n\r\nimport Home from './MyTrade/Home';\r\n\r\nimport NiftyView from \"./MyTrade/NiftyView\";\r\nimport BankNiftyView from \"./MyTrade/BankNiftyView\";\r\n\r\nimport MySectorTop from \"./MyTrade/MySectorTop\";\r\n\r\nimport Chart from \"./MyTrade/Chart\";\r\nimport CandleChart from \"./MyTrade/CandleChart\";\r\n\r\n\r\nimport Funds from \"./MyTrade/Funds\";\r\nimport Orderbook from \"./MyTrade/Orderbook\";\r\nimport Tradebook from \"./MyTrade/Tradebook\";\r\n// import LiveFeed from \"./MyTrade/LiveFeed\";\r\nimport OrderStatusLive from \"./MyTrade/OrderStatusLive\";\r\nimport Position from \"./MyTrade/Position\";\r\nimport PositionNew from \"./MyTrade/PositionNew\";\r\n\r\nimport Test from \"./MyTrade/Test\";\r\n\r\n\r\nimport AddToWatchlist from \"./MyTrade/AddToWatchlist\";\r\nimport SectorHeatMap from \"./MyTrade/SectorHeatMap\";\r\nimport SectorHeatMap2 from \"./MyTrade/SectorHeatMap2\";\r\n\r\nimport FindFastMovement from \"./MyTrade/FindFastMovement\";\r\nimport FindFastMovement2 from \"./MyTrade/FindFastMovement2\";\r\nimport FindFastMovement3 from \"./MyTrade/FindFastMovement3\";\r\n\r\nimport OrderWatchlist from \"./MyTrade/OrderWatchlist\";\r\nimport DeliveryData from \"./MyTrade/DeliveryData\";\r\nimport SlowMotion from \"./MyTrade/SlowMotion\";\r\nimport IndexCharts from \"./MyTrade/IndexCharts\";\r\nimport MarketDepth from \"./MyTrade/MarketDepth\";\r\nimport MarketDepthMobile from \"./MyTrade/MarketDepthMobile\";\r\nimport Backtest from \"./MyTrade/Backtest\";\r\nimport ChartinkBacktest from \"./MyTrade/ChartinkBacktest\";\r\nimport CustomBacktest from \"./MyTrade/CustomBacktest\";\r\nimport Track145Strategy from \"./MyTrade/Track145Strategy\";\r\n\r\nimport StrongCharts from \"./MyTrade/StrongCharts\";\r\n\r\nimport BackupHistory from \"./MyTrade/BackupHistory\";\r\n\r\n\r\n\r\nconst AppRouter = () => {\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/\" exact component={LoginComponent}/>\r\n                    <Route path=\"/login\" component={LoginComponent}/>\r\n                    <Route path=\"/nifty-view\" component={NiftyView}/>\r\n                    <Route path=\"/bn-view\" component={BankNiftyView}/>\r\n                    <Route path=\"/sector\" component={MySectorTop}/>\r\n                    <Route path=\"/chart\" component={Chart}/>\r\n                    <Route path=\"/candle-chart\" component={CandleChart}/>\r\n\r\n                    <Route path=\"/home\" component={Home}/>\r\n                    <Route path=\"/funds\" component={Funds}/>\r\n                    <Route path=\"/order\" component={Orderbook}/>\r\n                    <Route path=\"/trade\" component={Tradebook}/>\r\n                    {/* <Route path=\"/livefeed\" component={LiveFeed}/> */}\r\n                    <Route path=\"/order-status-live\" component={OrderStatusLive}/>\r\n                    <Route path=\"/position\" component={Position}/>\r\n                    <Route path=\"/position-new\" component={PositionNew}/>\r\n\r\n                    <Route path=\"/addtowatchlist\" component={AddToWatchlist}/>\r\n                    <Route path=\"/sector-heat-map\" component={SectorHeatMap}/>\r\n                    <Route path=\"/sector-heat-map2\" component={SectorHeatMap2}/>\r\n\r\n\r\n                    \r\n                    <Route path=\"/find-fast-movement\" component={FindFastMovement}/>\r\n                    <Route path=\"/find-fast-movement2\" component={FindFastMovement2}/>\r\n                    <Route path=\"/find-fast-movement3\" component={FindFastMovement3}/>\r\n\r\n                    <Route path=\"/order-watchlist\" component={OrderWatchlist}/>\r\n                    <Route path=\"/delivery\" component={DeliveryData}/>\r\n                    <Route path=\"/slow-motion\" component={SlowMotion}/>\r\n\r\n                    <Route path=\"/index-charts\" component={IndexCharts}/>\r\n                    <Route path=\"/strong-charts\" component={StrongCharts}/>\r\n\r\n                    <Route path=\"/market-depth\" component={MarketDepth}/>\r\n                    <Route path=\"/market-depth-mobile\" component={MarketDepthMobile}/>\r\n\r\n                    <Route path=\"/backtest\" component={Backtest}/>\r\n                    <Route path=\"/chartink-backtest\" component={ChartinkBacktest}/>\r\n\r\n                    <Route path=\"/backup-history\" component={BackupHistory}/>\r\n\r\n                    <Route path=\"/custom-backtest\" component={CustomBacktest}/>\r\n                    <Route path=\"/track145\" component={Track145Strategy}/>\r\n\r\n                    <Route path=\"/test\" component={Test}/>\r\n                    \r\n           \r\n                    <Route path=\"*\" component={LoginComponent} />\r\n                    \r\n                </Switch>\r\n            </Router>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default AppRouter;","import React from 'react';\r\nimport './App.css';\r\nimport AppRouter from \"./components/RouterComponent\";\r\nimport {ToastContainer} from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <React.Fragment>\r\n        <AppRouter/>\r\n        <ToastContainer/>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./createStore\";\r\nimport App from \"./App\";\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.querySelector(\"#root\")\r\n);"],"sourceRoot":""}