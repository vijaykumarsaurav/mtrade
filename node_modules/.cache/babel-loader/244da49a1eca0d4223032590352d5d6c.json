{"ast":null,"code":"// Node.js core modules\nvar crypto = require('crypto');\n/**\n * The encryption algorithm (cipher) type to be used.\n * @type {String}\n * @const\n * @private\n */\n\n\nvar CIPHER_ALGORITHM = 'aes-256-ctr'; //\n// Primary API\n//\n\n/**\n * An API to allow for greatly simplified AES-256 encryption and decryption using a passphrase of\n * any length plus a random Initialization Vector.\n * @exports aes256\n * @public\n */\n\nvar aes256 = {\n  /**\n   * Encrypt a clear-text message using AES-256 plus a random Initialization Vector.\n   * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n   * @param {String} plaintext  The clear-text message to be encrypted.\n   * @returns {String} A custom-encrypted version of the input.\n   * @public\n   * @method\n   */\n  encrypt: function (key, plaintext) {\n    if (typeof key !== 'string' || !key) {\n      throw new TypeError('Provided \"key\" must be a non-empty string');\n    }\n\n    if (typeof plaintext !== 'string' || !plaintext) {\n      throw new TypeError('Provided \"plaintext\" must be a non-empty string');\n    }\n\n    var sha256 = crypto.createHash('sha256');\n    sha256.update(key); // Initialization Vector\n\n    var iv = crypto.randomBytes(16);\n    var cipher = crypto.createCipheriv(CIPHER_ALGORITHM, sha256.digest(), iv);\n    var ciphertext = cipher.update(new Buffer(plaintext));\n    var encrypted = Buffer.concat([iv, ciphertext, cipher.final()]).toString('base64');\n    return encrypted;\n  },\n\n  /**\n   * Decrypt an encrypted message back to clear-text using AES-256 plus a random Initialization Vector.\n   * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n   * @param {String} encrypted  The encrypted message to be decrypted.\n   * @returns {String} The original plain-text message.\n   * @public\n   * @method\n   */\n  decrypt: function (key, encrypted) {\n    if (typeof key !== 'string' || !key) {\n      throw new TypeError('Provided \"key\" must be a non-empty string');\n    }\n\n    if (typeof encrypted !== 'string' || !encrypted) {\n      throw new TypeError('Provided \"encrypted\" must be a non-empty string');\n    }\n\n    var sha256 = crypto.createHash('sha256');\n    sha256.update(key);\n    var input = new Buffer(encrypted, 'base64');\n\n    if (input.length < 17) {\n      throw new TypeError('Provided \"encrypted\" must decrypt to a non-empty string');\n    } // Initialization Vector\n\n\n    var iv = input.slice(0, 16);\n    var decipher = crypto.createDecipheriv(CIPHER_ALGORITHM, sha256.digest(), iv);\n    var ciphertext = input.slice(16);\n    var plaintext = decipher.update(ciphertext) + decipher.final();\n    return plaintext;\n  }\n};\n/**\n * Create a symmetric cipher with a given passphrase to then encrypt/decrypt data symmetrically.\n * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n * @public\n * @constructor\n */\n\nfunction AesCipher(key) {\n  if (typeof key !== 'string' || !key) {\n    throw new TypeError('Provided \"key\" must be a non-empty string');\n  }\n  /**\n   * A passphrase of any length to used to generate a symmetric session key.\n   * @member {String} key\n   * @readonly\n   */\n\n\n  Object.defineProperty(this, 'key', {\n    value: key\n  });\n}\n/**\n * Encrypt a clear-text message using AES-256 plus a random Initialization Vector.\n * @param {String} plaintext  The clear-text message to be encrypted.\n * @returns {String} A custom-encrypted version of the input.\n * @public\n * @method\n */\n\n\nAesCipher.prototype.encrypt = function (plaintext) {\n  return aes256.encrypt(this.key, plaintext);\n};\n/**\n * Decrypt an encrypted message back to clear-text using AES-256 plus a random Initialization Vector.\n * @param {String} encrypted  The encrypted message to be decrypted.\n * @returns {String} The original plain-text message.\n * @public\n * @method\n */\n\n\nAesCipher.prototype.decrypt = function (encrypted) {\n  return aes256.decrypt(this.key, encrypted);\n}; //\n// API Extension\n//\n\n/**\n * Create a symmetric cipher with a given passphrase to then encrypt/decrypt data symmetrically.\n * @param {String} key  A passphrase of any length to used to generate a symmetric session key.\n * @returns {AesCipher}\n * @public\n * @method\n */\n\n\naes256.createCipher = function (key) {\n  return new AesCipher(key);\n}; //\n// Export the API\n//\n\n\nmodule.exports = aes256;","map":null,"metadata":{},"sourceType":"script"}